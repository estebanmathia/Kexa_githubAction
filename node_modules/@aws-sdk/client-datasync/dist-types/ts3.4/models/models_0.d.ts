import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { DataSyncServiceException as __BaseException } from "./DataSyncServiceException";
export interface Credentials {
  Username: string | undefined;
  Password: string | undefined;
}
export interface DiscoveryServerConfiguration {
  ServerHostname: string | undefined;
  ServerPort?: number;
}
export declare const DiscoverySystemType: {
  readonly NetAppONTAP: "NetAppONTAP";
};
export type DiscoverySystemType =
  (typeof DiscoverySystemType)[keyof typeof DiscoverySystemType];
export interface TagListEntry {
  Key: string | undefined;
  Value?: string;
}
export interface AddStorageSystemRequest {
  ServerConfiguration: DiscoveryServerConfiguration | undefined;
  SystemType: DiscoverySystemType | undefined;
  AgentArns: string[] | undefined;
  CloudWatchLogGroupArn?: string;
  Tags?: TagListEntry[];
  Name?: string;
  ClientToken?: string;
  Credentials: Credentials | undefined;
}
export interface AddStorageSystemResponse {
  StorageSystemArn: string | undefined;
}
export declare class InternalException extends __BaseException {
  readonly name: "InternalException";
  readonly $fault: "server";
  errorCode?: string;
  constructor(opts: __ExceptionOptionType<InternalException, __BaseException>);
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  errorCode?: string;
  datasyncErrorCode?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export interface Platform {
  Version?: string;
}
export declare const AgentStatus: {
  readonly OFFLINE: "OFFLINE";
  readonly ONLINE: "ONLINE";
};
export type AgentStatus = (typeof AgentStatus)[keyof typeof AgentStatus];
export interface AgentListEntry {
  AgentArn?: string;
  Name?: string;
  Status?: AgentStatus;
  Platform?: Platform;
}
export declare const Atime: {
  readonly BEST_EFFORT: "BEST_EFFORT";
  readonly NONE: "NONE";
};
export type Atime = (typeof Atime)[keyof typeof Atime];
export declare const AzureAccessTier: {
  readonly ARCHIVE: "ARCHIVE";
  readonly COOL: "COOL";
  readonly HOT: "HOT";
};
export type AzureAccessTier =
  (typeof AzureAccessTier)[keyof typeof AzureAccessTier];
export declare const AzureBlobAuthenticationType: {
  readonly SAS: "SAS";
};
export type AzureBlobAuthenticationType =
  (typeof AzureBlobAuthenticationType)[keyof typeof AzureBlobAuthenticationType];
export interface AzureBlobSasConfiguration {
  Token: string | undefined;
}
export declare const AzureBlobType: {
  readonly BLOCK: "BLOCK";
};
export type AzureBlobType = (typeof AzureBlobType)[keyof typeof AzureBlobType];
export interface CancelTaskExecutionRequest {
  TaskExecutionArn: string | undefined;
}
export interface CancelTaskExecutionResponse {}
export interface Capacity {
  Used?: number;
  Provisioned?: number;
  LogicalUsed?: number;
  ClusterCloudStorageUsed?: number;
}
export interface CreateAgentRequest {
  ActivationKey: string | undefined;
  AgentName?: string;
  Tags?: TagListEntry[];
  VpcEndpointId?: string;
  SubnetArns?: string[];
  SecurityGroupArns?: string[];
}
export interface CreateAgentResponse {
  AgentArn?: string;
}
export interface CreateLocationAzureBlobRequest {
  ContainerUrl: string | undefined;
  AuthenticationType: AzureBlobAuthenticationType | undefined;
  SasConfiguration?: AzureBlobSasConfiguration;
  BlobType?: AzureBlobType;
  AccessTier?: AzureAccessTier;
  Subdirectory?: string;
  AgentArns: string[] | undefined;
  Tags?: TagListEntry[];
}
export interface CreateLocationAzureBlobResponse {
  LocationArn?: string;
}
export interface Ec2Config {
  SubnetArn: string | undefined;
  SecurityGroupArns: string[] | undefined;
}
export declare const EfsInTransitEncryption: {
  readonly NONE: "NONE";
  readonly TLS1_2: "TLS1_2";
};
export type EfsInTransitEncryption =
  (typeof EfsInTransitEncryption)[keyof typeof EfsInTransitEncryption];
export interface CreateLocationEfsRequest {
  Subdirectory?: string;
  EfsFilesystemArn: string | undefined;
  Ec2Config: Ec2Config | undefined;
  Tags?: TagListEntry[];
  AccessPointArn?: string;
  FileSystemAccessRoleArn?: string;
  InTransitEncryption?: EfsInTransitEncryption;
}
export interface CreateLocationEfsResponse {
  LocationArn?: string;
}
export interface CreateLocationFsxLustreRequest {
  FsxFilesystemArn: string | undefined;
  SecurityGroupArns: string[] | undefined;
  Subdirectory?: string;
  Tags?: TagListEntry[];
}
export interface CreateLocationFsxLustreResponse {
  LocationArn?: string;
}
export declare const NfsVersion: {
  readonly AUTOMATIC: "AUTOMATIC";
  readonly NFS3: "NFS3";
  readonly NFS4_0: "NFS4_0";
  readonly NFS4_1: "NFS4_1";
};
export type NfsVersion = (typeof NfsVersion)[keyof typeof NfsVersion];
export interface NfsMountOptions {
  Version?: NfsVersion;
}
export interface FsxProtocolNfs {
  MountOptions?: NfsMountOptions;
}
export declare const SmbVersion: {
  readonly AUTOMATIC: "AUTOMATIC";
  readonly SMB1: "SMB1";
  readonly SMB2: "SMB2";
  readonly SMB2_0: "SMB2_0";
  readonly SMB3: "SMB3";
};
export type SmbVersion = (typeof SmbVersion)[keyof typeof SmbVersion];
export interface SmbMountOptions {
  Version?: SmbVersion;
}
export interface FsxProtocolSmb {
  Domain?: string;
  MountOptions?: SmbMountOptions;
  Password: string | undefined;
  User: string | undefined;
}
export interface FsxProtocol {
  NFS?: FsxProtocolNfs;
  SMB?: FsxProtocolSmb;
}
export interface CreateLocationFsxOntapRequest {
  Protocol: FsxProtocol | undefined;
  SecurityGroupArns: string[] | undefined;
  StorageVirtualMachineArn: string | undefined;
  Subdirectory?: string;
  Tags?: TagListEntry[];
}
export interface CreateLocationFsxOntapResponse {
  LocationArn?: string;
}
export interface CreateLocationFsxOpenZfsRequest {
  FsxFilesystemArn: string | undefined;
  Protocol: FsxProtocol | undefined;
  SecurityGroupArns: string[] | undefined;
  Subdirectory?: string;
  Tags?: TagListEntry[];
}
export interface CreateLocationFsxOpenZfsResponse {
  LocationArn?: string;
}
export interface CreateLocationFsxWindowsRequest {
  Subdirectory?: string;
  FsxFilesystemArn: string | undefined;
  SecurityGroupArns: string[] | undefined;
  Tags?: TagListEntry[];
  User: string | undefined;
  Domain?: string;
  Password: string | undefined;
}
export interface CreateLocationFsxWindowsResponse {
  LocationArn?: string;
}
export declare const HdfsAuthenticationType: {
  readonly KERBEROS: "KERBEROS";
  readonly SIMPLE: "SIMPLE";
};
export type HdfsAuthenticationType =
  (typeof HdfsAuthenticationType)[keyof typeof HdfsAuthenticationType];
export interface HdfsNameNode {
  Hostname: string | undefined;
  Port: number | undefined;
}
export declare const HdfsDataTransferProtection: {
  readonly AUTHENTICATION: "AUTHENTICATION";
  readonly DISABLED: "DISABLED";
  readonly INTEGRITY: "INTEGRITY";
  readonly PRIVACY: "PRIVACY";
};
export type HdfsDataTransferProtection =
  (typeof HdfsDataTransferProtection)[keyof typeof HdfsDataTransferProtection];
export declare const HdfsRpcProtection: {
  readonly AUTHENTICATION: "AUTHENTICATION";
  readonly DISABLED: "DISABLED";
  readonly INTEGRITY: "INTEGRITY";
  readonly PRIVACY: "PRIVACY";
};
export type HdfsRpcProtection =
  (typeof HdfsRpcProtection)[keyof typeof HdfsRpcProtection];
export interface QopConfiguration {
  RpcProtection?: HdfsRpcProtection;
  DataTransferProtection?: HdfsDataTransferProtection;
}
export interface CreateLocationHdfsRequest {
  Subdirectory?: string;
  NameNodes: HdfsNameNode[] | undefined;
  BlockSize?: number;
  ReplicationFactor?: number;
  KmsKeyProviderUri?: string;
  QopConfiguration?: QopConfiguration;
  AuthenticationType: HdfsAuthenticationType | undefined;
  SimpleUser?: string;
  KerberosPrincipal?: string;
  KerberosKeytab?: Uint8Array;
  KerberosKrb5Conf?: Uint8Array;
  AgentArns: string[] | undefined;
  Tags?: TagListEntry[];
}
export interface CreateLocationHdfsResponse {
  LocationArn?: string;
}
export interface OnPremConfig {
  AgentArns: string[] | undefined;
}
export interface CreateLocationNfsRequest {
  Subdirectory: string | undefined;
  ServerHostname: string | undefined;
  OnPremConfig: OnPremConfig | undefined;
  MountOptions?: NfsMountOptions;
  Tags?: TagListEntry[];
}
export interface CreateLocationNfsResponse {
  LocationArn?: string;
}
export declare const ObjectStorageServerProtocol: {
  readonly HTTP: "HTTP";
  readonly HTTPS: "HTTPS";
};
export type ObjectStorageServerProtocol =
  (typeof ObjectStorageServerProtocol)[keyof typeof ObjectStorageServerProtocol];
export interface CreateLocationObjectStorageRequest {
  ServerHostname: string | undefined;
  ServerPort?: number;
  ServerProtocol?: ObjectStorageServerProtocol;
  Subdirectory?: string;
  BucketName: string | undefined;
  AccessKey?: string;
  SecretKey?: string;
  AgentArns: string[] | undefined;
  Tags?: TagListEntry[];
  ServerCertificate?: Uint8Array;
}
export interface CreateLocationObjectStorageResponse {
  LocationArn?: string;
}
export interface S3Config {
  BucketAccessRoleArn: string | undefined;
}
export declare const S3StorageClass: {
  readonly DEEP_ARCHIVE: "DEEP_ARCHIVE";
  readonly GLACIER: "GLACIER";
  readonly GLACIER_INSTANT_RETRIEVAL: "GLACIER_INSTANT_RETRIEVAL";
  readonly INTELLIGENT_TIERING: "INTELLIGENT_TIERING";
  readonly ONEZONE_IA: "ONEZONE_IA";
  readonly OUTPOSTS: "OUTPOSTS";
  readonly STANDARD: "STANDARD";
  readonly STANDARD_IA: "STANDARD_IA";
};
export type S3StorageClass =
  (typeof S3StorageClass)[keyof typeof S3StorageClass];
export interface CreateLocationS3Request {
  Subdirectory?: string;
  S3BucketArn: string | undefined;
  S3StorageClass?: S3StorageClass;
  S3Config: S3Config | undefined;
  AgentArns?: string[];
  Tags?: TagListEntry[];
}
export interface CreateLocationS3Response {
  LocationArn?: string;
}
export interface CreateLocationSmbRequest {
  Subdirectory: string | undefined;
  ServerHostname: string | undefined;
  User: string | undefined;
  Domain?: string;
  Password: string | undefined;
  AgentArns: string[] | undefined;
  MountOptions?: SmbMountOptions;
  Tags?: TagListEntry[];
}
export interface CreateLocationSmbResponse {
  LocationArn?: string;
}
export declare const FilterType: {
  readonly SIMPLE_PATTERN: "SIMPLE_PATTERN";
};
export type FilterType = (typeof FilterType)[keyof typeof FilterType];
export interface FilterRule {
  FilterType?: FilterType;
  Value?: string;
}
export declare const ManifestAction: {
  readonly TRANSFER: "TRANSFER";
};
export type ManifestAction =
  (typeof ManifestAction)[keyof typeof ManifestAction];
export declare const ManifestFormat: {
  readonly CSV: "CSV";
};
export type ManifestFormat =
  (typeof ManifestFormat)[keyof typeof ManifestFormat];
export interface S3ManifestConfig {
  ManifestObjectPath: string | undefined;
  BucketAccessRoleArn: string | undefined;
  S3BucketArn: string | undefined;
  ManifestObjectVersionId?: string;
}
export interface SourceManifestConfig {
  S3: S3ManifestConfig | undefined;
}
export interface ManifestConfig {
  Action?: ManifestAction;
  Format?: ManifestFormat;
  Source?: SourceManifestConfig;
}
export declare const Gid: {
  readonly BOTH: "BOTH";
  readonly INT_VALUE: "INT_VALUE";
  readonly NAME: "NAME";
  readonly NONE: "NONE";
};
export type Gid = (typeof Gid)[keyof typeof Gid];
export declare const LogLevel: {
  readonly BASIC: "BASIC";
  readonly OFF: "OFF";
  readonly TRANSFER: "TRANSFER";
};
export type LogLevel = (typeof LogLevel)[keyof typeof LogLevel];
export declare const Mtime: {
  readonly NONE: "NONE";
  readonly PRESERVE: "PRESERVE";
};
export type Mtime = (typeof Mtime)[keyof typeof Mtime];
export declare const ObjectTags: {
  readonly NONE: "NONE";
  readonly PRESERVE: "PRESERVE";
};
export type ObjectTags = (typeof ObjectTags)[keyof typeof ObjectTags];
export declare const OverwriteMode: {
  readonly ALWAYS: "ALWAYS";
  readonly NEVER: "NEVER";
};
export type OverwriteMode = (typeof OverwriteMode)[keyof typeof OverwriteMode];
export declare const PosixPermissions: {
  readonly NONE: "NONE";
  readonly PRESERVE: "PRESERVE";
};
export type PosixPermissions =
  (typeof PosixPermissions)[keyof typeof PosixPermissions];
export declare const PreserveDeletedFiles: {
  readonly PRESERVE: "PRESERVE";
  readonly REMOVE: "REMOVE";
};
export type PreserveDeletedFiles =
  (typeof PreserveDeletedFiles)[keyof typeof PreserveDeletedFiles];
export declare const PreserveDevices: {
  readonly NONE: "NONE";
  readonly PRESERVE: "PRESERVE";
};
export type PreserveDevices =
  (typeof PreserveDevices)[keyof typeof PreserveDevices];
export declare const SmbSecurityDescriptorCopyFlags: {
  readonly NONE: "NONE";
  readonly OWNER_DACL: "OWNER_DACL";
  readonly OWNER_DACL_SACL: "OWNER_DACL_SACL";
};
export type SmbSecurityDescriptorCopyFlags =
  (typeof SmbSecurityDescriptorCopyFlags)[keyof typeof SmbSecurityDescriptorCopyFlags];
export declare const TaskQueueing: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type TaskQueueing = (typeof TaskQueueing)[keyof typeof TaskQueueing];
export declare const TransferMode: {
  readonly ALL: "ALL";
  readonly CHANGED: "CHANGED";
};
export type TransferMode = (typeof TransferMode)[keyof typeof TransferMode];
export declare const Uid: {
  readonly BOTH: "BOTH";
  readonly INT_VALUE: "INT_VALUE";
  readonly NAME: "NAME";
  readonly NONE: "NONE";
};
export type Uid = (typeof Uid)[keyof typeof Uid];
export declare const VerifyMode: {
  readonly NONE: "NONE";
  readonly ONLY_FILES_TRANSFERRED: "ONLY_FILES_TRANSFERRED";
  readonly POINT_IN_TIME_CONSISTENT: "POINT_IN_TIME_CONSISTENT";
};
export type VerifyMode = (typeof VerifyMode)[keyof typeof VerifyMode];
export interface Options {
  VerifyMode?: VerifyMode;
  OverwriteMode?: OverwriteMode;
  Atime?: Atime;
  Mtime?: Mtime;
  Uid?: Uid;
  Gid?: Gid;
  PreserveDeletedFiles?: PreserveDeletedFiles;
  PreserveDevices?: PreserveDevices;
  PosixPermissions?: PosixPermissions;
  BytesPerSecond?: number;
  TaskQueueing?: TaskQueueing;
  LogLevel?: LogLevel;
  TransferMode?: TransferMode;
  SecurityDescriptorCopyFlags?: SmbSecurityDescriptorCopyFlags;
  ObjectTags?: ObjectTags;
}
export declare const ScheduleStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type ScheduleStatus =
  (typeof ScheduleStatus)[keyof typeof ScheduleStatus];
export interface TaskSchedule {
  ScheduleExpression: string | undefined;
  Status?: ScheduleStatus;
}
export interface ReportDestinationS3 {
  Subdirectory?: string;
  S3BucketArn: string | undefined;
  BucketAccessRoleArn: string | undefined;
}
export interface ReportDestination {
  S3?: ReportDestinationS3;
}
export declare const ObjectVersionIds: {
  readonly INCLUDE: "INCLUDE";
  readonly NONE: "NONE";
};
export type ObjectVersionIds =
  (typeof ObjectVersionIds)[keyof typeof ObjectVersionIds];
export declare const ReportOutputType: {
  readonly STANDARD: "STANDARD";
  readonly SUMMARY_ONLY: "SUMMARY_ONLY";
};
export type ReportOutputType =
  (typeof ReportOutputType)[keyof typeof ReportOutputType];
export declare const ReportLevel: {
  readonly ERRORS_ONLY: "ERRORS_ONLY";
  readonly SUCCESSES_AND_ERRORS: "SUCCESSES_AND_ERRORS";
};
export type ReportLevel = (typeof ReportLevel)[keyof typeof ReportLevel];
export interface ReportOverride {
  ReportLevel?: ReportLevel;
}
export interface ReportOverrides {
  Transferred?: ReportOverride;
  Verified?: ReportOverride;
  Deleted?: ReportOverride;
  Skipped?: ReportOverride;
}
export interface TaskReportConfig {
  Destination?: ReportDestination;
  OutputType?: ReportOutputType;
  ReportLevel?: ReportLevel;
  ObjectVersionIds?: ObjectVersionIds;
  Overrides?: ReportOverrides;
}
export interface CreateTaskRequest {
  SourceLocationArn: string | undefined;
  DestinationLocationArn: string | undefined;
  CloudWatchLogGroupArn?: string;
  Name?: string;
  Options?: Options;
  Excludes?: FilterRule[];
  Schedule?: TaskSchedule;
  Tags?: TagListEntry[];
  Includes?: FilterRule[];
  ManifestConfig?: ManifestConfig;
  TaskReportConfig?: TaskReportConfig;
}
export interface CreateTaskResponse {
  TaskArn?: string;
}
export interface DeleteAgentRequest {
  AgentArn: string | undefined;
}
export interface DeleteAgentResponse {}
export interface DeleteLocationRequest {
  LocationArn: string | undefined;
}
export interface DeleteLocationResponse {}
export interface DeleteTaskRequest {
  TaskArn: string | undefined;
}
export interface DeleteTaskResponse {}
export interface DescribeAgentRequest {
  AgentArn: string | undefined;
}
export declare const EndpointType: {
  readonly FIPS: "FIPS";
  readonly PRIVATE_LINK: "PRIVATE_LINK";
  readonly PUBLIC: "PUBLIC";
};
export type EndpointType = (typeof EndpointType)[keyof typeof EndpointType];
export interface PrivateLinkConfig {
  VpcEndpointId?: string;
  PrivateLinkEndpoint?: string;
  SubnetArns?: string[];
  SecurityGroupArns?: string[];
}
export interface DescribeAgentResponse {
  AgentArn?: string;
  Name?: string;
  Status?: AgentStatus;
  LastConnectionTime?: Date;
  CreationTime?: Date;
  EndpointType?: EndpointType;
  PrivateLinkConfig?: PrivateLinkConfig;
  Platform?: Platform;
}
export interface DescribeDiscoveryJobRequest {
  DiscoveryJobArn: string | undefined;
}
export declare const DiscoveryJobStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly COMPLETED_WITH_ISSUES: "COMPLETED_WITH_ISSUES";
  readonly FAILED: "FAILED";
  readonly RUNNING: "RUNNING";
  readonly STOPPED: "STOPPED";
  readonly TERMINATED: "TERMINATED";
  readonly WARNING: "WARNING";
};
export type DiscoveryJobStatus =
  (typeof DiscoveryJobStatus)[keyof typeof DiscoveryJobStatus];
export interface DescribeDiscoveryJobResponse {
  StorageSystemArn?: string;
  DiscoveryJobArn?: string;
  CollectionDurationMinutes?: number;
  Status?: DiscoveryJobStatus;
  JobStartTime?: Date;
  JobEndTime?: Date;
}
export interface DescribeLocationAzureBlobRequest {
  LocationArn: string | undefined;
}
export interface DescribeLocationAzureBlobResponse {
  LocationArn?: string;
  LocationUri?: string;
  AuthenticationType?: AzureBlobAuthenticationType;
  BlobType?: AzureBlobType;
  AccessTier?: AzureAccessTier;
  AgentArns?: string[];
  CreationTime?: Date;
}
export interface DescribeLocationEfsRequest {
  LocationArn: string | undefined;
}
export interface DescribeLocationEfsResponse {
  LocationArn?: string;
  LocationUri?: string;
  Ec2Config?: Ec2Config;
  CreationTime?: Date;
  AccessPointArn?: string;
  FileSystemAccessRoleArn?: string;
  InTransitEncryption?: EfsInTransitEncryption;
}
export interface DescribeLocationFsxLustreRequest {
  LocationArn: string | undefined;
}
export interface DescribeLocationFsxLustreResponse {
  LocationArn?: string;
  LocationUri?: string;
  SecurityGroupArns?: string[];
  CreationTime?: Date;
}
export interface DescribeLocationFsxOntapRequest {
  LocationArn: string | undefined;
}
export interface DescribeLocationFsxOntapResponse {
  CreationTime?: Date;
  LocationArn?: string;
  LocationUri?: string;
  Protocol?: FsxProtocol;
  SecurityGroupArns?: string[];
  StorageVirtualMachineArn?: string;
  FsxFilesystemArn?: string;
}
export interface DescribeLocationFsxOpenZfsRequest {
  LocationArn: string | undefined;
}
export interface DescribeLocationFsxOpenZfsResponse {
  LocationArn?: string;
  LocationUri?: string;
  SecurityGroupArns?: string[];
  Protocol?: FsxProtocol;
  CreationTime?: Date;
}
export interface DescribeLocationFsxWindowsRequest {
  LocationArn: string | undefined;
}
export interface DescribeLocationFsxWindowsResponse {
  LocationArn?: string;
  LocationUri?: string;
  SecurityGroupArns?: string[];
  CreationTime?: Date;
  User?: string;
  Domain?: string;
}
export interface DescribeLocationHdfsRequest {
  LocationArn: string | undefined;
}
export interface DescribeLocationHdfsResponse {
  LocationArn?: string;
  LocationUri?: string;
  NameNodes?: HdfsNameNode[];
  BlockSize?: number;
  ReplicationFactor?: number;
  KmsKeyProviderUri?: string;
  QopConfiguration?: QopConfiguration;
  AuthenticationType?: HdfsAuthenticationType;
  SimpleUser?: string;
  KerberosPrincipal?: string;
  AgentArns?: string[];
  CreationTime?: Date;
}
export interface DescribeLocationNfsRequest {
  LocationArn: string | undefined;
}
export interface DescribeLocationNfsResponse {
  LocationArn?: string;
  LocationUri?: string;
  OnPremConfig?: OnPremConfig;
  MountOptions?: NfsMountOptions;
  CreationTime?: Date;
}
export interface DescribeLocationObjectStorageRequest {
  LocationArn: string | undefined;
}
export interface DescribeLocationObjectStorageResponse {
  LocationArn?: string;
  LocationUri?: string;
  AccessKey?: string;
  ServerPort?: number;
  ServerProtocol?: ObjectStorageServerProtocol;
  AgentArns?: string[];
  CreationTime?: Date;
  ServerCertificate?: Uint8Array;
}
export interface DescribeLocationS3Request {
  LocationArn: string | undefined;
}
export interface DescribeLocationS3Response {
  LocationArn?: string;
  LocationUri?: string;
  S3StorageClass?: S3StorageClass;
  S3Config?: S3Config;
  AgentArns?: string[];
  CreationTime?: Date;
}
export interface DescribeLocationSmbRequest {
  LocationArn: string | undefined;
}
export interface DescribeLocationSmbResponse {
  LocationArn?: string;
  LocationUri?: string;
  AgentArns?: string[];
  User?: string;
  Domain?: string;
  MountOptions?: SmbMountOptions;
  CreationTime?: Date;
}
export interface DescribeStorageSystemRequest {
  StorageSystemArn: string | undefined;
}
export declare const StorageSystemConnectivityStatus: {
  readonly FAIL: "FAIL";
  readonly PASS: "PASS";
  readonly UNKNOWN: "UNKNOWN";
};
export type StorageSystemConnectivityStatus =
  (typeof StorageSystemConnectivityStatus)[keyof typeof StorageSystemConnectivityStatus];
export interface DescribeStorageSystemResponse {
  StorageSystemArn?: string;
  ServerConfiguration?: DiscoveryServerConfiguration;
  SystemType?: DiscoverySystemType;
  AgentArns?: string[];
  Name?: string;
  ErrorMessage?: string;
  ConnectivityStatus?: StorageSystemConnectivityStatus;
  CloudWatchLogGroupArn?: string;
  CreationTime?: Date;
  SecretsManagerArn?: string;
}
export declare const DiscoveryResourceType: {
  readonly CLUSTER: "CLUSTER";
  readonly SVM: "SVM";
  readonly VOLUME: "VOLUME";
};
export type DiscoveryResourceType =
  (typeof DiscoveryResourceType)[keyof typeof DiscoveryResourceType];
export interface DescribeStorageSystemResourceMetricsRequest {
  DiscoveryJobArn: string | undefined;
  ResourceType: DiscoveryResourceType | undefined;
  ResourceId: string | undefined;
  StartTime?: Date;
  EndTime?: Date;
  MaxResults?: number;
  NextToken?: string;
}
export interface IOPS {
  Read?: number;
  Write?: number;
  Other?: number;
  Total?: number;
}
export interface Latency {
  Read?: number;
  Write?: number;
  Other?: number;
}
export interface Throughput {
  Read?: number;
  Write?: number;
  Other?: number;
  Total?: number;
}
export interface P95Metrics {
  IOPS?: IOPS;
  Throughput?: Throughput;
  Latency?: Latency;
}
export interface ResourceMetrics {
  Timestamp?: Date;
  P95Metrics?: P95Metrics;
  Capacity?: Capacity;
  ResourceId?: string;
  ResourceType?: DiscoveryResourceType;
}
export interface DescribeStorageSystemResourceMetricsResponse {
  Metrics?: ResourceMetrics[];
  NextToken?: string;
}
export declare const DiscoveryResourceFilter: {
  readonly SVM: "SVM";
};
export type DiscoveryResourceFilter =
  (typeof DiscoveryResourceFilter)[keyof typeof DiscoveryResourceFilter];
export interface DescribeStorageSystemResourcesRequest {
  DiscoveryJobArn: string | undefined;
  ResourceType: DiscoveryResourceType | undefined;
  ResourceIds?: string[];
  Filter?: Partial<Record<DiscoveryResourceFilter, string[]>>;
  MaxResults?: number;
  NextToken?: string;
}
export interface MaxP95Performance {
  IopsRead?: number;
  IopsWrite?: number;
  IopsOther?: number;
  IopsTotal?: number;
  ThroughputRead?: number;
  ThroughputWrite?: number;
  ThroughputOther?: number;
  ThroughputTotal?: number;
  LatencyRead?: number;
  LatencyWrite?: number;
  LatencyOther?: number;
}
export interface Recommendation {
  StorageType?: string;
  StorageConfiguration?: Record<string, string>;
  EstimatedMonthlyStorageCost?: string;
}
export declare const RecommendationStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly NONE: "NONE";
};
export type RecommendationStatus =
  (typeof RecommendationStatus)[keyof typeof RecommendationStatus];
export interface NetAppONTAPCluster {
  CifsShareCount?: number;
  NfsExportedVolumes?: number;
  ResourceId?: string;
  ClusterName?: string;
  MaxP95Performance?: MaxP95Performance;
  ClusterBlockStorageSize?: number;
  ClusterBlockStorageUsed?: number;
  ClusterBlockStorageLogicalUsed?: number;
  Recommendations?: Recommendation[];
  RecommendationStatus?: RecommendationStatus;
  LunCount?: number;
  ClusterCloudStorageUsed?: number;
}
export interface NetAppONTAPSVM {
  ClusterUuid?: string;
  ResourceId?: string;
  SvmName?: string;
  CifsShareCount?: number;
  EnabledProtocols?: string[];
  TotalCapacityUsed?: number;
  TotalCapacityProvisioned?: number;
  TotalLogicalCapacityUsed?: number;
  MaxP95Performance?: MaxP95Performance;
  Recommendations?: Recommendation[];
  NfsExportedVolumes?: number;
  RecommendationStatus?: RecommendationStatus;
  TotalSnapshotCapacityUsed?: number;
  LunCount?: number;
}
export interface NetAppONTAPVolume {
  VolumeName?: string;
  ResourceId?: string;
  CifsShareCount?: number;
  SecurityStyle?: string;
  SvmUuid?: string;
  SvmName?: string;
  CapacityUsed?: number;
  CapacityProvisioned?: number;
  LogicalCapacityUsed?: number;
  NfsExported?: boolean;
  SnapshotCapacityUsed?: number;
  MaxP95Performance?: MaxP95Performance;
  Recommendations?: Recommendation[];
  RecommendationStatus?: RecommendationStatus;
  LunCount?: number;
}
export interface ResourceDetails {
  NetAppONTAPSVMs?: NetAppONTAPSVM[];
  NetAppONTAPVolumes?: NetAppONTAPVolume[];
  NetAppONTAPClusters?: NetAppONTAPCluster[];
}
export interface DescribeStorageSystemResourcesResponse {
  ResourceDetails?: ResourceDetails;
  NextToken?: string;
}
export interface DescribeTaskRequest {
  TaskArn: string | undefined;
}
export declare const ScheduleDisabledBy: {
  readonly SERVICE: "SERVICE";
  readonly USER: "USER";
};
export type ScheduleDisabledBy =
  (typeof ScheduleDisabledBy)[keyof typeof ScheduleDisabledBy];
export interface TaskScheduleDetails {
  StatusUpdateTime?: Date;
  DisabledReason?: string;
  DisabledBy?: ScheduleDisabledBy;
}
export declare const TaskStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATING: "CREATING";
  readonly QUEUED: "QUEUED";
  readonly RUNNING: "RUNNING";
  readonly UNAVAILABLE: "UNAVAILABLE";
};
export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus];
export interface DescribeTaskResponse {
  TaskArn?: string;
  Status?: TaskStatus;
  Name?: string;
  CurrentTaskExecutionArn?: string;
  SourceLocationArn?: string;
  DestinationLocationArn?: string;
  CloudWatchLogGroupArn?: string;
  SourceNetworkInterfaceArns?: string[];
  DestinationNetworkInterfaceArns?: string[];
  Options?: Options;
  Excludes?: FilterRule[];
  Schedule?: TaskSchedule;
  ErrorCode?: string;
  ErrorDetail?: string;
  CreationTime?: Date;
  Includes?: FilterRule[];
  ManifestConfig?: ManifestConfig;
  TaskReportConfig?: TaskReportConfig;
  ScheduleDetails?: TaskScheduleDetails;
}
export interface DescribeTaskExecutionRequest {
  TaskExecutionArn: string | undefined;
}
export declare const PhaseStatus: {
  readonly ERROR: "ERROR";
  readonly PENDING: "PENDING";
  readonly SUCCESS: "SUCCESS";
};
export type PhaseStatus = (typeof PhaseStatus)[keyof typeof PhaseStatus];
export interface ReportResult {
  Status?: PhaseStatus;
  ErrorCode?: string;
  ErrorDetail?: string;
}
export interface TaskExecutionResultDetail {
  PrepareDuration?: number;
  PrepareStatus?: PhaseStatus;
  TotalDuration?: number;
  TransferDuration?: number;
  TransferStatus?: PhaseStatus;
  VerifyDuration?: number;
  VerifyStatus?: PhaseStatus;
  ErrorCode?: string;
  ErrorDetail?: string;
}
export declare const TaskExecutionStatus: {
  readonly ERROR: "ERROR";
  readonly LAUNCHING: "LAUNCHING";
  readonly PREPARING: "PREPARING";
  readonly QUEUED: "QUEUED";
  readonly SUCCESS: "SUCCESS";
  readonly TRANSFERRING: "TRANSFERRING";
  readonly VERIFYING: "VERIFYING";
};
export type TaskExecutionStatus =
  (typeof TaskExecutionStatus)[keyof typeof TaskExecutionStatus];
export interface DescribeTaskExecutionResponse {
  TaskExecutionArn?: string;
  Status?: TaskExecutionStatus;
  Options?: Options;
  Excludes?: FilterRule[];
  Includes?: FilterRule[];
  ManifestConfig?: ManifestConfig;
  StartTime?: Date;
  EstimatedFilesToTransfer?: number;
  EstimatedBytesToTransfer?: number;
  FilesTransferred?: number;
  BytesWritten?: number;
  BytesTransferred?: number;
  BytesCompressed?: number;
  Result?: TaskExecutionResultDetail;
  TaskReportConfig?: TaskReportConfig;
  FilesDeleted?: number;
  FilesSkipped?: number;
  FilesVerified?: number;
  ReportResult?: ReportResult;
  EstimatedFilesToDelete?: number;
}
export interface DiscoveryJobListEntry {
  DiscoveryJobArn?: string;
  Status?: DiscoveryJobStatus;
}
export interface GenerateRecommendationsRequest {
  DiscoveryJobArn: string | undefined;
  ResourceIds: string[] | undefined;
  ResourceType: DiscoveryResourceType | undefined;
}
export interface GenerateRecommendationsResponse {}
export interface ListAgentsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListAgentsResponse {
  Agents?: AgentListEntry[];
  NextToken?: string;
}
export interface ListDiscoveryJobsRequest {
  StorageSystemArn?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListDiscoveryJobsResponse {
  DiscoveryJobs?: DiscoveryJobListEntry[];
  NextToken?: string;
}
export declare const LocationFilterName: {
  readonly CreationTime: "CreationTime";
  readonly LocationType: "LocationType";
  readonly LocationUri: "LocationUri";
};
export type LocationFilterName =
  (typeof LocationFilterName)[keyof typeof LocationFilterName];
export declare const Operator: {
  readonly BEGINS_WITH: "BeginsWith";
  readonly CONTAINS: "Contains";
  readonly EQ: "Equals";
  readonly GE: "GreaterThanOrEqual";
  readonly GT: "GreaterThan";
  readonly IN: "In";
  readonly LE: "LessThanOrEqual";
  readonly LT: "LessThan";
  readonly NE: "NotEquals";
  readonly NOT_CONTAINS: "NotContains";
};
export type Operator = (typeof Operator)[keyof typeof Operator];
export interface LocationFilter {
  Name: LocationFilterName | undefined;
  Values: string[] | undefined;
  Operator: Operator | undefined;
}
export interface ListLocationsRequest {
  MaxResults?: number;
  NextToken?: string;
  Filters?: LocationFilter[];
}
export interface LocationListEntry {
  LocationArn?: string;
  LocationUri?: string;
}
export interface ListLocationsResponse {
  Locations?: LocationListEntry[];
  NextToken?: string;
}
export interface ListStorageSystemsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface StorageSystemListEntry {
  StorageSystemArn?: string;
  Name?: string;
}
export interface ListStorageSystemsResponse {
  StorageSystems?: StorageSystemListEntry[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListTagsForResourceResponse {
  Tags?: TagListEntry[];
  NextToken?: string;
}
export interface ListTaskExecutionsRequest {
  TaskArn?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface TaskExecutionListEntry {
  TaskExecutionArn?: string;
  Status?: TaskExecutionStatus;
}
export interface ListTaskExecutionsResponse {
  TaskExecutions?: TaskExecutionListEntry[];
  NextToken?: string;
}
export declare const TaskFilterName: {
  readonly CreationTime: "CreationTime";
  readonly LocationId: "LocationId";
};
export type TaskFilterName =
  (typeof TaskFilterName)[keyof typeof TaskFilterName];
export interface TaskFilter {
  Name: TaskFilterName | undefined;
  Values: string[] | undefined;
  Operator: Operator | undefined;
}
export interface ListTasksRequest {
  MaxResults?: number;
  NextToken?: string;
  Filters?: TaskFilter[];
}
export interface TaskListEntry {
  TaskArn?: string;
  Status?: TaskStatus;
  Name?: string;
}
export interface ListTasksResponse {
  Tasks?: TaskListEntry[];
  NextToken?: string;
}
export interface RemoveStorageSystemRequest {
  StorageSystemArn: string | undefined;
}
export interface RemoveStorageSystemResponse {}
export interface StartDiscoveryJobRequest {
  StorageSystemArn: string | undefined;
  CollectionDurationMinutes: number | undefined;
  ClientToken?: string;
  Tags?: TagListEntry[];
}
export interface StartDiscoveryJobResponse {
  DiscoveryJobArn?: string;
}
export interface StartTaskExecutionRequest {
  TaskArn: string | undefined;
  OverrideOptions?: Options;
  Includes?: FilterRule[];
  Excludes?: FilterRule[];
  ManifestConfig?: ManifestConfig;
  TaskReportConfig?: TaskReportConfig;
  Tags?: TagListEntry[];
}
export interface StartTaskExecutionResponse {
  TaskExecutionArn?: string;
}
export interface StopDiscoveryJobRequest {
  DiscoveryJobArn: string | undefined;
}
export interface StopDiscoveryJobResponse {}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: TagListEntry[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  Keys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateAgentRequest {
  AgentArn: string | undefined;
  Name?: string;
}
export interface UpdateAgentResponse {}
export interface UpdateDiscoveryJobRequest {
  DiscoveryJobArn: string | undefined;
  CollectionDurationMinutes: number | undefined;
}
export interface UpdateDiscoveryJobResponse {}
export interface UpdateLocationAzureBlobRequest {
  LocationArn: string | undefined;
  Subdirectory?: string;
  AuthenticationType?: AzureBlobAuthenticationType;
  SasConfiguration?: AzureBlobSasConfiguration;
  BlobType?: AzureBlobType;
  AccessTier?: AzureAccessTier;
  AgentArns?: string[];
}
export interface UpdateLocationAzureBlobResponse {}
export interface UpdateLocationHdfsRequest {
  LocationArn: string | undefined;
  Subdirectory?: string;
  NameNodes?: HdfsNameNode[];
  BlockSize?: number;
  ReplicationFactor?: number;
  KmsKeyProviderUri?: string;
  QopConfiguration?: QopConfiguration;
  AuthenticationType?: HdfsAuthenticationType;
  SimpleUser?: string;
  KerberosPrincipal?: string;
  KerberosKeytab?: Uint8Array;
  KerberosKrb5Conf?: Uint8Array;
  AgentArns?: string[];
}
export interface UpdateLocationHdfsResponse {}
export interface UpdateLocationNfsRequest {
  LocationArn: string | undefined;
  Subdirectory?: string;
  OnPremConfig?: OnPremConfig;
  MountOptions?: NfsMountOptions;
}
export interface UpdateLocationNfsResponse {}
export interface UpdateLocationObjectStorageRequest {
  LocationArn: string | undefined;
  ServerPort?: number;
  ServerProtocol?: ObjectStorageServerProtocol;
  Subdirectory?: string;
  AccessKey?: string;
  SecretKey?: string;
  AgentArns?: string[];
  ServerCertificate?: Uint8Array;
}
export interface UpdateLocationObjectStorageResponse {}
export interface UpdateLocationSmbRequest {
  LocationArn: string | undefined;
  Subdirectory?: string;
  User?: string;
  Domain?: string;
  Password?: string;
  AgentArns?: string[];
  MountOptions?: SmbMountOptions;
}
export interface UpdateLocationSmbResponse {}
export interface UpdateStorageSystemRequest {
  StorageSystemArn: string | undefined;
  ServerConfiguration?: DiscoveryServerConfiguration;
  AgentArns?: string[];
  Name?: string;
  CloudWatchLogGroupArn?: string;
  Credentials?: Credentials;
}
export interface UpdateStorageSystemResponse {}
export interface UpdateTaskRequest {
  TaskArn: string | undefined;
  Options?: Options;
  Excludes?: FilterRule[];
  Schedule?: TaskSchedule;
  Name?: string;
  CloudWatchLogGroupArn?: string;
  Includes?: FilterRule[];
  ManifestConfig?: ManifestConfig;
  TaskReportConfig?: TaskReportConfig;
}
export interface UpdateTaskResponse {}
export interface UpdateTaskExecutionRequest {
  TaskExecutionArn: string | undefined;
  Options: Options | undefined;
}
export interface UpdateTaskExecutionResponse {}
export declare const CredentialsFilterSensitiveLog: (obj: Credentials) => any;
export declare const AddStorageSystemRequestFilterSensitiveLog: (
  obj: AddStorageSystemRequest
) => any;
export declare const AzureBlobSasConfigurationFilterSensitiveLog: (
  obj: AzureBlobSasConfiguration
) => any;
export declare const CreateLocationAzureBlobRequestFilterSensitiveLog: (
  obj: CreateLocationAzureBlobRequest
) => any;
export declare const FsxProtocolSmbFilterSensitiveLog: (
  obj: FsxProtocolSmb
) => any;
export declare const FsxProtocolFilterSensitiveLog: (obj: FsxProtocol) => any;
export declare const CreateLocationFsxOntapRequestFilterSensitiveLog: (
  obj: CreateLocationFsxOntapRequest
) => any;
export declare const CreateLocationFsxOpenZfsRequestFilterSensitiveLog: (
  obj: CreateLocationFsxOpenZfsRequest
) => any;
export declare const CreateLocationFsxWindowsRequestFilterSensitiveLog: (
  obj: CreateLocationFsxWindowsRequest
) => any;
export declare const CreateLocationObjectStorageRequestFilterSensitiveLog: (
  obj: CreateLocationObjectStorageRequest
) => any;
export declare const CreateLocationSmbRequestFilterSensitiveLog: (
  obj: CreateLocationSmbRequest
) => any;
export declare const DescribeLocationFsxOntapResponseFilterSensitiveLog: (
  obj: DescribeLocationFsxOntapResponse
) => any;
export declare const DescribeLocationFsxOpenZfsResponseFilterSensitiveLog: (
  obj: DescribeLocationFsxOpenZfsResponse
) => any;
export declare const UpdateLocationAzureBlobRequestFilterSensitiveLog: (
  obj: UpdateLocationAzureBlobRequest
) => any;
export declare const UpdateLocationObjectStorageRequestFilterSensitiveLog: (
  obj: UpdateLocationObjectStorageRequest
) => any;
export declare const UpdateLocationSmbRequestFilterSensitiveLog: (
  obj: UpdateLocationSmbRequest
) => any;
export declare const UpdateStorageSystemRequestFilterSensitiveLog: (
  obj: UpdateStorageSystemRequest
) => any;
