import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { DrsServiceException as __BaseException } from "./DrsServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  code?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface Account {
  accountID?: string;
}
export interface AssociateSourceNetworkStackRequest {
  sourceNetworkID: string | undefined;
  cfnStackName: string | undefined;
}
export declare const InitiatedBy: {
  readonly ASSOCIATE_NETWORK_RECOVERY: "ASSOCIATE_NETWORK_RECOVERY";
  readonly CREATE_NETWORK_RECOVERY: "CREATE_NETWORK_RECOVERY";
  readonly DIAGNOSTIC: "DIAGNOSTIC";
  readonly FAILBACK: "FAILBACK";
  readonly START_DRILL: "START_DRILL";
  readonly START_RECOVERY: "START_RECOVERY";
  readonly TARGET_ACCOUNT: "TARGET_ACCOUNT";
  readonly TERMINATE_RECOVERY_INSTANCES: "TERMINATE_RECOVERY_INSTANCES";
  readonly UPDATE_NETWORK_RECOVERY: "UPDATE_NETWORK_RECOVERY";
};
export type InitiatedBy = (typeof InitiatedBy)[keyof typeof InitiatedBy];
export declare const LaunchStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly LAUNCHED: "LAUNCHED";
  readonly PENDING: "PENDING";
  readonly TERMINATED: "TERMINATED";
};
export type LaunchStatus = (typeof LaunchStatus)[keyof typeof LaunchStatus];
export type ParticipatingResourceID =
  | ParticipatingResourceID.SourceNetworkIDMember
  | ParticipatingResourceID.$UnknownMember;
export declare namespace ParticipatingResourceID {
  interface SourceNetworkIDMember {
    sourceNetworkID: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    sourceNetworkID?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    sourceNetworkID: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ParticipatingResourceID, visitor: Visitor<T>) => T;
}
export interface ParticipatingResource {
  participatingResourceID?: ParticipatingResourceID;
  launchStatus?: LaunchStatus;
}
export declare const LaunchActionCategory: {
  readonly CONFIGURATION: "CONFIGURATION";
  readonly MONITORING: "MONITORING";
  readonly OTHER: "OTHER";
  readonly SECURITY: "SECURITY";
  readonly VALIDATION: "VALIDATION";
};
export type LaunchActionCategory =
  (typeof LaunchActionCategory)[keyof typeof LaunchActionCategory];
export declare const LaunchActionParameterType: {
  readonly DYNAMIC: "DYNAMIC";
  readonly SSM_STORE: "SSM_STORE";
};
export type LaunchActionParameterType =
  (typeof LaunchActionParameterType)[keyof typeof LaunchActionParameterType];
export interface LaunchActionParameter {
  value?: string;
  type?: LaunchActionParameterType;
}
export declare const LaunchActionType: {
  readonly SSM_AUTOMATION: "SSM_AUTOMATION";
  readonly SSM_COMMAND: "SSM_COMMAND";
};
export type LaunchActionType =
  (typeof LaunchActionType)[keyof typeof LaunchActionType];
export interface LaunchAction {
  actionId?: string;
  actionCode?: string;
  type?: LaunchActionType;
  name?: string;
  active?: boolean;
  order?: number;
  actionVersion?: string;
  optional?: boolean;
  parameters?: Record<string, LaunchActionParameter>;
  description?: string;
  category?: LaunchActionCategory;
}
export declare const LaunchActionRunStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type LaunchActionRunStatus =
  (typeof LaunchActionRunStatus)[keyof typeof LaunchActionRunStatus];
export interface LaunchActionRun {
  action?: LaunchAction;
  runId?: string;
  status?: LaunchActionRunStatus;
  failureReason?: string;
}
export interface LaunchActionsStatus {
  ssmAgentDiscoveryDatetime?: string;
  runs?: LaunchActionRun[];
}
export interface ParticipatingServer {
  sourceServerID?: string;
  recoveryInstanceID?: string;
  launchStatus?: LaunchStatus;
  launchActionsStatus?: LaunchActionsStatus;
}
export declare const JobStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly PENDING: "PENDING";
  readonly STARTED: "STARTED";
};
export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus];
export declare const JobType: {
  readonly CREATE_CONVERTED_SNAPSHOT: "CREATE_CONVERTED_SNAPSHOT";
  readonly LAUNCH: "LAUNCH";
  readonly TERMINATE: "TERMINATE";
};
export type JobType = (typeof JobType)[keyof typeof JobType];
export interface Job {
  jobID: string | undefined;
  arn?: string;
  type?: JobType;
  initiatedBy?: InitiatedBy;
  creationDateTime?: string;
  endDateTime?: string;
  status?: JobStatus;
  participatingServers?: ParticipatingServer[];
  tags?: Record<string, string>;
  participatingResources?: ParticipatingResource[];
}
export interface AssociateSourceNetworkStackResponse {
  job?: Job;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  code?: string;
  resourceId?: string;
  resourceType?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  retryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  code?: string;
  resourceId?: string;
  resourceType?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  code?: string;
  resourceId?: string;
  resourceType?: string;
  serviceCode?: string;
  quotaCode?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  serviceCode?: string;
  quotaCode?: string;
  retryAfterSeconds?: string;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class UninitializedAccountException extends __BaseException {
  readonly name: "UninitializedAccountException";
  readonly $fault: "client";
  code?: string;
  constructor(
    opts: __ExceptionOptionType<UninitializedAccountException, __BaseException>
  );
}
export interface ValidationExceptionField {
  name?: string;
  message?: string;
}
export declare const ValidationExceptionReason: {
  readonly CANNOT_PARSE: "cannotParse";
  readonly FIELD_VALIDATION_FAILED: "fieldValidationFailed";
  readonly OTHER: "other";
  readonly UNKNOWN_OPERATION: "unknownOperation";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  code?: string;
  reason?: ValidationExceptionReason;
  fieldList?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const ProductCodeMode: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type ProductCodeMode =
  (typeof ProductCodeMode)[keyof typeof ProductCodeMode];
export interface ProductCode {
  productCodeId?: string;
  productCodeMode?: ProductCodeMode;
}
export interface ConversionProperties {
  volumeToConversionMap?: Record<string, Record<string, string>>;
  rootVolumeName?: string;
  forceUefi?: boolean;
  dataTimestamp?: string;
  volumeToVolumeSize?: Record<string, number>;
  volumeToProductCodes?: Record<string, ProductCode[]>;
}
export interface CPU {
  cores?: number;
  modelName?: string;
}
export interface CreateExtendedSourceServerRequest {
  sourceServerArn: string | undefined;
  tags?: Record<string, string>;
}
export declare const DataReplicationErrorString: {
  readonly AGENT_NOT_SEEN: "AGENT_NOT_SEEN";
  readonly FAILED_TO_ATTACH_STAGING_DISKS: "FAILED_TO_ATTACH_STAGING_DISKS";
  readonly FAILED_TO_AUTHENTICATE_WITH_SERVICE: "FAILED_TO_AUTHENTICATE_WITH_SERVICE";
  readonly FAILED_TO_BOOT_REPLICATION_SERVER: "FAILED_TO_BOOT_REPLICATION_SERVER";
  readonly FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER: "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER";
  readonly FAILED_TO_CREATE_SECURITY_GROUP: "FAILED_TO_CREATE_SECURITY_GROUP";
  readonly FAILED_TO_CREATE_STAGING_DISKS: "FAILED_TO_CREATE_STAGING_DISKS";
  readonly FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE: "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE";
  readonly FAILED_TO_LAUNCH_REPLICATION_SERVER: "FAILED_TO_LAUNCH_REPLICATION_SERVER";
  readonly FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT: "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT";
  readonly FAILED_TO_START_DATA_TRANSFER: "FAILED_TO_START_DATA_TRANSFER";
  readonly NOT_CONVERGING: "NOT_CONVERGING";
  readonly SNAPSHOTS_FAILURE: "SNAPSHOTS_FAILURE";
  readonly UNSTABLE_NETWORK: "UNSTABLE_NETWORK";
};
export type DataReplicationErrorString =
  (typeof DataReplicationErrorString)[keyof typeof DataReplicationErrorString];
export interface DataReplicationError {
  error?: DataReplicationErrorString;
  rawError?: string;
}
export declare const DataReplicationInitiationStepName: {
  readonly ATTACH_STAGING_DISKS: "ATTACH_STAGING_DISKS";
  readonly AUTHENTICATE_WITH_SERVICE: "AUTHENTICATE_WITH_SERVICE";
  readonly BOOT_REPLICATION_SERVER: "BOOT_REPLICATION_SERVER";
  readonly CONNECT_AGENT_TO_REPLICATION_SERVER: "CONNECT_AGENT_TO_REPLICATION_SERVER";
  readonly CREATE_SECURITY_GROUP: "CREATE_SECURITY_GROUP";
  readonly CREATE_STAGING_DISKS: "CREATE_STAGING_DISKS";
  readonly DOWNLOAD_REPLICATION_SOFTWARE: "DOWNLOAD_REPLICATION_SOFTWARE";
  readonly LAUNCH_REPLICATION_SERVER: "LAUNCH_REPLICATION_SERVER";
  readonly PAIR_REPLICATION_SERVER_WITH_AGENT: "PAIR_REPLICATION_SERVER_WITH_AGENT";
  readonly START_DATA_TRANSFER: "START_DATA_TRANSFER";
  readonly WAIT: "WAIT";
};
export type DataReplicationInitiationStepName =
  (typeof DataReplicationInitiationStepName)[keyof typeof DataReplicationInitiationStepName];
export declare const DataReplicationInitiationStepStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly NOT_STARTED: "NOT_STARTED";
  readonly SKIPPED: "SKIPPED";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type DataReplicationInitiationStepStatus =
  (typeof DataReplicationInitiationStepStatus)[keyof typeof DataReplicationInitiationStepStatus];
export interface DataReplicationInitiationStep {
  name?: DataReplicationInitiationStepName;
  status?: DataReplicationInitiationStepStatus;
}
export interface DataReplicationInitiation {
  startDateTime?: string;
  nextAttemptDateTime?: string;
  steps?: DataReplicationInitiationStep[];
}
export declare const DataReplicationState: {
  readonly BACKLOG: "BACKLOG";
  readonly CONTINUOUS: "CONTINUOUS";
  readonly CREATING_SNAPSHOT: "CREATING_SNAPSHOT";
  readonly DISCONNECTED: "DISCONNECTED";
  readonly INITIAL_SYNC: "INITIAL_SYNC";
  readonly INITIATING: "INITIATING";
  readonly PAUSED: "PAUSED";
  readonly RESCAN: "RESCAN";
  readonly STALLED: "STALLED";
  readonly STOPPED: "STOPPED";
};
export type DataReplicationState =
  (typeof DataReplicationState)[keyof typeof DataReplicationState];
export declare const VolumeStatus: {
  readonly CONTAINS_MARKETPLACE_PRODUCT_CODES: "CONTAINS_MARKETPLACE_PRODUCT_CODES";
  readonly MISSING_VOLUME_ATTRIBUTES: "MISSING_VOLUME_ATTRIBUTES";
  readonly MISSING_VOLUME_ATTRIBUTES_AND_PRECHECK_UNAVAILABLE: "MISSING_VOLUME_ATTRIBUTES_AND_PRECHECK_UNAVAILABLE";
  readonly PENDING: "PENDING";
  readonly REGULAR: "REGULAR";
};
export type VolumeStatus = (typeof VolumeStatus)[keyof typeof VolumeStatus];
export interface DataReplicationInfoReplicatedDisk {
  deviceName?: string;
  totalStorageBytes?: number;
  replicatedStorageBytes?: number;
  rescannedStorageBytes?: number;
  backloggedStorageBytes?: number;
  volumeStatus?: VolumeStatus;
}
export interface DataReplicationInfo {
  lagDuration?: string;
  etaDateTime?: string;
  replicatedDisks?: DataReplicationInfoReplicatedDisk[];
  dataReplicationState?: DataReplicationState;
  dataReplicationInitiation?: DataReplicationInitiation;
  dataReplicationError?: DataReplicationError;
  stagingAvailabilityZone?: string;
  stagingOutpostArn?: string;
}
export declare const LastLaunchResult: {
  readonly FAILED: "FAILED";
  readonly NOT_STARTED: "NOT_STARTED";
  readonly PENDING: "PENDING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type LastLaunchResult =
  (typeof LastLaunchResult)[keyof typeof LastLaunchResult];
export declare const LastLaunchType: {
  readonly DRILL: "DRILL";
  readonly RECOVERY: "RECOVERY";
};
export type LastLaunchType =
  (typeof LastLaunchType)[keyof typeof LastLaunchType];
export interface LifeCycleLastLaunchInitiated {
  apiCallDateTime?: string;
  jobID?: string;
  type?: LastLaunchType;
}
export interface LifeCycleLastLaunch {
  initiated?: LifeCycleLastLaunchInitiated;
  status?: LaunchStatus;
}
export interface LifeCycle {
  addedToServiceDateTime?: string;
  firstByteDateTime?: string;
  elapsedReplicationDuration?: string;
  lastSeenByServiceDateTime?: string;
  lastLaunch?: LifeCycleLastLaunch;
}
export declare const ReplicationDirection: {
  readonly FAILBACK: "FAILBACK";
  readonly FAILOVER: "FAILOVER";
};
export type ReplicationDirection =
  (typeof ReplicationDirection)[keyof typeof ReplicationDirection];
export interface SourceCloudProperties {
  originAccountID?: string;
  originRegion?: string;
  originAvailabilityZone?: string;
  sourceOutpostArn?: string;
}
export interface Disk {
  deviceName?: string;
  bytes?: number;
}
export interface IdentificationHints {
  fqdn?: string;
  hostname?: string;
  vmWareUuid?: string;
  awsInstanceID?: string;
}
export interface NetworkInterface {
  macAddress?: string;
  ips?: string[];
  isPrimary?: boolean;
}
export interface OS {
  fullString?: string;
}
export interface SourceProperties {
  lastUpdatedDateTime?: string;
  recommendedInstanceType?: string;
  identificationHints?: IdentificationHints;
  networkInterfaces?: NetworkInterface[];
  disks?: Disk[];
  cpus?: CPU[];
  ramBytes?: number;
  os?: OS;
  supportsNitroInstances?: boolean;
}
export declare const ExtensionStatus: {
  readonly EXTENDED: "EXTENDED";
  readonly EXTENSION_ERROR: "EXTENSION_ERROR";
  readonly NOT_EXTENDED: "NOT_EXTENDED";
};
export type ExtensionStatus =
  (typeof ExtensionStatus)[keyof typeof ExtensionStatus];
export interface StagingArea {
  status?: ExtensionStatus;
  stagingAccountID?: string;
  stagingSourceServerArn?: string;
  errorMessage?: string;
}
export interface SourceServer {
  sourceServerID?: string;
  arn?: string;
  tags?: Record<string, string>;
  recoveryInstanceId?: string;
  lastLaunchResult?: LastLaunchResult;
  dataReplicationInfo?: DataReplicationInfo;
  lifeCycle?: LifeCycle;
  sourceProperties?: SourceProperties;
  stagingArea?: StagingArea;
  sourceCloudProperties?: SourceCloudProperties;
  replicationDirection?: ReplicationDirection;
  reversedDirectionSourceServerArn?: string;
  sourceNetworkID?: string;
  agentVersion?: string;
}
export interface CreateExtendedSourceServerResponse {
  sourceServer?: SourceServer;
}
export declare const LaunchDisposition: {
  readonly STARTED: "STARTED";
  readonly STOPPED: "STOPPED";
};
export type LaunchDisposition =
  (typeof LaunchDisposition)[keyof typeof LaunchDisposition];
export interface Licensing {
  osByol?: boolean;
}
export declare const TargetInstanceTypeRightSizingMethod: {
  readonly BASIC: "BASIC";
  readonly IN_AWS: "IN_AWS";
  readonly NONE: "NONE";
};
export type TargetInstanceTypeRightSizingMethod =
  (typeof TargetInstanceTypeRightSizingMethod)[keyof typeof TargetInstanceTypeRightSizingMethod];
export interface CreateLaunchConfigurationTemplateRequest {
  tags?: Record<string, string>;
  launchDisposition?: LaunchDisposition;
  targetInstanceTypeRightSizingMethod?: TargetInstanceTypeRightSizingMethod;
  copyPrivateIp?: boolean;
  copyTags?: boolean;
  licensing?: Licensing;
  exportBucketArn?: string;
  postLaunchEnabled?: boolean;
  launchIntoSourceInstance?: boolean;
}
export interface LaunchConfigurationTemplate {
  launchConfigurationTemplateID?: string;
  arn?: string;
  tags?: Record<string, string>;
  launchDisposition?: LaunchDisposition;
  targetInstanceTypeRightSizingMethod?: TargetInstanceTypeRightSizingMethod;
  copyPrivateIp?: boolean;
  copyTags?: boolean;
  licensing?: Licensing;
  exportBucketArn?: string;
  postLaunchEnabled?: boolean;
  launchIntoSourceInstance?: boolean;
}
export interface CreateLaunchConfigurationTemplateResponse {
  launchConfigurationTemplate?: LaunchConfigurationTemplate;
}
export declare const ReplicationConfigurationDataPlaneRouting: {
  readonly PRIVATE_IP: "PRIVATE_IP";
  readonly PUBLIC_IP: "PUBLIC_IP";
};
export type ReplicationConfigurationDataPlaneRouting =
  (typeof ReplicationConfigurationDataPlaneRouting)[keyof typeof ReplicationConfigurationDataPlaneRouting];
export declare const ReplicationConfigurationDefaultLargeStagingDiskType: {
  readonly AUTO: "AUTO";
  readonly GP2: "GP2";
  readonly GP3: "GP3";
  readonly ST1: "ST1";
};
export type ReplicationConfigurationDefaultLargeStagingDiskType =
  (typeof ReplicationConfigurationDefaultLargeStagingDiskType)[keyof typeof ReplicationConfigurationDefaultLargeStagingDiskType];
export declare const ReplicationConfigurationEbsEncryption: {
  readonly CUSTOM: "CUSTOM";
  readonly DEFAULT: "DEFAULT";
  readonly NONE: "NONE";
};
export type ReplicationConfigurationEbsEncryption =
  (typeof ReplicationConfigurationEbsEncryption)[keyof typeof ReplicationConfigurationEbsEncryption];
export declare const PITPolicyRuleUnits: {
  readonly DAY: "DAY";
  readonly HOUR: "HOUR";
  readonly MINUTE: "MINUTE";
};
export type PITPolicyRuleUnits =
  (typeof PITPolicyRuleUnits)[keyof typeof PITPolicyRuleUnits];
export interface PITPolicyRule {
  ruleID?: number;
  units: PITPolicyRuleUnits | undefined;
  interval: number | undefined;
  retentionDuration: number | undefined;
  enabled?: boolean;
}
export interface CreateReplicationConfigurationTemplateRequest {
  stagingAreaSubnetId: string | undefined;
  associateDefaultSecurityGroup: boolean | undefined;
  replicationServersSecurityGroupsIDs: string[] | undefined;
  replicationServerInstanceType: string | undefined;
  useDedicatedReplicationServer: boolean | undefined;
  defaultLargeStagingDiskType:
    | ReplicationConfigurationDefaultLargeStagingDiskType
    | undefined;
  ebsEncryption: ReplicationConfigurationEbsEncryption | undefined;
  ebsEncryptionKeyArn?: string;
  bandwidthThrottling: number | undefined;
  dataPlaneRouting: ReplicationConfigurationDataPlaneRouting | undefined;
  createPublicIP: boolean | undefined;
  stagingAreaTags: Record<string, string> | undefined;
  pitPolicy: PITPolicyRule[] | undefined;
  tags?: Record<string, string>;
  autoReplicateNewDisks?: boolean;
}
export interface ReplicationConfigurationTemplate {
  replicationConfigurationTemplateID: string | undefined;
  arn?: string;
  stagingAreaSubnetId?: string;
  associateDefaultSecurityGroup?: boolean;
  replicationServersSecurityGroupsIDs?: string[];
  replicationServerInstanceType?: string;
  useDedicatedReplicationServer?: boolean;
  defaultLargeStagingDiskType?: ReplicationConfigurationDefaultLargeStagingDiskType;
  ebsEncryption?: ReplicationConfigurationEbsEncryption;
  ebsEncryptionKeyArn?: string;
  bandwidthThrottling?: number;
  dataPlaneRouting?: ReplicationConfigurationDataPlaneRouting;
  createPublicIP?: boolean;
  stagingAreaTags?: Record<string, string>;
  tags?: Record<string, string>;
  pitPolicy?: PITPolicyRule[];
  autoReplicateNewDisks?: boolean;
}
export interface CreateSourceNetworkRequest {
  vpcID: string | undefined;
  originAccountID: string | undefined;
  originRegion: string | undefined;
  tags?: Record<string, string>;
}
export interface CreateSourceNetworkResponse {
  sourceNetworkID?: string;
}
export interface DeleteJobRequest {
  jobID: string | undefined;
}
export interface DeleteJobResponse {}
export interface DeleteLaunchActionRequest {
  resourceId: string | undefined;
  actionId: string | undefined;
}
export interface DeleteLaunchActionResponse {}
export interface DeleteLaunchConfigurationTemplateRequest {
  launchConfigurationTemplateID: string | undefined;
}
export interface DeleteLaunchConfigurationTemplateResponse {}
export interface DeleteRecoveryInstanceRequest {
  recoveryInstanceID: string | undefined;
}
export interface DeleteReplicationConfigurationTemplateRequest {
  replicationConfigurationTemplateID: string | undefined;
}
export interface DeleteReplicationConfigurationTemplateResponse {}
export interface DeleteSourceNetworkRequest {
  sourceNetworkID: string | undefined;
}
export interface DeleteSourceNetworkResponse {}
export interface DeleteSourceServerRequest {
  sourceServerID: string | undefined;
}
export interface DeleteSourceServerResponse {}
export interface DescribeJobLogItemsRequest {
  jobID: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export declare const JobLogEvent: {
  readonly CLEANUP_END: "CLEANUP_END";
  readonly CLEANUP_FAIL: "CLEANUP_FAIL";
  readonly CLEANUP_START: "CLEANUP_START";
  readonly CONVERSION_END: "CONVERSION_END";
  readonly CONVERSION_FAIL: "CONVERSION_FAIL";
  readonly CONVERSION_START: "CONVERSION_START";
  readonly DEPLOY_NETWORK_CONFIGURATION_END: "DEPLOY_NETWORK_CONFIGURATION_END";
  readonly DEPLOY_NETWORK_CONFIGURATION_FAILED: "DEPLOY_NETWORK_CONFIGURATION_FAILED";
  readonly DEPLOY_NETWORK_CONFIGURATION_START: "DEPLOY_NETWORK_CONFIGURATION_START";
  readonly JOB_CANCEL: "JOB_CANCEL";
  readonly JOB_END: "JOB_END";
  readonly JOB_START: "JOB_START";
  readonly LAUNCH_FAILED: "LAUNCH_FAILED";
  readonly LAUNCH_START: "LAUNCH_START";
  readonly NETWORK_RECOVERY_FAIL: "NETWORK_RECOVERY_FAIL";
  readonly SERVER_SKIPPED: "SERVER_SKIPPED";
  readonly SNAPSHOT_END: "SNAPSHOT_END";
  readonly SNAPSHOT_FAIL: "SNAPSHOT_FAIL";
  readonly SNAPSHOT_START: "SNAPSHOT_START";
  readonly UPDATE_LAUNCH_TEMPLATE_END: "UPDATE_LAUNCH_TEMPLATE_END";
  readonly UPDATE_LAUNCH_TEMPLATE_FAILED: "UPDATE_LAUNCH_TEMPLATE_FAILED";
  readonly UPDATE_LAUNCH_TEMPLATE_START: "UPDATE_LAUNCH_TEMPLATE_START";
  readonly UPDATE_NETWORK_CONFIGURATION_END: "UPDATE_NETWORK_CONFIGURATION_END";
  readonly UPDATE_NETWORK_CONFIGURATION_FAILED: "UPDATE_NETWORK_CONFIGURATION_FAILED";
  readonly UPDATE_NETWORK_CONFIGURATION_START: "UPDATE_NETWORK_CONFIGURATION_START";
  readonly USING_PREVIOUS_SNAPSHOT: "USING_PREVIOUS_SNAPSHOT";
  readonly USING_PREVIOUS_SNAPSHOT_FAILED: "USING_PREVIOUS_SNAPSHOT_FAILED";
};
export type JobLogEvent = (typeof JobLogEvent)[keyof typeof JobLogEvent];
export interface SourceNetworkData {
  sourceNetworkID?: string;
  sourceVpc?: string;
  targetVpc?: string;
  stackName?: string;
}
export type EventResourceData =
  | EventResourceData.SourceNetworkDataMember
  | EventResourceData.$UnknownMember;
export declare namespace EventResourceData {
  interface SourceNetworkDataMember {
    sourceNetworkData: SourceNetworkData;
    $unknown?: never;
  }
  interface $UnknownMember {
    sourceNetworkData?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    sourceNetworkData: (value: SourceNetworkData) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: EventResourceData, visitor: Visitor<T>) => T;
}
export interface JobLogEventData {
  sourceServerID?: string;
  conversionServerID?: string;
  targetInstanceID?: string;
  rawError?: string;
  conversionProperties?: ConversionProperties;
  eventResourceData?: EventResourceData;
}
export interface JobLog {
  logDateTime?: string;
  event?: JobLogEvent;
  eventData?: JobLogEventData;
}
export interface DescribeJobLogItemsResponse {
  items?: JobLog[];
  nextToken?: string;
}
export interface DescribeJobsRequestFilters {
  jobIDs?: string[];
  fromDate?: string;
  toDate?: string;
}
export interface DescribeJobsRequest {
  filters?: DescribeJobsRequestFilters;
  maxResults?: number;
  nextToken?: string;
}
export interface DescribeJobsResponse {
  items?: Job[];
  nextToken?: string;
}
export interface DescribeLaunchConfigurationTemplatesRequest {
  launchConfigurationTemplateIDs?: string[];
  maxResults?: number;
  nextToken?: string;
}
export interface DescribeLaunchConfigurationTemplatesResponse {
  items?: LaunchConfigurationTemplate[];
  nextToken?: string;
}
export interface DescribeRecoveryInstancesRequestFilters {
  recoveryInstanceIDs?: string[];
  sourceServerIDs?: string[];
}
export interface DescribeRecoveryInstancesRequest {
  filters?: DescribeRecoveryInstancesRequestFilters;
  maxResults?: number;
  nextToken?: string;
}
export declare const FailbackReplicationError: {
  readonly AGENT_NOT_SEEN: "AGENT_NOT_SEEN";
  readonly FAILBACK_CLIENT_NOT_SEEN: "FAILBACK_CLIENT_NOT_SEEN";
  readonly FAILED_GETTING_REPLICATION_STATE: "FAILED_GETTING_REPLICATION_STATE";
  readonly FAILED_TO_ATTACH_STAGING_DISKS: "FAILED_TO_ATTACH_STAGING_DISKS";
  readonly FAILED_TO_AUTHENTICATE_WITH_SERVICE: "FAILED_TO_AUTHENTICATE_WITH_SERVICE";
  readonly FAILED_TO_BOOT_REPLICATION_SERVER: "FAILED_TO_BOOT_REPLICATION_SERVER";
  readonly FAILED_TO_CONFIGURE_REPLICATION_SOFTWARE: "FAILED_TO_CONFIGURE_REPLICATION_SOFTWARE";
  readonly FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER: "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER";
  readonly FAILED_TO_CREATE_SECURITY_GROUP: "FAILED_TO_CREATE_SECURITY_GROUP";
  readonly FAILED_TO_CREATE_STAGING_DISKS: "FAILED_TO_CREATE_STAGING_DISKS";
  readonly FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE: "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE";
  readonly FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE_TO_FAILBACK_CLIENT: "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE_TO_FAILBACK_CLIENT";
  readonly FAILED_TO_ESTABLISH_AGENT_REPLICATOR_SOFTWARE_COMMUNICATION: "FAILED_TO_ESTABLISH_AGENT_REPLICATOR_SOFTWARE_COMMUNICATION";
  readonly FAILED_TO_ESTABLISH_RECOVERY_INSTANCE_COMMUNICATION: "FAILED_TO_ESTABLISH_RECOVERY_INSTANCE_COMMUNICATION";
  readonly FAILED_TO_LAUNCH_REPLICATION_SERVER: "FAILED_TO_LAUNCH_REPLICATION_SERVER";
  readonly FAILED_TO_PAIR_AGENT_WITH_REPLICATION_SOFTWARE: "FAILED_TO_PAIR_AGENT_WITH_REPLICATION_SOFTWARE";
  readonly FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT: "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT";
  readonly FAILED_TO_START_DATA_TRANSFER: "FAILED_TO_START_DATA_TRANSFER";
  readonly NOT_CONVERGING: "NOT_CONVERGING";
  readonly SNAPSHOTS_FAILURE: "SNAPSHOTS_FAILURE";
  readonly UNSTABLE_NETWORK: "UNSTABLE_NETWORK";
};
export type FailbackReplicationError =
  (typeof FailbackReplicationError)[keyof typeof FailbackReplicationError];
export interface RecoveryInstanceDataReplicationError {
  error?: FailbackReplicationError;
  rawError?: string;
}
export declare const RecoveryInstanceDataReplicationInitiationStepName: {
  readonly ATTACH_STAGING_DISKS: "ATTACH_STAGING_DISKS";
  readonly AUTHENTICATE_WITH_SERVICE: "AUTHENTICATE_WITH_SERVICE";
  readonly BOOT_REPLICATION_SERVER: "BOOT_REPLICATION_SERVER";
  readonly COMPLETE_VOLUME_MAPPING: "COMPLETE_VOLUME_MAPPING";
  readonly CONFIGURE_REPLICATION_SOFTWARE: "CONFIGURE_REPLICATION_SOFTWARE";
  readonly CONNECT_AGENT_TO_REPLICATION_SERVER: "CONNECT_AGENT_TO_REPLICATION_SERVER";
  readonly CREATE_SECURITY_GROUP: "CREATE_SECURITY_GROUP";
  readonly CREATE_STAGING_DISKS: "CREATE_STAGING_DISKS";
  readonly DOWNLOAD_REPLICATION_SOFTWARE: "DOWNLOAD_REPLICATION_SOFTWARE";
  readonly DOWNLOAD_REPLICATION_SOFTWARE_TO_FAILBACK_CLIENT: "DOWNLOAD_REPLICATION_SOFTWARE_TO_FAILBACK_CLIENT";
  readonly ESTABLISH_AGENT_REPLICATOR_SOFTWARE_COMMUNICATION: "ESTABLISH_AGENT_REPLICATOR_SOFTWARE_COMMUNICATION";
  readonly ESTABLISH_RECOVERY_INSTANCE_COMMUNICATION: "ESTABLISH_RECOVERY_INSTANCE_COMMUNICATION";
  readonly LAUNCH_REPLICATION_SERVER: "LAUNCH_REPLICATION_SERVER";
  readonly LINK_FAILBACK_CLIENT_WITH_RECOVERY_INSTANCE: "LINK_FAILBACK_CLIENT_WITH_RECOVERY_INSTANCE";
  readonly PAIR_AGENT_WITH_REPLICATION_SOFTWARE: "PAIR_AGENT_WITH_REPLICATION_SOFTWARE";
  readonly PAIR_REPLICATION_SERVER_WITH_AGENT: "PAIR_REPLICATION_SERVER_WITH_AGENT";
  readonly START_DATA_TRANSFER: "START_DATA_TRANSFER";
  readonly WAIT: "WAIT";
};
export type RecoveryInstanceDataReplicationInitiationStepName =
  (typeof RecoveryInstanceDataReplicationInitiationStepName)[keyof typeof RecoveryInstanceDataReplicationInitiationStepName];
export declare const RecoveryInstanceDataReplicationInitiationStepStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly NOT_STARTED: "NOT_STARTED";
  readonly SKIPPED: "SKIPPED";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type RecoveryInstanceDataReplicationInitiationStepStatus =
  (typeof RecoveryInstanceDataReplicationInitiationStepStatus)[keyof typeof RecoveryInstanceDataReplicationInitiationStepStatus];
export interface RecoveryInstanceDataReplicationInitiationStep {
  name?: RecoveryInstanceDataReplicationInitiationStepName;
  status?: RecoveryInstanceDataReplicationInitiationStepStatus;
}
export interface RecoveryInstanceDataReplicationInitiation {
  startDateTime?: string;
  steps?: RecoveryInstanceDataReplicationInitiationStep[];
}
export declare const RecoveryInstanceDataReplicationState: {
  readonly BACKLOG: "BACKLOG";
  readonly CONTINUOUS: "CONTINUOUS";
  readonly CREATING_SNAPSHOT: "CREATING_SNAPSHOT";
  readonly DISCONNECTED: "DISCONNECTED";
  readonly INITIAL_SYNC: "INITIAL_SYNC";
  readonly INITIATING: "INITIATING";
  readonly NOT_STARTED: "NOT_STARTED";
  readonly PAUSED: "PAUSED";
  readonly REPLICATION_STATE_NOT_AVAILABLE: "REPLICATION_STATE_NOT_AVAILABLE";
  readonly RESCAN: "RESCAN";
  readonly STALLED: "STALLED";
  readonly STOPPED: "STOPPED";
};
export type RecoveryInstanceDataReplicationState =
  (typeof RecoveryInstanceDataReplicationState)[keyof typeof RecoveryInstanceDataReplicationState];
export interface RecoveryInstanceDataReplicationInfoReplicatedDisk {
  deviceName?: string;
  totalStorageBytes?: number;
  replicatedStorageBytes?: number;
  rescannedStorageBytes?: number;
  backloggedStorageBytes?: number;
}
export interface RecoveryInstanceDataReplicationInfo {
  lagDuration?: string;
  etaDateTime?: string;
  replicatedDisks?: RecoveryInstanceDataReplicationInfoReplicatedDisk[];
  dataReplicationState?: RecoveryInstanceDataReplicationState;
  dataReplicationInitiation?: RecoveryInstanceDataReplicationInitiation;
  dataReplicationError?: RecoveryInstanceDataReplicationError;
  stagingAvailabilityZone?: string;
  stagingOutpostArn?: string;
}
export declare const EC2InstanceState: {
  readonly NOT_FOUND: "NOT_FOUND";
  readonly PENDING: "PENDING";
  readonly RUNNING: "RUNNING";
  readonly SHUTTING_DOWN: "SHUTTING-DOWN";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
  readonly TERMINATED: "TERMINATED";
};
export type EC2InstanceState =
  (typeof EC2InstanceState)[keyof typeof EC2InstanceState];
export declare const FailbackLaunchType: {
  readonly DRILL: "DRILL";
  readonly RECOVERY: "RECOVERY";
};
export type FailbackLaunchType =
  (typeof FailbackLaunchType)[keyof typeof FailbackLaunchType];
export declare const FailbackState: {
  readonly FAILBACK_COMPLETED: "FAILBACK_COMPLETED";
  readonly FAILBACK_ERROR: "FAILBACK_ERROR";
  readonly FAILBACK_IN_PROGRESS: "FAILBACK_IN_PROGRESS";
  readonly FAILBACK_LAUNCH_STATE_NOT_AVAILABLE: "FAILBACK_LAUNCH_STATE_NOT_AVAILABLE";
  readonly FAILBACK_NOT_READY_FOR_LAUNCH: "FAILBACK_NOT_READY_FOR_LAUNCH";
  readonly FAILBACK_NOT_STARTED: "FAILBACK_NOT_STARTED";
  readonly FAILBACK_READY_FOR_LAUNCH: "FAILBACK_READY_FOR_LAUNCH";
};
export type FailbackState = (typeof FailbackState)[keyof typeof FailbackState];
export interface RecoveryInstanceFailback {
  failbackClientID?: string;
  failbackJobID?: string;
  failbackInitiationTime?: string;
  state?: FailbackState;
  agentLastSeenByServiceDateTime?: string;
  failbackClientLastSeenByServiceDateTime?: string;
  failbackToOriginalServer?: boolean;
  firstByteDateTime?: string;
  elapsedReplicationDuration?: string;
  failbackLaunchType?: FailbackLaunchType;
}
export declare const OriginEnvironment: {
  readonly AWS: "AWS";
  readonly ON_PREMISES: "ON_PREMISES";
};
export type OriginEnvironment =
  (typeof OriginEnvironment)[keyof typeof OriginEnvironment];
export interface RecoveryInstanceDisk {
  internalDeviceName?: string;
  bytes?: number;
  ebsVolumeID?: string;
}
export interface RecoveryInstanceProperties {
  lastUpdatedDateTime?: string;
  identificationHints?: IdentificationHints;
  networkInterfaces?: NetworkInterface[];
  disks?: RecoveryInstanceDisk[];
  cpus?: CPU[];
  ramBytes?: number;
  os?: OS;
}
export interface RecoveryInstance {
  ec2InstanceID?: string;
  ec2InstanceState?: EC2InstanceState;
  jobID?: string;
  recoveryInstanceID?: string;
  sourceServerID?: string;
  arn?: string;
  tags?: Record<string, string>;
  failback?: RecoveryInstanceFailback;
  dataReplicationInfo?: RecoveryInstanceDataReplicationInfo;
  recoveryInstanceProperties?: RecoveryInstanceProperties;
  pointInTimeSnapshotDateTime?: string;
  isDrill?: boolean;
  originEnvironment?: OriginEnvironment;
  originAvailabilityZone?: string;
  agentVersion?: string;
  sourceOutpostArn?: string;
}
export interface DescribeRecoveryInstancesResponse {
  nextToken?: string;
  items?: RecoveryInstance[];
}
export interface DescribeRecoverySnapshotsRequestFilters {
  fromDateTime?: string;
  toDateTime?: string;
}
export declare const RecoverySnapshotsOrder: {
  readonly ASC: "ASC";
  readonly DESC: "DESC";
};
export type RecoverySnapshotsOrder =
  (typeof RecoverySnapshotsOrder)[keyof typeof RecoverySnapshotsOrder];
export interface DescribeRecoverySnapshotsRequest {
  sourceServerID: string | undefined;
  filters?: DescribeRecoverySnapshotsRequestFilters;
  order?: RecoverySnapshotsOrder;
  maxResults?: number;
  nextToken?: string;
}
export interface RecoverySnapshot {
  snapshotID: string | undefined;
  sourceServerID: string | undefined;
  expectedTimestamp: string | undefined;
  timestamp?: string;
  ebsSnapshots?: string[];
}
export interface DescribeRecoverySnapshotsResponse {
  items?: RecoverySnapshot[];
  nextToken?: string;
}
export interface DescribeReplicationConfigurationTemplatesRequest {
  replicationConfigurationTemplateIDs?: string[];
  maxResults?: number;
  nextToken?: string;
}
export interface DescribeReplicationConfigurationTemplatesResponse {
  items?: ReplicationConfigurationTemplate[];
  nextToken?: string;
}
export interface DescribeSourceNetworksRequestFilters {
  sourceNetworkIDs?: string[];
  originAccountID?: string;
  originRegion?: string;
}
export interface DescribeSourceNetworksRequest {
  filters?: DescribeSourceNetworksRequestFilters;
  maxResults?: number;
  nextToken?: string;
}
export declare const RecoveryResult: {
  readonly ASSOCIATE_FAIL: "ASSOCIATE_FAIL";
  readonly ASSOCIATE_SUCCESS: "ASSOCIATE_SUCCESS";
  readonly FAIL: "FAIL";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly NOT_STARTED: "NOT_STARTED";
  readonly PARTIAL_SUCCESS: "PARTIAL_SUCCESS";
  readonly SUCCESS: "SUCCESS";
};
export type RecoveryResult =
  (typeof RecoveryResult)[keyof typeof RecoveryResult];
export interface RecoveryLifeCycle {
  apiCallDateTime?: Date;
  jobID?: string;
  lastRecoveryResult?: RecoveryResult;
}
export declare const ReplicationStatus: {
  readonly ERROR: "ERROR";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly PROTECTED: "PROTECTED";
  readonly STOPPED: "STOPPED";
};
export type ReplicationStatus =
  (typeof ReplicationStatus)[keyof typeof ReplicationStatus];
export interface SourceNetwork {
  sourceNetworkID?: string;
  sourceVpcID?: string;
  arn?: string;
  tags?: Record<string, string>;
  replicationStatus?: ReplicationStatus;
  replicationStatusDetails?: string;
  cfnStackName?: string;
  sourceRegion?: string;
  sourceAccountID?: string;
  lastRecovery?: RecoveryLifeCycle;
  launchedVpcID?: string;
}
export interface DescribeSourceNetworksResponse {
  items?: SourceNetwork[];
  nextToken?: string;
}
export interface DescribeSourceServersRequestFilters {
  sourceServerIDs?: string[];
  hardwareId?: string;
  stagingAccountIDs?: string[];
}
export interface DescribeSourceServersRequest {
  filters?: DescribeSourceServersRequestFilters;
  maxResults?: number;
  nextToken?: string;
}
export interface DescribeSourceServersResponse {
  items?: SourceServer[];
  nextToken?: string;
}
export interface DisconnectRecoveryInstanceRequest {
  recoveryInstanceID: string | undefined;
}
export interface DisconnectSourceServerRequest {
  sourceServerID: string | undefined;
}
export interface InitializeServiceRequest {}
export interface InitializeServiceResponse {}
export interface UpdateLaunchConfigurationTemplateRequest {
  launchConfigurationTemplateID: string | undefined;
  launchDisposition?: LaunchDisposition;
  targetInstanceTypeRightSizingMethod?: TargetInstanceTypeRightSizingMethod;
  copyPrivateIp?: boolean;
  copyTags?: boolean;
  licensing?: Licensing;
  exportBucketArn?: string;
  postLaunchEnabled?: boolean;
  launchIntoSourceInstance?: boolean;
}
export interface UpdateLaunchConfigurationTemplateResponse {
  launchConfigurationTemplate?: LaunchConfigurationTemplate;
}
export interface ListExtensibleSourceServersRequest {
  stagingAccountID: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface StagingSourceServer {
  hostname?: string;
  arn?: string;
  tags?: Record<string, string>;
}
export interface ListExtensibleSourceServersResponse {
  items?: StagingSourceServer[];
  nextToken?: string;
}
export interface LaunchActionsRequestFilters {
  actionIds?: string[];
}
export interface ListLaunchActionsRequest {
  resourceId: string | undefined;
  filters?: LaunchActionsRequestFilters;
  maxResults?: number;
  nextToken?: string;
}
export interface ListLaunchActionsResponse {
  items?: LaunchAction[];
  nextToken?: string;
}
export interface ListStagingAccountsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface ListStagingAccountsResponse {
  accounts?: Account[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface PutLaunchActionRequest {
  resourceId: string | undefined;
  actionCode: string | undefined;
  order: number | undefined;
  actionId: string | undefined;
  optional: boolean | undefined;
  active: boolean | undefined;
  name: string | undefined;
  actionVersion: string | undefined;
  category: LaunchActionCategory | undefined;
  parameters?: Record<string, LaunchActionParameter>;
  description: string | undefined;
}
export interface PutLaunchActionResponse {
  resourceId?: string;
  actionId?: string;
  actionCode?: string;
  type?: LaunchActionType;
  name?: string;
  active?: boolean;
  order?: number;
  actionVersion?: string;
  optional?: boolean;
  parameters?: Record<string, LaunchActionParameter>;
  description?: string;
  category?: LaunchActionCategory;
}
export interface GetFailbackReplicationConfigurationRequest {
  recoveryInstanceID: string | undefined;
}
export interface GetFailbackReplicationConfigurationResponse {
  recoveryInstanceID: string | undefined;
  name?: string;
  bandwidthThrottling?: number;
  usePrivateIP?: boolean;
}
export interface ReverseReplicationRequest {
  recoveryInstanceID: string | undefined;
}
export interface ReverseReplicationResponse {
  reversedDirectionSourceServerArn?: string;
}
export interface StartFailbackLaunchRequest {
  recoveryInstanceIDs: string[] | undefined;
  tags?: Record<string, string>;
}
export interface StartFailbackLaunchResponse {
  job?: Job;
}
export interface StopFailbackRequest {
  recoveryInstanceID: string | undefined;
}
export interface TerminateRecoveryInstancesRequest {
  recoveryInstanceIDs: string[] | undefined;
}
export interface TerminateRecoveryInstancesResponse {
  job?: Job;
}
export interface UpdateFailbackReplicationConfigurationRequest {
  recoveryInstanceID: string | undefined;
  name?: string;
  bandwidthThrottling?: number;
  usePrivateIP?: boolean;
}
export interface UpdateReplicationConfigurationTemplateRequest {
  replicationConfigurationTemplateID: string | undefined;
  arn?: string;
  stagingAreaSubnetId?: string;
  associateDefaultSecurityGroup?: boolean;
  replicationServersSecurityGroupsIDs?: string[];
  replicationServerInstanceType?: string;
  useDedicatedReplicationServer?: boolean;
  defaultLargeStagingDiskType?: ReplicationConfigurationDefaultLargeStagingDiskType;
  ebsEncryption?: ReplicationConfigurationEbsEncryption;
  ebsEncryptionKeyArn?: string;
  bandwidthThrottling?: number;
  dataPlaneRouting?: ReplicationConfigurationDataPlaneRouting;
  createPublicIP?: boolean;
  stagingAreaTags?: Record<string, string>;
  pitPolicy?: PITPolicyRule[];
  autoReplicateNewDisks?: boolean;
}
export interface ExportSourceNetworkCfnTemplateRequest {
  sourceNetworkID: string | undefined;
}
export interface ExportSourceNetworkCfnTemplateResponse {
  s3DestinationUrl?: string;
}
export interface StartSourceNetworkRecoveryRequestNetworkEntry {
  sourceNetworkID: string | undefined;
  cfnStackName?: string;
}
export interface StartSourceNetworkRecoveryRequest {
  sourceNetworks: StartSourceNetworkRecoveryRequestNetworkEntry[] | undefined;
  deployAsNew?: boolean;
  tags?: Record<string, string>;
}
export interface StartSourceNetworkRecoveryResponse {
  job?: Job;
}
export interface StartSourceNetworkReplicationRequest {
  sourceNetworkID: string | undefined;
}
export interface StartSourceNetworkReplicationResponse {
  sourceNetwork?: SourceNetwork;
}
export interface StopSourceNetworkReplicationRequest {
  sourceNetworkID: string | undefined;
}
export interface StopSourceNetworkReplicationResponse {
  sourceNetwork?: SourceNetwork;
}
export interface GetLaunchConfigurationRequest {
  sourceServerID: string | undefined;
}
export interface LaunchIntoInstanceProperties {
  launchIntoEC2InstanceID?: string;
}
export interface LaunchConfiguration {
  sourceServerID?: string;
  name?: string;
  ec2LaunchTemplateID?: string;
  launchDisposition?: LaunchDisposition;
  targetInstanceTypeRightSizingMethod?: TargetInstanceTypeRightSizingMethod;
  copyPrivateIp?: boolean;
  copyTags?: boolean;
  licensing?: Licensing;
  postLaunchEnabled?: boolean;
  launchIntoInstanceProperties?: LaunchIntoInstanceProperties;
}
export interface GetReplicationConfigurationRequest {
  sourceServerID: string | undefined;
}
export declare const ReplicationConfigurationReplicatedDiskStagingDiskType: {
  readonly AUTO: "AUTO";
  readonly GP2: "GP2";
  readonly GP3: "GP3";
  readonly IO1: "IO1";
  readonly SC1: "SC1";
  readonly ST1: "ST1";
  readonly STANDARD: "STANDARD";
};
export type ReplicationConfigurationReplicatedDiskStagingDiskType =
  (typeof ReplicationConfigurationReplicatedDiskStagingDiskType)[keyof typeof ReplicationConfigurationReplicatedDiskStagingDiskType];
export interface ReplicationConfigurationReplicatedDisk {
  deviceName?: string;
  isBootDisk?: boolean;
  stagingDiskType?: ReplicationConfigurationReplicatedDiskStagingDiskType;
  iops?: number;
  throughput?: number;
  optimizedStagingDiskType?: ReplicationConfigurationReplicatedDiskStagingDiskType;
}
export interface ReplicationConfiguration {
  sourceServerID?: string;
  name?: string;
  stagingAreaSubnetId?: string;
  associateDefaultSecurityGroup?: boolean;
  replicationServersSecurityGroupsIDs?: string[];
  replicationServerInstanceType?: string;
  useDedicatedReplicationServer?: boolean;
  defaultLargeStagingDiskType?: ReplicationConfigurationDefaultLargeStagingDiskType;
  replicatedDisks?: ReplicationConfigurationReplicatedDisk[];
  ebsEncryption?: ReplicationConfigurationEbsEncryption;
  ebsEncryptionKeyArn?: string;
  bandwidthThrottling?: number;
  dataPlaneRouting?: ReplicationConfigurationDataPlaneRouting;
  createPublicIP?: boolean;
  stagingAreaTags?: Record<string, string>;
  pitPolicy?: PITPolicyRule[];
  autoReplicateNewDisks?: boolean;
}
export interface RetryDataReplicationRequest {
  sourceServerID: string | undefined;
}
export interface StartRecoveryRequestSourceServer {
  sourceServerID: string | undefined;
  recoverySnapshotID?: string;
}
export interface StartRecoveryRequest {
  sourceServers: StartRecoveryRequestSourceServer[] | undefined;
  isDrill?: boolean;
  tags?: Record<string, string>;
}
export interface StartRecoveryResponse {
  job?: Job;
}
export interface StartReplicationRequest {
  sourceServerID: string | undefined;
}
export interface StartReplicationResponse {
  sourceServer?: SourceServer;
}
export interface StopReplicationRequest {
  sourceServerID: string | undefined;
}
export interface StopReplicationResponse {
  sourceServer?: SourceServer;
}
export interface UpdateLaunchConfigurationRequest {
  sourceServerID: string | undefined;
  name?: string;
  launchDisposition?: LaunchDisposition;
  targetInstanceTypeRightSizingMethod?: TargetInstanceTypeRightSizingMethod;
  copyPrivateIp?: boolean;
  copyTags?: boolean;
  licensing?: Licensing;
  postLaunchEnabled?: boolean;
  launchIntoInstanceProperties?: LaunchIntoInstanceProperties;
}
export interface UpdateReplicationConfigurationRequest {
  sourceServerID: string | undefined;
  name?: string;
  stagingAreaSubnetId?: string;
  associateDefaultSecurityGroup?: boolean;
  replicationServersSecurityGroupsIDs?: string[];
  replicationServerInstanceType?: string;
  useDedicatedReplicationServer?: boolean;
  defaultLargeStagingDiskType?: ReplicationConfigurationDefaultLargeStagingDiskType;
  replicatedDisks?: ReplicationConfigurationReplicatedDisk[];
  ebsEncryption?: ReplicationConfigurationEbsEncryption;
  ebsEncryptionKeyArn?: string;
  bandwidthThrottling?: number;
  dataPlaneRouting?: ReplicationConfigurationDataPlaneRouting;
  createPublicIP?: boolean;
  stagingAreaTags?: Record<string, string>;
  pitPolicy?: PITPolicyRule[];
  autoReplicateNewDisks?: boolean;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export declare const AssociateSourceNetworkStackRequestFilterSensitiveLog: (
  obj: AssociateSourceNetworkStackRequest
) => any;
export declare const JobFilterSensitiveLog: (obj: Job) => any;
export declare const AssociateSourceNetworkStackResponseFilterSensitiveLog: (
  obj: AssociateSourceNetworkStackResponse
) => any;
export declare const CreateExtendedSourceServerRequestFilterSensitiveLog: (
  obj: CreateExtendedSourceServerRequest
) => any;
export declare const SourceServerFilterSensitiveLog: (obj: SourceServer) => any;
export declare const CreateExtendedSourceServerResponseFilterSensitiveLog: (
  obj: CreateExtendedSourceServerResponse
) => any;
export declare const CreateLaunchConfigurationTemplateRequestFilterSensitiveLog: (
  obj: CreateLaunchConfigurationTemplateRequest
) => any;
export declare const LaunchConfigurationTemplateFilterSensitiveLog: (
  obj: LaunchConfigurationTemplate
) => any;
export declare const CreateLaunchConfigurationTemplateResponseFilterSensitiveLog: (
  obj: CreateLaunchConfigurationTemplateResponse
) => any;
export declare const CreateReplicationConfigurationTemplateRequestFilterSensitiveLog: (
  obj: CreateReplicationConfigurationTemplateRequest
) => any;
export declare const ReplicationConfigurationTemplateFilterSensitiveLog: (
  obj: ReplicationConfigurationTemplate
) => any;
export declare const CreateSourceNetworkRequestFilterSensitiveLog: (
  obj: CreateSourceNetworkRequest
) => any;
export declare const DescribeJobsResponseFilterSensitiveLog: (
  obj: DescribeJobsResponse
) => any;
export declare const DescribeLaunchConfigurationTemplatesResponseFilterSensitiveLog: (
  obj: DescribeLaunchConfigurationTemplatesResponse
) => any;
export declare const RecoveryInstanceFilterSensitiveLog: (
  obj: RecoveryInstance
) => any;
export declare const DescribeRecoveryInstancesResponseFilterSensitiveLog: (
  obj: DescribeRecoveryInstancesResponse
) => any;
export declare const DescribeReplicationConfigurationTemplatesResponseFilterSensitiveLog: (
  obj: DescribeReplicationConfigurationTemplatesResponse
) => any;
export declare const SourceNetworkFilterSensitiveLog: (
  obj: SourceNetwork
) => any;
export declare const DescribeSourceNetworksResponseFilterSensitiveLog: (
  obj: DescribeSourceNetworksResponse
) => any;
export declare const DescribeSourceServersResponseFilterSensitiveLog: (
  obj: DescribeSourceServersResponse
) => any;
export declare const UpdateLaunchConfigurationTemplateResponseFilterSensitiveLog: (
  obj: UpdateLaunchConfigurationTemplateResponse
) => any;
export declare const StagingSourceServerFilterSensitiveLog: (
  obj: StagingSourceServer
) => any;
export declare const ListExtensibleSourceServersResponseFilterSensitiveLog: (
  obj: ListExtensibleSourceServersResponse
) => any;
export declare const ListTagsForResourceResponseFilterSensitiveLog: (
  obj: ListTagsForResourceResponse
) => any;
export declare const StartFailbackLaunchRequestFilterSensitiveLog: (
  obj: StartFailbackLaunchRequest
) => any;
export declare const StartFailbackLaunchResponseFilterSensitiveLog: (
  obj: StartFailbackLaunchResponse
) => any;
export declare const TerminateRecoveryInstancesResponseFilterSensitiveLog: (
  obj: TerminateRecoveryInstancesResponse
) => any;
export declare const UpdateReplicationConfigurationTemplateRequestFilterSensitiveLog: (
  obj: UpdateReplicationConfigurationTemplateRequest
) => any;
export declare const StartSourceNetworkRecoveryRequestNetworkEntryFilterSensitiveLog: (
  obj: StartSourceNetworkRecoveryRequestNetworkEntry
) => any;
export declare const StartSourceNetworkRecoveryRequestFilterSensitiveLog: (
  obj: StartSourceNetworkRecoveryRequest
) => any;
export declare const StartSourceNetworkRecoveryResponseFilterSensitiveLog: (
  obj: StartSourceNetworkRecoveryResponse
) => any;
export declare const StartSourceNetworkReplicationResponseFilterSensitiveLog: (
  obj: StartSourceNetworkReplicationResponse
) => any;
export declare const StopSourceNetworkReplicationResponseFilterSensitiveLog: (
  obj: StopSourceNetworkReplicationResponse
) => any;
export declare const ReplicationConfigurationFilterSensitiveLog: (
  obj: ReplicationConfiguration
) => any;
export declare const StartRecoveryRequestFilterSensitiveLog: (
  obj: StartRecoveryRequest
) => any;
export declare const StartRecoveryResponseFilterSensitiveLog: (
  obj: StartRecoveryResponse
) => any;
export declare const StartReplicationResponseFilterSensitiveLog: (
  obj: StartReplicationResponse
) => any;
export declare const StopReplicationResponseFilterSensitiveLog: (
  obj: StopReplicationResponse
) => any;
export declare const UpdateReplicationConfigurationRequestFilterSensitiveLog: (
  obj: UpdateReplicationConfigurationRequest
) => any;
export declare const TagResourceRequestFilterSensitiveLog: (
  obj: TagResourceRequest
) => any;
export declare const UntagResourceRequestFilterSensitiveLog: (
  obj: UntagResourceRequest
) => any;
