import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { DrsServiceException as __BaseException } from "./DrsServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.code = opts.code;
    }
}
export const InitiatedBy = {
    ASSOCIATE_NETWORK_RECOVERY: "ASSOCIATE_NETWORK_RECOVERY",
    CREATE_NETWORK_RECOVERY: "CREATE_NETWORK_RECOVERY",
    DIAGNOSTIC: "DIAGNOSTIC",
    FAILBACK: "FAILBACK",
    START_DRILL: "START_DRILL",
    START_RECOVERY: "START_RECOVERY",
    TARGET_ACCOUNT: "TARGET_ACCOUNT",
    TERMINATE_RECOVERY_INSTANCES: "TERMINATE_RECOVERY_INSTANCES",
    UPDATE_NETWORK_RECOVERY: "UPDATE_NETWORK_RECOVERY",
};
export const LaunchStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    LAUNCHED: "LAUNCHED",
    PENDING: "PENDING",
    TERMINATED: "TERMINATED",
};
export var ParticipatingResourceID;
(function (ParticipatingResourceID) {
    ParticipatingResourceID.visit = (value, visitor) => {
        if (value.sourceNetworkID !== undefined)
            return visitor.sourceNetworkID(value.sourceNetworkID);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ParticipatingResourceID || (ParticipatingResourceID = {}));
export const LaunchActionCategory = {
    CONFIGURATION: "CONFIGURATION",
    MONITORING: "MONITORING",
    OTHER: "OTHER",
    SECURITY: "SECURITY",
    VALIDATION: "VALIDATION",
};
export const LaunchActionParameterType = {
    DYNAMIC: "DYNAMIC",
    SSM_STORE: "SSM_STORE",
};
export const LaunchActionType = {
    SSM_AUTOMATION: "SSM_AUTOMATION",
    SSM_COMMAND: "SSM_COMMAND",
};
export const LaunchActionRunStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
export const JobStatus = {
    COMPLETED: "COMPLETED",
    PENDING: "PENDING",
    STARTED: "STARTED",
};
export const JobType = {
    CREATE_CONVERTED_SNAPSHOT: "CREATE_CONVERTED_SNAPSHOT",
    LAUNCH: "LAUNCH",
    TERMINATE: "TERMINATE",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.code = opts.code;
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.code = opts.code;
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.code = opts.code;
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
        this.serviceCode = opts.serviceCode;
        this.quotaCode = opts.quotaCode;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.serviceCode = opts.serviceCode;
        this.quotaCode = opts.quotaCode;
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export class UninitializedAccountException extends __BaseException {
    constructor(opts) {
        super({
            name: "UninitializedAccountException",
            $fault: "client",
            ...opts,
        });
        this.name = "UninitializedAccountException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UninitializedAccountException.prototype);
        this.code = opts.code;
    }
}
export const ValidationExceptionReason = {
    CANNOT_PARSE: "cannotParse",
    FIELD_VALIDATION_FAILED: "fieldValidationFailed",
    OTHER: "other",
    UNKNOWN_OPERATION: "unknownOperation",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.code = opts.code;
        this.reason = opts.reason;
        this.fieldList = opts.fieldList;
    }
}
export const ProductCodeMode = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const DataReplicationErrorString = {
    AGENT_NOT_SEEN: "AGENT_NOT_SEEN",
    FAILED_TO_ATTACH_STAGING_DISKS: "FAILED_TO_ATTACH_STAGING_DISKS",
    FAILED_TO_AUTHENTICATE_WITH_SERVICE: "FAILED_TO_AUTHENTICATE_WITH_SERVICE",
    FAILED_TO_BOOT_REPLICATION_SERVER: "FAILED_TO_BOOT_REPLICATION_SERVER",
    FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER: "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER",
    FAILED_TO_CREATE_SECURITY_GROUP: "FAILED_TO_CREATE_SECURITY_GROUP",
    FAILED_TO_CREATE_STAGING_DISKS: "FAILED_TO_CREATE_STAGING_DISKS",
    FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE: "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE",
    FAILED_TO_LAUNCH_REPLICATION_SERVER: "FAILED_TO_LAUNCH_REPLICATION_SERVER",
    FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT: "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT",
    FAILED_TO_START_DATA_TRANSFER: "FAILED_TO_START_DATA_TRANSFER",
    NOT_CONVERGING: "NOT_CONVERGING",
    SNAPSHOTS_FAILURE: "SNAPSHOTS_FAILURE",
    UNSTABLE_NETWORK: "UNSTABLE_NETWORK",
};
export const DataReplicationInitiationStepName = {
    ATTACH_STAGING_DISKS: "ATTACH_STAGING_DISKS",
    AUTHENTICATE_WITH_SERVICE: "AUTHENTICATE_WITH_SERVICE",
    BOOT_REPLICATION_SERVER: "BOOT_REPLICATION_SERVER",
    CONNECT_AGENT_TO_REPLICATION_SERVER: "CONNECT_AGENT_TO_REPLICATION_SERVER",
    CREATE_SECURITY_GROUP: "CREATE_SECURITY_GROUP",
    CREATE_STAGING_DISKS: "CREATE_STAGING_DISKS",
    DOWNLOAD_REPLICATION_SOFTWARE: "DOWNLOAD_REPLICATION_SOFTWARE",
    LAUNCH_REPLICATION_SERVER: "LAUNCH_REPLICATION_SERVER",
    PAIR_REPLICATION_SERVER_WITH_AGENT: "PAIR_REPLICATION_SERVER_WITH_AGENT",
    START_DATA_TRANSFER: "START_DATA_TRANSFER",
    WAIT: "WAIT",
};
export const DataReplicationInitiationStepStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_STARTED: "NOT_STARTED",
    SKIPPED: "SKIPPED",
    SUCCEEDED: "SUCCEEDED",
};
export const DataReplicationState = {
    BACKLOG: "BACKLOG",
    CONTINUOUS: "CONTINUOUS",
    CREATING_SNAPSHOT: "CREATING_SNAPSHOT",
    DISCONNECTED: "DISCONNECTED",
    INITIAL_SYNC: "INITIAL_SYNC",
    INITIATING: "INITIATING",
    PAUSED: "PAUSED",
    RESCAN: "RESCAN",
    STALLED: "STALLED",
    STOPPED: "STOPPED",
};
export const VolumeStatus = {
    CONTAINS_MARKETPLACE_PRODUCT_CODES: "CONTAINS_MARKETPLACE_PRODUCT_CODES",
    MISSING_VOLUME_ATTRIBUTES: "MISSING_VOLUME_ATTRIBUTES",
    MISSING_VOLUME_ATTRIBUTES_AND_PRECHECK_UNAVAILABLE: "MISSING_VOLUME_ATTRIBUTES_AND_PRECHECK_UNAVAILABLE",
    PENDING: "PENDING",
    REGULAR: "REGULAR",
};
export const LastLaunchResult = {
    FAILED: "FAILED",
    NOT_STARTED: "NOT_STARTED",
    PENDING: "PENDING",
    SUCCEEDED: "SUCCEEDED",
};
export const LastLaunchType = {
    DRILL: "DRILL",
    RECOVERY: "RECOVERY",
};
export const ReplicationDirection = {
    FAILBACK: "FAILBACK",
    FAILOVER: "FAILOVER",
};
export const ExtensionStatus = {
    EXTENDED: "EXTENDED",
    EXTENSION_ERROR: "EXTENSION_ERROR",
    NOT_EXTENDED: "NOT_EXTENDED",
};
export const LaunchDisposition = {
    STARTED: "STARTED",
    STOPPED: "STOPPED",
};
export const TargetInstanceTypeRightSizingMethod = {
    BASIC: "BASIC",
    IN_AWS: "IN_AWS",
    NONE: "NONE",
};
export const ReplicationConfigurationDataPlaneRouting = {
    PRIVATE_IP: "PRIVATE_IP",
    PUBLIC_IP: "PUBLIC_IP",
};
export const ReplicationConfigurationDefaultLargeStagingDiskType = {
    AUTO: "AUTO",
    GP2: "GP2",
    GP3: "GP3",
    ST1: "ST1",
};
export const ReplicationConfigurationEbsEncryption = {
    CUSTOM: "CUSTOM",
    DEFAULT: "DEFAULT",
    NONE: "NONE",
};
export const PITPolicyRuleUnits = {
    DAY: "DAY",
    HOUR: "HOUR",
    MINUTE: "MINUTE",
};
export const JobLogEvent = {
    CLEANUP_END: "CLEANUP_END",
    CLEANUP_FAIL: "CLEANUP_FAIL",
    CLEANUP_START: "CLEANUP_START",
    CONVERSION_END: "CONVERSION_END",
    CONVERSION_FAIL: "CONVERSION_FAIL",
    CONVERSION_START: "CONVERSION_START",
    DEPLOY_NETWORK_CONFIGURATION_END: "DEPLOY_NETWORK_CONFIGURATION_END",
    DEPLOY_NETWORK_CONFIGURATION_FAILED: "DEPLOY_NETWORK_CONFIGURATION_FAILED",
    DEPLOY_NETWORK_CONFIGURATION_START: "DEPLOY_NETWORK_CONFIGURATION_START",
    JOB_CANCEL: "JOB_CANCEL",
    JOB_END: "JOB_END",
    JOB_START: "JOB_START",
    LAUNCH_FAILED: "LAUNCH_FAILED",
    LAUNCH_START: "LAUNCH_START",
    NETWORK_RECOVERY_FAIL: "NETWORK_RECOVERY_FAIL",
    SERVER_SKIPPED: "SERVER_SKIPPED",
    SNAPSHOT_END: "SNAPSHOT_END",
    SNAPSHOT_FAIL: "SNAPSHOT_FAIL",
    SNAPSHOT_START: "SNAPSHOT_START",
    UPDATE_LAUNCH_TEMPLATE_END: "UPDATE_LAUNCH_TEMPLATE_END",
    UPDATE_LAUNCH_TEMPLATE_FAILED: "UPDATE_LAUNCH_TEMPLATE_FAILED",
    UPDATE_LAUNCH_TEMPLATE_START: "UPDATE_LAUNCH_TEMPLATE_START",
    UPDATE_NETWORK_CONFIGURATION_END: "UPDATE_NETWORK_CONFIGURATION_END",
    UPDATE_NETWORK_CONFIGURATION_FAILED: "UPDATE_NETWORK_CONFIGURATION_FAILED",
    UPDATE_NETWORK_CONFIGURATION_START: "UPDATE_NETWORK_CONFIGURATION_START",
    USING_PREVIOUS_SNAPSHOT: "USING_PREVIOUS_SNAPSHOT",
    USING_PREVIOUS_SNAPSHOT_FAILED: "USING_PREVIOUS_SNAPSHOT_FAILED",
};
export var EventResourceData;
(function (EventResourceData) {
    EventResourceData.visit = (value, visitor) => {
        if (value.sourceNetworkData !== undefined)
            return visitor.sourceNetworkData(value.sourceNetworkData);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(EventResourceData || (EventResourceData = {}));
export const FailbackReplicationError = {
    AGENT_NOT_SEEN: "AGENT_NOT_SEEN",
    FAILBACK_CLIENT_NOT_SEEN: "FAILBACK_CLIENT_NOT_SEEN",
    FAILED_GETTING_REPLICATION_STATE: "FAILED_GETTING_REPLICATION_STATE",
    FAILED_TO_ATTACH_STAGING_DISKS: "FAILED_TO_ATTACH_STAGING_DISKS",
    FAILED_TO_AUTHENTICATE_WITH_SERVICE: "FAILED_TO_AUTHENTICATE_WITH_SERVICE",
    FAILED_TO_BOOT_REPLICATION_SERVER: "FAILED_TO_BOOT_REPLICATION_SERVER",
    FAILED_TO_CONFIGURE_REPLICATION_SOFTWARE: "FAILED_TO_CONFIGURE_REPLICATION_SOFTWARE",
    FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER: "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER",
    FAILED_TO_CREATE_SECURITY_GROUP: "FAILED_TO_CREATE_SECURITY_GROUP",
    FAILED_TO_CREATE_STAGING_DISKS: "FAILED_TO_CREATE_STAGING_DISKS",
    FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE: "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE",
    FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE_TO_FAILBACK_CLIENT: "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE_TO_FAILBACK_CLIENT",
    FAILED_TO_ESTABLISH_AGENT_REPLICATOR_SOFTWARE_COMMUNICATION: "FAILED_TO_ESTABLISH_AGENT_REPLICATOR_SOFTWARE_COMMUNICATION",
    FAILED_TO_ESTABLISH_RECOVERY_INSTANCE_COMMUNICATION: "FAILED_TO_ESTABLISH_RECOVERY_INSTANCE_COMMUNICATION",
    FAILED_TO_LAUNCH_REPLICATION_SERVER: "FAILED_TO_LAUNCH_REPLICATION_SERVER",
    FAILED_TO_PAIR_AGENT_WITH_REPLICATION_SOFTWARE: "FAILED_TO_PAIR_AGENT_WITH_REPLICATION_SOFTWARE",
    FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT: "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT",
    FAILED_TO_START_DATA_TRANSFER: "FAILED_TO_START_DATA_TRANSFER",
    NOT_CONVERGING: "NOT_CONVERGING",
    SNAPSHOTS_FAILURE: "SNAPSHOTS_FAILURE",
    UNSTABLE_NETWORK: "UNSTABLE_NETWORK",
};
export const RecoveryInstanceDataReplicationInitiationStepName = {
    ATTACH_STAGING_DISKS: "ATTACH_STAGING_DISKS",
    AUTHENTICATE_WITH_SERVICE: "AUTHENTICATE_WITH_SERVICE",
    BOOT_REPLICATION_SERVER: "BOOT_REPLICATION_SERVER",
    COMPLETE_VOLUME_MAPPING: "COMPLETE_VOLUME_MAPPING",
    CONFIGURE_REPLICATION_SOFTWARE: "CONFIGURE_REPLICATION_SOFTWARE",
    CONNECT_AGENT_TO_REPLICATION_SERVER: "CONNECT_AGENT_TO_REPLICATION_SERVER",
    CREATE_SECURITY_GROUP: "CREATE_SECURITY_GROUP",
    CREATE_STAGING_DISKS: "CREATE_STAGING_DISKS",
    DOWNLOAD_REPLICATION_SOFTWARE: "DOWNLOAD_REPLICATION_SOFTWARE",
    DOWNLOAD_REPLICATION_SOFTWARE_TO_FAILBACK_CLIENT: "DOWNLOAD_REPLICATION_SOFTWARE_TO_FAILBACK_CLIENT",
    ESTABLISH_AGENT_REPLICATOR_SOFTWARE_COMMUNICATION: "ESTABLISH_AGENT_REPLICATOR_SOFTWARE_COMMUNICATION",
    ESTABLISH_RECOVERY_INSTANCE_COMMUNICATION: "ESTABLISH_RECOVERY_INSTANCE_COMMUNICATION",
    LAUNCH_REPLICATION_SERVER: "LAUNCH_REPLICATION_SERVER",
    LINK_FAILBACK_CLIENT_WITH_RECOVERY_INSTANCE: "LINK_FAILBACK_CLIENT_WITH_RECOVERY_INSTANCE",
    PAIR_AGENT_WITH_REPLICATION_SOFTWARE: "PAIR_AGENT_WITH_REPLICATION_SOFTWARE",
    PAIR_REPLICATION_SERVER_WITH_AGENT: "PAIR_REPLICATION_SERVER_WITH_AGENT",
    START_DATA_TRANSFER: "START_DATA_TRANSFER",
    WAIT: "WAIT",
};
export const RecoveryInstanceDataReplicationInitiationStepStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_STARTED: "NOT_STARTED",
    SKIPPED: "SKIPPED",
    SUCCEEDED: "SUCCEEDED",
};
export const RecoveryInstanceDataReplicationState = {
    BACKLOG: "BACKLOG",
    CONTINUOUS: "CONTINUOUS",
    CREATING_SNAPSHOT: "CREATING_SNAPSHOT",
    DISCONNECTED: "DISCONNECTED",
    INITIAL_SYNC: "INITIAL_SYNC",
    INITIATING: "INITIATING",
    NOT_STARTED: "NOT_STARTED",
    PAUSED: "PAUSED",
    REPLICATION_STATE_NOT_AVAILABLE: "REPLICATION_STATE_NOT_AVAILABLE",
    RESCAN: "RESCAN",
    STALLED: "STALLED",
    STOPPED: "STOPPED",
};
export const EC2InstanceState = {
    NOT_FOUND: "NOT_FOUND",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    SHUTTING_DOWN: "SHUTTING-DOWN",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    TERMINATED: "TERMINATED",
};
export const FailbackLaunchType = {
    DRILL: "DRILL",
    RECOVERY: "RECOVERY",
};
export const FailbackState = {
    FAILBACK_COMPLETED: "FAILBACK_COMPLETED",
    FAILBACK_ERROR: "FAILBACK_ERROR",
    FAILBACK_IN_PROGRESS: "FAILBACK_IN_PROGRESS",
    FAILBACK_LAUNCH_STATE_NOT_AVAILABLE: "FAILBACK_LAUNCH_STATE_NOT_AVAILABLE",
    FAILBACK_NOT_READY_FOR_LAUNCH: "FAILBACK_NOT_READY_FOR_LAUNCH",
    FAILBACK_NOT_STARTED: "FAILBACK_NOT_STARTED",
    FAILBACK_READY_FOR_LAUNCH: "FAILBACK_READY_FOR_LAUNCH",
};
export const OriginEnvironment = {
    AWS: "AWS",
    ON_PREMISES: "ON_PREMISES",
};
export const RecoverySnapshotsOrder = {
    ASC: "ASC",
    DESC: "DESC",
};
export const RecoveryResult = {
    ASSOCIATE_FAIL: "ASSOCIATE_FAIL",
    ASSOCIATE_SUCCESS: "ASSOCIATE_SUCCESS",
    FAIL: "FAIL",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_STARTED: "NOT_STARTED",
    PARTIAL_SUCCESS: "PARTIAL_SUCCESS",
    SUCCESS: "SUCCESS",
};
export const ReplicationStatus = {
    ERROR: "ERROR",
    IN_PROGRESS: "IN_PROGRESS",
    PROTECTED: "PROTECTED",
    STOPPED: "STOPPED",
};
export const ReplicationConfigurationReplicatedDiskStagingDiskType = {
    AUTO: "AUTO",
    GP2: "GP2",
    GP3: "GP3",
    IO1: "IO1",
    SC1: "SC1",
    ST1: "ST1",
    STANDARD: "STANDARD",
};
export const AssociateSourceNetworkStackRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.cfnStackName && { cfnStackName: SENSITIVE_STRING }),
});
export const JobFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
    ...(obj.participatingResources && { participatingResources: obj.participatingResources.map((item) => item) }),
});
export const AssociateSourceNetworkStackResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.job && { job: JobFilterSensitiveLog(obj.job) }),
});
export const CreateExtendedSourceServerRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const SourceServerFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const CreateExtendedSourceServerResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sourceServer && { sourceServer: SourceServerFilterSensitiveLog(obj.sourceServer) }),
});
export const CreateLaunchConfigurationTemplateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const LaunchConfigurationTemplateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const CreateLaunchConfigurationTemplateResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.launchConfigurationTemplate && {
        launchConfigurationTemplate: LaunchConfigurationTemplateFilterSensitiveLog(obj.launchConfigurationTemplate),
    }),
});
export const CreateReplicationConfigurationTemplateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.stagingAreaTags && { stagingAreaTags: SENSITIVE_STRING }),
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const ReplicationConfigurationTemplateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.stagingAreaTags && { stagingAreaTags: SENSITIVE_STRING }),
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const CreateSourceNetworkRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const DescribeJobsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => JobFilterSensitiveLog(item)) }),
});
export const DescribeLaunchConfigurationTemplatesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => LaunchConfigurationTemplateFilterSensitiveLog(item)) }),
});
export const RecoveryInstanceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const DescribeRecoveryInstancesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => RecoveryInstanceFilterSensitiveLog(item)) }),
});
export const DescribeReplicationConfigurationTemplatesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => ReplicationConfigurationTemplateFilterSensitiveLog(item)) }),
});
export const SourceNetworkFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
    ...(obj.replicationStatusDetails && { replicationStatusDetails: SENSITIVE_STRING }),
    ...(obj.cfnStackName && { cfnStackName: SENSITIVE_STRING }),
});
export const DescribeSourceNetworksResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => SourceNetworkFilterSensitiveLog(item)) }),
});
export const DescribeSourceServersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => SourceServerFilterSensitiveLog(item)) }),
});
export const UpdateLaunchConfigurationTemplateResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.launchConfigurationTemplate && {
        launchConfigurationTemplate: LaunchConfigurationTemplateFilterSensitiveLog(obj.launchConfigurationTemplate),
    }),
});
export const StagingSourceServerFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const ListExtensibleSourceServersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => StagingSourceServerFilterSensitiveLog(item)) }),
});
export const ListTagsForResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const StartFailbackLaunchRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const StartFailbackLaunchResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.job && { job: JobFilterSensitiveLog(obj.job) }),
});
export const TerminateRecoveryInstancesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.job && { job: JobFilterSensitiveLog(obj.job) }),
});
export const UpdateReplicationConfigurationTemplateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.stagingAreaTags && { stagingAreaTags: SENSITIVE_STRING }),
});
export const StartSourceNetworkRecoveryRequestNetworkEntryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.cfnStackName && { cfnStackName: SENSITIVE_STRING }),
});
export const StartSourceNetworkRecoveryRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sourceNetworks && {
        sourceNetworks: obj.sourceNetworks.map((item) => StartSourceNetworkRecoveryRequestNetworkEntryFilterSensitiveLog(item)),
    }),
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const StartSourceNetworkRecoveryResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.job && { job: JobFilterSensitiveLog(obj.job) }),
});
export const StartSourceNetworkReplicationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sourceNetwork && { sourceNetwork: SourceNetworkFilterSensitiveLog(obj.sourceNetwork) }),
});
export const StopSourceNetworkReplicationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sourceNetwork && { sourceNetwork: SourceNetworkFilterSensitiveLog(obj.sourceNetwork) }),
});
export const ReplicationConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.stagingAreaTags && { stagingAreaTags: SENSITIVE_STRING }),
});
export const StartRecoveryRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const StartRecoveryResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.job && { job: JobFilterSensitiveLog(obj.job) }),
});
export const StartReplicationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sourceServer && { sourceServer: SourceServerFilterSensitiveLog(obj.sourceServer) }),
});
export const StopReplicationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sourceServer && { sourceServer: SourceServerFilterSensitiveLog(obj.sourceServer) }),
});
export const UpdateReplicationConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.stagingAreaTags && { stagingAreaTags: SENSITIVE_STRING }),
});
export const TagResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const UntagResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tagKeys && { tagKeys: SENSITIVE_STRING }),
});
