import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { WorkSpacesWebServiceException as __BaseException } from "./WorkSpacesWebServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface AssociateBrowserSettingsRequest {
  portalArn: string | undefined;
  browserSettingsArn: string | undefined;
}
export interface AssociateBrowserSettingsResponse {
  portalArn: string | undefined;
  browserSettingsArn: string | undefined;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  resourceId?: string;
  resourceType?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  retryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  resourceId?: string;
  resourceType?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  serviceCode?: string;
  quotaCode?: string;
  retryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface ValidationExceptionField {
  name: string | undefined;
  message: string | undefined;
}
export declare const ValidationExceptionReason: {
  readonly CANNOT_PARSE: "cannotParse";
  readonly FIELD_VALIDATION_FAILED: "fieldValidationFailed";
  readonly OTHER: "other";
  readonly UNKNOWN_OPERATION: "unknownOperation";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  reason?: ValidationExceptionReason;
  fieldList?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface AssociateIpAccessSettingsRequest {
  portalArn: string | undefined;
  ipAccessSettingsArn: string | undefined;
}
export interface AssociateIpAccessSettingsResponse {
  portalArn: string | undefined;
  ipAccessSettingsArn: string | undefined;
}
export interface AssociateNetworkSettingsRequest {
  portalArn: string | undefined;
  networkSettingsArn: string | undefined;
}
export interface AssociateNetworkSettingsResponse {
  portalArn: string | undefined;
  networkSettingsArn: string | undefined;
}
export interface AssociateTrustStoreRequest {
  portalArn: string | undefined;
  trustStoreArn: string | undefined;
}
export interface AssociateTrustStoreResponse {
  portalArn: string | undefined;
  trustStoreArn: string | undefined;
}
export interface AssociateUserAccessLoggingSettingsRequest {
  portalArn: string | undefined;
  userAccessLoggingSettingsArn: string | undefined;
}
export interface AssociateUserAccessLoggingSettingsResponse {
  portalArn: string | undefined;
  userAccessLoggingSettingsArn: string | undefined;
}
export interface AssociateUserSettingsRequest {
  portalArn: string | undefined;
  userSettingsArn: string | undefined;
}
export interface AssociateUserSettingsResponse {
  portalArn: string | undefined;
  userSettingsArn: string | undefined;
}
export declare const AuthenticationType: {
  readonly IAM_IDENTITY_CENTER: "IAM_Identity_Center";
  readonly STANDARD: "Standard";
};
export type AuthenticationType =
  (typeof AuthenticationType)[keyof typeof AuthenticationType];
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateBrowserSettingsRequest {
  tags?: Tag[];
  customerManagedKey?: string;
  additionalEncryptionContext?: Record<string, string>;
  browserPolicy: string | undefined;
  clientToken?: string;
}
export interface CreateBrowserSettingsResponse {
  browserSettingsArn: string | undefined;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  resourceId?: string;
  resourceType?: string;
  serviceCode?: string;
  quotaCode?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface DeleteBrowserSettingsRequest {
  browserSettingsArn: string | undefined;
}
export interface DeleteBrowserSettingsResponse {}
export interface GetBrowserSettingsRequest {
  browserSettingsArn: string | undefined;
}
export interface BrowserSettings {
  browserSettingsArn: string | undefined;
  associatedPortalArns?: string[];
  browserPolicy?: string;
  customerManagedKey?: string;
  additionalEncryptionContext?: Record<string, string>;
}
export interface GetBrowserSettingsResponse {
  browserSettings?: BrowserSettings;
}
export interface ListBrowserSettingsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface BrowserSettingsSummary {
  browserSettingsArn: string | undefined;
}
export interface ListBrowserSettingsResponse {
  browserSettings?: BrowserSettingsSummary[];
  nextToken?: string;
}
export interface UpdateBrowserSettingsRequest {
  browserSettingsArn: string | undefined;
  browserPolicy?: string;
  clientToken?: string;
}
export interface UpdateBrowserSettingsResponse {
  browserSettings: BrowserSettings | undefined;
}
export declare const IdentityProviderType: {
  readonly Facebook: "Facebook";
  readonly Google: "Google";
  readonly LoginWithAmazon: "LoginWithAmazon";
  readonly OIDC: "OIDC";
  readonly SAML: "SAML";
  readonly SignInWithApple: "SignInWithApple";
};
export type IdentityProviderType =
  (typeof IdentityProviderType)[keyof typeof IdentityProviderType];
export interface CreateIdentityProviderRequest {
  portalArn: string | undefined;
  identityProviderName: string | undefined;
  identityProviderType: IdentityProviderType | undefined;
  identityProviderDetails: Record<string, string> | undefined;
  clientToken?: string;
}
export interface CreateIdentityProviderResponse {
  identityProviderArn: string | undefined;
}
export interface DeleteIdentityProviderRequest {
  identityProviderArn: string | undefined;
}
export interface DeleteIdentityProviderResponse {}
export interface GetIdentityProviderRequest {
  identityProviderArn: string | undefined;
}
export interface IdentityProvider {
  identityProviderArn: string | undefined;
  identityProviderName?: string;
  identityProviderType?: IdentityProviderType;
  identityProviderDetails?: Record<string, string>;
}
export interface GetIdentityProviderResponse {
  identityProvider?: IdentityProvider;
}
export interface ListIdentityProvidersRequest {
  nextToken?: string;
  maxResults?: number;
  portalArn: string | undefined;
}
export interface IdentityProviderSummary {
  identityProviderArn: string | undefined;
  identityProviderName?: string;
  identityProviderType?: IdentityProviderType;
}
export interface ListIdentityProvidersResponse {
  nextToken?: string;
  identityProviders?: IdentityProviderSummary[];
}
export interface UpdateIdentityProviderRequest {
  identityProviderArn: string | undefined;
  identityProviderName?: string;
  identityProviderType?: IdentityProviderType;
  identityProviderDetails?: Record<string, string>;
  clientToken?: string;
}
export interface UpdateIdentityProviderResponse {
  identityProvider: IdentityProvider | undefined;
}
export interface IpRule {
  ipRange: string | undefined;
  description?: string;
}
export interface CreateIpAccessSettingsRequest {
  displayName?: string;
  description?: string;
  tags?: Tag[];
  customerManagedKey?: string;
  additionalEncryptionContext?: Record<string, string>;
  ipRules: IpRule[] | undefined;
  clientToken?: string;
}
export interface CreateIpAccessSettingsResponse {
  ipAccessSettingsArn: string | undefined;
}
export interface DeleteIpAccessSettingsRequest {
  ipAccessSettingsArn: string | undefined;
}
export interface DeleteIpAccessSettingsResponse {}
export interface GetIpAccessSettingsRequest {
  ipAccessSettingsArn: string | undefined;
}
export interface IpAccessSettings {
  ipAccessSettingsArn: string | undefined;
  associatedPortalArns?: string[];
  ipRules?: IpRule[];
  displayName?: string;
  description?: string;
  creationDate?: Date;
  customerManagedKey?: string;
  additionalEncryptionContext?: Record<string, string>;
}
export interface GetIpAccessSettingsResponse {
  ipAccessSettings?: IpAccessSettings;
}
export interface ListIpAccessSettingsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface IpAccessSettingsSummary {
  ipAccessSettingsArn: string | undefined;
  displayName?: string;
  description?: string;
  creationDate?: Date;
}
export interface ListIpAccessSettingsResponse {
  ipAccessSettings?: IpAccessSettingsSummary[];
  nextToken?: string;
}
export interface UpdateIpAccessSettingsRequest {
  ipAccessSettingsArn: string | undefined;
  displayName?: string;
  description?: string;
  ipRules?: IpRule[];
  clientToken?: string;
}
export interface UpdateIpAccessSettingsResponse {
  ipAccessSettings: IpAccessSettings | undefined;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Tag[];
}
export interface CreateNetworkSettingsRequest {
  vpcId: string | undefined;
  subnetIds: string[] | undefined;
  securityGroupIds: string[] | undefined;
  tags?: Tag[];
  clientToken?: string;
}
export interface CreateNetworkSettingsResponse {
  networkSettingsArn: string | undefined;
}
export interface DeleteNetworkSettingsRequest {
  networkSettingsArn: string | undefined;
}
export interface DeleteNetworkSettingsResponse {}
export interface GetNetworkSettingsRequest {
  networkSettingsArn: string | undefined;
}
export interface NetworkSettings {
  networkSettingsArn: string | undefined;
  associatedPortalArns?: string[];
  vpcId?: string;
  subnetIds?: string[];
  securityGroupIds?: string[];
}
export interface GetNetworkSettingsResponse {
  networkSettings?: NetworkSettings;
}
export interface ListNetworkSettingsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface NetworkSettingsSummary {
  networkSettingsArn: string | undefined;
  vpcId?: string;
}
export interface ListNetworkSettingsResponse {
  networkSettings?: NetworkSettingsSummary[];
  nextToken?: string;
}
export interface UpdateNetworkSettingsRequest {
  networkSettingsArn: string | undefined;
  vpcId?: string;
  subnetIds?: string[];
  securityGroupIds?: string[];
  clientToken?: string;
}
export interface UpdateNetworkSettingsResponse {
  networkSettings: NetworkSettings | undefined;
}
export declare const BrowserType: {
  readonly CHROME: "Chrome";
};
export type BrowserType = (typeof BrowserType)[keyof typeof BrowserType];
export declare const _InstanceType: {
  readonly STANDARD_LARGE: "standard.large";
  readonly STANDARD_REGULAR: "standard.regular";
  readonly STANDARD_XLARGE: "standard.xlarge";
};
export type _InstanceType = (typeof _InstanceType)[keyof typeof _InstanceType];
export interface CreatePortalRequest {
  displayName?: string;
  tags?: Tag[];
  customerManagedKey?: string;
  additionalEncryptionContext?: Record<string, string>;
  clientToken?: string;
  authenticationType?: AuthenticationType;
  instanceType?: _InstanceType;
  maxConcurrentSessions?: number;
}
export interface CreatePortalResponse {
  portalArn: string | undefined;
  portalEndpoint: string | undefined;
}
export interface DeletePortalRequest {
  portalArn: string | undefined;
}
export interface DeletePortalResponse {}
export interface DisassociateBrowserSettingsRequest {
  portalArn: string | undefined;
}
export interface DisassociateBrowserSettingsResponse {}
export interface DisassociateIpAccessSettingsRequest {
  portalArn: string | undefined;
}
export interface DisassociateIpAccessSettingsResponse {}
export interface DisassociateNetworkSettingsRequest {
  portalArn: string | undefined;
}
export interface DisassociateNetworkSettingsResponse {}
export interface DisassociateTrustStoreRequest {
  portalArn: string | undefined;
}
export interface DisassociateTrustStoreResponse {}
export interface DisassociateUserAccessLoggingSettingsRequest {
  portalArn: string | undefined;
}
export interface DisassociateUserAccessLoggingSettingsResponse {}
export interface DisassociateUserSettingsRequest {
  portalArn: string | undefined;
}
export interface DisassociateUserSettingsResponse {}
export interface GetPortalRequest {
  portalArn: string | undefined;
}
export declare const PortalStatus: {
  readonly ACTIVE: "Active";
  readonly INCOMPLETE: "Incomplete";
  readonly PENDING: "Pending";
};
export type PortalStatus = (typeof PortalStatus)[keyof typeof PortalStatus];
export declare const RendererType: {
  readonly APPSTREAM: "AppStream";
};
export type RendererType = (typeof RendererType)[keyof typeof RendererType];
export interface Portal {
  portalArn: string | undefined;
  rendererType?: RendererType;
  browserType?: BrowserType;
  portalStatus?: PortalStatus;
  portalEndpoint?: string;
  displayName?: string;
  creationDate?: Date;
  browserSettingsArn?: string;
  userSettingsArn?: string;
  networkSettingsArn?: string;
  trustStoreArn?: string;
  statusReason?: string;
  userAccessLoggingSettingsArn?: string;
  authenticationType?: AuthenticationType;
  ipAccessSettingsArn?: string;
  customerManagedKey?: string;
  additionalEncryptionContext?: Record<string, string>;
  instanceType?: _InstanceType;
  maxConcurrentSessions?: number;
}
export interface GetPortalResponse {
  portal?: Portal;
}
export interface GetPortalServiceProviderMetadataRequest {
  portalArn: string | undefined;
}
export interface GetPortalServiceProviderMetadataResponse {
  portalArn: string | undefined;
  serviceProviderSamlMetadata?: string;
}
export interface ListPortalsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface PortalSummary {
  portalArn: string | undefined;
  rendererType?: RendererType;
  browserType?: BrowserType;
  portalStatus?: PortalStatus;
  portalEndpoint?: string;
  displayName?: string;
  creationDate?: Date;
  browserSettingsArn?: string;
  userSettingsArn?: string;
  networkSettingsArn?: string;
  trustStoreArn?: string;
  userAccessLoggingSettingsArn?: string;
  authenticationType?: AuthenticationType;
  ipAccessSettingsArn?: string;
  instanceType?: _InstanceType;
  maxConcurrentSessions?: number;
}
export interface ListPortalsResponse {
  portals?: PortalSummary[];
  nextToken?: string;
}
export interface UpdatePortalRequest {
  portalArn: string | undefined;
  displayName?: string;
  authenticationType?: AuthenticationType;
  instanceType?: _InstanceType;
  maxConcurrentSessions?: number;
}
export interface UpdatePortalResponse {
  portal?: Portal;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Tag[] | undefined;
  clientToken?: string;
}
export interface TagResourceResponse {}
export declare class TooManyTagsException extends __BaseException {
  readonly name: "TooManyTagsException";
  readonly $fault: "client";
  resourceName?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyTagsException, __BaseException>
  );
}
export interface CertificateSummary {
  thumbprint?: string;
  subject?: string;
  issuer?: string;
  notValidBefore?: Date;
  notValidAfter?: Date;
}
export interface CreateTrustStoreRequest {
  certificateList: Uint8Array[] | undefined;
  tags?: Tag[];
  clientToken?: string;
}
export interface CreateTrustStoreResponse {
  trustStoreArn: string | undefined;
}
export interface DeleteTrustStoreRequest {
  trustStoreArn: string | undefined;
}
export interface DeleteTrustStoreResponse {}
export interface GetTrustStoreRequest {
  trustStoreArn: string | undefined;
}
export interface TrustStore {
  associatedPortalArns?: string[];
  trustStoreArn: string | undefined;
}
export interface GetTrustStoreResponse {
  trustStore?: TrustStore;
}
export interface GetTrustStoreCertificateRequest {
  trustStoreArn: string | undefined;
  thumbprint: string | undefined;
}
export interface Certificate {
  thumbprint?: string;
  subject?: string;
  issuer?: string;
  notValidBefore?: Date;
  notValidAfter?: Date;
  body?: Uint8Array;
}
export interface GetTrustStoreCertificateResponse {
  trustStoreArn: string | undefined;
  certificate?: Certificate;
}
export interface ListTrustStoreCertificatesRequest {
  trustStoreArn: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListTrustStoreCertificatesResponse {
  certificateList?: CertificateSummary[];
  trustStoreArn: string | undefined;
  nextToken?: string;
}
export interface ListTrustStoresRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface TrustStoreSummary {
  trustStoreArn?: string;
}
export interface ListTrustStoresResponse {
  trustStores?: TrustStoreSummary[];
  nextToken?: string;
}
export interface UpdateTrustStoreRequest {
  trustStoreArn: string | undefined;
  certificatesToAdd?: Uint8Array[];
  certificatesToDelete?: string[];
  clientToken?: string;
}
export interface UpdateTrustStoreResponse {
  trustStoreArn: string | undefined;
}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface CreateUserAccessLoggingSettingsRequest {
  kinesisStreamArn: string | undefined;
  tags?: Tag[];
  clientToken?: string;
}
export interface CreateUserAccessLoggingSettingsResponse {
  userAccessLoggingSettingsArn: string | undefined;
}
export interface DeleteUserAccessLoggingSettingsRequest {
  userAccessLoggingSettingsArn: string | undefined;
}
export interface DeleteUserAccessLoggingSettingsResponse {}
export interface GetUserAccessLoggingSettingsRequest {
  userAccessLoggingSettingsArn: string | undefined;
}
export interface UserAccessLoggingSettings {
  userAccessLoggingSettingsArn: string | undefined;
  associatedPortalArns?: string[];
  kinesisStreamArn?: string;
}
export interface GetUserAccessLoggingSettingsResponse {
  userAccessLoggingSettings?: UserAccessLoggingSettings;
}
export interface ListUserAccessLoggingSettingsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface UserAccessLoggingSettingsSummary {
  userAccessLoggingSettingsArn: string | undefined;
  kinesisStreamArn?: string;
}
export interface ListUserAccessLoggingSettingsResponse {
  userAccessLoggingSettings?: UserAccessLoggingSettingsSummary[];
  nextToken?: string;
}
export interface UpdateUserAccessLoggingSettingsRequest {
  userAccessLoggingSettingsArn: string | undefined;
  kinesisStreamArn?: string;
  clientToken?: string;
}
export interface UpdateUserAccessLoggingSettingsResponse {
  userAccessLoggingSettings: UserAccessLoggingSettings | undefined;
}
export interface CookieSpecification {
  domain: string | undefined;
  name?: string;
  path?: string;
}
export interface CookieSynchronizationConfiguration {
  allowlist: CookieSpecification[] | undefined;
  blocklist?: CookieSpecification[];
}
export declare const EnabledType: {
  readonly DISABLED: "Disabled";
  readonly ENABLED: "Enabled";
};
export type EnabledType = (typeof EnabledType)[keyof typeof EnabledType];
export interface CreateUserSettingsRequest {
  copyAllowed: EnabledType | undefined;
  pasteAllowed: EnabledType | undefined;
  downloadAllowed: EnabledType | undefined;
  uploadAllowed: EnabledType | undefined;
  printAllowed: EnabledType | undefined;
  tags?: Tag[];
  disconnectTimeoutInMinutes?: number;
  idleDisconnectTimeoutInMinutes?: number;
  clientToken?: string;
  cookieSynchronizationConfiguration?: CookieSynchronizationConfiguration;
  customerManagedKey?: string;
  additionalEncryptionContext?: Record<string, string>;
}
export interface CreateUserSettingsResponse {
  userSettingsArn: string | undefined;
}
export interface DeleteUserSettingsRequest {
  userSettingsArn: string | undefined;
}
export interface DeleteUserSettingsResponse {}
export interface GetUserSettingsRequest {
  userSettingsArn: string | undefined;
}
export interface UserSettings {
  userSettingsArn: string | undefined;
  associatedPortalArns?: string[];
  copyAllowed?: EnabledType;
  pasteAllowed?: EnabledType;
  downloadAllowed?: EnabledType;
  uploadAllowed?: EnabledType;
  printAllowed?: EnabledType;
  disconnectTimeoutInMinutes?: number;
  idleDisconnectTimeoutInMinutes?: number;
  cookieSynchronizationConfiguration?: CookieSynchronizationConfiguration;
  customerManagedKey?: string;
  additionalEncryptionContext?: Record<string, string>;
}
export interface GetUserSettingsResponse {
  userSettings?: UserSettings;
}
export interface ListUserSettingsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface UserSettingsSummary {
  userSettingsArn: string | undefined;
  copyAllowed?: EnabledType;
  pasteAllowed?: EnabledType;
  downloadAllowed?: EnabledType;
  uploadAllowed?: EnabledType;
  printAllowed?: EnabledType;
  disconnectTimeoutInMinutes?: number;
  idleDisconnectTimeoutInMinutes?: number;
  cookieSynchronizationConfiguration?: CookieSynchronizationConfiguration;
}
export interface ListUserSettingsResponse {
  userSettings?: UserSettingsSummary[];
  nextToken?: string;
}
export interface UpdateUserSettingsRequest {
  userSettingsArn: string | undefined;
  copyAllowed?: EnabledType;
  pasteAllowed?: EnabledType;
  downloadAllowed?: EnabledType;
  uploadAllowed?: EnabledType;
  printAllowed?: EnabledType;
  disconnectTimeoutInMinutes?: number;
  idleDisconnectTimeoutInMinutes?: number;
  clientToken?: string;
  cookieSynchronizationConfiguration?: CookieSynchronizationConfiguration;
}
export interface UpdateUserSettingsResponse {
  userSettings: UserSettings | undefined;
}
export declare const TagFilterSensitiveLog: (obj: Tag) => any;
export declare const CreateBrowserSettingsRequestFilterSensitiveLog: (
  obj: CreateBrowserSettingsRequest
) => any;
export declare const BrowserSettingsFilterSensitiveLog: (
  obj: BrowserSettings
) => any;
export declare const GetBrowserSettingsResponseFilterSensitiveLog: (
  obj: GetBrowserSettingsResponse
) => any;
export declare const UpdateBrowserSettingsRequestFilterSensitiveLog: (
  obj: UpdateBrowserSettingsRequest
) => any;
export declare const UpdateBrowserSettingsResponseFilterSensitiveLog: (
  obj: UpdateBrowserSettingsResponse
) => any;
export declare const CreateIdentityProviderRequestFilterSensitiveLog: (
  obj: CreateIdentityProviderRequest
) => any;
export declare const IdentityProviderFilterSensitiveLog: (
  obj: IdentityProvider
) => any;
export declare const GetIdentityProviderResponseFilterSensitiveLog: (
  obj: GetIdentityProviderResponse
) => any;
export declare const IdentityProviderSummaryFilterSensitiveLog: (
  obj: IdentityProviderSummary
) => any;
export declare const ListIdentityProvidersResponseFilterSensitiveLog: (
  obj: ListIdentityProvidersResponse
) => any;
export declare const UpdateIdentityProviderRequestFilterSensitiveLog: (
  obj: UpdateIdentityProviderRequest
) => any;
export declare const UpdateIdentityProviderResponseFilterSensitiveLog: (
  obj: UpdateIdentityProviderResponse
) => any;
export declare const IpRuleFilterSensitiveLog: (obj: IpRule) => any;
export declare const CreateIpAccessSettingsRequestFilterSensitiveLog: (
  obj: CreateIpAccessSettingsRequest
) => any;
export declare const IpAccessSettingsFilterSensitiveLog: (
  obj: IpAccessSettings
) => any;
export declare const GetIpAccessSettingsResponseFilterSensitiveLog: (
  obj: GetIpAccessSettingsResponse
) => any;
export declare const IpAccessSettingsSummaryFilterSensitiveLog: (
  obj: IpAccessSettingsSummary
) => any;
export declare const ListIpAccessSettingsResponseFilterSensitiveLog: (
  obj: ListIpAccessSettingsResponse
) => any;
export declare const UpdateIpAccessSettingsRequestFilterSensitiveLog: (
  obj: UpdateIpAccessSettingsRequest
) => any;
export declare const UpdateIpAccessSettingsResponseFilterSensitiveLog: (
  obj: UpdateIpAccessSettingsResponse
) => any;
export declare const ListTagsForResourceResponseFilterSensitiveLog: (
  obj: ListTagsForResourceResponse
) => any;
export declare const CreateNetworkSettingsRequestFilterSensitiveLog: (
  obj: CreateNetworkSettingsRequest
) => any;
export declare const CreatePortalRequestFilterSensitiveLog: (
  obj: CreatePortalRequest
) => any;
export declare const PortalFilterSensitiveLog: (obj: Portal) => any;
export declare const GetPortalResponseFilterSensitiveLog: (
  obj: GetPortalResponse
) => any;
export declare const PortalSummaryFilterSensitiveLog: (
  obj: PortalSummary
) => any;
export declare const ListPortalsResponseFilterSensitiveLog: (
  obj: ListPortalsResponse
) => any;
export declare const UpdatePortalRequestFilterSensitiveLog: (
  obj: UpdatePortalRequest
) => any;
export declare const UpdatePortalResponseFilterSensitiveLog: (
  obj: UpdatePortalResponse
) => any;
export declare const TagResourceRequestFilterSensitiveLog: (
  obj: TagResourceRequest
) => any;
export declare const CreateTrustStoreRequestFilterSensitiveLog: (
  obj: CreateTrustStoreRequest
) => any;
export declare const UntagResourceRequestFilterSensitiveLog: (
  obj: UntagResourceRequest
) => any;
export declare const CreateUserAccessLoggingSettingsRequestFilterSensitiveLog: (
  obj: CreateUserAccessLoggingSettingsRequest
) => any;
export declare const CookieSpecificationFilterSensitiveLog: (
  obj: CookieSpecification
) => any;
export declare const CookieSynchronizationConfigurationFilterSensitiveLog: (
  obj: CookieSynchronizationConfiguration
) => any;
export declare const CreateUserSettingsRequestFilterSensitiveLog: (
  obj: CreateUserSettingsRequest
) => any;
export declare const UserSettingsFilterSensitiveLog: (obj: UserSettings) => any;
export declare const GetUserSettingsResponseFilterSensitiveLog: (
  obj: GetUserSettingsResponse
) => any;
export declare const UserSettingsSummaryFilterSensitiveLog: (
  obj: UserSettingsSummary
) => any;
export declare const ListUserSettingsResponseFilterSensitiveLog: (
  obj: ListUserSettingsResponse
) => any;
export declare const UpdateUserSettingsRequestFilterSensitiveLog: (
  obj: UpdateUserSettingsRequest
) => any;
export declare const UpdateUserSettingsResponseFilterSensitiveLog: (
  obj: UpdateUserSettingsResponse
) => any;
