import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, strictParseInt32 as __strictParseInt32, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, TooManyTagsException, ValidationException, } from "../models/models_0";
import { WorkSpacesWebServiceException as __BaseException } from "../models/WorkSpacesWebServiceException";
export const se_AssociateBrowserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}/browserSettings");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    const query = map({
        [_bSA]: [, __expectNonNull(input[_bSA], `browserSettingsArn`)],
    });
    let body;
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_AssociateIpAccessSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}/ipAccessSettings");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    const query = map({
        [_iASA]: [, __expectNonNull(input[_iASA], `ipAccessSettingsArn`)],
    });
    let body;
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_AssociateNetworkSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}/networkSettings");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    const query = map({
        [_nSA]: [, __expectNonNull(input[_nSA], `networkSettingsArn`)],
    });
    let body;
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_AssociateTrustStoreCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}/trustStores");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    const query = map({
        [_tSA]: [, __expectNonNull(input[_tSA], `trustStoreArn`)],
    });
    let body;
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_AssociateUserAccessLoggingSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}/userAccessLoggingSettings");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    const query = map({
        [_uALSA]: [, __expectNonNull(input[_uALSA], `userAccessLoggingSettingsArn`)],
    });
    let body;
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_AssociateUserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}/userSettings");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    const query = map({
        [_uSA]: [, __expectNonNull(input[_uSA], `userSettingsArn`)],
    });
    let body;
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreateBrowserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/browserSettings");
    let body;
    body = JSON.stringify(take(input, {
        additionalEncryptionContext: (_) => _json(_),
        browserPolicy: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        customerManagedKey: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateIdentityProviderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/identityProviders");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        identityProviderDetails: (_) => _json(_),
        identityProviderName: [],
        identityProviderType: [],
        portalArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateIpAccessSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ipAccessSettings");
    let body;
    body = JSON.stringify(take(input, {
        additionalEncryptionContext: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        customerManagedKey: [],
        description: [],
        displayName: [],
        ipRules: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateNetworkSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/networkSettings");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        securityGroupIds: (_) => _json(_),
        subnetIds: (_) => _json(_),
        tags: (_) => _json(_),
        vpcId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePortalCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/portals");
    let body;
    body = JSON.stringify(take(input, {
        additionalEncryptionContext: (_) => _json(_),
        authenticationType: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        customerManagedKey: [],
        displayName: [],
        instanceType: [],
        maxConcurrentSessions: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateTrustStoreCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/trustStores");
    let body;
    body = JSON.stringify(take(input, {
        certificateList: (_) => se_CertificateList(_, context),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateUserAccessLoggingSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/userAccessLoggingSettings");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        kinesisStreamArn: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateUserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/userSettings");
    let body;
    body = JSON.stringify(take(input, {
        additionalEncryptionContext: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        cookieSynchronizationConfiguration: (_) => _json(_),
        copyAllowed: [],
        customerManagedKey: [],
        disconnectTimeoutInMinutes: [],
        downloadAllowed: [],
        idleDisconnectTimeoutInMinutes: [],
        pasteAllowed: [],
        printAllowed: [],
        tags: (_) => _json(_),
        uploadAllowed: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteBrowserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/browserSettings/{browserSettingsArn+}");
    b.p("browserSettingsArn", () => input.browserSettingsArn, "{browserSettingsArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteIdentityProviderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identityProviders/{identityProviderArn+}");
    b.p("identityProviderArn", () => input.identityProviderArn, "{identityProviderArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteIpAccessSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ipAccessSettings/{ipAccessSettingsArn+}");
    b.p("ipAccessSettingsArn", () => input.ipAccessSettingsArn, "{ipAccessSettingsArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteNetworkSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networkSettings/{networkSettingsArn+}");
    b.p("networkSettingsArn", () => input.networkSettingsArn, "{networkSettingsArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePortalCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteTrustStoreCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/trustStores/{trustStoreArn+}");
    b.p("trustStoreArn", () => input.trustStoreArn, "{trustStoreArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteUserAccessLoggingSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/userAccessLoggingSettings/{userAccessLoggingSettingsArn+}");
    b.p("userAccessLoggingSettingsArn", () => input.userAccessLoggingSettingsArn, "{userAccessLoggingSettingsArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteUserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/userSettings/{userSettingsArn+}");
    b.p("userSettingsArn", () => input.userSettingsArn, "{userSettingsArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateBrowserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}/browserSettings");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateIpAccessSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}/ipAccessSettings");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateNetworkSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}/networkSettings");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateTrustStoreCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}/trustStores");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateUserAccessLoggingSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}/userAccessLoggingSettings");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateUserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}/userSettings");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetBrowserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/browserSettings/{browserSettingsArn+}");
    b.p("browserSettingsArn", () => input.browserSettingsArn, "{browserSettingsArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetIdentityProviderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identityProviders/{identityProviderArn+}");
    b.p("identityProviderArn", () => input.identityProviderArn, "{identityProviderArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetIpAccessSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ipAccessSettings/{ipAccessSettingsArn+}");
    b.p("ipAccessSettingsArn", () => input.ipAccessSettingsArn, "{ipAccessSettingsArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetNetworkSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networkSettings/{networkSettingsArn+}");
    b.p("networkSettingsArn", () => input.networkSettingsArn, "{networkSettingsArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPortalCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPortalServiceProviderMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portalIdp/{portalArn+}");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetTrustStoreCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/trustStores/{trustStoreArn+}");
    b.p("trustStoreArn", () => input.trustStoreArn, "{trustStoreArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetTrustStoreCertificateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/trustStores/{trustStoreArn+}/certificate");
    b.p("trustStoreArn", () => input.trustStoreArn, "{trustStoreArn+}", true);
    const query = map({
        [_t]: [, __expectNonNull(input[_t], `thumbprint`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetUserAccessLoggingSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/userAccessLoggingSettings/{userAccessLoggingSettingsArn+}");
    b.p("userAccessLoggingSettingsArn", () => input.userAccessLoggingSettingsArn, "{userAccessLoggingSettingsArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetUserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/userSettings/{userSettingsArn+}");
    b.p("userSettingsArn", () => input.userSettingsArn, "{userSettingsArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListBrowserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/browserSettings");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListIdentityProvidersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals/{portalArn+}/identityProviders");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListIpAccessSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ipAccessSettings");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListNetworkSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networkSettings");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPortalsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/portals");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn+}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListTrustStoreCertificatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/trustStores/{trustStoreArn+}/certificates");
    b.p("trustStoreArn", () => input.trustStoreArn, "{trustStoreArn+}", true);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTrustStoresCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/trustStores");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListUserAccessLoggingSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/userAccessLoggingSettings");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListUserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/userSettings");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn+}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn+}", true);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn+}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn+}", true);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateBrowserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/browserSettings/{browserSettingsArn+}");
    b.p("browserSettingsArn", () => input.browserSettingsArn, "{browserSettingsArn+}", true);
    let body;
    body = JSON.stringify(take(input, {
        browserPolicy: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateIdentityProviderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/identityProviders/{identityProviderArn+}");
    b.p("identityProviderArn", () => input.identityProviderArn, "{identityProviderArn+}", true);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        identityProviderDetails: (_) => _json(_),
        identityProviderName: [],
        identityProviderType: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateIpAccessSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ipAccessSettings/{ipAccessSettingsArn+}");
    b.p("ipAccessSettingsArn", () => input.ipAccessSettingsArn, "{ipAccessSettingsArn+}", true);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        displayName: [],
        ipRules: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateNetworkSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/networkSettings/{networkSettingsArn+}");
    b.p("networkSettingsArn", () => input.networkSettingsArn, "{networkSettingsArn+}", true);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        securityGroupIds: (_) => _json(_),
        subnetIds: (_) => _json(_),
        vpcId: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdatePortalCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/portals/{portalArn+}");
    b.p("portalArn", () => input.portalArn, "{portalArn+}", true);
    let body;
    body = JSON.stringify(take(input, {
        authenticationType: [],
        displayName: [],
        instanceType: [],
        maxConcurrentSessions: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateTrustStoreCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/trustStores/{trustStoreArn+}");
    b.p("trustStoreArn", () => input.trustStoreArn, "{trustStoreArn+}", true);
    let body;
    body = JSON.stringify(take(input, {
        certificatesToAdd: (_) => se_CertificateList(_, context),
        certificatesToDelete: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserAccessLoggingSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/userAccessLoggingSettings/{userAccessLoggingSettingsArn+}");
    b.p("userAccessLoggingSettingsArn", () => input.userAccessLoggingSettingsArn, "{userAccessLoggingSettingsArn+}", true);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        kinesisStreamArn: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/userSettings/{userSettingsArn+}");
    b.p("userSettingsArn", () => input.userSettingsArn, "{userSettingsArn+}", true);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        cookieSynchronizationConfiguration: (_) => _json(_),
        copyAllowed: [],
        disconnectTimeoutInMinutes: [],
        downloadAllowed: [],
        idleDisconnectTimeoutInMinutes: [],
        pasteAllowed: [],
        printAllowed: [],
        uploadAllowed: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_AssociateBrowserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        browserSettingsArn: __expectString,
        portalArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateIpAccessSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ipAccessSettingsArn: __expectString,
        portalArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateNetworkSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        networkSettingsArn: __expectString,
        portalArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateTrustStoreCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        portalArn: __expectString,
        trustStoreArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateUserAccessLoggingSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        portalArn: __expectString,
        userAccessLoggingSettingsArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateUserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        portalArn: __expectString,
        userSettingsArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateBrowserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        browserSettingsArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateIdentityProviderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        identityProviderArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateIpAccessSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ipAccessSettingsArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateNetworkSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        networkSettingsArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePortalCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        portalArn: __expectString,
        portalEndpoint: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateTrustStoreCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        trustStoreArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateUserAccessLoggingSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        userAccessLoggingSettingsArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateUserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        userSettingsArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteBrowserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteIdentityProviderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteIpAccessSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteNetworkSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeletePortalCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteTrustStoreCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteUserAccessLoggingSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteUserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateBrowserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateIpAccessSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateNetworkSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateTrustStoreCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateUserAccessLoggingSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateUserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetBrowserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        browserSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetIdentityProviderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        identityProvider: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetIpAccessSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ipAccessSettings: (_) => de_IpAccessSettings(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetNetworkSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        networkSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPortalCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        portal: (_) => de_Portal(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPortalServiceProviderMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        portalArn: __expectString,
        serviceProviderSamlMetadata: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetTrustStoreCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        trustStore: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetTrustStoreCertificateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        certificate: (_) => de_Certificate(_, context),
        trustStoreArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetUserAccessLoggingSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        userAccessLoggingSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetUserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        userSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBrowserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        browserSettings: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListIdentityProvidersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        identityProviders: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListIpAccessSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ipAccessSettings: (_) => de_IpAccessSettingsList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListNetworkSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        networkSettings: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPortalsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        portals: (_) => de_PortalList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTrustStoreCertificatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        certificateList: (_) => de_CertificateSummaryList(_, context),
        nextToken: __expectString,
        trustStoreArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTrustStoresCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        trustStores: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListUserAccessLoggingSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        userAccessLoggingSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListUserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        userSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateBrowserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        browserSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateIdentityProviderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        identityProvider: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateIpAccessSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ipAccessSettings: (_) => de_IpAccessSettings(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateNetworkSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        networkSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdatePortalCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        portal: (_) => de_Portal(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateTrustStoreCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        trustStoreArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateUserAccessLoggingSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        userAccessLoggingSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateUserSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        userSettings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.workspacesweb#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.workspacesweb#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.workspacesweb#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.workspacesweb#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.workspacesweb#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.workspacesweb#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.workspacesweb#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.workspacesweb#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_rAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        quotaCode: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
        serviceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_rAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        quotaCode: __expectString,
        serviceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceName: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        fieldList: _json,
        message: __expectString,
        reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_CertificateList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return context.base64Encoder(entry);
    });
};
const de_Certificate = (output, context) => {
    return take(output, {
        body: context.base64Decoder,
        issuer: __expectString,
        notValidAfter: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        notValidBefore: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        subject: __expectString,
        thumbprint: __expectString,
    });
};
const de_CertificateSummary = (output, context) => {
    return take(output, {
        issuer: __expectString,
        notValidAfter: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        notValidBefore: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        subject: __expectString,
        thumbprint: __expectString,
    });
};
const de_CertificateSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CertificateSummary(entry, context);
    });
    return retVal;
};
const de_IpAccessSettings = (output, context) => {
    return take(output, {
        additionalEncryptionContext: _json,
        associatedPortalArns: _json,
        creationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        customerManagedKey: __expectString,
        description: __expectString,
        displayName: __expectString,
        ipAccessSettingsArn: __expectString,
        ipRules: _json,
    });
};
const de_IpAccessSettingsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpAccessSettingsSummary(entry, context);
    });
    return retVal;
};
const de_IpAccessSettingsSummary = (output, context) => {
    return take(output, {
        creationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        displayName: __expectString,
        ipAccessSettingsArn: __expectString,
    });
};
const de_Portal = (output, context) => {
    return take(output, {
        additionalEncryptionContext: _json,
        authenticationType: __expectString,
        browserSettingsArn: __expectString,
        browserType: __expectString,
        creationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        customerManagedKey: __expectString,
        displayName: __expectString,
        instanceType: __expectString,
        ipAccessSettingsArn: __expectString,
        maxConcurrentSessions: __expectInt32,
        networkSettingsArn: __expectString,
        portalArn: __expectString,
        portalEndpoint: __expectString,
        portalStatus: __expectString,
        rendererType: __expectString,
        statusReason: __expectString,
        trustStoreArn: __expectString,
        userAccessLoggingSettingsArn: __expectString,
        userSettingsArn: __expectString,
    });
};
const de_PortalList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PortalSummary(entry, context);
    });
    return retVal;
};
const de_PortalSummary = (output, context) => {
    return take(output, {
        authenticationType: __expectString,
        browserSettingsArn: __expectString,
        browserType: __expectString,
        creationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        displayName: __expectString,
        instanceType: __expectString,
        ipAccessSettingsArn: __expectString,
        maxConcurrentSessions: __expectInt32,
        networkSettingsArn: __expectString,
        portalArn: __expectString,
        portalEndpoint: __expectString,
        portalStatus: __expectString,
        rendererType: __expectString,
        trustStoreArn: __expectString,
        userAccessLoggingSettingsArn: __expectString,
        userSettingsArn: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _bSA = "browserSettingsArn";
const _iASA = "ipAccessSettingsArn";
const _mR = "maxResults";
const _nSA = "networkSettingsArn";
const _nT = "nextToken";
const _rAS = "retryAfterSeconds";
const _ra = "retry-after";
const _t = "thumbprint";
const _tK = "tagKeys";
const _tSA = "trustStoreArn";
const _uALSA = "userAccessLoggingSettingsArn";
const _uSA = "userSettingsArn";
