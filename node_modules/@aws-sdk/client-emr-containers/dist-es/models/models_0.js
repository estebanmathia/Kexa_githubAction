import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { EMRContainersServiceException as __BaseException } from "./EMRContainersServiceException";
export const CertificateProviderType = {
    PEM: "PEM",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export const TemplateParameterDataType = {
    NUMBER: "NUMBER",
    STRING: "STRING",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export const PersistentAppUI = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export var ContainerInfo;
(function (ContainerInfo) {
    ContainerInfo.visit = (value, visitor) => {
        if (value.eksInfo !== undefined)
            return visitor.eksInfo(value.eksInfo);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ContainerInfo || (ContainerInfo = {}));
export const ContainerProviderType = {
    EKS: "EKS",
};
export class EKSRequestThrottledException extends __BaseException {
    constructor(opts) {
        super({
            name: "EKSRequestThrottledException",
            $fault: "client",
            ...opts,
        });
        this.name = "EKSRequestThrottledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EKSRequestThrottledException.prototype);
    }
}
export const FailureReason = {
    CLUSTER_UNAVAILABLE: "CLUSTER_UNAVAILABLE",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    USER_ERROR: "USER_ERROR",
    VALIDATION_ERROR: "VALIDATION_ERROR",
};
export const JobRunState = {
    CANCELLED: "CANCELLED",
    CANCEL_PENDING: "CANCEL_PENDING",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    SUBMITTED: "SUBMITTED",
};
export const EndpointState = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    TERMINATED: "TERMINATED",
    TERMINATED_WITH_ERRORS: "TERMINATED_WITH_ERRORS",
    TERMINATING: "TERMINATING",
};
export const VirtualClusterState = {
    ARRESTED: "ARRESTED",
    RUNNING: "RUNNING",
    TERMINATED: "TERMINATED",
    TERMINATING: "TERMINATING",
};
export var Credentials;
(function (Credentials) {
    Credentials.visit = (value, visitor) => {
        if (value.token !== undefined)
            return visitor.token(value.token);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Credentials || (Credentials = {}));
export class RequestThrottledException extends __BaseException {
    constructor(opts) {
        super({
            name: "RequestThrottledException",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestThrottledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestThrottledException.prototype);
    }
}
export const SparkSqlJobDriverFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.entryPoint && { entryPoint: SENSITIVE_STRING }),
    ...(obj.sparkSqlParameters && { sparkSqlParameters: SENSITIVE_STRING }),
});
export const SparkSubmitJobDriverFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.entryPoint && { entryPoint: SENSITIVE_STRING }),
    ...(obj.entryPointArguments && { entryPointArguments: SENSITIVE_STRING }),
    ...(obj.sparkSubmitParameters && { sparkSubmitParameters: SENSITIVE_STRING }),
});
export const JobDriverFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sparkSubmitJobDriver && {
        sparkSubmitJobDriver: SparkSubmitJobDriverFilterSensitiveLog(obj.sparkSubmitJobDriver),
    }),
    ...(obj.sparkSqlJobDriver && { sparkSqlJobDriver: SparkSqlJobDriverFilterSensitiveLog(obj.sparkSqlJobDriver) }),
});
export const CredentialsFilterSensitiveLog = (obj) => {
    if (obj.token !== undefined)
        return { token: SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const GetManagedEndpointSessionCredentialsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.credentials && { credentials: CredentialsFilterSensitiveLog(obj.credentials) }),
});
export const ConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.properties && { properties: SENSITIVE_STRING }),
    ...(obj.configurations && {
        configurations: obj.configurations.map((item) => ConfigurationFilterSensitiveLog(item)),
    }),
});
export const ConfigurationOverridesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.applicationConfiguration && {
        applicationConfiguration: obj.applicationConfiguration.map((item) => ConfigurationFilterSensitiveLog(item)),
    }),
});
export const ParametricConfigurationOverridesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.applicationConfiguration && {
        applicationConfiguration: obj.applicationConfiguration.map((item) => ConfigurationFilterSensitiveLog(item)),
    }),
});
export const CreateManagedEndpointRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.configurationOverrides && {
        configurationOverrides: ConfigurationOverridesFilterSensitiveLog(obj.configurationOverrides),
    }),
});
export const EndpointFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.configurationOverrides && {
        configurationOverrides: ConfigurationOverridesFilterSensitiveLog(obj.configurationOverrides),
    }),
});
export const JobRunFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.configurationOverrides && {
        configurationOverrides: ConfigurationOverridesFilterSensitiveLog(obj.configurationOverrides),
    }),
    ...(obj.jobDriver && { jobDriver: JobDriverFilterSensitiveLog(obj.jobDriver) }),
});
export const JobTemplateDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.configurationOverrides && {
        configurationOverrides: ParametricConfigurationOverridesFilterSensitiveLog(obj.configurationOverrides),
    }),
    ...(obj.jobDriver && { jobDriver: JobDriverFilterSensitiveLog(obj.jobDriver) }),
});
export const StartJobRunRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.jobDriver && { jobDriver: JobDriverFilterSensitiveLog(obj.jobDriver) }),
    ...(obj.configurationOverrides && {
        configurationOverrides: ConfigurationOverridesFilterSensitiveLog(obj.configurationOverrides),
    }),
});
export const CreateJobTemplateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.jobTemplateData && { jobTemplateData: JobTemplateDataFilterSensitiveLog(obj.jobTemplateData) }),
});
export const DescribeJobRunResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.jobRun && { jobRun: JobRunFilterSensitiveLog(obj.jobRun) }),
});
export const DescribeManagedEndpointResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.endpoint && { endpoint: EndpointFilterSensitiveLog(obj.endpoint) }),
});
export const JobTemplateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.jobTemplateData && { jobTemplateData: JobTemplateDataFilterSensitiveLog(obj.jobTemplateData) }),
});
export const DescribeJobTemplateResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.jobTemplate && { jobTemplate: JobTemplateFilterSensitiveLog(obj.jobTemplate) }),
});
export const ListJobRunsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.jobRuns && { jobRuns: obj.jobRuns.map((item) => JobRunFilterSensitiveLog(item)) }),
});
export const ListManagedEndpointsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ListJobTemplatesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.templates && { templates: obj.templates.map((item) => JobTemplateFilterSensitiveLog(item)) }),
});
