import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { EMRContainersServiceException as __BaseException } from "../models/EMRContainersServiceException";
import { EKSRequestThrottledException, InternalServerException, RequestThrottledException, ResourceNotFoundException, ValidationException, } from "../models/models_0";
export const se_CancelJobRunCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/virtualclusters/{virtualClusterId}/jobruns/{id}");
    b.p("id", () => input.id, "{id}", false);
    b.p("virtualClusterId", () => input.virtualClusterId, "{virtualClusterId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_CreateJobTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/jobtemplates");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        jobTemplateData: (_) => se_JobTemplateData(_, context),
        kmsKeyArn: [],
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateManagedEndpointCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/virtualclusters/{virtualClusterId}/endpoints");
    b.p("virtualClusterId", () => input.virtualClusterId, "{virtualClusterId}", false);
    let body;
    body = JSON.stringify(take(input, {
        certificateArn: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        configurationOverrides: (_) => se_ConfigurationOverrides(_, context),
        executionRoleArn: [],
        name: [],
        releaseLabel: [],
        tags: (_) => _json(_),
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSecurityConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/securityconfigurations");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        name: [],
        securityConfigurationData: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateVirtualClusterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/virtualclusters");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        containerProvider: (_) => _json(_),
        name: [],
        securityConfigurationId: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteJobTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/jobtemplates/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteManagedEndpointCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/virtualclusters/{virtualClusterId}/endpoints/{id}");
    b.p("id", () => input.id, "{id}", false);
    b.p("virtualClusterId", () => input.virtualClusterId, "{virtualClusterId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVirtualClusterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/virtualclusters/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeJobRunCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/virtualclusters/{virtualClusterId}/jobruns/{id}");
    b.p("id", () => input.id, "{id}", false);
    b.p("virtualClusterId", () => input.virtualClusterId, "{virtualClusterId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeJobTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/jobtemplates/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeManagedEndpointCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/virtualclusters/{virtualClusterId}/endpoints/{id}");
    b.p("id", () => input.id, "{id}", false);
    b.p("virtualClusterId", () => input.virtualClusterId, "{virtualClusterId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeSecurityConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/securityconfigurations/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeVirtualClusterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/virtualclusters/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetManagedEndpointSessionCredentialsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/virtualclusters/{virtualClusterIdentifier}/endpoints/{endpointIdentifier}/credentials");
    b.p("endpointIdentifier", () => input.endpointIdentifier, "{endpointIdentifier}", false);
    b.p("virtualClusterIdentifier", () => input.virtualClusterIdentifier, "{virtualClusterIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        credentialType: [],
        durationInSeconds: [],
        executionRoleArn: [],
        logContext: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListJobRunsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/virtualclusters/{virtualClusterId}/jobruns");
    b.p("virtualClusterId", () => input.virtualClusterId, "{virtualClusterId}", false);
    const query = map({
        [_cB]: [() => input.createdBefore !== void 0, () => (input[_cB].toISOString().split(".")[0] + "Z").toString()],
        [_cA]: [() => input.createdAfter !== void 0, () => (input[_cA].toISOString().split(".")[0] + "Z").toString()],
        [_n]: [, input[_n]],
        [_s]: [() => input.states !== void 0, () => (input[_s] || []).map((_entry) => _entry)],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListJobTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/jobtemplates");
    const query = map({
        [_cA]: [() => input.createdAfter !== void 0, () => (input[_cA].toISOString().split(".")[0] + "Z").toString()],
        [_cB]: [() => input.createdBefore !== void 0, () => (input[_cB].toISOString().split(".")[0] + "Z").toString()],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListManagedEndpointsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/virtualclusters/{virtualClusterId}/endpoints");
    b.p("virtualClusterId", () => input.virtualClusterId, "{virtualClusterId}", false);
    const query = map({
        [_cB]: [() => input.createdBefore !== void 0, () => (input[_cB].toISOString().split(".")[0] + "Z").toString()],
        [_cA]: [() => input.createdAfter !== void 0, () => (input[_cA].toISOString().split(".")[0] + "Z").toString()],
        [_t]: [() => input.types !== void 0, () => (input[_t] || []).map((_entry) => _entry)],
        [_s]: [() => input.states !== void 0, () => (input[_s] || []).map((_entry) => _entry)],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSecurityConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/securityconfigurations");
    const query = map({
        [_cA]: [() => input.createdAfter !== void 0, () => (input[_cA].toISOString().split(".")[0] + "Z").toString()],
        [_cB]: [() => input.createdBefore !== void 0, () => (input[_cB].toISOString().split(".")[0] + "Z").toString()],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListVirtualClustersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/virtualclusters");
    const query = map({
        [_cPI]: [, input[_cPI]],
        [_cPT]: [, input[_cPT]],
        [_cA]: [() => input.createdAfter !== void 0, () => (input[_cA].toISOString().split(".")[0] + "Z").toString()],
        [_cB]: [() => input.createdBefore !== void 0, () => (input[_cB].toISOString().split(".")[0] + "Z").toString()],
        [_s]: [() => input.states !== void 0, () => (input[_s] || []).map((_entry) => _entry)],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_eAEI]: [() => input.eksAccessEntryIntegrated !== void 0, () => input[_eAEI].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_StartJobRunCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/virtualclusters/{virtualClusterId}/jobruns");
    b.p("virtualClusterId", () => input.virtualClusterId, "{virtualClusterId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        configurationOverrides: (_) => se_ConfigurationOverrides(_, context),
        executionRoleArn: [],
        jobDriver: (_) => _json(_),
        jobTemplateId: [],
        jobTemplateParameters: (_) => _json(_),
        name: [],
        releaseLabel: [],
        retryPolicyConfiguration: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const de_CancelJobRunCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        id: __expectString,
        virtualClusterId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateJobTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        id: __expectString,
        name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateManagedEndpointCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        id: __expectString,
        name: __expectString,
        virtualClusterId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSecurityConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        id: __expectString,
        name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateVirtualClusterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        id: __expectString,
        name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteJobTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteManagedEndpointCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        id: __expectString,
        virtualClusterId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteVirtualClusterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeJobRunCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobRun: (_) => de_JobRun(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeJobTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobTemplate: (_) => de_JobTemplate(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeManagedEndpointCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        endpoint: (_) => de_Endpoint(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeSecurityConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        securityConfiguration: (_) => de_SecurityConfiguration(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeVirtualClusterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        virtualCluster: (_) => de_VirtualCluster(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetManagedEndpointSessionCredentialsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        credentials: (_) => _json(__expectUnion(_)),
        expiresAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListJobRunsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobRuns: (_) => de_JobRuns(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListJobTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        templates: (_) => de_JobTemplates(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListManagedEndpointsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        endpoints: (_) => de_Endpoints(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSecurityConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        securityConfigurations: (_) => de_SecurityConfigurations(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListVirtualClustersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        virtualClusters: (_) => de_VirtualClusters(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartJobRunCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        id: __expectString,
        name: __expectString,
        virtualClusterId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.emrcontainers#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.emrcontainers#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.emrcontainers#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "EKSRequestThrottledException":
        case "com.amazonaws.emrcontainers#EKSRequestThrottledException":
            throw await de_EKSRequestThrottledExceptionRes(parsedOutput, context);
        case "RequestThrottledException":
        case "com.amazonaws.emrcontainers#RequestThrottledException":
            throw await de_RequestThrottledExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_EKSRequestThrottledExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new EKSRequestThrottledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_RequestThrottledExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new RequestThrottledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_Configuration = (input, context) => {
    return take(input, {
        classification: [],
        configurations: (_) => se_ConfigurationList(_, context),
        properties: _json,
    });
};
const se_ConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Configuration(entry, context);
    });
};
const se_ConfigurationOverrides = (input, context) => {
    return take(input, {
        applicationConfiguration: (_) => se_ConfigurationList(_, context),
        monitoringConfiguration: _json,
    });
};
const se_JobTemplateData = (input, context) => {
    return take(input, {
        configurationOverrides: (_) => se_ParametricConfigurationOverrides(_, context),
        executionRoleArn: [],
        jobDriver: _json,
        jobTags: _json,
        parameterConfiguration: _json,
        releaseLabel: [],
    });
};
const se_ParametricConfigurationOverrides = (input, context) => {
    return take(input, {
        applicationConfiguration: (_) => se_ConfigurationList(_, context),
        monitoringConfiguration: _json,
    });
};
const de_Configuration = (output, context) => {
    return take(output, {
        classification: __expectString,
        configurations: (_) => de_ConfigurationList(_, context),
        properties: _json,
    });
};
const de_ConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Configuration(entry, context);
    });
    return retVal;
};
const de_ConfigurationOverrides = (output, context) => {
    return take(output, {
        applicationConfiguration: (_) => de_ConfigurationList(_, context),
        monitoringConfiguration: _json,
    });
};
const de_Endpoint = (output, context) => {
    return take(output, {
        arn: __expectString,
        certificateArn: __expectString,
        certificateAuthority: _json,
        configurationOverrides: (_) => de_ConfigurationOverrides(_, context),
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        executionRoleArn: __expectString,
        failureReason: __expectString,
        id: __expectString,
        name: __expectString,
        releaseLabel: __expectString,
        securityGroup: __expectString,
        serverUrl: __expectString,
        state: __expectString,
        stateDetails: __expectString,
        subnetIds: _json,
        tags: _json,
        type: __expectString,
        virtualClusterId: __expectString,
    });
};
const de_Endpoints = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Endpoint(entry, context);
    });
    return retVal;
};
const de_JobRun = (output, context) => {
    return take(output, {
        arn: __expectString,
        clientToken: __expectString,
        configurationOverrides: (_) => de_ConfigurationOverrides(_, context),
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        createdBy: __expectString,
        executionRoleArn: __expectString,
        failureReason: __expectString,
        finishedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        id: __expectString,
        jobDriver: _json,
        name: __expectString,
        releaseLabel: __expectString,
        retryPolicyConfiguration: _json,
        retryPolicyExecution: _json,
        state: __expectString,
        stateDetails: __expectString,
        tags: _json,
        virtualClusterId: __expectString,
    });
};
const de_JobRuns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobRun(entry, context);
    });
    return retVal;
};
const de_JobTemplate = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        createdBy: __expectString,
        decryptionError: __expectString,
        id: __expectString,
        jobTemplateData: (_) => de_JobTemplateData(_, context),
        kmsKeyArn: __expectString,
        name: __expectString,
        tags: _json,
    });
};
const de_JobTemplateData = (output, context) => {
    return take(output, {
        configurationOverrides: (_) => de_ParametricConfigurationOverrides(_, context),
        executionRoleArn: __expectString,
        jobDriver: _json,
        jobTags: _json,
        parameterConfiguration: _json,
        releaseLabel: __expectString,
    });
};
const de_JobTemplates = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobTemplate(entry, context);
    });
    return retVal;
};
const de_ParametricConfigurationOverrides = (output, context) => {
    return take(output, {
        applicationConfiguration: (_) => de_ConfigurationList(_, context),
        monitoringConfiguration: _json,
    });
};
const de_SecurityConfiguration = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        createdBy: __expectString,
        id: __expectString,
        name: __expectString,
        securityConfigurationData: _json,
        tags: _json,
    });
};
const de_SecurityConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityConfiguration(entry, context);
    });
    return retVal;
};
const de_VirtualCluster = (output, context) => {
    return take(output, {
        arn: __expectString,
        containerProvider: _json,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        id: __expectString,
        name: __expectString,
        securityConfigurationId: __expectString,
        state: __expectString,
        tags: _json,
    });
};
const de_VirtualClusters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VirtualCluster(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _cA = "createdAfter";
const _cB = "createdBefore";
const _cPI = "containerProviderId";
const _cPT = "containerProviderType";
const _eAEI = "eksAccessEntryIntegrated";
const _mR = "maxResults";
const _n = "name";
const _nT = "nextToken";
const _s = "states";
const _t = "types";
const _tK = "tagKeys";
