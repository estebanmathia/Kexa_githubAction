import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { EMRContainersServiceException as __BaseException } from "./EMRContainersServiceException";
export declare const CertificateProviderType: {
  readonly PEM: "PEM";
};
export type CertificateProviderType =
  (typeof CertificateProviderType)[keyof typeof CertificateProviderType];
export interface TLSCertificateConfiguration {
  certificateProviderType?: CertificateProviderType;
  publicCertificateSecretArn?: string;
  privateCertificateSecretArn?: string;
}
export interface InTransitEncryptionConfiguration {
  tlsCertificateConfiguration?: TLSCertificateConfiguration;
}
export interface EncryptionConfiguration {
  inTransitEncryptionConfiguration?: InTransitEncryptionConfiguration;
}
export interface SecureNamespaceInfo {
  clusterId?: string;
  namespace?: string;
}
export interface LakeFormationConfiguration {
  authorizedSessionTagValue?: string;
  secureNamespaceInfo?: SecureNamespaceInfo;
  queryEngineRoleArn?: string;
}
export interface AuthorizationConfiguration {
  lakeFormationConfiguration?: LakeFormationConfiguration;
  encryptionConfiguration?: EncryptionConfiguration;
}
export interface CancelJobRunRequest {
  id: string | undefined;
  virtualClusterId: string | undefined;
}
export interface CancelJobRunResponse {
  id?: string;
  virtualClusterId?: string;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface ParametricCloudWatchMonitoringConfiguration {
  logGroupName?: string;
  logStreamNamePrefix?: string;
}
export interface ParametricS3MonitoringConfiguration {
  logUri?: string;
}
export interface ParametricMonitoringConfiguration {
  persistentAppUI?: string;
  cloudWatchMonitoringConfiguration?: ParametricCloudWatchMonitoringConfiguration;
  s3MonitoringConfiguration?: ParametricS3MonitoringConfiguration;
}
export interface SparkSqlJobDriver {
  entryPoint?: string;
  sparkSqlParameters?: string;
}
export interface SparkSubmitJobDriver {
  entryPoint: string | undefined;
  entryPointArguments?: string[];
  sparkSubmitParameters?: string;
}
export interface JobDriver {
  sparkSubmitJobDriver?: SparkSubmitJobDriver;
  sparkSqlJobDriver?: SparkSqlJobDriver;
}
export declare const TemplateParameterDataType: {
  readonly NUMBER: "NUMBER";
  readonly STRING: "STRING";
};
export type TemplateParameterDataType =
  (typeof TemplateParameterDataType)[keyof typeof TemplateParameterDataType];
export interface TemplateParameterConfiguration {
  type?: TemplateParameterDataType;
  defaultValue?: string;
}
export interface CreateJobTemplateResponse {
  id?: string;
  name?: string;
  arn?: string;
  createdAt?: Date;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface CloudWatchMonitoringConfiguration {
  logGroupName: string | undefined;
  logStreamNamePrefix?: string;
}
export interface ContainerLogRotationConfiguration {
  rotationSize: string | undefined;
  maxFilesToKeep: number | undefined;
}
export declare const PersistentAppUI: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type PersistentAppUI =
  (typeof PersistentAppUI)[keyof typeof PersistentAppUI];
export interface S3MonitoringConfiguration {
  logUri: string | undefined;
}
export interface MonitoringConfiguration {
  persistentAppUI?: PersistentAppUI;
  cloudWatchMonitoringConfiguration?: CloudWatchMonitoringConfiguration;
  s3MonitoringConfiguration?: S3MonitoringConfiguration;
  containerLogRotationConfiguration?: ContainerLogRotationConfiguration;
}
export interface CreateManagedEndpointResponse {
  id?: string;
  name?: string;
  arn?: string;
  virtualClusterId?: string;
}
export interface SecurityConfigurationData {
  authorizationConfiguration?: AuthorizationConfiguration;
}
export interface CreateSecurityConfigurationRequest {
  clientToken?: string;
  name: string | undefined;
  securityConfigurationData: SecurityConfigurationData | undefined;
  tags?: Record<string, string>;
}
export interface CreateSecurityConfigurationResponse {
  id?: string;
  name?: string;
  arn?: string;
}
export interface EksInfo {
  namespace?: string;
}
export type ContainerInfo =
  | ContainerInfo.EksInfoMember
  | ContainerInfo.$UnknownMember;
export declare namespace ContainerInfo {
  interface EksInfoMember {
    eksInfo: EksInfo;
    $unknown?: never;
  }
  interface $UnknownMember {
    eksInfo?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    eksInfo: (value: EksInfo) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ContainerInfo, visitor: Visitor<T>) => T;
}
export declare const ContainerProviderType: {
  readonly EKS: "EKS";
};
export type ContainerProviderType =
  (typeof ContainerProviderType)[keyof typeof ContainerProviderType];
export interface ContainerProvider {
  type: ContainerProviderType | undefined;
  id: string | undefined;
  info?: ContainerInfo;
}
export interface CreateVirtualClusterRequest {
  name: string | undefined;
  containerProvider: ContainerProvider | undefined;
  clientToken?: string;
  tags?: Record<string, string>;
  securityConfigurationId?: string;
}
export interface CreateVirtualClusterResponse {
  id?: string;
  name?: string;
  arn?: string;
}
export declare class EKSRequestThrottledException extends __BaseException {
  readonly name: "EKSRequestThrottledException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<EKSRequestThrottledException, __BaseException>
  );
}
export interface DeleteJobTemplateRequest {
  id: string | undefined;
}
export interface DeleteJobTemplateResponse {
  id?: string;
}
export interface DeleteManagedEndpointRequest {
  id: string | undefined;
  virtualClusterId: string | undefined;
}
export interface DeleteManagedEndpointResponse {
  id?: string;
  virtualClusterId?: string;
}
export interface DeleteVirtualClusterRequest {
  id: string | undefined;
}
export interface DeleteVirtualClusterResponse {
  id?: string;
}
export interface DescribeJobRunRequest {
  id: string | undefined;
  virtualClusterId: string | undefined;
}
export declare const FailureReason: {
  readonly CLUSTER_UNAVAILABLE: "CLUSTER_UNAVAILABLE";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly USER_ERROR: "USER_ERROR";
  readonly VALIDATION_ERROR: "VALIDATION_ERROR";
};
export type FailureReason = (typeof FailureReason)[keyof typeof FailureReason];
export interface RetryPolicyConfiguration {
  maxAttempts: number | undefined;
}
export interface RetryPolicyExecution {
  currentAttemptCount: number | undefined;
}
export declare const JobRunState: {
  readonly CANCELLED: "CANCELLED";
  readonly CANCEL_PENDING: "CANCEL_PENDING";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly RUNNING: "RUNNING";
  readonly SUBMITTED: "SUBMITTED";
};
export type JobRunState = (typeof JobRunState)[keyof typeof JobRunState];
export interface DescribeJobTemplateRequest {
  id: string | undefined;
}
export interface DescribeManagedEndpointRequest {
  id: string | undefined;
  virtualClusterId: string | undefined;
}
export interface Certificate {
  certificateArn?: string;
  certificateData?: string;
}
export declare const EndpointState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly TERMINATED: "TERMINATED";
  readonly TERMINATED_WITH_ERRORS: "TERMINATED_WITH_ERRORS";
  readonly TERMINATING: "TERMINATING";
};
export type EndpointState = (typeof EndpointState)[keyof typeof EndpointState];
export interface DescribeSecurityConfigurationRequest {
  id: string | undefined;
}
export interface SecurityConfiguration {
  id?: string;
  name?: string;
  arn?: string;
  createdAt?: Date;
  createdBy?: string;
  securityConfigurationData?: SecurityConfigurationData;
  tags?: Record<string, string>;
}
export interface DescribeSecurityConfigurationResponse {
  securityConfiguration?: SecurityConfiguration;
}
export interface DescribeVirtualClusterRequest {
  id: string | undefined;
}
export declare const VirtualClusterState: {
  readonly ARRESTED: "ARRESTED";
  readonly RUNNING: "RUNNING";
  readonly TERMINATED: "TERMINATED";
  readonly TERMINATING: "TERMINATING";
};
export type VirtualClusterState =
  (typeof VirtualClusterState)[keyof typeof VirtualClusterState];
export interface VirtualCluster {
  id?: string;
  name?: string;
  arn?: string;
  state?: VirtualClusterState;
  containerProvider?: ContainerProvider;
  createdAt?: Date;
  tags?: Record<string, string>;
  securityConfigurationId?: string;
}
export interface DescribeVirtualClusterResponse {
  virtualCluster?: VirtualCluster;
}
export interface GetManagedEndpointSessionCredentialsRequest {
  endpointIdentifier: string | undefined;
  virtualClusterIdentifier: string | undefined;
  executionRoleArn: string | undefined;
  credentialType: string | undefined;
  durationInSeconds?: number;
  logContext?: string;
  clientToken?: string;
}
export type Credentials = Credentials.TokenMember | Credentials.$UnknownMember;
export declare namespace Credentials {
  interface TokenMember {
    token: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    token?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    token: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: Credentials, visitor: Visitor<T>) => T;
}
export interface GetManagedEndpointSessionCredentialsResponse {
  id?: string;
  credentials?: Credentials;
  expiresAt?: Date;
}
export declare class RequestThrottledException extends __BaseException {
  readonly name: "RequestThrottledException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<RequestThrottledException, __BaseException>
  );
}
export interface ListJobRunsRequest {
  virtualClusterId: string | undefined;
  createdBefore?: Date;
  createdAfter?: Date;
  name?: string;
  states?: JobRunState[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListJobTemplatesRequest {
  createdAfter?: Date;
  createdBefore?: Date;
  maxResults?: number;
  nextToken?: string;
}
export interface ListManagedEndpointsRequest {
  virtualClusterId: string | undefined;
  createdBefore?: Date;
  createdAfter?: Date;
  types?: string[];
  states?: EndpointState[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListSecurityConfigurationsRequest {
  createdAfter?: Date;
  createdBefore?: Date;
  maxResults?: number;
  nextToken?: string;
}
export interface ListSecurityConfigurationsResponse {
  securityConfigurations?: SecurityConfiguration[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface ListVirtualClustersRequest {
  containerProviderId?: string;
  containerProviderType?: ContainerProviderType;
  createdAfter?: Date;
  createdBefore?: Date;
  states?: VirtualClusterState[];
  maxResults?: number;
  nextToken?: string;
  eksAccessEntryIntegrated?: boolean;
}
export interface ListVirtualClustersResponse {
  virtualClusters?: VirtualCluster[];
  nextToken?: string;
}
export interface StartJobRunResponse {
  id?: string;
  name?: string;
  arn?: string;
  virtualClusterId?: string;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface Configuration {
  classification: string | undefined;
  properties?: Record<string, string>;
  configurations?: Configuration[];
}
export interface ConfigurationOverrides {
  applicationConfiguration?: Configuration[];
  monitoringConfiguration?: MonitoringConfiguration;
}
export interface ParametricConfigurationOverrides {
  applicationConfiguration?: Configuration[];
  monitoringConfiguration?: ParametricMonitoringConfiguration;
}
export interface CreateManagedEndpointRequest {
  name: string | undefined;
  virtualClusterId: string | undefined;
  type: string | undefined;
  releaseLabel: string | undefined;
  executionRoleArn: string | undefined;
  certificateArn?: string;
  configurationOverrides?: ConfigurationOverrides;
  clientToken?: string;
  tags?: Record<string, string>;
}
export interface Endpoint {
  id?: string;
  name?: string;
  arn?: string;
  virtualClusterId?: string;
  type?: string;
  state?: EndpointState;
  releaseLabel?: string;
  executionRoleArn?: string;
  certificateArn?: string;
  certificateAuthority?: Certificate;
  configurationOverrides?: ConfigurationOverrides;
  serverUrl?: string;
  createdAt?: Date;
  securityGroup?: string;
  subnetIds?: string[];
  stateDetails?: string;
  failureReason?: FailureReason;
  tags?: Record<string, string>;
}
export interface JobRun {
  id?: string;
  name?: string;
  virtualClusterId?: string;
  arn?: string;
  state?: JobRunState;
  clientToken?: string;
  executionRoleArn?: string;
  releaseLabel?: string;
  configurationOverrides?: ConfigurationOverrides;
  jobDriver?: JobDriver;
  createdAt?: Date;
  createdBy?: string;
  finishedAt?: Date;
  stateDetails?: string;
  failureReason?: FailureReason;
  tags?: Record<string, string>;
  retryPolicyConfiguration?: RetryPolicyConfiguration;
  retryPolicyExecution?: RetryPolicyExecution;
}
export interface JobTemplateData {
  executionRoleArn: string | undefined;
  releaseLabel: string | undefined;
  configurationOverrides?: ParametricConfigurationOverrides;
  jobDriver: JobDriver | undefined;
  parameterConfiguration?: Record<string, TemplateParameterConfiguration>;
  jobTags?: Record<string, string>;
}
export interface StartJobRunRequest {
  name?: string;
  virtualClusterId: string | undefined;
  clientToken?: string;
  executionRoleArn?: string;
  releaseLabel?: string;
  jobDriver?: JobDriver;
  configurationOverrides?: ConfigurationOverrides;
  tags?: Record<string, string>;
  jobTemplateId?: string;
  jobTemplateParameters?: Record<string, string>;
  retryPolicyConfiguration?: RetryPolicyConfiguration;
}
export interface CreateJobTemplateRequest {
  name: string | undefined;
  clientToken?: string;
  jobTemplateData: JobTemplateData | undefined;
  tags?: Record<string, string>;
  kmsKeyArn?: string;
}
export interface DescribeJobRunResponse {
  jobRun?: JobRun;
}
export interface DescribeManagedEndpointResponse {
  endpoint?: Endpoint;
}
export interface JobTemplate {
  name?: string;
  id?: string;
  arn?: string;
  createdAt?: Date;
  createdBy?: string;
  tags?: Record<string, string>;
  jobTemplateData: JobTemplateData | undefined;
  kmsKeyArn?: string;
  decryptionError?: string;
}
export interface DescribeJobTemplateResponse {
  jobTemplate?: JobTemplate;
}
export interface ListJobRunsResponse {
  jobRuns?: JobRun[];
  nextToken?: string;
}
export interface ListManagedEndpointsResponse {
  endpoints?: Endpoint[];
  nextToken?: string;
}
export interface ListJobTemplatesResponse {
  templates?: JobTemplate[];
  nextToken?: string;
}
export declare const SparkSqlJobDriverFilterSensitiveLog: (
  obj: SparkSqlJobDriver
) => any;
export declare const SparkSubmitJobDriverFilterSensitiveLog: (
  obj: SparkSubmitJobDriver
) => any;
export declare const JobDriverFilterSensitiveLog: (obj: JobDriver) => any;
export declare const CredentialsFilterSensitiveLog: (obj: Credentials) => any;
export declare const GetManagedEndpointSessionCredentialsResponseFilterSensitiveLog: (
  obj: GetManagedEndpointSessionCredentialsResponse
) => any;
export declare const ConfigurationFilterSensitiveLog: (
  obj: Configuration
) => any;
export declare const ConfigurationOverridesFilterSensitiveLog: (
  obj: ConfigurationOverrides
) => any;
export declare const ParametricConfigurationOverridesFilterSensitiveLog: (
  obj: ParametricConfigurationOverrides
) => any;
export declare const CreateManagedEndpointRequestFilterSensitiveLog: (
  obj: CreateManagedEndpointRequest
) => any;
export declare const EndpointFilterSensitiveLog: (obj: Endpoint) => any;
export declare const JobRunFilterSensitiveLog: (obj: JobRun) => any;
export declare const JobTemplateDataFilterSensitiveLog: (
  obj: JobTemplateData
) => any;
export declare const StartJobRunRequestFilterSensitiveLog: (
  obj: StartJobRunRequest
) => any;
export declare const CreateJobTemplateRequestFilterSensitiveLog: (
  obj: CreateJobTemplateRequest
) => any;
export declare const DescribeJobRunResponseFilterSensitiveLog: (
  obj: DescribeJobRunResponse
) => any;
export declare const DescribeManagedEndpointResponseFilterSensitiveLog: (
  obj: DescribeManagedEndpointResponse
) => any;
export declare const JobTemplateFilterSensitiveLog: (obj: JobTemplate) => any;
export declare const DescribeJobTemplateResponseFilterSensitiveLog: (
  obj: DescribeJobTemplateResponse
) => any;
export declare const ListJobRunsResponseFilterSensitiveLog: (
  obj: ListJobRunsResponse
) => any;
export declare const ListManagedEndpointsResponseFilterSensitiveLog: (
  obj: ListManagedEndpointsResponse
) => any;
export declare const ListJobTemplatesResponseFilterSensitiveLog: (
  obj: ListJobTemplatesResponse
) => any;
