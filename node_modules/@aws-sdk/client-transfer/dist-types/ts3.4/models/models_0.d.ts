import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { TransferServiceException as __BaseException } from "./TransferServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const AgreementStatusType: {
  readonly ACTIVE: "ACTIVE";
  readonly INACTIVE: "INACTIVE";
};
export type AgreementStatusType =
  (typeof AgreementStatusType)[keyof typeof AgreementStatusType];
export declare const CompressionEnum: {
  readonly DISABLED: "DISABLED";
  readonly ZLIB: "ZLIB";
};
export type CompressionEnum =
  (typeof CompressionEnum)[keyof typeof CompressionEnum];
export declare const EncryptionAlg: {
  readonly AES128_CBC: "AES128_CBC";
  readonly AES192_CBC: "AES192_CBC";
  readonly AES256_CBC: "AES256_CBC";
  readonly DES_EDE3_CBC: "DES_EDE3_CBC";
  readonly NONE: "NONE";
};
export type EncryptionAlg = (typeof EncryptionAlg)[keyof typeof EncryptionAlg];
export declare const MdnResponse: {
  readonly NONE: "NONE";
  readonly SYNC: "SYNC";
};
export type MdnResponse = (typeof MdnResponse)[keyof typeof MdnResponse];
export declare const MdnSigningAlg: {
  readonly DEFAULT: "DEFAULT";
  readonly NONE: "NONE";
  readonly SHA1: "SHA1";
  readonly SHA256: "SHA256";
  readonly SHA384: "SHA384";
  readonly SHA512: "SHA512";
};
export type MdnSigningAlg = (typeof MdnSigningAlg)[keyof typeof MdnSigningAlg];
export declare const SigningAlg: {
  readonly NONE: "NONE";
  readonly SHA1: "SHA1";
  readonly SHA256: "SHA256";
  readonly SHA384: "SHA384";
  readonly SHA512: "SHA512";
};
export type SigningAlg = (typeof SigningAlg)[keyof typeof SigningAlg];
export interface As2ConnectorConfig {
  LocalProfileId?: string;
  PartnerProfileId?: string;
  MessageSubject?: string;
  Compression?: CompressionEnum;
  EncryptionAlgorithm?: EncryptionAlg;
  SigningAlgorithm?: SigningAlg;
  MdnSigningAlgorithm?: MdnSigningAlg;
  MdnResponse?: MdnResponse;
  BasicAuthSecretId?: string;
}
export declare const As2Transport: {
  readonly HTTP: "HTTP";
};
export type As2Transport = (typeof As2Transport)[keyof typeof As2Transport];
export declare const CertificateStatusType: {
  readonly ACTIVE: "ACTIVE";
  readonly INACTIVE: "INACTIVE";
  readonly PENDING_ROTATION: "PENDING_ROTATION";
};
export type CertificateStatusType =
  (typeof CertificateStatusType)[keyof typeof CertificateStatusType];
export declare const CertificateType: {
  readonly CERTIFICATE: "CERTIFICATE";
  readonly CERTIFICATE_WITH_PRIVATE_KEY: "CERTIFICATE_WITH_PRIVATE_KEY";
};
export type CertificateType =
  (typeof CertificateType)[keyof typeof CertificateType];
export declare const CertificateUsageType: {
  readonly ENCRYPTION: "ENCRYPTION";
  readonly SIGNING: "SIGNING";
  readonly TLS: "TLS";
};
export type CertificateUsageType =
  (typeof CertificateUsageType)[keyof typeof CertificateUsageType];
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface EfsFileLocation {
  FileSystemId?: string;
  Path?: string;
}
export interface S3InputFileLocation {
  Bucket?: string;
  Key?: string;
}
export interface InputFileLocation {
  S3FileLocation?: S3InputFileLocation;
  EfsFileLocation?: EfsFileLocation;
}
export declare const OverwriteExisting: {
  readonly FALSE: "FALSE";
  readonly TRUE: "TRUE";
};
export type OverwriteExisting =
  (typeof OverwriteExisting)[keyof typeof OverwriteExisting];
export interface CopyStepDetails {
  Name?: string;
  DestinationFileLocation?: InputFileLocation;
  OverwriteExisting?: OverwriteExisting;
  SourceFileLocation?: string;
}
export declare const MapType: {
  readonly DIRECTORY: "DIRECTORY";
  readonly FILE: "FILE";
};
export type MapType = (typeof MapType)[keyof typeof MapType];
export interface HomeDirectoryMapEntry {
  Entry: string | undefined;
  Target: string | undefined;
  Type?: MapType;
}
export declare const HomeDirectoryType: {
  readonly LOGICAL: "LOGICAL";
  readonly PATH: "PATH";
};
export type HomeDirectoryType =
  (typeof HomeDirectoryType)[keyof typeof HomeDirectoryType];
export interface PosixProfile {
  Uid: number | undefined;
  Gid: number | undefined;
  SecondaryGids?: number[];
}
export interface CreateAccessRequest {
  HomeDirectory?: string;
  HomeDirectoryType?: HomeDirectoryType;
  HomeDirectoryMappings?: HomeDirectoryMapEntry[];
  Policy?: string;
  PosixProfile?: PosixProfile;
  Role: string | undefined;
  ServerId: string | undefined;
  ExternalId: string | undefined;
}
export interface CreateAccessResponse {
  ServerId: string | undefined;
  ExternalId: string | undefined;
}
export declare class InternalServiceError extends __BaseException {
  readonly name: "InternalServiceError";
  readonly $fault: "server";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServiceError, __BaseException>
  );
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export declare class ResourceExistsException extends __BaseException {
  readonly name: "ResourceExistsException";
  readonly $fault: "client";
  Message: string | undefined;
  Resource: string | undefined;
  ResourceType: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceExistsException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message: string | undefined;
  Resource: string | undefined;
  ResourceType: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateAgreementRequest {
  Description?: string;
  ServerId: string | undefined;
  LocalProfileId: string | undefined;
  PartnerProfileId: string | undefined;
  BaseDirectory: string | undefined;
  AccessRole: string | undefined;
  Status?: AgreementStatusType;
  Tags?: Tag[];
}
export interface CreateAgreementResponse {
  AgreementId: string | undefined;
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  RetryAfterSeconds?: string;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface SftpConnectorConfig {
  UserSecretId?: string;
  TrustedHostKeys?: string[];
}
export interface CreateConnectorRequest {
  Url: string | undefined;
  As2Config?: As2ConnectorConfig;
  AccessRole: string | undefined;
  LoggingRole?: string;
  Tags?: Tag[];
  SftpConfig?: SftpConnectorConfig;
  SecurityPolicyName?: string;
}
export interface CreateConnectorResponse {
  ConnectorId: string | undefined;
}
export declare const ProfileType: {
  readonly LOCAL: "LOCAL";
  readonly PARTNER: "PARTNER";
};
export type ProfileType = (typeof ProfileType)[keyof typeof ProfileType];
export interface CreateProfileRequest {
  As2Id: string | undefined;
  ProfileType: ProfileType | undefined;
  CertificateIds?: string[];
  Tags?: Tag[];
}
export interface CreateProfileResponse {
  ProfileId: string | undefined;
}
export declare const Domain: {
  readonly EFS: "EFS";
  readonly S3: "S3";
};
export type Domain = (typeof Domain)[keyof typeof Domain];
export interface EndpointDetails {
  AddressAllocationIds?: string[];
  SubnetIds?: string[];
  VpcEndpointId?: string;
  VpcId?: string;
  SecurityGroupIds?: string[];
}
export declare const EndpointType: {
  readonly PUBLIC: "PUBLIC";
  readonly VPC: "VPC";
  readonly VPC_ENDPOINT: "VPC_ENDPOINT";
};
export type EndpointType = (typeof EndpointType)[keyof typeof EndpointType];
export declare const SftpAuthenticationMethods: {
  readonly PASSWORD: "PASSWORD";
  readonly PUBLIC_KEY: "PUBLIC_KEY";
  readonly PUBLIC_KEY_AND_PASSWORD: "PUBLIC_KEY_AND_PASSWORD";
  readonly PUBLIC_KEY_OR_PASSWORD: "PUBLIC_KEY_OR_PASSWORD";
};
export type SftpAuthenticationMethods =
  (typeof SftpAuthenticationMethods)[keyof typeof SftpAuthenticationMethods];
export interface IdentityProviderDetails {
  Url?: string;
  InvocationRole?: string;
  DirectoryId?: string;
  Function?: string;
  SftpAuthenticationMethods?: SftpAuthenticationMethods;
}
export declare const IdentityProviderType: {
  readonly API_GATEWAY: "API_GATEWAY";
  readonly AWS_DIRECTORY_SERVICE: "AWS_DIRECTORY_SERVICE";
  readonly AWS_LAMBDA: "AWS_LAMBDA";
  readonly SERVICE_MANAGED: "SERVICE_MANAGED";
};
export type IdentityProviderType =
  (typeof IdentityProviderType)[keyof typeof IdentityProviderType];
export declare const SetStatOption: {
  readonly DEFAULT: "DEFAULT";
  readonly ENABLE_NO_OP: "ENABLE_NO_OP";
};
export type SetStatOption = (typeof SetStatOption)[keyof typeof SetStatOption];
export declare const TlsSessionResumptionMode: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
  readonly ENFORCED: "ENFORCED";
};
export type TlsSessionResumptionMode =
  (typeof TlsSessionResumptionMode)[keyof typeof TlsSessionResumptionMode];
export interface ProtocolDetails {
  PassiveIp?: string;
  TlsSessionResumptionMode?: TlsSessionResumptionMode;
  SetStatOption?: SetStatOption;
  As2Transports?: As2Transport[];
}
export declare const Protocol: {
  readonly AS2: "AS2";
  readonly FTP: "FTP";
  readonly FTPS: "FTPS";
  readonly SFTP: "SFTP";
};
export type Protocol = (typeof Protocol)[keyof typeof Protocol];
export declare const DirectoryListingOptimization: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type DirectoryListingOptimization =
  (typeof DirectoryListingOptimization)[keyof typeof DirectoryListingOptimization];
export interface S3StorageOptions {
  DirectoryListingOptimization?: DirectoryListingOptimization;
}
export interface WorkflowDetail {
  WorkflowId: string | undefined;
  ExecutionRole: string | undefined;
}
export interface WorkflowDetails {
  OnUpload?: WorkflowDetail[];
  OnPartialUpload?: WorkflowDetail[];
}
export interface CreateServerRequest {
  Certificate?: string;
  Domain?: Domain;
  EndpointDetails?: EndpointDetails;
  EndpointType?: EndpointType;
  HostKey?: string;
  IdentityProviderDetails?: IdentityProviderDetails;
  IdentityProviderType?: IdentityProviderType;
  LoggingRole?: string;
  PostAuthenticationLoginBanner?: string;
  PreAuthenticationLoginBanner?: string;
  Protocols?: Protocol[];
  ProtocolDetails?: ProtocolDetails;
  SecurityPolicyName?: string;
  Tags?: Tag[];
  WorkflowDetails?: WorkflowDetails;
  StructuredLogDestinations?: string[];
  S3StorageOptions?: S3StorageOptions;
}
export interface CreateServerResponse {
  ServerId: string | undefined;
}
export interface CreateUserRequest {
  HomeDirectory?: string;
  HomeDirectoryType?: HomeDirectoryType;
  HomeDirectoryMappings?: HomeDirectoryMapEntry[];
  Policy?: string;
  PosixProfile?: PosixProfile;
  Role: string | undefined;
  ServerId: string | undefined;
  SshPublicKeyBody?: string;
  Tags?: Tag[];
  UserName: string | undefined;
}
export interface CreateUserResponse {
  ServerId: string | undefined;
  UserName: string | undefined;
}
export interface CustomStepDetails {
  Name?: string;
  Target?: string;
  TimeoutSeconds?: number;
  SourceFileLocation?: string;
}
export declare const EncryptionType: {
  readonly PGP: "PGP";
};
export type EncryptionType =
  (typeof EncryptionType)[keyof typeof EncryptionType];
export interface DecryptStepDetails {
  Name?: string;
  Type: EncryptionType | undefined;
  SourceFileLocation?: string;
  OverwriteExisting?: OverwriteExisting;
  DestinationFileLocation: InputFileLocation | undefined;
}
export interface DeleteStepDetails {
  Name?: string;
  SourceFileLocation?: string;
}
export interface S3Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface TagStepDetails {
  Name?: string;
  Tags?: S3Tag[];
  SourceFileLocation?: string;
}
export declare const WorkflowStepType: {
  readonly COPY: "COPY";
  readonly CUSTOM: "CUSTOM";
  readonly DECRYPT: "DECRYPT";
  readonly DELETE: "DELETE";
  readonly TAG: "TAG";
};
export type WorkflowStepType =
  (typeof WorkflowStepType)[keyof typeof WorkflowStepType];
export interface WorkflowStep {
  Type?: WorkflowStepType;
  CopyStepDetails?: CopyStepDetails;
  CustomStepDetails?: CustomStepDetails;
  DeleteStepDetails?: DeleteStepDetails;
  TagStepDetails?: TagStepDetails;
  DecryptStepDetails?: DecryptStepDetails;
}
export interface CreateWorkflowRequest {
  Description?: string;
  Steps: WorkflowStep[] | undefined;
  OnExceptionSteps?: WorkflowStep[];
  Tags?: Tag[];
}
export interface CreateWorkflowResponse {
  WorkflowId: string | undefined;
}
export declare const CustomStepStatus: {
  readonly FAILURE: "FAILURE";
  readonly SUCCESS: "SUCCESS";
};
export type CustomStepStatus =
  (typeof CustomStepStatus)[keyof typeof CustomStepStatus];
export interface DeleteAccessRequest {
  ServerId: string | undefined;
  ExternalId: string | undefined;
}
export interface DeleteAgreementRequest {
  AgreementId: string | undefined;
  ServerId: string | undefined;
}
export interface DeleteCertificateRequest {
  CertificateId: string | undefined;
}
export interface DeleteConnectorRequest {
  ConnectorId: string | undefined;
}
export interface DeleteHostKeyRequest {
  ServerId: string | undefined;
  HostKeyId: string | undefined;
}
export interface DeleteProfileRequest {
  ProfileId: string | undefined;
}
export interface DeleteServerRequest {
  ServerId: string | undefined;
}
export interface DeleteSshPublicKeyRequest {
  ServerId: string | undefined;
  SshPublicKeyId: string | undefined;
  UserName: string | undefined;
}
export interface DeleteUserRequest {
  ServerId: string | undefined;
  UserName: string | undefined;
}
export interface DeleteWorkflowRequest {
  WorkflowId: string | undefined;
}
export interface DescribeAccessRequest {
  ServerId: string | undefined;
  ExternalId: string | undefined;
}
export interface DescribedAccess {
  HomeDirectory?: string;
  HomeDirectoryMappings?: HomeDirectoryMapEntry[];
  HomeDirectoryType?: HomeDirectoryType;
  Policy?: string;
  PosixProfile?: PosixProfile;
  Role?: string;
  ExternalId?: string;
}
export interface DescribeAccessResponse {
  ServerId: string | undefined;
  Access: DescribedAccess | undefined;
}
export interface DescribeAgreementRequest {
  AgreementId: string | undefined;
  ServerId: string | undefined;
}
export interface DescribedAgreement {
  Arn: string | undefined;
  AgreementId?: string;
  Description?: string;
  Status?: AgreementStatusType;
  ServerId?: string;
  LocalProfileId?: string;
  PartnerProfileId?: string;
  BaseDirectory?: string;
  AccessRole?: string;
  Tags?: Tag[];
}
export interface DescribeAgreementResponse {
  Agreement: DescribedAgreement | undefined;
}
export interface DescribeCertificateRequest {
  CertificateId: string | undefined;
}
export interface DescribedCertificate {
  Arn: string | undefined;
  CertificateId?: string;
  Usage?: CertificateUsageType;
  Status?: CertificateStatusType;
  Certificate?: string;
  CertificateChain?: string;
  ActiveDate?: Date;
  InactiveDate?: Date;
  Serial?: string;
  NotBeforeDate?: Date;
  NotAfterDate?: Date;
  Type?: CertificateType;
  Description?: string;
  Tags?: Tag[];
}
export interface DescribeCertificateResponse {
  Certificate: DescribedCertificate | undefined;
}
export interface DescribeConnectorRequest {
  ConnectorId: string | undefined;
}
export interface DescribedConnector {
  Arn: string | undefined;
  ConnectorId?: string;
  Url?: string;
  As2Config?: As2ConnectorConfig;
  AccessRole?: string;
  LoggingRole?: string;
  Tags?: Tag[];
  SftpConfig?: SftpConnectorConfig;
  ServiceManagedEgressIpAddresses?: string[];
  SecurityPolicyName?: string;
}
export interface DescribeConnectorResponse {
  Connector: DescribedConnector | undefined;
}
export interface S3FileLocation {
  Bucket?: string;
  Key?: string;
  VersionId?: string;
  Etag?: string;
}
export interface FileLocation {
  S3FileLocation?: S3FileLocation;
  EfsFileLocation?: EfsFileLocation;
}
export interface LoggingConfiguration {
  LoggingRole?: string;
  LogGroupName?: string;
}
export declare const ExecutionErrorType: {
  readonly ALREADY_EXISTS: "ALREADY_EXISTS";
  readonly BAD_REQUEST: "BAD_REQUEST";
  readonly CUSTOM_STEP_FAILED: "CUSTOM_STEP_FAILED";
  readonly INTERNAL_SERVER_ERROR: "INTERNAL_SERVER_ERROR";
  readonly NOT_FOUND: "NOT_FOUND";
  readonly PERMISSION_DENIED: "PERMISSION_DENIED";
  readonly THROTTLED: "THROTTLED";
  readonly TIMEOUT: "TIMEOUT";
};
export type ExecutionErrorType =
  (typeof ExecutionErrorType)[keyof typeof ExecutionErrorType];
export interface ExecutionError {
  Type: ExecutionErrorType | undefined;
  Message: string | undefined;
}
export interface ExecutionStepResult {
  StepType?: WorkflowStepType;
  Outputs?: string;
  Error?: ExecutionError;
}
export interface ExecutionResults {
  Steps?: ExecutionStepResult[];
  OnExceptionSteps?: ExecutionStepResult[];
}
export interface UserDetails {
  UserName: string | undefined;
  ServerId: string | undefined;
  SessionId?: string;
}
export interface ServiceMetadata {
  UserDetails: UserDetails | undefined;
}
export declare const ExecutionStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly EXCEPTION: "EXCEPTION";
  readonly HANDLING_EXCEPTION: "HANDLING_EXCEPTION";
  readonly IN_PROGRESS: "IN_PROGRESS";
};
export type ExecutionStatus =
  (typeof ExecutionStatus)[keyof typeof ExecutionStatus];
export interface DescribedExecution {
  ExecutionId?: string;
  InitialFileLocation?: FileLocation;
  ServiceMetadata?: ServiceMetadata;
  ExecutionRole?: string;
  LoggingConfiguration?: LoggingConfiguration;
  PosixProfile?: PosixProfile;
  Status?: ExecutionStatus;
  Results?: ExecutionResults;
}
export interface DescribedHostKey {
  Arn: string | undefined;
  HostKeyId?: string;
  HostKeyFingerprint?: string;
  Description?: string;
  Type?: string;
  DateImported?: Date;
  Tags?: Tag[];
}
export interface DescribedProfile {
  Arn: string | undefined;
  ProfileId?: string;
  ProfileType?: ProfileType;
  As2Id?: string;
  CertificateIds?: string[];
  Tags?: Tag[];
}
export declare const SecurityPolicyProtocol: {
  readonly FTPS: "FTPS";
  readonly SFTP: "SFTP";
};
export type SecurityPolicyProtocol =
  (typeof SecurityPolicyProtocol)[keyof typeof SecurityPolicyProtocol];
export declare const SecurityPolicyResourceType: {
  readonly CONNECTOR: "CONNECTOR";
  readonly SERVER: "SERVER";
};
export type SecurityPolicyResourceType =
  (typeof SecurityPolicyResourceType)[keyof typeof SecurityPolicyResourceType];
export interface DescribedSecurityPolicy {
  Fips?: boolean;
  SecurityPolicyName: string | undefined;
  SshCiphers?: string[];
  SshKexs?: string[];
  SshMacs?: string[];
  TlsCiphers?: string[];
  SshHostKeyAlgorithms?: string[];
  Type?: SecurityPolicyResourceType;
  Protocols?: SecurityPolicyProtocol[];
}
export declare const State: {
  readonly OFFLINE: "OFFLINE";
  readonly ONLINE: "ONLINE";
  readonly STARTING: "STARTING";
  readonly START_FAILED: "START_FAILED";
  readonly STOPPING: "STOPPING";
  readonly STOP_FAILED: "STOP_FAILED";
};
export type State = (typeof State)[keyof typeof State];
export interface DescribedServer {
  Arn: string | undefined;
  Certificate?: string;
  ProtocolDetails?: ProtocolDetails;
  Domain?: Domain;
  EndpointDetails?: EndpointDetails;
  EndpointType?: EndpointType;
  HostKeyFingerprint?: string;
  IdentityProviderDetails?: IdentityProviderDetails;
  IdentityProviderType?: IdentityProviderType;
  LoggingRole?: string;
  PostAuthenticationLoginBanner?: string;
  PreAuthenticationLoginBanner?: string;
  Protocols?: Protocol[];
  SecurityPolicyName?: string;
  ServerId?: string;
  State?: State;
  Tags?: Tag[];
  UserCount?: number;
  WorkflowDetails?: WorkflowDetails;
  StructuredLogDestinations?: string[];
  S3StorageOptions?: S3StorageOptions;
  As2ServiceManagedEgressIpAddresses?: string[];
}
export interface SshPublicKey {
  DateImported: Date | undefined;
  SshPublicKeyBody: string | undefined;
  SshPublicKeyId: string | undefined;
}
export interface DescribedUser {
  Arn: string | undefined;
  HomeDirectory?: string;
  HomeDirectoryMappings?: HomeDirectoryMapEntry[];
  HomeDirectoryType?: HomeDirectoryType;
  Policy?: string;
  PosixProfile?: PosixProfile;
  Role?: string;
  SshPublicKeys?: SshPublicKey[];
  Tags?: Tag[];
  UserName?: string;
}
export interface DescribedWorkflow {
  Arn: string | undefined;
  Description?: string;
  Steps?: WorkflowStep[];
  OnExceptionSteps?: WorkflowStep[];
  WorkflowId?: string;
  Tags?: Tag[];
}
export interface DescribeExecutionRequest {
  ExecutionId: string | undefined;
  WorkflowId: string | undefined;
}
export interface DescribeExecutionResponse {
  WorkflowId: string | undefined;
  Execution: DescribedExecution | undefined;
}
export interface DescribeHostKeyRequest {
  ServerId: string | undefined;
  HostKeyId: string | undefined;
}
export interface DescribeHostKeyResponse {
  HostKey: DescribedHostKey | undefined;
}
export interface DescribeProfileRequest {
  ProfileId: string | undefined;
}
export interface DescribeProfileResponse {
  Profile: DescribedProfile | undefined;
}
export interface DescribeSecurityPolicyRequest {
  SecurityPolicyName: string | undefined;
}
export interface DescribeSecurityPolicyResponse {
  SecurityPolicy: DescribedSecurityPolicy | undefined;
}
export interface DescribeServerRequest {
  ServerId: string | undefined;
}
export interface DescribeServerResponse {
  Server: DescribedServer | undefined;
}
export interface DescribeUserRequest {
  ServerId: string | undefined;
  UserName: string | undefined;
}
export interface DescribeUserResponse {
  ServerId: string | undefined;
  User: DescribedUser | undefined;
}
export interface DescribeWorkflowRequest {
  WorkflowId: string | undefined;
}
export interface DescribeWorkflowResponse {
  Workflow: DescribedWorkflow | undefined;
}
export interface ImportCertificateRequest {
  Usage: CertificateUsageType | undefined;
  Certificate: string | undefined;
  CertificateChain?: string;
  PrivateKey?: string;
  ActiveDate?: Date;
  InactiveDate?: Date;
  Description?: string;
  Tags?: Tag[];
}
export interface ImportCertificateResponse {
  CertificateId: string | undefined;
}
export interface ImportHostKeyRequest {
  ServerId: string | undefined;
  HostKeyBody: string | undefined;
  Description?: string;
  Tags?: Tag[];
}
export interface ImportHostKeyResponse {
  ServerId: string | undefined;
  HostKeyId: string | undefined;
}
export interface ImportSshPublicKeyRequest {
  ServerId: string | undefined;
  SshPublicKeyBody: string | undefined;
  UserName: string | undefined;
}
export interface ImportSshPublicKeyResponse {
  ServerId: string | undefined;
  SshPublicKeyId: string | undefined;
  UserName: string | undefined;
}
export declare class InvalidNextTokenException extends __BaseException {
  readonly name: "InvalidNextTokenException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>
  );
}
export interface ListAccessesRequest {
  MaxResults?: number;
  NextToken?: string;
  ServerId: string | undefined;
}
export interface ListedAccess {
  HomeDirectory?: string;
  HomeDirectoryType?: HomeDirectoryType;
  Role?: string;
  ExternalId?: string;
}
export interface ListAccessesResponse {
  NextToken?: string;
  ServerId: string | undefined;
  Accesses: ListedAccess[] | undefined;
}
export interface ListAgreementsRequest {
  MaxResults?: number;
  NextToken?: string;
  ServerId: string | undefined;
}
export interface ListedAgreement {
  Arn?: string;
  AgreementId?: string;
  Description?: string;
  Status?: AgreementStatusType;
  ServerId?: string;
  LocalProfileId?: string;
  PartnerProfileId?: string;
}
export interface ListAgreementsResponse {
  NextToken?: string;
  Agreements: ListedAgreement[] | undefined;
}
export interface ListCertificatesRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListedCertificate {
  Arn?: string;
  CertificateId?: string;
  Usage?: CertificateUsageType;
  Status?: CertificateStatusType;
  ActiveDate?: Date;
  InactiveDate?: Date;
  Type?: CertificateType;
  Description?: string;
}
export interface ListCertificatesResponse {
  NextToken?: string;
  Certificates: ListedCertificate[] | undefined;
}
export interface ListConnectorsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListedConnector {
  Arn?: string;
  ConnectorId?: string;
  Url?: string;
}
export interface ListConnectorsResponse {
  NextToken?: string;
  Connectors: ListedConnector[] | undefined;
}
export interface ListedExecution {
  ExecutionId?: string;
  InitialFileLocation?: FileLocation;
  ServiceMetadata?: ServiceMetadata;
  Status?: ExecutionStatus;
}
export interface ListedHostKey {
  Arn: string | undefined;
  HostKeyId?: string;
  Fingerprint?: string;
  Description?: string;
  Type?: string;
  DateImported?: Date;
}
export interface ListedProfile {
  Arn?: string;
  ProfileId?: string;
  As2Id?: string;
  ProfileType?: ProfileType;
}
export interface ListedServer {
  Arn: string | undefined;
  Domain?: Domain;
  IdentityProviderType?: IdentityProviderType;
  EndpointType?: EndpointType;
  LoggingRole?: string;
  ServerId?: string;
  State?: State;
  UserCount?: number;
}
export interface ListedUser {
  Arn: string | undefined;
  HomeDirectory?: string;
  HomeDirectoryType?: HomeDirectoryType;
  Role?: string;
  SshPublicKeyCount?: number;
  UserName?: string;
}
export interface ListedWorkflow {
  WorkflowId?: string;
  Description?: string;
  Arn?: string;
}
export interface ListExecutionsRequest {
  MaxResults?: number;
  NextToken?: string;
  WorkflowId: string | undefined;
}
export interface ListExecutionsResponse {
  NextToken?: string;
  WorkflowId: string | undefined;
  Executions: ListedExecution[] | undefined;
}
export interface ListHostKeysRequest {
  MaxResults?: number;
  NextToken?: string;
  ServerId: string | undefined;
}
export interface ListHostKeysResponse {
  NextToken?: string;
  ServerId: string | undefined;
  HostKeys: ListedHostKey[] | undefined;
}
export interface ListProfilesRequest {
  MaxResults?: number;
  NextToken?: string;
  ProfileType?: ProfileType;
}
export interface ListProfilesResponse {
  NextToken?: string;
  Profiles: ListedProfile[] | undefined;
}
export interface ListSecurityPoliciesRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListSecurityPoliciesResponse {
  NextToken?: string;
  SecurityPolicyNames: string[] | undefined;
}
export interface ListServersRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListServersResponse {
  NextToken?: string;
  Servers: ListedServer[] | undefined;
}
export interface ListTagsForResourceRequest {
  Arn: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListTagsForResourceResponse {
  Arn?: string;
  NextToken?: string;
  Tags?: Tag[];
}
export interface ListUsersRequest {
  MaxResults?: number;
  NextToken?: string;
  ServerId: string | undefined;
}
export interface ListUsersResponse {
  NextToken?: string;
  ServerId: string | undefined;
  Users: ListedUser[] | undefined;
}
export interface ListWorkflowsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListWorkflowsResponse {
  NextToken?: string;
  Workflows: ListedWorkflow[] | undefined;
}
export interface SendWorkflowStepStateRequest {
  WorkflowId: string | undefined;
  ExecutionId: string | undefined;
  Token: string | undefined;
  Status: CustomStepStatus | undefined;
}
export interface SendWorkflowStepStateResponse {}
export interface StartDirectoryListingRequest {
  ConnectorId: string | undefined;
  RemoteDirectoryPath: string | undefined;
  MaxItems?: number;
  OutputDirectoryPath: string | undefined;
}
export interface StartDirectoryListingResponse {
  ListingId: string | undefined;
  OutputFileName: string | undefined;
}
export interface StartFileTransferRequest {
  ConnectorId: string | undefined;
  SendFilePaths?: string[];
  RetrieveFilePaths?: string[];
  LocalDirectoryPath?: string;
  RemoteDirectoryPath?: string;
}
export interface StartFileTransferResponse {
  TransferId: string | undefined;
}
export interface StartServerRequest {
  ServerId: string | undefined;
}
export interface StopServerRequest {
  ServerId: string | undefined;
}
export interface TagResourceRequest {
  Arn: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TestConnectionRequest {
  ConnectorId: string | undefined;
}
export interface TestConnectionResponse {
  ConnectorId?: string;
  Status?: string;
  StatusMessage?: string;
}
export interface TestIdentityProviderRequest {
  ServerId: string | undefined;
  ServerProtocol?: Protocol;
  SourceIp?: string;
  UserName: string | undefined;
  UserPassword?: string;
}
export interface TestIdentityProviderResponse {
  Response?: string;
  StatusCode: number | undefined;
  Message?: string;
  Url: string | undefined;
}
export interface UntagResourceRequest {
  Arn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UpdateAccessRequest {
  HomeDirectory?: string;
  HomeDirectoryType?: HomeDirectoryType;
  HomeDirectoryMappings?: HomeDirectoryMapEntry[];
  Policy?: string;
  PosixProfile?: PosixProfile;
  Role?: string;
  ServerId: string | undefined;
  ExternalId: string | undefined;
}
export interface UpdateAccessResponse {
  ServerId: string | undefined;
  ExternalId: string | undefined;
}
export interface UpdateAgreementRequest {
  AgreementId: string | undefined;
  ServerId: string | undefined;
  Description?: string;
  Status?: AgreementStatusType;
  LocalProfileId?: string;
  PartnerProfileId?: string;
  BaseDirectory?: string;
  AccessRole?: string;
}
export interface UpdateAgreementResponse {
  AgreementId: string | undefined;
}
export interface UpdateCertificateRequest {
  CertificateId: string | undefined;
  ActiveDate?: Date;
  InactiveDate?: Date;
  Description?: string;
}
export interface UpdateCertificateResponse {
  CertificateId: string | undefined;
}
export interface UpdateConnectorRequest {
  ConnectorId: string | undefined;
  Url?: string;
  As2Config?: As2ConnectorConfig;
  AccessRole?: string;
  LoggingRole?: string;
  SftpConfig?: SftpConnectorConfig;
  SecurityPolicyName?: string;
}
export interface UpdateConnectorResponse {
  ConnectorId: string | undefined;
}
export interface UpdateHostKeyRequest {
  ServerId: string | undefined;
  HostKeyId: string | undefined;
  Description: string | undefined;
}
export interface UpdateHostKeyResponse {
  ServerId: string | undefined;
  HostKeyId: string | undefined;
}
export interface UpdateProfileRequest {
  ProfileId: string | undefined;
  CertificateIds?: string[];
}
export interface UpdateProfileResponse {
  ProfileId: string | undefined;
}
export interface UpdateServerRequest {
  Certificate?: string;
  ProtocolDetails?: ProtocolDetails;
  EndpointDetails?: EndpointDetails;
  EndpointType?: EndpointType;
  HostKey?: string;
  IdentityProviderDetails?: IdentityProviderDetails;
  LoggingRole?: string;
  PostAuthenticationLoginBanner?: string;
  PreAuthenticationLoginBanner?: string;
  Protocols?: Protocol[];
  SecurityPolicyName?: string;
  ServerId: string | undefined;
  WorkflowDetails?: WorkflowDetails;
  StructuredLogDestinations?: string[];
  S3StorageOptions?: S3StorageOptions;
}
export interface UpdateServerResponse {
  ServerId: string | undefined;
}
export interface UpdateUserRequest {
  HomeDirectory?: string;
  HomeDirectoryType?: HomeDirectoryType;
  HomeDirectoryMappings?: HomeDirectoryMapEntry[];
  Policy?: string;
  PosixProfile?: PosixProfile;
  Role?: string;
  ServerId: string | undefined;
  UserName: string | undefined;
}
export interface UpdateUserResponse {
  ServerId: string | undefined;
  UserName: string | undefined;
}
export declare const CreateServerRequestFilterSensitiveLog: (
  obj: CreateServerRequest
) => any;
export declare const DescribedCertificateFilterSensitiveLog: (
  obj: DescribedCertificate
) => any;
export declare const DescribeCertificateResponseFilterSensitiveLog: (
  obj: DescribeCertificateResponse
) => any;
export declare const ImportCertificateRequestFilterSensitiveLog: (
  obj: ImportCertificateRequest
) => any;
export declare const ImportHostKeyRequestFilterSensitiveLog: (
  obj: ImportHostKeyRequest
) => any;
export declare const TestIdentityProviderRequestFilterSensitiveLog: (
  obj: TestIdentityProviderRequest
) => any;
export declare const UpdateServerRequestFilterSensitiveLog: (
  obj: UpdateServerRequest
) => any;
