import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { HealthLakeServiceException as __BaseException } from "../models/HealthLakeServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_CreateFHIRDatastoreCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFHIRDatastore");
    let body;
    body = JSON.stringify(se_CreateFHIRDatastoreRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFHIRDatastoreCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFHIRDatastore");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFHIRDatastoreCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFHIRDatastore");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFHIRExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFHIRExportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFHIRImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFHIRImportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFHIRDatastoresCommand = async (input, context) => {
    const headers = sharedHeaders("ListFHIRDatastores");
    let body;
    body = JSON.stringify(se_ListFHIRDatastoresRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFHIRExportJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFHIRExportJobs");
    let body;
    body = JSON.stringify(se_ListFHIRExportJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFHIRImportJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFHIRImportJobs");
    let body;
    body = JSON.stringify(se_ListFHIRImportJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartFHIRExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartFHIRExportJob");
    let body;
    body = JSON.stringify(se_StartFHIRExportJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartFHIRImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartFHIRImportJob");
    let body;
    body = JSON.stringify(se_StartFHIRImportJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateFHIRDatastoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteFHIRDatastoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFHIRDatastoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFHIRDatastoreResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFHIRExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFHIRExportJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFHIRImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFHIRImportJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListFHIRDatastoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListFHIRDatastoresResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListFHIRExportJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListFHIRExportJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListFHIRImportJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListFHIRImportJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartFHIRExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartFHIRImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.healthlake#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.healthlake#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.healthlake#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.healthlake#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.healthlake#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.healthlake#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateFHIRDatastoreRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DatastoreName: [],
        DatastoreTypeVersion: [],
        IdentityProviderConfiguration: _json,
        PreloadDataConfig: _json,
        SseConfiguration: _json,
        Tags: _json,
    });
};
const se_DatastoreFilter = (input, context) => {
    return take(input, {
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        DatastoreName: [],
        DatastoreStatus: [],
    });
};
const se_ListFHIRDatastoresRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_DatastoreFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListFHIRExportJobsRequest = (input, context) => {
    return take(input, {
        DatastoreId: [],
        JobName: [],
        JobStatus: [],
        MaxResults: [],
        NextToken: [],
        SubmittedAfter: (_) => Math.round(_.getTime() / 1000),
        SubmittedBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_ListFHIRImportJobsRequest = (input, context) => {
    return take(input, {
        DatastoreId: [],
        JobName: [],
        JobStatus: [],
        MaxResults: [],
        NextToken: [],
        SubmittedAfter: (_) => Math.round(_.getTime() / 1000),
        SubmittedBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_StartFHIRExportJobRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        DatastoreId: [],
        JobName: [],
        OutputDataConfig: _json,
    });
};
const se_StartFHIRImportJobRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        DatastoreId: [],
        InputDataConfig: _json,
        JobName: [],
        JobOutputDataConfig: _json,
    });
};
const de_DatastoreProperties = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatastoreArn: __expectString,
        DatastoreEndpoint: __expectString,
        DatastoreId: __expectString,
        DatastoreName: __expectString,
        DatastoreStatus: __expectString,
        DatastoreTypeVersion: __expectString,
        ErrorCause: _json,
        IdentityProviderConfiguration: _json,
        PreloadDataConfig: _json,
        SseConfiguration: _json,
    });
};
const de_DatastorePropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatastoreProperties(entry, context);
    });
    return retVal;
};
const de_DescribeFHIRDatastoreResponse = (output, context) => {
    return take(output, {
        DatastoreProperties: (_) => de_DatastoreProperties(_, context),
    });
};
const de_DescribeFHIRExportJobResponse = (output, context) => {
    return take(output, {
        ExportJobProperties: (_) => de_ExportJobProperties(_, context),
    });
};
const de_DescribeFHIRImportJobResponse = (output, context) => {
    return take(output, {
        ImportJobProperties: (_) => de_ImportJobProperties(_, context),
    });
};
const de_ExportJobProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        DatastoreId: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        JobId: __expectString,
        JobName: __expectString,
        JobStatus: __expectString,
        Message: __expectString,
        OutputDataConfig: (_) => _json(__expectUnion(_)),
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ExportJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExportJobProperties(entry, context);
    });
    return retVal;
};
const de_ImportJobProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        DatastoreId: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataConfig: (_) => _json(__expectUnion(_)),
        JobId: __expectString,
        JobName: __expectString,
        JobOutputDataConfig: (_) => _json(__expectUnion(_)),
        JobProgressReport: (_) => de_JobProgressReport(_, context),
        JobStatus: __expectString,
        Message: __expectString,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ImportJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportJobProperties(entry, context);
    });
    return retVal;
};
const de_JobProgressReport = (output, context) => {
    return take(output, {
        Throughput: __limitedParseDouble,
        TotalNumberOfFilesReadWithCustomerError: __expectLong,
        TotalNumberOfImportedFiles: __expectLong,
        TotalNumberOfResourcesImported: __expectLong,
        TotalNumberOfResourcesScanned: __expectLong,
        TotalNumberOfResourcesWithCustomerError: __expectLong,
        TotalNumberOfScannedFiles: __expectLong,
        TotalSizeOfScannedFilesInMB: __limitedParseDouble,
    });
};
const de_ListFHIRDatastoresResponse = (output, context) => {
    return take(output, {
        DatastorePropertiesList: (_) => de_DatastorePropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListFHIRExportJobsResponse = (output, context) => {
    return take(output, {
        ExportJobPropertiesList: (_) => de_ExportJobPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListFHIRImportJobsResponse = (output, context) => {
    return take(output, {
        ImportJobPropertiesList: (_) => de_ImportJobPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `HealthLake.${operation}`,
    };
}
