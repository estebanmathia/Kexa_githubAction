import { HealthLakeServiceException as __BaseException } from "./HealthLakeServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const AuthorizationStrategy = {
    AWS_AUTH: "AWS_AUTH",
    SMARTV1: "SMART_ON_FHIR_V1",
};
export const CmkType = {
    AO_CMK: "AWS_OWNED_KMS_KEY",
    CM_CMK: "CUSTOMER_MANAGED_KMS_KEY",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export const FHIRVersion = {
    R4: "R4",
};
export const PreloadDataType = {
    SYNTHEA: "SYNTHEA",
};
export const DatastoreStatus = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETED: "DELETED",
    DELETING: "DELETING",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export const ErrorCategory = {
    NON_RETRYABLE_ERROR: "NON_RETRYABLE_ERROR",
    RETRYABLE_ERROR: "RETRYABLE_ERROR",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const JobStatus = {
    CANCEL_COMPLETED: "CANCEL_COMPLETED",
    CANCEL_FAILED: "CANCEL_FAILED",
    CANCEL_IN_PROGRESS: "CANCEL_IN_PROGRESS",
    CANCEL_SUBMITTED: "CANCEL_SUBMITTED",
    COMPLETED: "COMPLETED",
    COMPLETED_WITH_ERRORS: "COMPLETED_WITH_ERRORS",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUBMITTED: "SUBMITTED",
};
export var OutputDataConfig;
(function (OutputDataConfig) {
    OutputDataConfig.visit = (value, visitor) => {
        if (value.S3Configuration !== undefined)
            return visitor.S3Configuration(value.S3Configuration);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(OutputDataConfig || (OutputDataConfig = {}));
export var InputDataConfig;
(function (InputDataConfig) {
    InputDataConfig.visit = (value, visitor) => {
        if (value.S3Uri !== undefined)
            return visitor.S3Uri(value.S3Uri);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(InputDataConfig || (InputDataConfig = {}));
