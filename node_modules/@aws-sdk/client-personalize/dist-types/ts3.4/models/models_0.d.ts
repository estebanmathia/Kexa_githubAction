import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { PersonalizeServiceException as __BaseException } from "./PersonalizeServiceException";
export interface AlgorithmImage {
  name?: string;
  dockerURI: string | undefined;
}
export interface DefaultCategoricalHyperParameterRange {
  name?: string;
  values?: string[];
  isTunable?: boolean;
}
export interface DefaultContinuousHyperParameterRange {
  name?: string;
  minValue?: number;
  maxValue?: number;
  isTunable?: boolean;
}
export interface DefaultIntegerHyperParameterRange {
  name?: string;
  minValue?: number;
  maxValue?: number;
  isTunable?: boolean;
}
export interface DefaultHyperParameterRanges {
  integerHyperParameterRanges?: DefaultIntegerHyperParameterRange[];
  continuousHyperParameterRanges?: DefaultContinuousHyperParameterRange[];
  categoricalHyperParameterRanges?: DefaultCategoricalHyperParameterRange[];
}
export interface Algorithm {
  name?: string;
  algorithmArn?: string;
  algorithmImage?: AlgorithmImage;
  defaultHyperParameters?: Record<string, string>;
  defaultHyperParameterRanges?: DefaultHyperParameterRanges;
  defaultResourceConfig?: Record<string, string>;
  trainingInputMode?: string;
  roleArn?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface BatchInferenceJobConfig {
  itemExplorationConfig?: Record<string, string>;
}
export declare const BatchInferenceJobMode: {
  readonly BATCH_INFERENCE: "BATCH_INFERENCE";
  readonly THEME_GENERATION: "THEME_GENERATION";
};
export type BatchInferenceJobMode =
  (typeof BatchInferenceJobMode)[keyof typeof BatchInferenceJobMode];
export interface S3DataConfig {
  path: string | undefined;
  kmsKeyArn?: string;
}
export interface BatchInferenceJobInput {
  s3DataSource: S3DataConfig | undefined;
}
export interface BatchInferenceJobOutput {
  s3DataDestination: S3DataConfig | undefined;
}
export interface Tag {
  tagKey: string | undefined;
  tagValue: string | undefined;
}
export interface FieldsForThemeGeneration {
  itemName: string | undefined;
}
export interface ThemeGenerationConfig {
  fieldsForThemeGeneration: FieldsForThemeGeneration | undefined;
}
export interface CreateBatchInferenceJobRequest {
  jobName: string | undefined;
  solutionVersionArn: string | undefined;
  filterArn?: string;
  numResults?: number;
  jobInput: BatchInferenceJobInput | undefined;
  jobOutput: BatchInferenceJobOutput | undefined;
  roleArn: string | undefined;
  batchInferenceJobConfig?: BatchInferenceJobConfig;
  tags?: Tag[];
  batchInferenceJobMode?: BatchInferenceJobMode;
  themeGenerationConfig?: ThemeGenerationConfig;
}
export interface CreateBatchInferenceJobResponse {
  batchInferenceJobArn?: string;
}
export declare class InvalidInputException extends __BaseException {
  readonly name: "InvalidInputException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidInputException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class TooManyTagsException extends __BaseException {
  readonly name: "TooManyTagsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TooManyTagsException, __BaseException>
  );
}
export interface BatchSegmentJobInput {
  s3DataSource: S3DataConfig | undefined;
}
export interface BatchSegmentJobOutput {
  s3DataDestination: S3DataConfig | undefined;
}
export interface CreateBatchSegmentJobRequest {
  jobName: string | undefined;
  solutionVersionArn: string | undefined;
  filterArn?: string;
  numResults?: number;
  jobInput: BatchSegmentJobInput | undefined;
  jobOutput: BatchSegmentJobOutput | undefined;
  roleArn: string | undefined;
  tags?: Tag[];
}
export interface CreateBatchSegmentJobResponse {
  batchSegmentJobArn?: string;
}
export interface CampaignConfig {
  itemExplorationConfig?: Record<string, string>;
  enableMetadataWithRecommendations?: boolean;
  syncWithLatestSolutionVersion?: boolean;
}
export interface CreateCampaignRequest {
  name: string | undefined;
  solutionVersionArn: string | undefined;
  minProvisionedTPS?: number;
  campaignConfig?: CampaignConfig;
  tags?: Tag[];
}
export interface CreateCampaignResponse {
  campaignArn?: string;
}
export interface CreateDatasetRequest {
  name: string | undefined;
  schemaArn: string | undefined;
  datasetGroupArn: string | undefined;
  datasetType: string | undefined;
  tags?: Tag[];
}
export interface CreateDatasetResponse {
  datasetArn?: string;
}
export declare const IngestionMode: {
  readonly ALL: "ALL";
  readonly BULK: "BULK";
  readonly PUT: "PUT";
};
export type IngestionMode = (typeof IngestionMode)[keyof typeof IngestionMode];
export interface DatasetExportJobOutput {
  s3DataDestination: S3DataConfig | undefined;
}
export interface CreateDatasetExportJobRequest {
  jobName: string | undefined;
  datasetArn: string | undefined;
  ingestionMode?: IngestionMode;
  roleArn: string | undefined;
  jobOutput: DatasetExportJobOutput | undefined;
  tags?: Tag[];
}
export interface CreateDatasetExportJobResponse {
  datasetExportJobArn?: string;
}
export declare const Domain: {
  readonly ECOMMERCE: "ECOMMERCE";
  readonly VIDEO_ON_DEMAND: "VIDEO_ON_DEMAND";
};
export type Domain = (typeof Domain)[keyof typeof Domain];
export interface CreateDatasetGroupRequest {
  name: string | undefined;
  roleArn?: string;
  kmsKeyArn?: string;
  domain?: Domain;
  tags?: Tag[];
}
export interface CreateDatasetGroupResponse {
  datasetGroupArn?: string;
  domain?: Domain;
}
export interface DataSource {
  dataLocation?: string;
}
export declare const ImportMode: {
  readonly FULL: "FULL";
  readonly INCREMENTAL: "INCREMENTAL";
};
export type ImportMode = (typeof ImportMode)[keyof typeof ImportMode];
export interface CreateDatasetImportJobRequest {
  jobName: string | undefined;
  datasetArn: string | undefined;
  dataSource: DataSource | undefined;
  roleArn: string | undefined;
  tags?: Tag[];
  importMode?: ImportMode;
  publishAttributionMetricsToS3?: boolean;
}
export interface CreateDatasetImportJobResponse {
  datasetImportJobArn?: string;
}
export interface CreateEventTrackerRequest {
  name: string | undefined;
  datasetGroupArn: string | undefined;
  tags?: Tag[];
}
export interface CreateEventTrackerResponse {
  eventTrackerArn?: string;
  trackingId?: string;
}
export interface CreateFilterRequest {
  name: string | undefined;
  datasetGroupArn: string | undefined;
  filterExpression: string | undefined;
  tags?: Tag[];
}
export interface CreateFilterResponse {
  filterArn?: string;
}
export interface MetricAttribute {
  eventType: string | undefined;
  metricName: string | undefined;
  expression: string | undefined;
}
export interface MetricAttributionOutput {
  s3DataDestination?: S3DataConfig;
  roleArn: string | undefined;
}
export interface CreateMetricAttributionRequest {
  name: string | undefined;
  datasetGroupArn: string | undefined;
  metrics: MetricAttribute[] | undefined;
  metricsOutputConfig: MetricAttributionOutput | undefined;
}
export interface CreateMetricAttributionResponse {
  metricAttributionArn?: string;
}
export interface TrainingDataConfig {
  excludedDatasetColumns?: Record<string, string[]>;
}
export interface RecommenderConfig {
  itemExplorationConfig?: Record<string, string>;
  minRecommendationRequestsPerSecond?: number;
  trainingDataConfig?: TrainingDataConfig;
  enableMetadataWithRecommendations?: boolean;
}
export interface CreateRecommenderRequest {
  name: string | undefined;
  datasetGroupArn: string | undefined;
  recipeArn: string | undefined;
  recommenderConfig?: RecommenderConfig;
  tags?: Tag[];
}
export interface CreateRecommenderResponse {
  recommenderArn?: string;
}
export interface CreateSchemaRequest {
  name: string | undefined;
  schema: string | undefined;
  domain?: Domain;
}
export interface CreateSchemaResponse {
  schemaArn?: string;
}
export interface AutoMLConfig {
  metricName?: string;
  recipeList?: string[];
}
export interface AutoTrainingConfig {
  schedulingExpression?: string;
}
export interface CategoricalHyperParameterRange {
  name?: string;
  values?: string[];
}
export interface ContinuousHyperParameterRange {
  name?: string;
  minValue?: number;
  maxValue?: number;
}
export interface IntegerHyperParameterRange {
  name?: string;
  minValue?: number;
  maxValue?: number;
}
export interface HyperParameterRanges {
  integerHyperParameterRanges?: IntegerHyperParameterRange[];
  continuousHyperParameterRanges?: ContinuousHyperParameterRange[];
  categoricalHyperParameterRanges?: CategoricalHyperParameterRange[];
}
export interface HPOObjective {
  type?: string;
  metricName?: string;
  metricRegex?: string;
}
export interface HPOResourceConfig {
  maxNumberOfTrainingJobs?: string;
  maxParallelTrainingJobs?: string;
}
export interface HPOConfig {
  hpoObjective?: HPOObjective;
  hpoResourceConfig?: HPOResourceConfig;
  algorithmHyperParameterRanges?: HyperParameterRanges;
}
export declare const ObjectiveSensitivity: {
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
  readonly OFF: "OFF";
};
export type ObjectiveSensitivity =
  (typeof ObjectiveSensitivity)[keyof typeof ObjectiveSensitivity];
export interface OptimizationObjective {
  itemAttribute?: string;
  objectiveSensitivity?: ObjectiveSensitivity;
}
export interface SolutionConfig {
  eventValueThreshold?: string;
  hpoConfig?: HPOConfig;
  algorithmHyperParameters?: Record<string, string>;
  featureTransformationParameters?: Record<string, string>;
  autoMLConfig?: AutoMLConfig;
  optimizationObjective?: OptimizationObjective;
  trainingDataConfig?: TrainingDataConfig;
  autoTrainingConfig?: AutoTrainingConfig;
}
export interface CreateSolutionRequest {
  name: string | undefined;
  performHPO?: boolean;
  performAutoML?: boolean;
  performAutoTraining?: boolean;
  recipeArn?: string;
  datasetGroupArn: string | undefined;
  eventType?: string;
  solutionConfig?: SolutionConfig;
  tags?: Tag[];
}
export interface CreateSolutionResponse {
  solutionArn?: string;
}
export declare const TrainingMode: {
  readonly AUTOTRAIN: "AUTOTRAIN";
  readonly FULL: "FULL";
  readonly UPDATE: "UPDATE";
};
export type TrainingMode = (typeof TrainingMode)[keyof typeof TrainingMode];
export interface CreateSolutionVersionRequest {
  name?: string;
  solutionArn: string | undefined;
  trainingMode?: TrainingMode;
  tags?: Tag[];
}
export interface CreateSolutionVersionResponse {
  solutionVersionArn?: string;
}
export interface DeleteCampaignRequest {
  campaignArn: string | undefined;
}
export interface DeleteDatasetRequest {
  datasetArn: string | undefined;
}
export interface DeleteDatasetGroupRequest {
  datasetGroupArn: string | undefined;
}
export interface DeleteEventTrackerRequest {
  eventTrackerArn: string | undefined;
}
export interface DeleteFilterRequest {
  filterArn: string | undefined;
}
export interface DeleteMetricAttributionRequest {
  metricAttributionArn: string | undefined;
}
export interface DeleteRecommenderRequest {
  recommenderArn: string | undefined;
}
export interface DeleteSchemaRequest {
  schemaArn: string | undefined;
}
export interface DeleteSolutionRequest {
  solutionArn: string | undefined;
}
export interface DescribeAlgorithmRequest {
  algorithmArn: string | undefined;
}
export interface DescribeAlgorithmResponse {
  algorithm?: Algorithm;
}
export interface DescribeBatchInferenceJobRequest {
  batchInferenceJobArn: string | undefined;
}
export interface BatchInferenceJob {
  jobName?: string;
  batchInferenceJobArn?: string;
  filterArn?: string;
  failureReason?: string;
  solutionVersionArn?: string;
  numResults?: number;
  jobInput?: BatchInferenceJobInput;
  jobOutput?: BatchInferenceJobOutput;
  batchInferenceJobConfig?: BatchInferenceJobConfig;
  roleArn?: string;
  batchInferenceJobMode?: BatchInferenceJobMode;
  themeGenerationConfig?: ThemeGenerationConfig;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface DescribeBatchInferenceJobResponse {
  batchInferenceJob?: BatchInferenceJob;
}
export interface DescribeBatchSegmentJobRequest {
  batchSegmentJobArn: string | undefined;
}
export interface BatchSegmentJob {
  jobName?: string;
  batchSegmentJobArn?: string;
  filterArn?: string;
  failureReason?: string;
  solutionVersionArn?: string;
  numResults?: number;
  jobInput?: BatchSegmentJobInput;
  jobOutput?: BatchSegmentJobOutput;
  roleArn?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface DescribeBatchSegmentJobResponse {
  batchSegmentJob?: BatchSegmentJob;
}
export interface DescribeCampaignRequest {
  campaignArn: string | undefined;
}
export interface CampaignUpdateSummary {
  solutionVersionArn?: string;
  minProvisionedTPS?: number;
  campaignConfig?: CampaignConfig;
  status?: string;
  failureReason?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface Campaign {
  name?: string;
  campaignArn?: string;
  solutionVersionArn?: string;
  minProvisionedTPS?: number;
  campaignConfig?: CampaignConfig;
  status?: string;
  failureReason?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  latestCampaignUpdate?: CampaignUpdateSummary;
}
export interface DescribeCampaignResponse {
  campaign?: Campaign;
}
export interface DescribeDatasetRequest {
  datasetArn: string | undefined;
}
export interface DatasetUpdateSummary {
  schemaArn?: string;
  status?: string;
  failureReason?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface Dataset {
  name?: string;
  datasetArn?: string;
  datasetGroupArn?: string;
  datasetType?: string;
  schemaArn?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  latestDatasetUpdate?: DatasetUpdateSummary;
  trackingId?: string;
}
export interface DescribeDatasetResponse {
  dataset?: Dataset;
}
export interface DescribeDatasetExportJobRequest {
  datasetExportJobArn: string | undefined;
}
export interface DatasetExportJob {
  jobName?: string;
  datasetExportJobArn?: string;
  datasetArn?: string;
  ingestionMode?: IngestionMode;
  roleArn?: string;
  status?: string;
  jobOutput?: DatasetExportJobOutput;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  failureReason?: string;
}
export interface DescribeDatasetExportJobResponse {
  datasetExportJob?: DatasetExportJob;
}
export interface DescribeDatasetGroupRequest {
  datasetGroupArn: string | undefined;
}
export interface DatasetGroup {
  name?: string;
  datasetGroupArn?: string;
  status?: string;
  roleArn?: string;
  kmsKeyArn?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  failureReason?: string;
  domain?: Domain;
}
export interface DescribeDatasetGroupResponse {
  datasetGroup?: DatasetGroup;
}
export interface DescribeDatasetImportJobRequest {
  datasetImportJobArn: string | undefined;
}
export interface DatasetImportJob {
  jobName?: string;
  datasetImportJobArn?: string;
  datasetArn?: string;
  dataSource?: DataSource;
  roleArn?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  failureReason?: string;
  importMode?: ImportMode;
  publishAttributionMetricsToS3?: boolean;
}
export interface DescribeDatasetImportJobResponse {
  datasetImportJob?: DatasetImportJob;
}
export interface DescribeEventTrackerRequest {
  eventTrackerArn: string | undefined;
}
export interface EventTracker {
  name?: string;
  eventTrackerArn?: string;
  accountId?: string;
  trackingId?: string;
  datasetGroupArn?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface DescribeEventTrackerResponse {
  eventTracker?: EventTracker;
}
export interface DescribeFeatureTransformationRequest {
  featureTransformationArn: string | undefined;
}
export interface FeatureTransformation {
  name?: string;
  featureTransformationArn?: string;
  defaultParameters?: Record<string, string>;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  status?: string;
}
export interface DescribeFeatureTransformationResponse {
  featureTransformation?: FeatureTransformation;
}
export interface DescribeFilterRequest {
  filterArn: string | undefined;
}
export interface Filter {
  name?: string;
  filterArn?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  datasetGroupArn?: string;
  failureReason?: string;
  filterExpression?: string;
  status?: string;
}
export interface DescribeFilterResponse {
  filter?: Filter;
}
export interface DescribeMetricAttributionRequest {
  metricAttributionArn: string | undefined;
}
export interface MetricAttribution {
  name?: string;
  metricAttributionArn?: string;
  datasetGroupArn?: string;
  metricsOutputConfig?: MetricAttributionOutput;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  failureReason?: string;
}
export interface DescribeMetricAttributionResponse {
  metricAttribution?: MetricAttribution;
}
export interface DescribeRecipeRequest {
  recipeArn: string | undefined;
}
export interface Recipe {
  name?: string;
  recipeArn?: string;
  algorithmArn?: string;
  featureTransformationArn?: string;
  status?: string;
  description?: string;
  creationDateTime?: Date;
  recipeType?: string;
  lastUpdatedDateTime?: Date;
}
export interface DescribeRecipeResponse {
  recipe?: Recipe;
}
export interface DescribeRecommenderRequest {
  recommenderArn: string | undefined;
}
export interface RecommenderUpdateSummary {
  recommenderConfig?: RecommenderConfig;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  status?: string;
  failureReason?: string;
}
export interface Recommender {
  recommenderArn?: string;
  datasetGroupArn?: string;
  name?: string;
  recipeArn?: string;
  recommenderConfig?: RecommenderConfig;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  status?: string;
  failureReason?: string;
  latestRecommenderUpdate?: RecommenderUpdateSummary;
  modelMetrics?: Record<string, number>;
}
export interface DescribeRecommenderResponse {
  recommender?: Recommender;
}
export interface DescribeSchemaRequest {
  schemaArn: string | undefined;
}
export interface DatasetSchema {
  name?: string;
  schemaArn?: string;
  schema?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  domain?: Domain;
}
export interface DescribeSchemaResponse {
  schema?: DatasetSchema;
}
export interface DescribeSolutionRequest {
  solutionArn: string | undefined;
}
export interface AutoMLResult {
  bestRecipeArn?: string;
}
export declare const TrainingType: {
  readonly AUTOMATIC: "AUTOMATIC";
  readonly MANUAL: "MANUAL";
};
export type TrainingType = (typeof TrainingType)[keyof typeof TrainingType];
export interface SolutionVersionSummary {
  solutionVersionArn?: string;
  status?: string;
  trainingMode?: TrainingMode;
  trainingType?: TrainingType;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  failureReason?: string;
}
export interface Solution {
  name?: string;
  solutionArn?: string;
  performHPO?: boolean;
  performAutoML?: boolean;
  performAutoTraining?: boolean;
  recipeArn?: string;
  datasetGroupArn?: string;
  eventType?: string;
  solutionConfig?: SolutionConfig;
  autoMLResult?: AutoMLResult;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  latestSolutionVersion?: SolutionVersionSummary;
}
export interface DescribeSolutionResponse {
  solution?: Solution;
}
export interface DescribeSolutionVersionRequest {
  solutionVersionArn: string | undefined;
}
export interface TunedHPOParams {
  algorithmHyperParameters?: Record<string, string>;
}
export interface SolutionVersion {
  name?: string;
  solutionVersionArn?: string;
  solutionArn?: string;
  performHPO?: boolean;
  performAutoML?: boolean;
  recipeArn?: string;
  eventType?: string;
  datasetGroupArn?: string;
  solutionConfig?: SolutionConfig;
  trainingHours?: number;
  trainingMode?: TrainingMode;
  tunedHPOParams?: TunedHPOParams;
  status?: string;
  failureReason?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  trainingType?: TrainingType;
}
export interface DescribeSolutionVersionResponse {
  solutionVersion?: SolutionVersion;
}
export interface GetSolutionMetricsRequest {
  solutionVersionArn: string | undefined;
}
export interface GetSolutionMetricsResponse {
  solutionVersionArn?: string;
  metrics?: Record<string, number>;
}
export declare class InvalidNextTokenException extends __BaseException {
  readonly name: "InvalidNextTokenException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>
  );
}
export interface ListBatchInferenceJobsRequest {
  solutionVersionArn?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface BatchInferenceJobSummary {
  batchInferenceJobArn?: string;
  jobName?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  failureReason?: string;
  solutionVersionArn?: string;
  batchInferenceJobMode?: BatchInferenceJobMode;
}
export interface ListBatchInferenceJobsResponse {
  batchInferenceJobs?: BatchInferenceJobSummary[];
  nextToken?: string;
}
export interface ListBatchSegmentJobsRequest {
  solutionVersionArn?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface BatchSegmentJobSummary {
  batchSegmentJobArn?: string;
  jobName?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  failureReason?: string;
  solutionVersionArn?: string;
}
export interface ListBatchSegmentJobsResponse {
  batchSegmentJobs?: BatchSegmentJobSummary[];
  nextToken?: string;
}
export interface ListCampaignsRequest {
  solutionArn?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface CampaignSummary {
  name?: string;
  campaignArn?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  failureReason?: string;
}
export interface ListCampaignsResponse {
  campaigns?: CampaignSummary[];
  nextToken?: string;
}
export interface ListDatasetExportJobsRequest {
  datasetArn?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface DatasetExportJobSummary {
  datasetExportJobArn?: string;
  jobName?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  failureReason?: string;
}
export interface ListDatasetExportJobsResponse {
  datasetExportJobs?: DatasetExportJobSummary[];
  nextToken?: string;
}
export interface ListDatasetGroupsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface DatasetGroupSummary {
  name?: string;
  datasetGroupArn?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  failureReason?: string;
  domain?: Domain;
}
export interface ListDatasetGroupsResponse {
  datasetGroups?: DatasetGroupSummary[];
  nextToken?: string;
}
export interface ListDatasetImportJobsRequest {
  datasetArn?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface DatasetImportJobSummary {
  datasetImportJobArn?: string;
  jobName?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  failureReason?: string;
  importMode?: ImportMode;
}
export interface ListDatasetImportJobsResponse {
  datasetImportJobs?: DatasetImportJobSummary[];
  nextToken?: string;
}
export interface ListDatasetsRequest {
  datasetGroupArn?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface DatasetSummary {
  name?: string;
  datasetArn?: string;
  datasetType?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface ListDatasetsResponse {
  datasets?: DatasetSummary[];
  nextToken?: string;
}
export interface ListEventTrackersRequest {
  datasetGroupArn?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface EventTrackerSummary {
  name?: string;
  eventTrackerArn?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface ListEventTrackersResponse {
  eventTrackers?: EventTrackerSummary[];
  nextToken?: string;
}
export interface ListFiltersRequest {
  datasetGroupArn?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface FilterSummary {
  name?: string;
  filterArn?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  datasetGroupArn?: string;
  failureReason?: string;
  status?: string;
}
export interface ListFiltersResponse {
  Filters?: FilterSummary[];
  nextToken?: string;
}
export interface ListMetricAttributionMetricsRequest {
  metricAttributionArn?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface ListMetricAttributionMetricsResponse {
  metrics?: MetricAttribute[];
  nextToken?: string;
}
export interface ListMetricAttributionsRequest {
  datasetGroupArn?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface MetricAttributionSummary {
  name?: string;
  metricAttributionArn?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  failureReason?: string;
}
export interface ListMetricAttributionsResponse {
  metricAttributions?: MetricAttributionSummary[];
  nextToken?: string;
}
export declare const RecipeProvider: {
  readonly SERVICE: "SERVICE";
};
export type RecipeProvider =
  (typeof RecipeProvider)[keyof typeof RecipeProvider];
export interface ListRecipesRequest {
  recipeProvider?: RecipeProvider;
  nextToken?: string;
  maxResults?: number;
  domain?: Domain;
}
export interface RecipeSummary {
  name?: string;
  recipeArn?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  domain?: Domain;
}
export interface ListRecipesResponse {
  recipes?: RecipeSummary[];
  nextToken?: string;
}
export interface ListRecommendersRequest {
  datasetGroupArn?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface RecommenderSummary {
  name?: string;
  recommenderArn?: string;
  datasetGroupArn?: string;
  recipeArn?: string;
  recommenderConfig?: RecommenderConfig;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
}
export interface ListRecommendersResponse {
  recommenders?: RecommenderSummary[];
  nextToken?: string;
}
export interface ListSchemasRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface DatasetSchemaSummary {
  name?: string;
  schemaArn?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  domain?: Domain;
}
export interface ListSchemasResponse {
  schemas?: DatasetSchemaSummary[];
  nextToken?: string;
}
export interface ListSolutionsRequest {
  datasetGroupArn?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface SolutionSummary {
  name?: string;
  solutionArn?: string;
  status?: string;
  creationDateTime?: Date;
  lastUpdatedDateTime?: Date;
  recipeArn?: string;
}
export interface ListSolutionsResponse {
  solutions?: SolutionSummary[];
  nextToken?: string;
}
export interface ListSolutionVersionsRequest {
  solutionArn?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface ListSolutionVersionsResponse {
  solutionVersions?: SolutionVersionSummary[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Tag[];
}
export interface StartRecommenderRequest {
  recommenderArn: string | undefined;
}
export interface StartRecommenderResponse {
  recommenderArn?: string;
}
export interface StopRecommenderRequest {
  recommenderArn: string | undefined;
}
export interface StopRecommenderResponse {
  recommenderArn?: string;
}
export interface StopSolutionVersionCreationRequest {
  solutionVersionArn: string | undefined;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export declare class TooManyTagKeysException extends __BaseException {
  readonly name: "TooManyTagKeysException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TooManyTagKeysException, __BaseException>
  );
}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateCampaignRequest {
  campaignArn: string | undefined;
  solutionVersionArn?: string;
  minProvisionedTPS?: number;
  campaignConfig?: CampaignConfig;
}
export interface UpdateCampaignResponse {
  campaignArn?: string;
}
export interface UpdateDatasetRequest {
  datasetArn: string | undefined;
  schemaArn: string | undefined;
}
export interface UpdateDatasetResponse {
  datasetArn?: string;
}
export interface UpdateMetricAttributionRequest {
  addMetrics?: MetricAttribute[];
  removeMetrics?: string[];
  metricsOutputConfig?: MetricAttributionOutput;
  metricAttributionArn?: string;
}
export interface UpdateMetricAttributionResponse {
  metricAttributionArn?: string;
}
export interface UpdateRecommenderRequest {
  recommenderArn: string | undefined;
  recommenderConfig: RecommenderConfig | undefined;
}
export interface UpdateRecommenderResponse {
  recommenderArn?: string;
}
export declare const CreateFilterRequestFilterSensitiveLog: (
  obj: CreateFilterRequest
) => any;
export declare const FilterFilterSensitiveLog: (obj: Filter) => any;
export declare const DescribeFilterResponseFilterSensitiveLog: (
  obj: DescribeFilterResponse
) => any;
