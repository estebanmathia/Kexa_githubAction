import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { InvalidInputException, InvalidNextTokenException, LimitExceededException, ResourceAlreadyExistsException, ResourceInUseException, ResourceNotFoundException, TooManyTagKeysException, TooManyTagsException, } from "../models/models_0";
import { PersonalizeServiceException as __BaseException } from "../models/PersonalizeServiceException";
export const se_CreateBatchInferenceJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateBatchInferenceJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateBatchSegmentJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateBatchSegmentJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCampaignCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCampaign");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDataset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDatasetExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDatasetExportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDatasetGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDatasetGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDatasetImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDatasetImportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEventTrackerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEventTracker");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFilterCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFilter");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateMetricAttributionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMetricAttribution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRecommenderCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRecommender");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSchemaCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSchema");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSolutionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSolution");
    let body;
    body = JSON.stringify(se_CreateSolutionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSolutionVersionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSolutionVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCampaignCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCampaign");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDataset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDatasetGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDatasetGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEventTrackerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEventTracker");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFilterCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFilter");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMetricAttributionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMetricAttribution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRecommenderCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRecommender");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSchemaCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSchema");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSolutionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSolution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAlgorithmCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAlgorithm");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBatchInferenceJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBatchInferenceJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBatchSegmentJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBatchSegmentJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCampaignCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCampaign");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDataset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDatasetExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDatasetExportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDatasetGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDatasetGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDatasetImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDatasetImportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEventTrackerCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEventTracker");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFeatureTransformationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFeatureTransformation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFilterCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFilter");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeMetricAttributionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMetricAttribution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRecipeCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRecipe");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRecommenderCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRecommender");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSchemaCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSchema");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSolutionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSolution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSolutionVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSolutionVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSolutionMetricsCommand = async (input, context) => {
    const headers = sharedHeaders("GetSolutionMetrics");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListBatchInferenceJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListBatchInferenceJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListBatchSegmentJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListBatchSegmentJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCampaignsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCampaigns");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDatasetExportJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDatasetExportJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDatasetGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDatasetGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDatasetImportJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDatasetImportJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDatasetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDatasets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEventTrackersCommand = async (input, context) => {
    const headers = sharedHeaders("ListEventTrackers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFiltersCommand = async (input, context) => {
    const headers = sharedHeaders("ListFilters");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMetricAttributionMetricsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMetricAttributionMetrics");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMetricAttributionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMetricAttributions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRecipesCommand = async (input, context) => {
    const headers = sharedHeaders("ListRecipes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRecommendersCommand = async (input, context) => {
    const headers = sharedHeaders("ListRecommenders");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSchemasCommand = async (input, context) => {
    const headers = sharedHeaders("ListSchemas");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSolutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSolutions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSolutionVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSolutionVersions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartRecommenderCommand = async (input, context) => {
    const headers = sharedHeaders("StartRecommender");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopRecommenderCommand = async (input, context) => {
    const headers = sharedHeaders("StopRecommender");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopSolutionVersionCreationCommand = async (input, context) => {
    const headers = sharedHeaders("StopSolutionVersionCreation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateCampaignCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCampaign");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDataset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateMetricAttributionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMetricAttribution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateRecommenderCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRecommender");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateBatchInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateBatchSegmentJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCampaignCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDatasetExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDatasetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDatasetImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateEventTrackerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateMetricAttributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRecommenderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateSchemaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateSolutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateSolutionVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteCampaignCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteDatasetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteEventTrackerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteMetricAttributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteRecommenderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteSchemaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteSolutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DescribeAlgorithmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAlgorithmResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeBatchInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBatchInferenceJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeBatchSegmentJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBatchSegmentJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCampaignCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCampaignResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDatasetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeDatasetExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDatasetExportJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeDatasetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDatasetGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeDatasetImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDatasetImportJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEventTrackerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEventTrackerResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFeatureTransformationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFeatureTransformationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFilterResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeMetricAttributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeMetricAttributionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRecipeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRecipeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRecommenderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRecommenderResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeSchemaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSchemaResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeSolutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSolutionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeSolutionVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSolutionVersionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSolutionMetricsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSolutionMetricsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListBatchInferenceJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListBatchInferenceJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListBatchSegmentJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListBatchSegmentJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCampaignsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCampaignsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDatasetExportJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDatasetExportJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDatasetGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDatasetGroupsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDatasetImportJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDatasetImportJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDatasetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDatasetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEventTrackersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEventTrackersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListFiltersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListFiltersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMetricAttributionMetricsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMetricAttributionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMetricAttributionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRecipesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListRecipesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRecommendersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListRecommendersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSchemasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSchemasResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSolutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSolutionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSolutionVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSolutionVersionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartRecommenderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopRecommenderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopSolutionVersionCreationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateCampaignCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateMetricAttributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateRecommenderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.personalize#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.personalize#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.personalize#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.personalize#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.personalize#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.personalize#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.personalize#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "TooManyTagKeysException":
        case "com.amazonaws.personalize#TooManyTagKeysException":
            throw await de_TooManyTagKeysExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagKeysExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagKeysException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_ContinuousHyperParameterRange = (input, context) => {
    return take(input, {
        maxValue: __serializeFloat,
        minValue: __serializeFloat,
        name: [],
    });
};
const se_ContinuousHyperParameterRanges = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ContinuousHyperParameterRange(entry, context);
    });
};
const se_CreateSolutionRequest = (input, context) => {
    return take(input, {
        datasetGroupArn: [],
        eventType: [],
        name: [],
        performAutoML: [],
        performAutoTraining: [],
        performHPO: [],
        recipeArn: [],
        solutionConfig: (_) => se_SolutionConfig(_, context),
        tags: _json,
    });
};
const se_HPOConfig = (input, context) => {
    return take(input, {
        algorithmHyperParameterRanges: (_) => se_HyperParameterRanges(_, context),
        hpoObjective: _json,
        hpoResourceConfig: _json,
    });
};
const se_HyperParameterRanges = (input, context) => {
    return take(input, {
        categoricalHyperParameterRanges: _json,
        continuousHyperParameterRanges: (_) => se_ContinuousHyperParameterRanges(_, context),
        integerHyperParameterRanges: _json,
    });
};
const se_SolutionConfig = (input, context) => {
    return take(input, {
        algorithmHyperParameters: _json,
        autoMLConfig: _json,
        autoTrainingConfig: _json,
        eventValueThreshold: [],
        featureTransformationParameters: _json,
        hpoConfig: (_) => se_HPOConfig(_, context),
        optimizationObjective: _json,
        trainingDataConfig: _json,
    });
};
const de_Algorithm = (output, context) => {
    return take(output, {
        algorithmArn: __expectString,
        algorithmImage: _json,
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        defaultHyperParameterRanges: (_) => de_DefaultHyperParameterRanges(_, context),
        defaultHyperParameters: _json,
        defaultResourceConfig: _json,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        roleArn: __expectString,
        trainingInputMode: __expectString,
    });
};
const de_BatchInferenceJob = (output, context) => {
    return take(output, {
        batchInferenceJobArn: __expectString,
        batchInferenceJobConfig: _json,
        batchInferenceJobMode: __expectString,
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureReason: __expectString,
        filterArn: __expectString,
        jobInput: _json,
        jobName: __expectString,
        jobOutput: _json,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        numResults: __expectInt32,
        roleArn: __expectString,
        solutionVersionArn: __expectString,
        status: __expectString,
        themeGenerationConfig: _json,
    });
};
const de_BatchInferenceJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchInferenceJobSummary(entry, context);
    });
    return retVal;
};
const de_BatchInferenceJobSummary = (output, context) => {
    return take(output, {
        batchInferenceJobArn: __expectString,
        batchInferenceJobMode: __expectString,
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureReason: __expectString,
        jobName: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        solutionVersionArn: __expectString,
        status: __expectString,
    });
};
const de_BatchSegmentJob = (output, context) => {
    return take(output, {
        batchSegmentJobArn: __expectString,
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureReason: __expectString,
        filterArn: __expectString,
        jobInput: _json,
        jobName: __expectString,
        jobOutput: _json,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        numResults: __expectInt32,
        roleArn: __expectString,
        solutionVersionArn: __expectString,
        status: __expectString,
    });
};
const de_BatchSegmentJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchSegmentJobSummary(entry, context);
    });
    return retVal;
};
const de_BatchSegmentJobSummary = (output, context) => {
    return take(output, {
        batchSegmentJobArn: __expectString,
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureReason: __expectString,
        jobName: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        solutionVersionArn: __expectString,
        status: __expectString,
    });
};
const de_Campaign = (output, context) => {
    return take(output, {
        campaignArn: __expectString,
        campaignConfig: _json,
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureReason: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        latestCampaignUpdate: (_) => de_CampaignUpdateSummary(_, context),
        minProvisionedTPS: __expectInt32,
        name: __expectString,
        solutionVersionArn: __expectString,
        status: __expectString,
    });
};
const de_Campaigns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CampaignSummary(entry, context);
    });
    return retVal;
};
const de_CampaignSummary = (output, context) => {
    return take(output, {
        campaignArn: __expectString,
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureReason: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: __expectString,
    });
};
const de_CampaignUpdateSummary = (output, context) => {
    return take(output, {
        campaignConfig: _json,
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureReason: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        minProvisionedTPS: __expectInt32,
        solutionVersionArn: __expectString,
        status: __expectString,
    });
};
const de_ContinuousHyperParameterRange = (output, context) => {
    return take(output, {
        maxValue: __limitedParseDouble,
        minValue: __limitedParseDouble,
        name: __expectString,
    });
};
const de_ContinuousHyperParameterRanges = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContinuousHyperParameterRange(entry, context);
    });
    return retVal;
};
const de_Dataset = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetArn: __expectString,
        datasetGroupArn: __expectString,
        datasetType: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        latestDatasetUpdate: (_) => de_DatasetUpdateSummary(_, context),
        name: __expectString,
        schemaArn: __expectString,
        status: __expectString,
        trackingId: __expectString,
    });
};
const de_DatasetExportJob = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetArn: __expectString,
        datasetExportJobArn: __expectString,
        failureReason: __expectString,
        ingestionMode: __expectString,
        jobName: __expectString,
        jobOutput: _json,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        roleArn: __expectString,
        status: __expectString,
    });
};
const de_DatasetExportJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetExportJobSummary(entry, context);
    });
    return retVal;
};
const de_DatasetExportJobSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetExportJobArn: __expectString,
        failureReason: __expectString,
        jobName: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
    });
};
const de_DatasetGroup = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetGroupArn: __expectString,
        domain: __expectString,
        failureReason: __expectString,
        kmsKeyArn: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        roleArn: __expectString,
        status: __expectString,
    });
};
const de_DatasetGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetGroupSummary(entry, context);
    });
    return retVal;
};
const de_DatasetGroupSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetGroupArn: __expectString,
        domain: __expectString,
        failureReason: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: __expectString,
    });
};
const de_DatasetImportJob = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dataSource: _json,
        datasetArn: __expectString,
        datasetImportJobArn: __expectString,
        failureReason: __expectString,
        importMode: __expectString,
        jobName: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        publishAttributionMetricsToS3: __expectBoolean,
        roleArn: __expectString,
        status: __expectString,
    });
};
const de_DatasetImportJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetImportJobSummary(entry, context);
    });
    return retVal;
};
const de_DatasetImportJobSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetImportJobArn: __expectString,
        failureReason: __expectString,
        importMode: __expectString,
        jobName: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
    });
};
const de_Datasets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetSummary(entry, context);
    });
    return retVal;
};
const de_DatasetSchema = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        domain: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        schema: __expectString,
        schemaArn: __expectString,
    });
};
const de_DatasetSchemaSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        domain: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        schemaArn: __expectString,
    });
};
const de_DatasetSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetArn: __expectString,
        datasetType: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: __expectString,
    });
};
const de_DatasetUpdateSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureReason: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        schemaArn: __expectString,
        status: __expectString,
    });
};
const de_DefaultContinuousHyperParameterRange = (output, context) => {
    return take(output, {
        isTunable: __expectBoolean,
        maxValue: __limitedParseDouble,
        minValue: __limitedParseDouble,
        name: __expectString,
    });
};
const de_DefaultContinuousHyperParameterRanges = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DefaultContinuousHyperParameterRange(entry, context);
    });
    return retVal;
};
const de_DefaultHyperParameterRanges = (output, context) => {
    return take(output, {
        categoricalHyperParameterRanges: _json,
        continuousHyperParameterRanges: (_) => de_DefaultContinuousHyperParameterRanges(_, context),
        integerHyperParameterRanges: _json,
    });
};
const de_DescribeAlgorithmResponse = (output, context) => {
    return take(output, {
        algorithm: (_) => de_Algorithm(_, context),
    });
};
const de_DescribeBatchInferenceJobResponse = (output, context) => {
    return take(output, {
        batchInferenceJob: (_) => de_BatchInferenceJob(_, context),
    });
};
const de_DescribeBatchSegmentJobResponse = (output, context) => {
    return take(output, {
        batchSegmentJob: (_) => de_BatchSegmentJob(_, context),
    });
};
const de_DescribeCampaignResponse = (output, context) => {
    return take(output, {
        campaign: (_) => de_Campaign(_, context),
    });
};
const de_DescribeDatasetExportJobResponse = (output, context) => {
    return take(output, {
        datasetExportJob: (_) => de_DatasetExportJob(_, context),
    });
};
const de_DescribeDatasetGroupResponse = (output, context) => {
    return take(output, {
        datasetGroup: (_) => de_DatasetGroup(_, context),
    });
};
const de_DescribeDatasetImportJobResponse = (output, context) => {
    return take(output, {
        datasetImportJob: (_) => de_DatasetImportJob(_, context),
    });
};
const de_DescribeDatasetResponse = (output, context) => {
    return take(output, {
        dataset: (_) => de_Dataset(_, context),
    });
};
const de_DescribeEventTrackerResponse = (output, context) => {
    return take(output, {
        eventTracker: (_) => de_EventTracker(_, context),
    });
};
const de_DescribeFeatureTransformationResponse = (output, context) => {
    return take(output, {
        featureTransformation: (_) => de_FeatureTransformation(_, context),
    });
};
const de_DescribeFilterResponse = (output, context) => {
    return take(output, {
        filter: (_) => de_Filter(_, context),
    });
};
const de_DescribeMetricAttributionResponse = (output, context) => {
    return take(output, {
        metricAttribution: (_) => de_MetricAttribution(_, context),
    });
};
const de_DescribeRecipeResponse = (output, context) => {
    return take(output, {
        recipe: (_) => de_Recipe(_, context),
    });
};
const de_DescribeRecommenderResponse = (output, context) => {
    return take(output, {
        recommender: (_) => de_Recommender(_, context),
    });
};
const de_DescribeSchemaResponse = (output, context) => {
    return take(output, {
        schema: (_) => de_DatasetSchema(_, context),
    });
};
const de_DescribeSolutionResponse = (output, context) => {
    return take(output, {
        solution: (_) => de_Solution(_, context),
    });
};
const de_DescribeSolutionVersionResponse = (output, context) => {
    return take(output, {
        solutionVersion: (_) => de_SolutionVersion(_, context),
    });
};
const de_EventTracker = (output, context) => {
    return take(output, {
        accountId: __expectString,
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetGroupArn: __expectString,
        eventTrackerArn: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: __expectString,
        trackingId: __expectString,
    });
};
const de_EventTrackers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventTrackerSummary(entry, context);
    });
    return retVal;
};
const de_EventTrackerSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        eventTrackerArn: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: __expectString,
    });
};
const de_FeatureTransformation = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        defaultParameters: _json,
        featureTransformationArn: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: __expectString,
    });
};
const de_Filter = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetGroupArn: __expectString,
        failureReason: __expectString,
        filterArn: __expectString,
        filterExpression: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: __expectString,
    });
};
const de_Filters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FilterSummary(entry, context);
    });
    return retVal;
};
const de_FilterSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetGroupArn: __expectString,
        failureReason: __expectString,
        filterArn: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: __expectString,
    });
};
const de_GetSolutionMetricsResponse = (output, context) => {
    return take(output, {
        metrics: (_) => de_Metrics(_, context),
        solutionVersionArn: __expectString,
    });
};
const de_HPOConfig = (output, context) => {
    return take(output, {
        algorithmHyperParameterRanges: (_) => de_HyperParameterRanges(_, context),
        hpoObjective: _json,
        hpoResourceConfig: _json,
    });
};
const de_HyperParameterRanges = (output, context) => {
    return take(output, {
        categoricalHyperParameterRanges: _json,
        continuousHyperParameterRanges: (_) => de_ContinuousHyperParameterRanges(_, context),
        integerHyperParameterRanges: _json,
    });
};
const de_ListBatchInferenceJobsResponse = (output, context) => {
    return take(output, {
        batchInferenceJobs: (_) => de_BatchInferenceJobs(_, context),
        nextToken: __expectString,
    });
};
const de_ListBatchSegmentJobsResponse = (output, context) => {
    return take(output, {
        batchSegmentJobs: (_) => de_BatchSegmentJobs(_, context),
        nextToken: __expectString,
    });
};
const de_ListCampaignsResponse = (output, context) => {
    return take(output, {
        campaigns: (_) => de_Campaigns(_, context),
        nextToken: __expectString,
    });
};
const de_ListDatasetExportJobsResponse = (output, context) => {
    return take(output, {
        datasetExportJobs: (_) => de_DatasetExportJobs(_, context),
        nextToken: __expectString,
    });
};
const de_ListDatasetGroupsResponse = (output, context) => {
    return take(output, {
        datasetGroups: (_) => de_DatasetGroups(_, context),
        nextToken: __expectString,
    });
};
const de_ListDatasetImportJobsResponse = (output, context) => {
    return take(output, {
        datasetImportJobs: (_) => de_DatasetImportJobs(_, context),
        nextToken: __expectString,
    });
};
const de_ListDatasetsResponse = (output, context) => {
    return take(output, {
        datasets: (_) => de_Datasets(_, context),
        nextToken: __expectString,
    });
};
const de_ListEventTrackersResponse = (output, context) => {
    return take(output, {
        eventTrackers: (_) => de_EventTrackers(_, context),
        nextToken: __expectString,
    });
};
const de_ListFiltersResponse = (output, context) => {
    return take(output, {
        Filters: (_) => de_Filters(_, context),
        nextToken: __expectString,
    });
};
const de_ListMetricAttributionsResponse = (output, context) => {
    return take(output, {
        metricAttributions: (_) => de_MetricAttributions(_, context),
        nextToken: __expectString,
    });
};
const de_ListRecipesResponse = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        recipes: (_) => de_Recipes(_, context),
    });
};
const de_ListRecommendersResponse = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        recommenders: (_) => de_Recommenders(_, context),
    });
};
const de_ListSchemasResponse = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        schemas: (_) => de_Schemas(_, context),
    });
};
const de_ListSolutionsResponse = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        solutions: (_) => de_Solutions(_, context),
    });
};
const de_ListSolutionVersionsResponse = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        solutionVersions: (_) => de_SolutionVersions(_, context),
    });
};
const de_MetricAttribution = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetGroupArn: __expectString,
        failureReason: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        metricAttributionArn: __expectString,
        metricsOutputConfig: _json,
        name: __expectString,
        status: __expectString,
    });
};
const de_MetricAttributions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricAttributionSummary(entry, context);
    });
    return retVal;
};
const de_MetricAttributionSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureReason: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        metricAttributionArn: __expectString,
        name: __expectString,
        status: __expectString,
    });
};
const de_Metrics = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __limitedParseDouble(value);
        return acc;
    }, {});
};
const de_Recipe = (output, context) => {
    return take(output, {
        algorithmArn: __expectString,
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        featureTransformationArn: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        recipeArn: __expectString,
        recipeType: __expectString,
        status: __expectString,
    });
};
const de_Recipes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecipeSummary(entry, context);
    });
    return retVal;
};
const de_RecipeSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        domain: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        recipeArn: __expectString,
        status: __expectString,
    });
};
const de_Recommender = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetGroupArn: __expectString,
        failureReason: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        latestRecommenderUpdate: (_) => de_RecommenderUpdateSummary(_, context),
        modelMetrics: (_) => de_Metrics(_, context),
        name: __expectString,
        recipeArn: __expectString,
        recommenderArn: __expectString,
        recommenderConfig: _json,
        status: __expectString,
    });
};
const de_Recommenders = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecommenderSummary(entry, context);
    });
    return retVal;
};
const de_RecommenderSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetGroupArn: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        recipeArn: __expectString,
        recommenderArn: __expectString,
        recommenderConfig: _json,
        status: __expectString,
    });
};
const de_RecommenderUpdateSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureReason: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        recommenderConfig: _json,
        status: __expectString,
    });
};
const de_Schemas = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetSchemaSummary(entry, context);
    });
    return retVal;
};
const de_Solution = (output, context) => {
    return take(output, {
        autoMLResult: _json,
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetGroupArn: __expectString,
        eventType: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        latestSolutionVersion: (_) => de_SolutionVersionSummary(_, context),
        name: __expectString,
        performAutoML: __expectBoolean,
        performAutoTraining: __expectBoolean,
        performHPO: __expectBoolean,
        recipeArn: __expectString,
        solutionArn: __expectString,
        solutionConfig: (_) => de_SolutionConfig(_, context),
        status: __expectString,
    });
};
const de_SolutionConfig = (output, context) => {
    return take(output, {
        algorithmHyperParameters: _json,
        autoMLConfig: _json,
        autoTrainingConfig: _json,
        eventValueThreshold: __expectString,
        featureTransformationParameters: _json,
        hpoConfig: (_) => de_HPOConfig(_, context),
        optimizationObjective: _json,
        trainingDataConfig: _json,
    });
};
const de_Solutions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SolutionSummary(entry, context);
    });
    return retVal;
};
const de_SolutionSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        recipeArn: __expectString,
        solutionArn: __expectString,
        status: __expectString,
    });
};
const de_SolutionVersion = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetGroupArn: __expectString,
        eventType: __expectString,
        failureReason: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        performAutoML: __expectBoolean,
        performHPO: __expectBoolean,
        recipeArn: __expectString,
        solutionArn: __expectString,
        solutionConfig: (_) => de_SolutionConfig(_, context),
        solutionVersionArn: __expectString,
        status: __expectString,
        trainingHours: __limitedParseDouble,
        trainingMode: __expectString,
        trainingType: __expectString,
        tunedHPOParams: _json,
    });
};
const de_SolutionVersions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SolutionVersionSummary(entry, context);
    });
    return retVal;
};
const de_SolutionVersionSummary = (output, context) => {
    return take(output, {
        creationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureReason: __expectString,
        lastUpdatedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        solutionVersionArn: __expectString,
        status: __expectString,
        trainingMode: __expectString,
        trainingType: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AmazonPersonalize.${operation}`,
    };
}
