import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { PersonalizeServiceException as __BaseException } from "./PersonalizeServiceException";
export const BatchInferenceJobMode = {
    BATCH_INFERENCE: "BATCH_INFERENCE",
    THEME_GENERATION: "THEME_GENERATION",
};
export class InvalidInputException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
    }
}
export class ResourceInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
export const IngestionMode = {
    ALL: "ALL",
    BULK: "BULK",
    PUT: "PUT",
};
export const Domain = {
    ECOMMERCE: "ECOMMERCE",
    VIDEO_ON_DEMAND: "VIDEO_ON_DEMAND",
};
export const ImportMode = {
    FULL: "FULL",
    INCREMENTAL: "INCREMENTAL",
};
export const ObjectiveSensitivity = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
    OFF: "OFF",
};
export const TrainingMode = {
    AUTOTRAIN: "AUTOTRAIN",
    FULL: "FULL",
    UPDATE: "UPDATE",
};
export const TrainingType = {
    AUTOMATIC: "AUTOMATIC",
    MANUAL: "MANUAL",
};
export class InvalidNextTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
    }
}
export const RecipeProvider = {
    SERVICE: "SERVICE",
};
export class TooManyTagKeysException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagKeysException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagKeysException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagKeysException.prototype);
    }
}
export const CreateFilterRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.filterExpression && { filterExpression: SENSITIVE_STRING }),
});
export const FilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.filterExpression && { filterExpression: SENSITIVE_STRING }),
});
export const DescribeFilterResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.filter && { filter: FilterFilterSensitiveLog(obj.filter) }),
});
