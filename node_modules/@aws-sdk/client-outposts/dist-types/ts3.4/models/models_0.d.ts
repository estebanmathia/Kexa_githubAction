import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { OutpostsServiceException as __BaseException } from "./OutpostsServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface Address {
  ContactName?: string;
  ContactPhoneNumber?: string;
  AddressLine1: string | undefined;
  AddressLine2?: string;
  AddressLine3?: string;
  City: string | undefined;
  StateOrRegion: string | undefined;
  DistrictOrCounty?: string;
  PostalCode: string | undefined;
  CountryCode: string | undefined;
  Municipality?: string;
}
export declare const AddressType: {
  readonly OPERATING_ADDRESS: "OPERATING_ADDRESS";
  readonly SHIPPING_ADDRESS: "SHIPPING_ADDRESS";
};
export type AddressType = (typeof AddressType)[keyof typeof AddressType];
export interface AssetLocation {
  RackElevation?: number;
}
export declare const AssetType: {
  readonly COMPUTE: "COMPUTE";
};
export type AssetType = (typeof AssetType)[keyof typeof AssetType];
export declare const ComputeAssetState: {
  readonly ACTIVE: "ACTIVE";
  readonly ISOLATED: "ISOLATED";
  readonly RETIRING: "RETIRING";
};
export type ComputeAssetState =
  (typeof ComputeAssetState)[keyof typeof ComputeAssetState];
export interface ComputeAttributes {
  HostId?: string;
  State?: ComputeAssetState;
  InstanceFamilies?: string[];
}
export interface AssetInfo {
  AssetId?: string;
  RackId?: string;
  AssetType?: AssetType;
  ComputeAttributes?: ComputeAttributes;
  AssetLocation?: AssetLocation;
}
export declare const AssetState: {
  readonly ACTIVE: "ACTIVE";
  readonly ISOLATED: "ISOLATED";
  readonly RETIRING: "RETIRING";
};
export type AssetState = (typeof AssetState)[keyof typeof AssetState];
export interface CancelCapacityTaskInput {
  CapacityTaskId: string | undefined;
  OutpostIdentifier: string | undefined;
}
export interface CancelCapacityTaskOutput {}
export declare const ResourceType: {
  readonly ORDER: "ORDER";
  readonly OUTPOST: "OUTPOST";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  ResourceId?: string;
  ResourceType?: ResourceType;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface CancelOrderInput {
  OrderId: string | undefined;
}
export interface CancelOrderOutput {}
export declare const CapacityTaskFailureType: {
  readonly UNSUPPORTED_CAPACITY_CONFIGURATION: "UNSUPPORTED_CAPACITY_CONFIGURATION";
};
export type CapacityTaskFailureType =
  (typeof CapacityTaskFailureType)[keyof typeof CapacityTaskFailureType];
export interface CapacityTaskFailure {
  Reason: string | undefined;
  Type?: CapacityTaskFailureType;
}
export declare const CapacityTaskStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly REQUESTED: "REQUESTED";
};
export type CapacityTaskStatus =
  (typeof CapacityTaskStatus)[keyof typeof CapacityTaskStatus];
export interface CapacityTaskSummary {
  CapacityTaskId?: string;
  OutpostId?: string;
  OrderId?: string;
  CapacityTaskStatus?: CapacityTaskStatus;
  CreationDate?: Date;
  CompletionDate?: Date;
  LastModifiedDate?: Date;
}
export interface EC2Capacity {
  Family?: string;
  MaxSize?: string;
  Quantity?: string;
}
export declare const CatalogItemStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly DISCONTINUED: "DISCONTINUED";
};
export type CatalogItemStatus =
  (typeof CatalogItemStatus)[keyof typeof CatalogItemStatus];
export declare const SupportedStorageEnum: {
  readonly EBS: "EBS";
  readonly S3: "S3";
};
export type SupportedStorageEnum =
  (typeof SupportedStorageEnum)[keyof typeof SupportedStorageEnum];
export interface CatalogItem {
  CatalogItemId?: string;
  ItemStatus?: CatalogItemStatus;
  EC2Capacities?: EC2Capacity[];
  PowerKva?: number;
  WeightLbs?: number;
  SupportedUplinkGbps?: number[];
  SupportedStorage?: SupportedStorageEnum[];
}
export declare const CatalogItemClass: {
  readonly RACK: "RACK";
  readonly SERVER: "SERVER";
};
export type CatalogItemClass =
  (typeof CatalogItemClass)[keyof typeof CatalogItemClass];
export interface ConnectionDetails {
  ClientPublicKey?: string;
  ServerPublicKey?: string;
  ServerEndpoint?: string;
  ClientTunnelAddress?: string;
  ServerTunnelAddress?: string;
  AllowedIps?: string[];
}
export interface LineItemRequest {
  CatalogItemId?: string;
  Quantity?: number;
}
export declare const PaymentOption: {
  readonly ALL_UPFRONT: "ALL_UPFRONT";
  readonly NO_UPFRONT: "NO_UPFRONT";
  readonly PARTIAL_UPFRONT: "PARTIAL_UPFRONT";
};
export type PaymentOption = (typeof PaymentOption)[keyof typeof PaymentOption];
export declare const PaymentTerm: {
  readonly ONE_YEAR: "ONE_YEAR";
  readonly THREE_YEARS: "THREE_YEARS";
};
export type PaymentTerm = (typeof PaymentTerm)[keyof typeof PaymentTerm];
export interface CreateOrderInput {
  OutpostIdentifier: string | undefined;
  LineItems: LineItemRequest[] | undefined;
  PaymentOption: PaymentOption | undefined;
  PaymentTerm?: PaymentTerm;
}
export interface LineItemAssetInformation {
  AssetId?: string;
  MacAddressList?: string[];
}
export declare const ShipmentCarrier: {
  readonly DBS: "DBS";
  readonly DHL: "DHL";
  readonly EXPEDITORS: "EXPEDITORS";
  readonly FEDEX: "FEDEX";
  readonly UPS: "UPS";
};
export type ShipmentCarrier =
  (typeof ShipmentCarrier)[keyof typeof ShipmentCarrier];
export interface ShipmentInformation {
  ShipmentTrackingNumber?: string;
  ShipmentCarrier?: ShipmentCarrier;
}
export declare const LineItemStatus: {
  readonly BUILDING: "BUILDING";
  readonly CANCELLED: "CANCELLED";
  readonly DELIVERED: "DELIVERED";
  readonly ERROR: "ERROR";
  readonly INSTALLED: "INSTALLED";
  readonly INSTALLING: "INSTALLING";
  readonly PREPARING: "PREPARING";
  readonly REPLACED: "REPLACED";
  readonly SHIPPED: "SHIPPED";
};
export type LineItemStatus =
  (typeof LineItemStatus)[keyof typeof LineItemStatus];
export interface LineItem {
  CatalogItemId?: string;
  LineItemId?: string;
  Quantity?: number;
  Status?: LineItemStatus;
  ShipmentInformation?: ShipmentInformation;
  AssetInformationList?: LineItemAssetInformation[];
  PreviousLineItemId?: string;
  PreviousOrderId?: string;
}
export declare const OrderType: {
  readonly OUTPOST: "OUTPOST";
  readonly REPLACEMENT: "REPLACEMENT";
};
export type OrderType = (typeof OrderType)[keyof typeof OrderType];
export declare const OrderStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
  readonly ERROR: "ERROR";
  readonly FULFILLED: "FULFILLED";
  readonly INSTALLING: "INSTALLING";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly PENDING: "PENDING";
  readonly PREPARING: "PREPARING";
  readonly PROCESSING: "PROCESSING";
  readonly RECEIVED: "RECEIVED";
};
export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus];
export interface Order {
  OutpostId?: string;
  OrderId?: string;
  Status?: OrderStatus;
  LineItems?: LineItem[];
  PaymentOption?: PaymentOption;
  OrderSubmissionDate?: Date;
  OrderFulfilledDate?: Date;
  PaymentTerm?: PaymentTerm;
  OrderType?: OrderType;
}
export interface CreateOrderOutput {
  Order?: Order;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare const SupportedHardwareType: {
  readonly RACK: "RACK";
  readonly SERVER: "SERVER";
};
export type SupportedHardwareType =
  (typeof SupportedHardwareType)[keyof typeof SupportedHardwareType];
export interface CreateOutpostInput {
  Name: string | undefined;
  Description?: string;
  SiteId: string | undefined;
  AvailabilityZone?: string;
  AvailabilityZoneId?: string;
  Tags?: Record<string, string>;
  SupportedHardwareType?: SupportedHardwareType;
}
export interface Outpost {
  OutpostId?: string;
  OwnerId?: string;
  OutpostArn?: string;
  SiteId?: string;
  Name?: string;
  Description?: string;
  LifeCycleStatus?: string;
  AvailabilityZone?: string;
  AvailabilityZoneId?: string;
  Tags?: Record<string, string>;
  SiteArn?: string;
  SupportedHardwareType?: SupportedHardwareType;
}
export interface CreateOutpostOutput {
  Outpost?: Outpost;
}
export declare const FiberOpticCableType: {
  readonly MULTI_MODE: "MULTI_MODE";
  readonly SINGLE_MODE: "SINGLE_MODE";
};
export type FiberOpticCableType =
  (typeof FiberOpticCableType)[keyof typeof FiberOpticCableType];
export declare const MaximumSupportedWeightLbs: {
  readonly MAX_1400_LBS: "MAX_1400_LBS";
  readonly MAX_1600_LBS: "MAX_1600_LBS";
  readonly MAX_1800_LBS: "MAX_1800_LBS";
  readonly MAX_2000_LBS: "MAX_2000_LBS";
  readonly NO_LIMIT: "NO_LIMIT";
};
export type MaximumSupportedWeightLbs =
  (typeof MaximumSupportedWeightLbs)[keyof typeof MaximumSupportedWeightLbs];
export declare const OpticalStandard: {
  readonly OPTIC_1000BASE_LX: "OPTIC_1000BASE_LX";
  readonly OPTIC_1000BASE_SX: "OPTIC_1000BASE_SX";
  readonly OPTIC_100GBASE_CWDM4: "OPTIC_100GBASE_CWDM4";
  readonly OPTIC_100GBASE_LR4: "OPTIC_100GBASE_LR4";
  readonly OPTIC_100GBASE_SR4: "OPTIC_100GBASE_SR4";
  readonly OPTIC_100G_PSM4_MSA: "OPTIC_100G_PSM4_MSA";
  readonly OPTIC_10GBASE_IR: "OPTIC_10GBASE_IR";
  readonly OPTIC_10GBASE_LR: "OPTIC_10GBASE_LR";
  readonly OPTIC_10GBASE_SR: "OPTIC_10GBASE_SR";
  readonly OPTIC_40GBASE_ESR: "OPTIC_40GBASE_ESR";
  readonly OPTIC_40GBASE_IR4_LR4L: "OPTIC_40GBASE_IR4_LR4L";
  readonly OPTIC_40GBASE_LR4: "OPTIC_40GBASE_LR4";
  readonly OPTIC_40GBASE_SR: "OPTIC_40GBASE_SR";
};
export type OpticalStandard =
  (typeof OpticalStandard)[keyof typeof OpticalStandard];
export declare const PowerConnector: {
  readonly AH530P7W: "AH530P7W";
  readonly AH532P6W: "AH532P6W";
  readonly IEC309: "IEC309";
  readonly L6_30P: "L6_30P";
};
export type PowerConnector =
  (typeof PowerConnector)[keyof typeof PowerConnector];
export declare const PowerDrawKva: {
  readonly POWER_10_KVA: "POWER_10_KVA";
  readonly POWER_15_KVA: "POWER_15_KVA";
  readonly POWER_30_KVA: "POWER_30_KVA";
  readonly POWER_5_KVA: "POWER_5_KVA";
};
export type PowerDrawKva = (typeof PowerDrawKva)[keyof typeof PowerDrawKva];
export declare const PowerFeedDrop: {
  readonly ABOVE_RACK: "ABOVE_RACK";
  readonly BELOW_RACK: "BELOW_RACK";
};
export type PowerFeedDrop = (typeof PowerFeedDrop)[keyof typeof PowerFeedDrop];
export declare const PowerPhase: {
  readonly SINGLE_PHASE: "SINGLE_PHASE";
  readonly THREE_PHASE: "THREE_PHASE";
};
export type PowerPhase = (typeof PowerPhase)[keyof typeof PowerPhase];
export declare const UplinkCount: {
  readonly UPLINK_COUNT_1: "UPLINK_COUNT_1";
  readonly UPLINK_COUNT_12: "UPLINK_COUNT_12";
  readonly UPLINK_COUNT_16: "UPLINK_COUNT_16";
  readonly UPLINK_COUNT_2: "UPLINK_COUNT_2";
  readonly UPLINK_COUNT_3: "UPLINK_COUNT_3";
  readonly UPLINK_COUNT_4: "UPLINK_COUNT_4";
  readonly UPLINK_COUNT_5: "UPLINK_COUNT_5";
  readonly UPLINK_COUNT_6: "UPLINK_COUNT_6";
  readonly UPLINK_COUNT_7: "UPLINK_COUNT_7";
  readonly UPLINK_COUNT_8: "UPLINK_COUNT_8";
};
export type UplinkCount = (typeof UplinkCount)[keyof typeof UplinkCount];
export declare const UplinkGbps: {
  readonly UPLINK_100G: "UPLINK_100G";
  readonly UPLINK_10G: "UPLINK_10G";
  readonly UPLINK_1G: "UPLINK_1G";
  readonly UPLINK_40G: "UPLINK_40G";
};
export type UplinkGbps = (typeof UplinkGbps)[keyof typeof UplinkGbps];
export interface RackPhysicalProperties {
  PowerDrawKva?: PowerDrawKva;
  PowerPhase?: PowerPhase;
  PowerConnector?: PowerConnector;
  PowerFeedDrop?: PowerFeedDrop;
  UplinkGbps?: UplinkGbps;
  UplinkCount?: UplinkCount;
  FiberOpticCableType?: FiberOpticCableType;
  OpticalStandard?: OpticalStandard;
  MaximumSupportedWeightLbs?: MaximumSupportedWeightLbs;
}
export interface CreateSiteInput {
  Name: string | undefined;
  Description?: string;
  Notes?: string;
  Tags?: Record<string, string>;
  OperatingAddress?: Address;
  ShippingAddress?: Address;
  RackPhysicalProperties?: RackPhysicalProperties;
}
export interface Site {
  SiteId?: string;
  AccountId?: string;
  Name?: string;
  Description?: string;
  Tags?: Record<string, string>;
  SiteArn?: string;
  Notes?: string;
  OperatingAddressCountryCode?: string;
  OperatingAddressStateOrRegion?: string;
  OperatingAddressCity?: string;
  RackPhysicalProperties?: RackPhysicalProperties;
}
export interface CreateSiteOutput {
  Site?: Site;
}
export interface DeleteOutpostInput {
  OutpostId: string | undefined;
}
export interface DeleteOutpostOutput {}
export interface DeleteSiteInput {
  SiteId: string | undefined;
}
export interface DeleteSiteOutput {}
export interface GetCapacityTaskInput {
  CapacityTaskId: string | undefined;
  OutpostIdentifier: string | undefined;
}
export interface InstanceTypeCapacity {
  InstanceType: string | undefined;
  Count: number | undefined;
}
export interface GetCapacityTaskOutput {
  CapacityTaskId?: string;
  OutpostId?: string;
  OrderId?: string;
  RequestedInstancePools?: InstanceTypeCapacity[];
  DryRun?: boolean;
  CapacityTaskStatus?: CapacityTaskStatus;
  Failed?: CapacityTaskFailure;
  CreationDate?: Date;
  CompletionDate?: Date;
  LastModifiedDate?: Date;
}
export interface GetCatalogItemInput {
  CatalogItemId: string | undefined;
}
export interface GetCatalogItemOutput {
  CatalogItem?: CatalogItem;
}
export interface GetConnectionRequest {
  ConnectionId: string | undefined;
}
export interface GetConnectionResponse {
  ConnectionId?: string;
  ConnectionDetails?: ConnectionDetails;
}
export interface GetOrderInput {
  OrderId: string | undefined;
}
export interface GetOrderOutput {
  Order?: Order;
}
export interface GetOutpostInput {
  OutpostId: string | undefined;
}
export interface GetOutpostOutput {
  Outpost?: Outpost;
}
export interface GetOutpostInstanceTypesInput {
  OutpostId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface InstanceTypeItem {
  InstanceType?: string;
}
export interface GetOutpostInstanceTypesOutput {
  InstanceTypes?: InstanceTypeItem[];
  NextToken?: string;
  OutpostId?: string;
  OutpostArn?: string;
}
export interface GetOutpostSupportedInstanceTypesInput {
  OutpostIdentifier: string | undefined;
  OrderId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface GetOutpostSupportedInstanceTypesOutput {
  InstanceTypes?: InstanceTypeItem[];
  NextToken?: string;
}
export interface GetSiteInput {
  SiteId: string | undefined;
}
export interface GetSiteOutput {
  Site?: Site;
}
export interface GetSiteAddressInput {
  SiteId: string | undefined;
  AddressType: AddressType | undefined;
}
export interface GetSiteAddressOutput {
  SiteId?: string;
  AddressType?: AddressType;
  Address?: Address;
}
export interface ListAssetsInput {
  OutpostIdentifier: string | undefined;
  HostIdFilter?: string[];
  MaxResults?: number;
  NextToken?: string;
  StatusFilter?: AssetState[];
}
export interface ListAssetsOutput {
  Assets?: AssetInfo[];
  NextToken?: string;
}
export interface ListCapacityTasksInput {
  OutpostIdentifierFilter?: string;
  MaxResults?: number;
  NextToken?: string;
  CapacityTaskStatusFilter?: CapacityTaskStatus[];
}
export interface ListCapacityTasksOutput {
  CapacityTasks?: CapacityTaskSummary[];
  NextToken?: string;
}
export interface ListCatalogItemsInput {
  NextToken?: string;
  MaxResults?: number;
  ItemClassFilter?: CatalogItemClass[];
  SupportedStorageFilter?: SupportedStorageEnum[];
  EC2FamilyFilter?: string[];
}
export interface ListCatalogItemsOutput {
  CatalogItems?: CatalogItem[];
  NextToken?: string;
}
export interface ListOrdersInput {
  OutpostIdentifierFilter?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface OrderSummary {
  OutpostId?: string;
  OrderId?: string;
  OrderType?: OrderType;
  Status?: OrderStatus;
  LineItemCountsByStatus?: Partial<Record<LineItemStatus, number>>;
  OrderSubmissionDate?: Date;
  OrderFulfilledDate?: Date;
}
export interface ListOrdersOutput {
  Orders?: OrderSummary[];
  NextToken?: string;
}
export interface ListOutpostsInput {
  NextToken?: string;
  MaxResults?: number;
  LifeCycleStatusFilter?: string[];
  AvailabilityZoneFilter?: string[];
  AvailabilityZoneIdFilter?: string[];
}
export interface ListOutpostsOutput {
  Outposts?: Outpost[];
  NextToken?: string;
}
export interface ListSitesInput {
  NextToken?: string;
  MaxResults?: number;
  OperatingAddressCountryCodeFilter?: string[];
  OperatingAddressStateOrRegionFilter?: string[];
  OperatingAddressCityFilter?: string[];
}
export interface ListSitesOutput {
  Sites?: Site[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export interface StartCapacityTaskInput {
  OutpostIdentifier: string | undefined;
  OrderId: string | undefined;
  InstancePools: InstanceTypeCapacity[] | undefined;
  DryRun?: boolean;
}
export interface StartCapacityTaskOutput {
  CapacityTaskId?: string;
  OutpostId?: string;
  OrderId?: string;
  RequestedInstancePools?: InstanceTypeCapacity[];
  DryRun?: boolean;
  CapacityTaskStatus?: CapacityTaskStatus;
  Failed?: CapacityTaskFailure;
  CreationDate?: Date;
  CompletionDate?: Date;
  LastModifiedDate?: Date;
}
export interface StartConnectionRequest {
  DeviceSerialNumber?: string;
  AssetId: string | undefined;
  ClientPublicKey: string | undefined;
  NetworkInterfaceDeviceIndex: number | undefined;
}
export interface StartConnectionResponse {
  ConnectionId?: string;
  UnderlayIpAddress?: string;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateOutpostInput {
  OutpostId: string | undefined;
  Name?: string;
  Description?: string;
  SupportedHardwareType?: SupportedHardwareType;
}
export interface UpdateOutpostOutput {
  Outpost?: Outpost;
}
export interface UpdateSiteInput {
  SiteId: string | undefined;
  Name?: string;
  Description?: string;
  Notes?: string;
}
export interface UpdateSiteOutput {
  Site?: Site;
}
export interface UpdateSiteAddressInput {
  SiteId: string | undefined;
  AddressType: AddressType | undefined;
  Address: Address | undefined;
}
export interface UpdateSiteAddressOutput {
  AddressType?: AddressType;
  Address?: Address;
}
export interface UpdateSiteRackPhysicalPropertiesInput {
  SiteId: string | undefined;
  PowerDrawKva?: PowerDrawKva;
  PowerPhase?: PowerPhase;
  PowerConnector?: PowerConnector;
  PowerFeedDrop?: PowerFeedDrop;
  UplinkGbps?: UplinkGbps;
  UplinkCount?: UplinkCount;
  FiberOpticCableType?: FiberOpticCableType;
  OpticalStandard?: OpticalStandard;
  MaximumSupportedWeightLbs?: MaximumSupportedWeightLbs;
}
export interface UpdateSiteRackPhysicalPropertiesOutput {
  Site?: Site;
}
