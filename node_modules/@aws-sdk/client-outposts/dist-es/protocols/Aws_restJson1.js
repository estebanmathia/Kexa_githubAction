import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { AccessDeniedException, ConflictException, InternalServerException, NotFoundException, ServiceQuotaExceededException, ValidationException, } from "../models/models_0";
import { OutpostsServiceException as __BaseException } from "../models/OutpostsServiceException";
export const se_CancelCapacityTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/outposts/{OutpostIdentifier}/capacity/{CapacityTaskId}");
    b.p("CapacityTaskId", () => input.CapacityTaskId, "{CapacityTaskId}", false);
    b.p("OutpostIdentifier", () => input.OutpostIdentifier, "{OutpostIdentifier}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CancelOrderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/orders/{OrderId}/cancel");
    b.p("OrderId", () => input.OrderId, "{OrderId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateOrderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/orders");
    let body;
    body = JSON.stringify(take(input, {
        LineItems: (_) => _json(_),
        OutpostIdentifier: [],
        PaymentOption: [],
        PaymentTerm: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateOutpostCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/outposts");
    let body;
    body = JSON.stringify(take(input, {
        AvailabilityZone: [],
        AvailabilityZoneId: [],
        Description: [],
        Name: [],
        SiteId: [],
        SupportedHardwareType: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSiteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sites");
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
        Notes: [],
        OperatingAddress: (_) => _json(_),
        RackPhysicalProperties: (_) => _json(_),
        ShippingAddress: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteOutpostCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/outposts/{OutpostId}");
    b.p("OutpostId", () => input.OutpostId, "{OutpostId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteSiteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sites/{SiteId}");
    b.p("SiteId", () => input.SiteId, "{SiteId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetCapacityTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/outposts/{OutpostIdentifier}/capacity/{CapacityTaskId}");
    b.p("CapacityTaskId", () => input.CapacityTaskId, "{CapacityTaskId}", false);
    b.p("OutpostIdentifier", () => input.OutpostIdentifier, "{OutpostIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCatalogItemCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/catalog/item/{CatalogItemId}");
    b.p("CatalogItemId", () => input.CatalogItemId, "{CatalogItemId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetConnectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/connections/{ConnectionId}");
    b.p("ConnectionId", () => input.ConnectionId, "{ConnectionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetOrderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/orders/{OrderId}");
    b.p("OrderId", () => input.OrderId, "{OrderId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetOutpostCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/outposts/{OutpostId}");
    b.p("OutpostId", () => input.OutpostId, "{OutpostId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetOutpostInstanceTypesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/outposts/{OutpostId}/instanceTypes");
    b.p("OutpostId", () => input.OutpostId, "{OutpostId}", false);
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetOutpostSupportedInstanceTypesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/outposts/{OutpostIdentifier}/supportedInstanceTypes");
    b.p("OutpostIdentifier", () => input.OutpostIdentifier, "{OutpostIdentifier}", false);
    const query = map({
        [_OI]: [, __expectNonNull(input[_OI], `OrderId`)],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetSiteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sites/{SiteId}");
    b.p("SiteId", () => input.SiteId, "{SiteId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSiteAddressCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sites/{SiteId}/address");
    b.p("SiteId", () => input.SiteId, "{SiteId}", false);
    const query = map({
        [_AT]: [, __expectNonNull(input[_AT], `AddressType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAssetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/outposts/{OutpostIdentifier}/assets");
    b.p("OutpostIdentifier", () => input.OutpostIdentifier, "{OutpostIdentifier}", false);
    const query = map({
        [_HIF]: [() => input.HostIdFilter !== void 0, () => (input[_HIF] || []).map((_entry) => _entry)],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
        [_SF]: [() => input.StatusFilter !== void 0, () => (input[_SF] || []).map((_entry) => _entry)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCapacityTasksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/capacity/tasks");
    const query = map({
        [_OIF]: [, input[_OIF]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
        [_CTSF]: [
            () => input.CapacityTaskStatusFilter !== void 0,
            () => (input[_CTSF] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCatalogItemsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/catalog/items");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_ICF]: [() => input.ItemClassFilter !== void 0, () => (input[_ICF] || []).map((_entry) => _entry)],
        [_SSF]: [() => input.SupportedStorageFilter !== void 0, () => (input[_SSF] || []).map((_entry) => _entry)],
        [_ECFF]: [() => input.EC2FamilyFilter !== void 0, () => (input[_ECFF] || []).map((_entry) => _entry)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListOrdersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/list-orders");
    const query = map({
        [_OIF]: [, input[_OIF]],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListOutpostsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/outposts");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_LCSF]: [() => input.LifeCycleStatusFilter !== void 0, () => (input[_LCSF] || []).map((_entry) => _entry)],
        [_AZF]: [() => input.AvailabilityZoneFilter !== void 0, () => (input[_AZF] || []).map((_entry) => _entry)],
        [_AZIF]: [
            () => input.AvailabilityZoneIdFilter !== void 0,
            () => (input[_AZIF] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSitesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sites");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_OACCF]: [
            () => input.OperatingAddressCountryCodeFilter !== void 0,
            () => (input[_OACCF] || []).map((_entry) => _entry),
        ],
        [_OASORF]: [
            () => input.OperatingAddressStateOrRegionFilter !== void 0,
            () => (input[_OASORF] || []).map((_entry) => _entry),
        ],
        [_OACF]: [
            () => input.OperatingAddressCityFilter !== void 0,
            () => (input[_OACF] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_StartCapacityTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/outposts/{OutpostIdentifier}/capacity");
    b.p("OutpostIdentifier", () => input.OutpostIdentifier, "{OutpostIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        DryRun: [],
        InstancePools: (_) => _json(_),
        OrderId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartConnectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/connections");
    let body;
    body = JSON.stringify(take(input, {
        AssetId: [],
        ClientPublicKey: [],
        DeviceSerialNumber: [],
        NetworkInterfaceDeviceIndex: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateOutpostCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/outposts/{OutpostId}");
    b.p("OutpostId", () => input.OutpostId, "{OutpostId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
        SupportedHardwareType: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateSiteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sites/{SiteId}");
    b.p("SiteId", () => input.SiteId, "{SiteId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
        Notes: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateSiteAddressCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sites/{SiteId}/address");
    b.p("SiteId", () => input.SiteId, "{SiteId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Address: (_) => _json(_),
        AddressType: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateSiteRackPhysicalPropertiesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sites/{SiteId}/rackPhysicalProperties");
    b.p("SiteId", () => input.SiteId, "{SiteId}", false);
    let body;
    body = JSON.stringify(take(input, {
        FiberOpticCableType: [],
        MaximumSupportedWeightLbs: [],
        OpticalStandard: [],
        PowerConnector: [],
        PowerDrawKva: [],
        PowerFeedDrop: [],
        PowerPhase: [],
        UplinkCount: [],
        UplinkGbps: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_CancelCapacityTaskCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CancelOrderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateOrderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Order: (_) => de_Order(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateOutpostCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Outpost: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSiteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Site: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteOutpostCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSiteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetCapacityTaskCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CapacityTaskId: __expectString,
        CapacityTaskStatus: __expectString,
        CompletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DryRun: __expectBoolean,
        Failed: _json,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OrderId: __expectString,
        OutpostId: __expectString,
        RequestedInstancePools: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCatalogItemCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CatalogItem: (_) => de_CatalogItem(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConnectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectionDetails: _json,
        ConnectionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetOrderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Order: (_) => de_Order(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetOutpostCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Outpost: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetOutpostInstanceTypesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InstanceTypes: _json,
        NextToken: __expectString,
        OutpostArn: __expectString,
        OutpostId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetOutpostSupportedInstanceTypesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InstanceTypes: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSiteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Site: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSiteAddressCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Address: _json,
        AddressType: __expectString,
        SiteId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAssetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Assets: (_) => de_AssetListDefinition(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCapacityTasksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CapacityTasks: (_) => de_CapacityTaskList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCatalogItemsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CatalogItems: (_) => de_CatalogItemListDefinition(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListOrdersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Orders: (_) => de_OrderSummaryListDefinition(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListOutpostsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Outposts: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSitesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Sites: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartCapacityTaskCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CapacityTaskId: __expectString,
        CapacityTaskStatus: __expectString,
        CompletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DryRun: __expectBoolean,
        Failed: _json,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OrderId: __expectString,
        OutpostId: __expectString,
        RequestedInstancePools: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartConnectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectionId: __expectString,
        UnderlayIpAddress: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateOutpostCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Outpost: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSiteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Site: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSiteAddressCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Address: _json,
        AddressType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSiteRackPhysicalPropertiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Site: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.outposts#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.outposts#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.outposts#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.outposts#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.outposts#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.outposts#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_AssetInfo = (output, context) => {
    return take(output, {
        AssetId: __expectString,
        AssetLocation: (_) => de_AssetLocation(_, context),
        AssetType: __expectString,
        ComputeAttributes: _json,
        RackId: __expectString,
    });
};
const de_AssetListDefinition = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssetInfo(entry, context);
    });
    return retVal;
};
const de_AssetLocation = (output, context) => {
    return take(output, {
        RackElevation: __limitedParseFloat32,
    });
};
const de_CapacityTaskList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityTaskSummary(entry, context);
    });
    return retVal;
};
const de_CapacityTaskSummary = (output, context) => {
    return take(output, {
        CapacityTaskId: __expectString,
        CapacityTaskStatus: __expectString,
        CompletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OrderId: __expectString,
        OutpostId: __expectString,
    });
};
const de_CatalogItem = (output, context) => {
    return take(output, {
        CatalogItemId: __expectString,
        EC2Capacities: _json,
        ItemStatus: __expectString,
        PowerKva: __limitedParseFloat32,
        SupportedStorage: _json,
        SupportedUplinkGbps: _json,
        WeightLbs: __expectInt32,
    });
};
const de_CatalogItemListDefinition = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CatalogItem(entry, context);
    });
    return retVal;
};
const de_Order = (output, context) => {
    return take(output, {
        LineItems: _json,
        OrderFulfilledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OrderId: __expectString,
        OrderSubmissionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OrderType: __expectString,
        OutpostId: __expectString,
        PaymentOption: __expectString,
        PaymentTerm: __expectString,
        Status: __expectString,
    });
};
const de_OrderSummary = (output, context) => {
    return take(output, {
        LineItemCountsByStatus: _json,
        OrderFulfilledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OrderId: __expectString,
        OrderSubmissionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OrderType: __expectString,
        OutpostId: __expectString,
        Status: __expectString,
    });
};
const de_OrderSummaryListDefinition = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OrderSummary(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _AT = "AddressType";
const _AZF = "AvailabilityZoneFilter";
const _AZIF = "AvailabilityZoneIdFilter";
const _CTSF = "CapacityTaskStatusFilter";
const _ECFF = "EC2FamilyFilter";
const _HIF = "HostIdFilter";
const _ICF = "ItemClassFilter";
const _LCSF = "LifeCycleStatusFilter";
const _MR = "MaxResults";
const _NT = "NextToken";
const _OACCF = "OperatingAddressCountryCodeFilter";
const _OACF = "OperatingAddressCityFilter";
const _OASORF = "OperatingAddressStateOrRegionFilter";
const _OI = "OrderId";
const _OIF = "OutpostIdentifierFilter";
const _SF = "StatusFilter";
const _SSF = "SupportedStorageFilter";
const _TK = "TagKeys";
const _tK = "tagKeys";
