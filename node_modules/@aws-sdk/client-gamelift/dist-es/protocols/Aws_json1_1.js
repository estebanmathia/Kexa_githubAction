import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { GameLiftServiceException as __BaseException } from "../models/GameLiftServiceException";
import { ConflictException, FleetCapacityExceededException, GameSessionFullException, IdempotentParameterMismatchException, InternalServiceException, InvalidFleetStatusException, InvalidGameSessionStatusException, InvalidRequestException, LimitExceededException, NotFoundException, NotReadyException, OutOfCapacityException, TaggingFailedException, TerminalRoutingStrategyException, UnauthorizedException, UnsupportedRegionException, } from "../models/models_0";
export const se_AcceptMatchCommand = async (input, context) => {
    const headers = sharedHeaders("AcceptMatch");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ClaimGameServerCommand = async (input, context) => {
    const headers = sharedHeaders("ClaimGameServer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAliasCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAlias");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateBuildCommand = async (input, context) => {
    const headers = sharedHeaders("CreateBuild");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateContainerGroupDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateContainerGroupDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFleetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFleetLocationsCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFleetLocations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateGameServerGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateGameServerGroup");
    let body;
    body = JSON.stringify(se_CreateGameServerGroupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateGameSessionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateGameSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateGameSessionQueueCommand = async (input, context) => {
    const headers = sharedHeaders("CreateGameSessionQueue");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLocationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLocation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateMatchmakingConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMatchmakingConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateMatchmakingRuleSetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMatchmakingRuleSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePlayerSessionCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePlayerSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePlayerSessionsCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePlayerSessions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateScriptCommand = async (input, context) => {
    const headers = sharedHeaders("CreateScript");
    let body;
    body = JSON.stringify(se_CreateScriptInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVpcPeeringAuthorizationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateVpcPeeringAuthorization");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVpcPeeringConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateVpcPeeringConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAliasCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAlias");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteBuildCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBuild");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteContainerGroupDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteContainerGroupDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFleetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFleetLocationsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFleetLocations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteGameServerGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteGameServerGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteGameSessionQueueCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteGameSessionQueue");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLocationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLocation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMatchmakingConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMatchmakingConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMatchmakingRuleSetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMatchmakingRuleSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteScalingPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteScalingPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteScriptCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteScript");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVpcPeeringAuthorizationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteVpcPeeringAuthorization");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVpcPeeringConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteVpcPeeringConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeregisterComputeCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterCompute");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeregisterGameServerCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterGameServer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAliasCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAlias");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBuildCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBuild");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeComputeCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCompute");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeContainerGroupDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeContainerGroupDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEC2InstanceLimitsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEC2InstanceLimits");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFleetAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFleetAttributes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFleetCapacityCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFleetCapacity");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFleetEventsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFleetEvents");
    let body;
    body = JSON.stringify(se_DescribeFleetEventsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFleetLocationAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFleetLocationAttributes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFleetLocationCapacityCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFleetLocationCapacity");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFleetLocationUtilizationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFleetLocationUtilization");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFleetPortSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFleetPortSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFleetUtilizationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFleetUtilization");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeGameServerCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeGameServer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeGameServerGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeGameServerGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeGameServerInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeGameServerInstances");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeGameSessionDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeGameSessionDetails");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeGameSessionPlacementCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeGameSessionPlacement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeGameSessionQueuesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeGameSessionQueues");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeGameSessionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeGameSessions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInstances");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeMatchmakingCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMatchmaking");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeMatchmakingConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMatchmakingConfigurations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeMatchmakingRuleSetsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMatchmakingRuleSets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePlayerSessionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePlayerSessions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRuntimeConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRuntimeConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeScalingPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeScalingPolicies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeScriptCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeScript");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcPeeringAuthorizationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeVpcPeeringAuthorizations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcPeeringConnectionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeVpcPeeringConnections");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetComputeAccessCommand = async (input, context) => {
    const headers = sharedHeaders("GetComputeAccess");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetComputeAuthTokenCommand = async (input, context) => {
    const headers = sharedHeaders("GetComputeAuthToken");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetGameSessionLogUrlCommand = async (input, context) => {
    const headers = sharedHeaders("GetGameSessionLogUrl");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInstanceAccessCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstanceAccess");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAliasesCommand = async (input, context) => {
    const headers = sharedHeaders("ListAliases");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListBuildsCommand = async (input, context) => {
    const headers = sharedHeaders("ListBuilds");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListComputeCommand = async (input, context) => {
    const headers = sharedHeaders("ListCompute");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListContainerGroupDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListContainerGroupDefinitions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFleetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFleets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListGameServerGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListGameServerGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListGameServersCommand = async (input, context) => {
    const headers = sharedHeaders("ListGameServers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListLocationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListLocations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListScriptsCommand = async (input, context) => {
    const headers = sharedHeaders("ListScripts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutScalingPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutScalingPolicy");
    let body;
    body = JSON.stringify(se_PutScalingPolicyInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterComputeCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterCompute");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterGameServerCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterGameServer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RequestUploadCredentialsCommand = async (input, context) => {
    const headers = sharedHeaders("RequestUploadCredentials");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResolveAliasCommand = async (input, context) => {
    const headers = sharedHeaders("ResolveAlias");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResumeGameServerGroupCommand = async (input, context) => {
    const headers = sharedHeaders("ResumeGameServerGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SearchGameSessionsCommand = async (input, context) => {
    const headers = sharedHeaders("SearchGameSessions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartFleetActionsCommand = async (input, context) => {
    const headers = sharedHeaders("StartFleetActions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartGameSessionPlacementCommand = async (input, context) => {
    const headers = sharedHeaders("StartGameSessionPlacement");
    let body;
    body = JSON.stringify(se_StartGameSessionPlacementInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartMatchBackfillCommand = async (input, context) => {
    const headers = sharedHeaders("StartMatchBackfill");
    let body;
    body = JSON.stringify(se_StartMatchBackfillInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartMatchmakingCommand = async (input, context) => {
    const headers = sharedHeaders("StartMatchmaking");
    let body;
    body = JSON.stringify(se_StartMatchmakingInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopFleetActionsCommand = async (input, context) => {
    const headers = sharedHeaders("StopFleetActions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopGameSessionPlacementCommand = async (input, context) => {
    const headers = sharedHeaders("StopGameSessionPlacement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopMatchmakingCommand = async (input, context) => {
    const headers = sharedHeaders("StopMatchmaking");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SuspendGameServerGroupCommand = async (input, context) => {
    const headers = sharedHeaders("SuspendGameServerGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateAliasCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAlias");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateBuildCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateBuild");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateFleetAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFleetAttributes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateFleetCapacityCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFleetCapacity");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateFleetPortSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFleetPortSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateGameServerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateGameServer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateGameServerGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateGameServerGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateGameSessionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateGameSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateGameSessionQueueCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateGameSessionQueue");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateMatchmakingConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMatchmakingConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateRuntimeConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRuntimeConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateScriptCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateScript");
    let body;
    body = JSON.stringify(se_UpdateScriptInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ValidateMatchmakingRuleSetCommand = async (input, context) => {
    const headers = sharedHeaders("ValidateMatchmakingRuleSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AcceptMatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ClaimGameServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ClaimGameServerOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateAliasOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateBuildOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateContainerGroupDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateContainerGroupDefinitionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateFleetOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateFleetLocationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateGameServerGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateGameServerGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateGameSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateGameSessionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateGameSessionQueueCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateLocationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateMatchmakingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateMatchmakingConfigurationOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateMatchmakingRuleSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateMatchmakingRuleSetOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreatePlayerSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreatePlayerSessionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreatePlayerSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreatePlayerSessionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateScriptCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateScriptOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateVpcPeeringAuthorizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcPeeringAuthorizationOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteContainerGroupDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteFleetLocationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteGameServerGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteGameServerGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteGameSessionQueueCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteLocationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteMatchmakingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteMatchmakingRuleSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteScalingPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteScriptCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteVpcPeeringAuthorizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeregisterComputeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeregisterGameServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DescribeAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAliasOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBuildOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeComputeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeComputeOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeContainerGroupDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeContainerGroupDefinitionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEC2InstanceLimitsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFleetAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFleetAttributesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFleetCapacityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFleetEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFleetEventsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFleetLocationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFleetLocationCapacityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFleetLocationUtilizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFleetPortSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFleetUtilizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeGameServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeGameServerOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeGameServerGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeGameServerGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeGameServerInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeGameSessionDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeGameSessionDetailsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeGameSessionPlacementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeGameSessionPlacementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeGameSessionQueuesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeGameSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeGameSessionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstancesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeMatchmakingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeMatchmakingOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeMatchmakingConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeMatchmakingConfigurationsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeMatchmakingRuleSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeMatchmakingRuleSetsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribePlayerSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePlayerSessionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRuntimeConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeScalingPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeScalingPoliciesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeScriptCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeScriptOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeVpcPeeringAuthorizationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcPeeringAuthorizationsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeVpcPeeringConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetComputeAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetComputeAuthTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetComputeAuthTokenOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetGameSessionLogUrlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetInstanceAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAliasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAliasesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListBuildsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListBuildsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListComputeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListComputeOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListContainerGroupDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListContainerGroupDefinitionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListGameServerGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListGameServerGroupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListGameServersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListGameServersOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListLocationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListScriptsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListScriptsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutScalingPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RegisterComputeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RegisterComputeOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RegisterGameServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RegisterGameServerOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RequestUploadCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ResolveAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ResumeGameServerGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ResumeGameServerGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SearchGameSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SearchGameSessionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartFleetActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartGameSessionPlacementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartGameSessionPlacementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartMatchBackfillCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartMatchBackfillOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartMatchmakingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartMatchmakingOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopFleetActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopGameSessionPlacementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopGameSessionPlacementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopMatchmakingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SuspendGameServerGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SuspendGameServerGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateAliasOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateBuildOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateFleetAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateFleetCapacityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateFleetPortSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateGameServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateGameServerOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateGameServerGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateGameServerGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateGameSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateGameSessionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateGameSessionQueueCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateMatchmakingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateMatchmakingConfigurationOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateRuntimeConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateScriptCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateScriptOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ValidateMatchmakingRuleSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.gamelift#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.gamelift#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.gamelift#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "UnsupportedRegionException":
        case "com.amazonaws.gamelift#UnsupportedRegionException":
            throw await de_UnsupportedRegionExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.gamelift#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "OutOfCapacityException":
        case "com.amazonaws.gamelift#OutOfCapacityException":
            throw await de_OutOfCapacityExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.gamelift#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.gamelift#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TaggingFailedException":
        case "com.amazonaws.gamelift#TaggingFailedException":
            throw await de_TaggingFailedExceptionRes(parsedOutput, context);
        case "NotReadyException":
        case "com.amazonaws.gamelift#NotReadyException":
            throw await de_NotReadyExceptionRes(parsedOutput, context);
        case "InvalidFleetStatusException":
        case "com.amazonaws.gamelift#InvalidFleetStatusException":
            throw await de_InvalidFleetStatusExceptionRes(parsedOutput, context);
        case "FleetCapacityExceededException":
        case "com.amazonaws.gamelift#FleetCapacityExceededException":
            throw await de_FleetCapacityExceededExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.gamelift#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "TerminalRoutingStrategyException":
        case "com.amazonaws.gamelift#TerminalRoutingStrategyException":
            throw await de_TerminalRoutingStrategyExceptionRes(parsedOutput, context);
        case "GameSessionFullException":
        case "com.amazonaws.gamelift#GameSessionFullException":
            throw await de_GameSessionFullExceptionRes(parsedOutput, context);
        case "InvalidGameSessionStatusException":
        case "com.amazonaws.gamelift#InvalidGameSessionStatusException":
            throw await de_InvalidGameSessionStatusExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_FleetCapacityExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new FleetCapacityExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_GameSessionFullExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new GameSessionFullException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_IdempotentParameterMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidFleetStatusExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidFleetStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidGameSessionStatusExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidGameSessionStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NotReadyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OutOfCapacityExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OutOfCapacityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TaggingFailedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TaggingFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TerminalRoutingStrategyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TerminalRoutingStrategyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnsupportedRegionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AttributeValue = (input, context) => {
    return take(input, {
        N: __serializeFloat,
        S: [],
        SDM: (_) => se_PlayerAttributeStringDoubleMap(_, context),
        SL: _json,
    });
};
const se_CreateGameServerGroupInput = (input, context) => {
    return take(input, {
        AutoScalingPolicy: (_) => se_GameServerGroupAutoScalingPolicy(_, context),
        BalancingStrategy: [],
        GameServerGroupName: [],
        GameServerProtectionPolicy: [],
        InstanceDefinitions: _json,
        LaunchTemplate: _json,
        MaxSize: [],
        MinSize: [],
        RoleArn: [],
        Tags: _json,
        VpcSubnets: _json,
    });
};
const se_CreateScriptInput = (input, context) => {
    return take(input, {
        Name: [],
        StorageLocation: _json,
        Tags: _json,
        Version: [],
        ZipFile: context.base64Encoder,
    });
};
const se_DescribeFleetEventsInput = (input, context) => {
    return take(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        FleetId: [],
        Limit: [],
        NextToken: [],
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_GameServerGroupAutoScalingPolicy = (input, context) => {
    return take(input, {
        EstimatedInstanceWarmup: [],
        TargetTrackingConfiguration: (_) => se_TargetTrackingConfiguration(_, context),
    });
};
const se_Player = (input, context) => {
    return take(input, {
        LatencyInMs: _json,
        PlayerAttributes: (_) => se_PlayerAttributeMap(_, context),
        PlayerId: [],
        Team: [],
    });
};
const se_PlayerAttributeMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
    }, {});
};
const se_PlayerAttributeStringDoubleMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __serializeFloat(value);
        return acc;
    }, {});
};
const se_PlayerLatency = (input, context) => {
    return take(input, {
        LatencyInMilliseconds: __serializeFloat,
        PlayerId: [],
        RegionIdentifier: [],
    });
};
const se_PlayerLatencyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PlayerLatency(entry, context);
    });
};
const se_PlayerList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Player(entry, context);
    });
};
const se_PutScalingPolicyInput = (input, context) => {
    return take(input, {
        ComparisonOperator: [],
        EvaluationPeriods: [],
        FleetId: [],
        MetricName: [],
        Name: [],
        PolicyType: [],
        ScalingAdjustment: [],
        ScalingAdjustmentType: [],
        TargetConfiguration: (_) => se_TargetConfiguration(_, context),
        Threshold: __serializeFloat,
    });
};
const se_StartGameSessionPlacementInput = (input, context) => {
    return take(input, {
        DesiredPlayerSessions: _json,
        GameProperties: _json,
        GameSessionData: [],
        GameSessionName: [],
        GameSessionQueueName: [],
        MaximumPlayerSessionCount: [],
        PlacementId: [],
        PlayerLatencies: (_) => se_PlayerLatencyList(_, context),
    });
};
const se_StartMatchBackfillInput = (input, context) => {
    return take(input, {
        ConfigurationName: [],
        GameSessionArn: [],
        Players: (_) => se_PlayerList(_, context),
        TicketId: [],
    });
};
const se_StartMatchmakingInput = (input, context) => {
    return take(input, {
        ConfigurationName: [],
        Players: (_) => se_PlayerList(_, context),
        TicketId: [],
    });
};
const se_TargetConfiguration = (input, context) => {
    return take(input, {
        TargetValue: __serializeFloat,
    });
};
const se_TargetTrackingConfiguration = (input, context) => {
    return take(input, {
        TargetValue: __serializeFloat,
    });
};
const se_UpdateScriptInput = (input, context) => {
    return take(input, {
        Name: [],
        ScriptId: [],
        StorageLocation: _json,
        Version: [],
        ZipFile: context.base64Encoder,
    });
};
const de_Alias = (output, context) => {
    return take(output, {
        AliasArn: __expectString,
        AliasId: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        RoutingStrategy: _json,
    });
};
const de_AliasList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Alias(entry, context);
    });
    return retVal;
};
const de_AttributeValue = (output, context) => {
    return take(output, {
        N: __limitedParseDouble,
        S: __expectString,
        SDM: (_) => de_PlayerAttributeStringDoubleMap(_, context),
        SL: _json,
    });
};
const de_Build = (output, context) => {
    return take(output, {
        BuildArn: __expectString,
        BuildId: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        OperatingSystem: __expectString,
        ServerSdkVersion: __expectString,
        SizeOnDisk: __expectLong,
        Status: __expectString,
        Version: __expectString,
    });
};
const de_BuildList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Build(entry, context);
    });
    return retVal;
};
const de_ClaimGameServerOutput = (output, context) => {
    return take(output, {
        GameServer: (_) => de_GameServer(_, context),
    });
};
const de_Compute = (output, context) => {
    return take(output, {
        ComputeArn: __expectString,
        ComputeName: __expectString,
        ComputeStatus: __expectString,
        ContainerAttributes: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DnsName: __expectString,
        FleetArn: __expectString,
        FleetId: __expectString,
        GameLiftAgentEndpoint: __expectString,
        GameLiftServiceSdkEndpoint: __expectString,
        InstanceId: __expectString,
        IpAddress: __expectString,
        Location: __expectString,
        OperatingSystem: __expectString,
        Type: __expectString,
    });
};
const de_ComputeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Compute(entry, context);
    });
    return retVal;
};
const de_ContainerGroupDefinition = (output, context) => {
    return take(output, {
        ContainerDefinitions: _json,
        ContainerGroupDefinitionArn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        OperatingSystem: __expectString,
        SchedulingStrategy: __expectString,
        Status: __expectString,
        StatusReason: __expectString,
        TotalCpuLimit: __expectInt32,
        TotalMemoryLimit: __expectInt32,
    });
};
const de_ContainerGroupDefinitionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContainerGroupDefinition(entry, context);
    });
    return retVal;
};
const de_CreateAliasOutput = (output, context) => {
    return take(output, {
        Alias: (_) => de_Alias(_, context),
    });
};
const de_CreateBuildOutput = (output, context) => {
    return take(output, {
        Build: (_) => de_Build(_, context),
        StorageLocation: _json,
        UploadCredentials: _json,
    });
};
const de_CreateContainerGroupDefinitionOutput = (output, context) => {
    return take(output, {
        ContainerGroupDefinition: (_) => de_ContainerGroupDefinition(_, context),
    });
};
const de_CreateFleetOutput = (output, context) => {
    return take(output, {
        FleetAttributes: (_) => de_FleetAttributes(_, context),
        LocationStates: _json,
    });
};
const de_CreateGameServerGroupOutput = (output, context) => {
    return take(output, {
        GameServerGroup: (_) => de_GameServerGroup(_, context),
    });
};
const de_CreateGameSessionOutput = (output, context) => {
    return take(output, {
        GameSession: (_) => de_GameSession(_, context),
    });
};
const de_CreateMatchmakingConfigurationOutput = (output, context) => {
    return take(output, {
        Configuration: (_) => de_MatchmakingConfiguration(_, context),
    });
};
const de_CreateMatchmakingRuleSetOutput = (output, context) => {
    return take(output, {
        RuleSet: (_) => de_MatchmakingRuleSet(_, context),
    });
};
const de_CreatePlayerSessionOutput = (output, context) => {
    return take(output, {
        PlayerSession: (_) => de_PlayerSession(_, context),
    });
};
const de_CreatePlayerSessionsOutput = (output, context) => {
    return take(output, {
        PlayerSessions: (_) => de_PlayerSessionList(_, context),
    });
};
const de_CreateScriptOutput = (output, context) => {
    return take(output, {
        Script: (_) => de_Script(_, context),
    });
};
const de_CreateVpcPeeringAuthorizationOutput = (output, context) => {
    return take(output, {
        VpcPeeringAuthorization: (_) => de_VpcPeeringAuthorization(_, context),
    });
};
const de_DeleteGameServerGroupOutput = (output, context) => {
    return take(output, {
        GameServerGroup: (_) => de_GameServerGroup(_, context),
    });
};
const de_DescribeAliasOutput = (output, context) => {
    return take(output, {
        Alias: (_) => de_Alias(_, context),
    });
};
const de_DescribeBuildOutput = (output, context) => {
    return take(output, {
        Build: (_) => de_Build(_, context),
    });
};
const de_DescribeComputeOutput = (output, context) => {
    return take(output, {
        Compute: (_) => de_Compute(_, context),
    });
};
const de_DescribeContainerGroupDefinitionOutput = (output, context) => {
    return take(output, {
        ContainerGroupDefinition: (_) => de_ContainerGroupDefinition(_, context),
    });
};
const de_DescribeFleetAttributesOutput = (output, context) => {
    return take(output, {
        FleetAttributes: (_) => de_FleetAttributesList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeFleetEventsOutput = (output, context) => {
    return take(output, {
        Events: (_) => de_EventList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeGameServerGroupOutput = (output, context) => {
    return take(output, {
        GameServerGroup: (_) => de_GameServerGroup(_, context),
    });
};
const de_DescribeGameServerOutput = (output, context) => {
    return take(output, {
        GameServer: (_) => de_GameServer(_, context),
    });
};
const de_DescribeGameSessionDetailsOutput = (output, context) => {
    return take(output, {
        GameSessionDetails: (_) => de_GameSessionDetailList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeGameSessionPlacementOutput = (output, context) => {
    return take(output, {
        GameSessionPlacement: (_) => de_GameSessionPlacement(_, context),
    });
};
const de_DescribeGameSessionsOutput = (output, context) => {
    return take(output, {
        GameSessions: (_) => de_GameSessionList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeInstancesOutput = (output, context) => {
    return take(output, {
        Instances: (_) => de_InstanceList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeMatchmakingConfigurationsOutput = (output, context) => {
    return take(output, {
        Configurations: (_) => de_MatchmakingConfigurationList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeMatchmakingOutput = (output, context) => {
    return take(output, {
        TicketList: (_) => de_MatchmakingTicketList(_, context),
    });
};
const de_DescribeMatchmakingRuleSetsOutput = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        RuleSets: (_) => de_MatchmakingRuleSetList(_, context),
    });
};
const de_DescribePlayerSessionsOutput = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        PlayerSessions: (_) => de_PlayerSessionList(_, context),
    });
};
const de_DescribeScalingPoliciesOutput = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ScalingPolicies: (_) => de_ScalingPolicyList(_, context),
    });
};
const de_DescribeScriptOutput = (output, context) => {
    return take(output, {
        Script: (_) => de_Script(_, context),
    });
};
const de_DescribeVpcPeeringAuthorizationsOutput = (output, context) => {
    return take(output, {
        VpcPeeringAuthorizations: (_) => de_VpcPeeringAuthorizationList(_, context),
    });
};
const de_Event = (output, context) => {
    return take(output, {
        Count: __expectLong,
        EventCode: __expectString,
        EventId: __expectString,
        EventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        PreSignedLogUrl: __expectString,
        ResourceId: __expectString,
    });
};
const de_EventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Event(entry, context);
    });
    return retVal;
};
const de_FleetAttributes = (output, context) => {
    return take(output, {
        AnywhereConfiguration: _json,
        BuildArn: __expectString,
        BuildId: __expectString,
        CertificateConfiguration: _json,
        ComputeType: __expectString,
        ContainerGroupsAttributes: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        FleetArn: __expectString,
        FleetId: __expectString,
        FleetType: __expectString,
        InstanceRoleArn: __expectString,
        InstanceRoleCredentialsProvider: __expectString,
        InstanceType: __expectString,
        LogPaths: _json,
        MetricGroups: _json,
        Name: __expectString,
        NewGameSessionProtectionPolicy: __expectString,
        OperatingSystem: __expectString,
        ResourceCreationLimitPolicy: _json,
        ScriptArn: __expectString,
        ScriptId: __expectString,
        ServerLaunchParameters: __expectString,
        ServerLaunchPath: __expectString,
        Status: __expectString,
        StoppedActions: _json,
        TerminationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_FleetAttributesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FleetAttributes(entry, context);
    });
    return retVal;
};
const de_GameServer = (output, context) => {
    return take(output, {
        ClaimStatus: __expectString,
        ConnectionInfo: __expectString,
        GameServerData: __expectString,
        GameServerGroupArn: __expectString,
        GameServerGroupName: __expectString,
        GameServerId: __expectString,
        InstanceId: __expectString,
        LastClaimTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastHealthCheckTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RegistrationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        UtilizationStatus: __expectString,
    });
};
const de_GameServerGroup = (output, context) => {
    return take(output, {
        AutoScalingGroupArn: __expectString,
        BalancingStrategy: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        GameServerGroupArn: __expectString,
        GameServerGroupName: __expectString,
        GameServerProtectionPolicy: __expectString,
        InstanceDefinitions: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RoleArn: __expectString,
        Status: __expectString,
        StatusReason: __expectString,
        SuspendedActions: _json,
    });
};
const de_GameServerGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GameServerGroup(entry, context);
    });
    return retVal;
};
const de_GameServers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GameServer(entry, context);
    });
    return retVal;
};
const de_GameSession = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatorId: __expectString,
        CurrentPlayerSessionCount: __expectInt32,
        DnsName: __expectString,
        FleetArn: __expectString,
        FleetId: __expectString,
        GameProperties: _json,
        GameSessionData: __expectString,
        GameSessionId: __expectString,
        IpAddress: __expectString,
        Location: __expectString,
        MatchmakerData: __expectString,
        MaximumPlayerSessionCount: __expectInt32,
        Name: __expectString,
        PlayerSessionCreationPolicy: __expectString,
        Port: __expectInt32,
        Status: __expectString,
        StatusReason: __expectString,
        TerminationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_GameSessionDetail = (output, context) => {
    return take(output, {
        GameSession: (_) => de_GameSession(_, context),
        ProtectionPolicy: __expectString,
    });
};
const de_GameSessionDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GameSessionDetail(entry, context);
    });
    return retVal;
};
const de_GameSessionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GameSession(entry, context);
    });
    return retVal;
};
const de_GameSessionPlacement = (output, context) => {
    return take(output, {
        DnsName: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        GameProperties: _json,
        GameSessionArn: __expectString,
        GameSessionData: __expectString,
        GameSessionId: __expectString,
        GameSessionName: __expectString,
        GameSessionQueueName: __expectString,
        GameSessionRegion: __expectString,
        IpAddress: __expectString,
        MatchmakerData: __expectString,
        MaximumPlayerSessionCount: __expectInt32,
        PlacedPlayerSessions: _json,
        PlacementId: __expectString,
        PlayerLatencies: (_) => de_PlayerLatencyList(_, context),
        Port: __expectInt32,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
};
const de_GetComputeAuthTokenOutput = (output, context) => {
    return take(output, {
        AuthToken: __expectString,
        ComputeArn: __expectString,
        ComputeName: __expectString,
        ExpirationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FleetArn: __expectString,
        FleetId: __expectString,
    });
};
const de_Instance = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DnsName: __expectString,
        FleetArn: __expectString,
        FleetId: __expectString,
        InstanceId: __expectString,
        IpAddress: __expectString,
        Location: __expectString,
        OperatingSystem: __expectString,
        Status: __expectString,
        Type: __expectString,
    });
};
const de_InstanceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Instance(entry, context);
    });
    return retVal;
};
const de_ListAliasesOutput = (output, context) => {
    return take(output, {
        Aliases: (_) => de_AliasList(_, context),
        NextToken: __expectString,
    });
};
const de_ListBuildsOutput = (output, context) => {
    return take(output, {
        Builds: (_) => de_BuildList(_, context),
        NextToken: __expectString,
    });
};
const de_ListComputeOutput = (output, context) => {
    return take(output, {
        ComputeList: (_) => de_ComputeList(_, context),
        NextToken: __expectString,
    });
};
const de_ListContainerGroupDefinitionsOutput = (output, context) => {
    return take(output, {
        ContainerGroupDefinitions: (_) => de_ContainerGroupDefinitionList(_, context),
        NextToken: __expectString,
    });
};
const de_ListGameServerGroupsOutput = (output, context) => {
    return take(output, {
        GameServerGroups: (_) => de_GameServerGroups(_, context),
        NextToken: __expectString,
    });
};
const de_ListGameServersOutput = (output, context) => {
    return take(output, {
        GameServers: (_) => de_GameServers(_, context),
        NextToken: __expectString,
    });
};
const de_ListScriptsOutput = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Scripts: (_) => de_ScriptList(_, context),
    });
};
const de_MatchmakingConfiguration = (output, context) => {
    return take(output, {
        AcceptanceRequired: __expectBoolean,
        AcceptanceTimeoutSeconds: __expectInt32,
        AdditionalPlayerCount: __expectInt32,
        BackfillMode: __expectString,
        ConfigurationArn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CustomEventData: __expectString,
        Description: __expectString,
        FlexMatchMode: __expectString,
        GameProperties: _json,
        GameSessionData: __expectString,
        GameSessionQueueArns: _json,
        Name: __expectString,
        NotificationTarget: __expectString,
        RequestTimeoutSeconds: __expectInt32,
        RuleSetArn: __expectString,
        RuleSetName: __expectString,
    });
};
const de_MatchmakingConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MatchmakingConfiguration(entry, context);
    });
    return retVal;
};
const de_MatchmakingRuleSet = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RuleSetArn: __expectString,
        RuleSetBody: __expectString,
        RuleSetName: __expectString,
    });
};
const de_MatchmakingRuleSetList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MatchmakingRuleSet(entry, context);
    });
    return retVal;
};
const de_MatchmakingTicket = (output, context) => {
    return take(output, {
        ConfigurationArn: __expectString,
        ConfigurationName: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EstimatedWaitTime: __expectInt32,
        GameSessionConnectionInfo: _json,
        Players: (_) => de_PlayerList(_, context),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        StatusMessage: __expectString,
        StatusReason: __expectString,
        TicketId: __expectString,
    });
};
const de_MatchmakingTicketList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MatchmakingTicket(entry, context);
    });
    return retVal;
};
const de_Player = (output, context) => {
    return take(output, {
        LatencyInMs: _json,
        PlayerAttributes: (_) => de_PlayerAttributeMap(_, context),
        PlayerId: __expectString,
        Team: __expectString,
    });
};
const de_PlayerAttributeMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AttributeValue(value, context);
        return acc;
    }, {});
};
const de_PlayerAttributeStringDoubleMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __limitedParseDouble(value);
        return acc;
    }, {});
};
const de_PlayerLatency = (output, context) => {
    return take(output, {
        LatencyInMilliseconds: __limitedParseFloat32,
        PlayerId: __expectString,
        RegionIdentifier: __expectString,
    });
};
const de_PlayerLatencyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlayerLatency(entry, context);
    });
    return retVal;
};
const de_PlayerList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Player(entry, context);
    });
    return retVal;
};
const de_PlayerSession = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DnsName: __expectString,
        FleetArn: __expectString,
        FleetId: __expectString,
        GameSessionId: __expectString,
        IpAddress: __expectString,
        PlayerData: __expectString,
        PlayerId: __expectString,
        PlayerSessionId: __expectString,
        Port: __expectInt32,
        Status: __expectString,
        TerminationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_PlayerSessionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlayerSession(entry, context);
    });
    return retVal;
};
const de_RegisterComputeOutput = (output, context) => {
    return take(output, {
        Compute: (_) => de_Compute(_, context),
    });
};
const de_RegisterGameServerOutput = (output, context) => {
    return take(output, {
        GameServer: (_) => de_GameServer(_, context),
    });
};
const de_ResumeGameServerGroupOutput = (output, context) => {
    return take(output, {
        GameServerGroup: (_) => de_GameServerGroup(_, context),
    });
};
const de_ScalingPolicy = (output, context) => {
    return take(output, {
        ComparisonOperator: __expectString,
        EvaluationPeriods: __expectInt32,
        FleetArn: __expectString,
        FleetId: __expectString,
        Location: __expectString,
        MetricName: __expectString,
        Name: __expectString,
        PolicyType: __expectString,
        ScalingAdjustment: __expectInt32,
        ScalingAdjustmentType: __expectString,
        Status: __expectString,
        TargetConfiguration: (_) => de_TargetConfiguration(_, context),
        Threshold: __limitedParseDouble,
        UpdateStatus: __expectString,
    });
};
const de_ScalingPolicyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScalingPolicy(entry, context);
    });
    return retVal;
};
const de_Script = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        ScriptArn: __expectString,
        ScriptId: __expectString,
        SizeOnDisk: __expectLong,
        StorageLocation: _json,
        Version: __expectString,
    });
};
const de_ScriptList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Script(entry, context);
    });
    return retVal;
};
const de_SearchGameSessionsOutput = (output, context) => {
    return take(output, {
        GameSessions: (_) => de_GameSessionList(_, context),
        NextToken: __expectString,
    });
};
const de_StartGameSessionPlacementOutput = (output, context) => {
    return take(output, {
        GameSessionPlacement: (_) => de_GameSessionPlacement(_, context),
    });
};
const de_StartMatchBackfillOutput = (output, context) => {
    return take(output, {
        MatchmakingTicket: (_) => de_MatchmakingTicket(_, context),
    });
};
const de_StartMatchmakingOutput = (output, context) => {
    return take(output, {
        MatchmakingTicket: (_) => de_MatchmakingTicket(_, context),
    });
};
const de_StopGameSessionPlacementOutput = (output, context) => {
    return take(output, {
        GameSessionPlacement: (_) => de_GameSessionPlacement(_, context),
    });
};
const de_SuspendGameServerGroupOutput = (output, context) => {
    return take(output, {
        GameServerGroup: (_) => de_GameServerGroup(_, context),
    });
};
const de_TargetConfiguration = (output, context) => {
    return take(output, {
        TargetValue: __limitedParseDouble,
    });
};
const de_UpdateAliasOutput = (output, context) => {
    return take(output, {
        Alias: (_) => de_Alias(_, context),
    });
};
const de_UpdateBuildOutput = (output, context) => {
    return take(output, {
        Build: (_) => de_Build(_, context),
    });
};
const de_UpdateGameServerGroupOutput = (output, context) => {
    return take(output, {
        GameServerGroup: (_) => de_GameServerGroup(_, context),
    });
};
const de_UpdateGameServerOutput = (output, context) => {
    return take(output, {
        GameServer: (_) => de_GameServer(_, context),
    });
};
const de_UpdateGameSessionOutput = (output, context) => {
    return take(output, {
        GameSession: (_) => de_GameSession(_, context),
    });
};
const de_UpdateMatchmakingConfigurationOutput = (output, context) => {
    return take(output, {
        Configuration: (_) => de_MatchmakingConfiguration(_, context),
    });
};
const de_UpdateScriptOutput = (output, context) => {
    return take(output, {
        Script: (_) => de_Script(_, context),
    });
};
const de_VpcPeeringAuthorization = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ExpirationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        GameLiftAwsAccountId: __expectString,
        PeerVpcAwsAccountId: __expectString,
        PeerVpcId: __expectString,
    });
};
const de_VpcPeeringAuthorizationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcPeeringAuthorization(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `GameLift.${operation}`,
    };
}
