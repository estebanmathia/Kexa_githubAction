import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { GameLiftServiceException as __BaseException } from "./GameLiftServiceException";
export const AcceptanceType = {
    ACCEPT: "ACCEPT",
    REJECT: "REJECT",
};
export class InternalServiceException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class UnsupportedRegionException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedRegionException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedRegionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedRegionException.prototype);
        this.Message = opts.Message;
    }
}
export const RoutingStrategyType = {
    SIMPLE: "SIMPLE",
    TERMINAL: "TERMINAL",
};
export const BackfillMode = {
    AUTOMATIC: "AUTOMATIC",
    MANUAL: "MANUAL",
};
export const BalancingStrategy = {
    ON_DEMAND_ONLY: "ON_DEMAND_ONLY",
    SPOT_ONLY: "SPOT_ONLY",
    SPOT_PREFERRED: "SPOT_PREFERRED",
};
export const OperatingSystem = {
    AMAZON_LINUX: "AMAZON_LINUX",
    AMAZON_LINUX_2: "AMAZON_LINUX_2",
    AMAZON_LINUX_2023: "AMAZON_LINUX_2023",
    WINDOWS_2012: "WINDOWS_2012",
    WINDOWS_2016: "WINDOWS_2016",
};
export const BuildStatus = {
    FAILED: "FAILED",
    INITIALIZED: "INITIALIZED",
    READY: "READY",
};
export const CertificateType = {
    Disabled: "DISABLED",
    Generated: "GENERATED",
};
export const FilterInstanceStatus = {
    ACTIVE: "ACTIVE",
    DRAINING: "DRAINING",
};
export const GameServerClaimStatus = {
    CLAIMED: "CLAIMED",
};
export const GameServerUtilizationStatus = {
    AVAILABLE: "AVAILABLE",
    UTILIZED: "UTILIZED",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class OutOfCapacityException extends __BaseException {
    constructor(opts) {
        super({
            name: "OutOfCapacityException",
            $fault: "client",
            ...opts,
        });
        this.name = "OutOfCapacityException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OutOfCapacityException.prototype);
        this.Message = opts.Message;
    }
}
export class UnauthorizedException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
        this.Message = opts.Message;
    }
}
export const ComparisonOperatorType = {
    GreaterThanOrEqualToThreshold: "GreaterThanOrEqualToThreshold",
    GreaterThanThreshold: "GreaterThanThreshold",
    LessThanOrEqualToThreshold: "LessThanOrEqualToThreshold",
    LessThanThreshold: "LessThanThreshold",
};
export const ComputeStatus = {
    ACTIVE: "ACTIVE",
    PENDING: "PENDING",
    TERMINATING: "TERMINATING",
};
export const IpProtocol = {
    TCP: "TCP",
    UDP: "UDP",
};
export const EC2InstanceType = {
    c3_2xlarge: "c3.2xlarge",
    c3_4xlarge: "c3.4xlarge",
    c3_8xlarge: "c3.8xlarge",
    c3_large: "c3.large",
    c3_xlarge: "c3.xlarge",
    c4_2xlarge: "c4.2xlarge",
    c4_4xlarge: "c4.4xlarge",
    c4_8xlarge: "c4.8xlarge",
    c4_large: "c4.large",
    c4_xlarge: "c4.xlarge",
    c5_12xlarge: "c5.12xlarge",
    c5_18xlarge: "c5.18xlarge",
    c5_24xlarge: "c5.24xlarge",
    c5_2xlarge: "c5.2xlarge",
    c5_4xlarge: "c5.4xlarge",
    c5_9xlarge: "c5.9xlarge",
    c5_large: "c5.large",
    c5_xlarge: "c5.xlarge",
    c5a_12xlarge: "c5a.12xlarge",
    c5a_16xlarge: "c5a.16xlarge",
    c5a_24xlarge: "c5a.24xlarge",
    c5a_2xlarge: "c5a.2xlarge",
    c5a_4xlarge: "c5a.4xlarge",
    c5a_8xlarge: "c5a.8xlarge",
    c5a_large: "c5a.large",
    c5a_xlarge: "c5a.xlarge",
    c5d_12xlarge: "c5d.12xlarge",
    c5d_18xlarge: "c5d.18xlarge",
    c5d_24xlarge: "c5d.24xlarge",
    c5d_2xlarge: "c5d.2xlarge",
    c5d_4xlarge: "c5d.4xlarge",
    c5d_9xlarge: "c5d.9xlarge",
    c5d_large: "c5d.large",
    c5d_xlarge: "c5d.xlarge",
    c6a_12xlarge: "c6a.12xlarge",
    c6a_16xlarge: "c6a.16xlarge",
    c6a_24xlarge: "c6a.24xlarge",
    c6a_2xlarge: "c6a.2xlarge",
    c6a_4xlarge: "c6a.4xlarge",
    c6a_8xlarge: "c6a.8xlarge",
    c6a_large: "c6a.large",
    c6a_xlarge: "c6a.xlarge",
    c6g_12xlarge: "c6g.12xlarge",
    c6g_16xlarge: "c6g.16xlarge",
    c6g_2xlarge: "c6g.2xlarge",
    c6g_4xlarge: "c6g.4xlarge",
    c6g_8xlarge: "c6g.8xlarge",
    c6g_large: "c6g.large",
    c6g_medium: "c6g.medium",
    c6g_xlarge: "c6g.xlarge",
    c6gn_12xlarge: "c6gn.12xlarge",
    c6gn_16xlarge: "c6gn.16xlarge",
    c6gn_2xlarge: "c6gn.2xlarge",
    c6gn_4xlarge: "c6gn.4xlarge",
    c6gn_8xlarge: "c6gn.8xlarge",
    c6gn_large: "c6gn.large",
    c6gn_medium: "c6gn.medium",
    c6gn_xlarge: "c6gn.xlarge",
    c6i_12xlarge: "c6i.12xlarge",
    c6i_16xlarge: "c6i.16xlarge",
    c6i_24xlarge: "c6i.24xlarge",
    c6i_2xlarge: "c6i.2xlarge",
    c6i_4xlarge: "c6i.4xlarge",
    c6i_8xlarge: "c6i.8xlarge",
    c6i_large: "c6i.large",
    c6i_xlarge: "c6i.xlarge",
    c7g_12xlarge: "c7g.12xlarge",
    c7g_16xlarge: "c7g.16xlarge",
    c7g_2xlarge: "c7g.2xlarge",
    c7g_4xlarge: "c7g.4xlarge",
    c7g_8xlarge: "c7g.8xlarge",
    c7g_large: "c7g.large",
    c7g_medium: "c7g.medium",
    c7g_xlarge: "c7g.xlarge",
    g5g_16xlarge: "g5g.16xlarge",
    g5g_2xlarge: "g5g.2xlarge",
    g5g_4xlarge: "g5g.4xlarge",
    g5g_8xlarge: "g5g.8xlarge",
    g5g_xlarge: "g5g.xlarge",
    m3_2xlarge: "m3.2xlarge",
    m3_large: "m3.large",
    m3_medium: "m3.medium",
    m3_xlarge: "m3.xlarge",
    m4_10xlarge: "m4.10xlarge",
    m4_2xlarge: "m4.2xlarge",
    m4_4xlarge: "m4.4xlarge",
    m4_large: "m4.large",
    m4_xlarge: "m4.xlarge",
    m5_12xlarge: "m5.12xlarge",
    m5_16xlarge: "m5.16xlarge",
    m5_24xlarge: "m5.24xlarge",
    m5_2xlarge: "m5.2xlarge",
    m5_4xlarge: "m5.4xlarge",
    m5_8xlarge: "m5.8xlarge",
    m5_large: "m5.large",
    m5_xlarge: "m5.xlarge",
    m5a_12xlarge: "m5a.12xlarge",
    m5a_16xlarge: "m5a.16xlarge",
    m5a_24xlarge: "m5a.24xlarge",
    m5a_2xlarge: "m5a.2xlarge",
    m5a_4xlarge: "m5a.4xlarge",
    m5a_8xlarge: "m5a.8xlarge",
    m5a_large: "m5a.large",
    m5a_xlarge: "m5a.xlarge",
    m6g_12xlarge: "m6g.12xlarge",
    m6g_16xlarge: "m6g.16xlarge",
    m6g_2xlarge: "m6g.2xlarge",
    m6g_4xlarge: "m6g.4xlarge",
    m6g_8xlarge: "m6g.8xlarge",
    m6g_large: "m6g.large",
    m6g_medium: "m6g.medium",
    m6g_xlarge: "m6g.xlarge",
    m7g_12xlarge: "m7g.12xlarge",
    m7g_16xlarge: "m7g.16xlarge",
    m7g_2xlarge: "m7g.2xlarge",
    m7g_4xlarge: "m7g.4xlarge",
    m7g_8xlarge: "m7g.8xlarge",
    m7g_large: "m7g.large",
    m7g_medium: "m7g.medium",
    m7g_xlarge: "m7g.xlarge",
    r3_2xlarge: "r3.2xlarge",
    r3_4xlarge: "r3.4xlarge",
    r3_8xlarge: "r3.8xlarge",
    r3_large: "r3.large",
    r3_xlarge: "r3.xlarge",
    r4_16xlarge: "r4.16xlarge",
    r4_2xlarge: "r4.2xlarge",
    r4_4xlarge: "r4.4xlarge",
    r4_8xlarge: "r4.8xlarge",
    r4_large: "r4.large",
    r4_xlarge: "r4.xlarge",
    r5_12xlarge: "r5.12xlarge",
    r5_16xlarge: "r5.16xlarge",
    r5_24xlarge: "r5.24xlarge",
    r5_2xlarge: "r5.2xlarge",
    r5_4xlarge: "r5.4xlarge",
    r5_8xlarge: "r5.8xlarge",
    r5_large: "r5.large",
    r5_xlarge: "r5.xlarge",
    r5a_12xlarge: "r5a.12xlarge",
    r5a_16xlarge: "r5a.16xlarge",
    r5a_24xlarge: "r5a.24xlarge",
    r5a_2xlarge: "r5a.2xlarge",
    r5a_4xlarge: "r5a.4xlarge",
    r5a_8xlarge: "r5a.8xlarge",
    r5a_large: "r5a.large",
    r5a_xlarge: "r5a.xlarge",
    r5d_12xlarge: "r5d.12xlarge",
    r5d_16xlarge: "r5d.16xlarge",
    r5d_24xlarge: "r5d.24xlarge",
    r5d_2xlarge: "r5d.2xlarge",
    r5d_4xlarge: "r5d.4xlarge",
    r5d_8xlarge: "r5d.8xlarge",
    r5d_large: "r5d.large",
    r5d_xlarge: "r5d.xlarge",
    r6g_12xlarge: "r6g.12xlarge",
    r6g_16xlarge: "r6g.16xlarge",
    r6g_2xlarge: "r6g.2xlarge",
    r6g_4xlarge: "r6g.4xlarge",
    r6g_8xlarge: "r6g.8xlarge",
    r6g_large: "r6g.large",
    r6g_medium: "r6g.medium",
    r6g_xlarge: "r6g.xlarge",
    r7g_12xlarge: "r7g.12xlarge",
    r7g_16xlarge: "r7g.16xlarge",
    r7g_2xlarge: "r7g.2xlarge",
    r7g_4xlarge: "r7g.4xlarge",
    r7g_8xlarge: "r7g.8xlarge",
    r7g_large: "r7g.large",
    r7g_medium: "r7g.medium",
    r7g_xlarge: "r7g.xlarge",
    t2_large: "t2.large",
    t2_medium: "t2.medium",
    t2_micro: "t2.micro",
    t2_small: "t2.small",
};
export const ComputeType = {
    ANYWHERE: "ANYWHERE",
    CONTAINER: "CONTAINER",
    EC2: "EC2",
};
export const ContainerDependencyCondition = {
    COMPLETE: "COMPLETE",
    HEALTHY: "HEALTHY",
    START: "START",
    SUCCESS: "SUCCESS",
};
export const ContainerOperatingSystem = {
    AMAZON_LINUX_2023: "AMAZON_LINUX_2023",
};
export const ContainerSchedulingStrategy = {
    DAEMON: "DAEMON",
    REPLICA: "REPLICA",
};
export const ContainerGroupDefinitionStatus = {
    COPYING: "COPYING",
    FAILED: "FAILED",
    READY: "READY",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class TaggingFailedException extends __BaseException {
    constructor(opts) {
        super({
            name: "TaggingFailedException",
            $fault: "client",
            ...opts,
        });
        this.name = "TaggingFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TaggingFailedException.prototype);
        this.Message = opts.Message;
    }
}
export const FleetType = {
    OnDemand: "ON_DEMAND",
    Spot: "SPOT",
};
export const InstanceRoleCredentialsProvider = {
    SHARED_CREDENTIAL_FILE: "SHARED_CREDENTIAL_FILE",
};
export const ProtectionPolicy = {
    FullProtection: "FullProtection",
    NoProtection: "NoProtection",
};
export const FleetStatus = {
    ACTIVATING: "ACTIVATING",
    ACTIVE: "ACTIVE",
    BUILDING: "BUILDING",
    DELETING: "DELETING",
    DOWNLOADING: "DOWNLOADING",
    ERROR: "ERROR",
    NEW: "NEW",
    NOT_FOUND: "NOT_FOUND",
    TERMINATED: "TERMINATED",
    VALIDATING: "VALIDATING",
};
export const FleetAction = {
    AutoScaling: "AUTO_SCALING",
};
export class NotReadyException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotReadyException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotReadyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotReadyException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidFleetStatusException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidFleetStatusException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidFleetStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFleetStatusException.prototype);
        this.Message = opts.Message;
    }
}
export const GameServerProtectionPolicy = {
    FULL_PROTECTION: "FULL_PROTECTION",
    NO_PROTECTION: "NO_PROTECTION",
};
export const GameServerGroupInstanceType = {
    c4_2xlarge: "c4.2xlarge",
    c4_4xlarge: "c4.4xlarge",
    c4_8xlarge: "c4.8xlarge",
    c4_large: "c4.large",
    c4_xlarge: "c4.xlarge",
    c5_12xlarge: "c5.12xlarge",
    c5_18xlarge: "c5.18xlarge",
    c5_24xlarge: "c5.24xlarge",
    c5_2xlarge: "c5.2xlarge",
    c5_4xlarge: "c5.4xlarge",
    c5_9xlarge: "c5.9xlarge",
    c5_large: "c5.large",
    c5_xlarge: "c5.xlarge",
    c5a_12xlarge: "c5a.12xlarge",
    c5a_16xlarge: "c5a.16xlarge",
    c5a_24xlarge: "c5a.24xlarge",
    c5a_2xlarge: "c5a.2xlarge",
    c5a_4xlarge: "c5a.4xlarge",
    c5a_8xlarge: "c5a.8xlarge",
    c5a_large: "c5a.large",
    c5a_xlarge: "c5a.xlarge",
    c6g_12xlarge: "c6g.12xlarge",
    c6g_16xlarge: "c6g.16xlarge",
    c6g_2xlarge: "c6g.2xlarge",
    c6g_4xlarge: "c6g.4xlarge",
    c6g_8xlarge: "c6g.8xlarge",
    c6g_large: "c6g.large",
    c6g_medium: "c6g.medium",
    c6g_xlarge: "c6g.xlarge",
    m4_10xlarge: "m4.10xlarge",
    m4_2xlarge: "m4.2xlarge",
    m4_4xlarge: "m4.4xlarge",
    m4_large: "m4.large",
    m4_xlarge: "m4.xlarge",
    m5_12xlarge: "m5.12xlarge",
    m5_16xlarge: "m5.16xlarge",
    m5_24xlarge: "m5.24xlarge",
    m5_2xlarge: "m5.2xlarge",
    m5_4xlarge: "m5.4xlarge",
    m5_8xlarge: "m5.8xlarge",
    m5_large: "m5.large",
    m5_xlarge: "m5.xlarge",
    m5a_12xlarge: "m5a.12xlarge",
    m5a_16xlarge: "m5a.16xlarge",
    m5a_24xlarge: "m5a.24xlarge",
    m5a_2xlarge: "m5a.2xlarge",
    m5a_4xlarge: "m5a.4xlarge",
    m5a_8xlarge: "m5a.8xlarge",
    m5a_large: "m5a.large",
    m5a_xlarge: "m5a.xlarge",
    m6g_12xlarge: "m6g.12xlarge",
    m6g_16xlarge: "m6g.16xlarge",
    m6g_2xlarge: "m6g.2xlarge",
    m6g_4xlarge: "m6g.4xlarge",
    m6g_8xlarge: "m6g.8xlarge",
    m6g_large: "m6g.large",
    m6g_medium: "m6g.medium",
    m6g_xlarge: "m6g.xlarge",
    r4_16xlarge: "r4.16xlarge",
    r4_2xlarge: "r4.2xlarge",
    r4_4xlarge: "r4.4xlarge",
    r4_8xlarge: "r4.8xlarge",
    r4_large: "r4.large",
    r4_xlarge: "r4.xlarge",
    r5_12xlarge: "r5.12xlarge",
    r5_16xlarge: "r5.16xlarge",
    r5_24xlarge: "r5.24xlarge",
    r5_2xlarge: "r5.2xlarge",
    r5_4xlarge: "r5.4xlarge",
    r5_8xlarge: "r5.8xlarge",
    r5_large: "r5.large",
    r5_xlarge: "r5.xlarge",
    r5a_12xlarge: "r5a.12xlarge",
    r5a_16xlarge: "r5a.16xlarge",
    r5a_24xlarge: "r5a.24xlarge",
    r5a_2xlarge: "r5a.2xlarge",
    r5a_4xlarge: "r5a.4xlarge",
    r5a_8xlarge: "r5a.8xlarge",
    r5a_large: "r5a.large",
    r5a_xlarge: "r5a.xlarge",
    r6g_12xlarge: "r6g.12xlarge",
    r6g_16xlarge: "r6g.16xlarge",
    r6g_2xlarge: "r6g.2xlarge",
    r6g_4xlarge: "r6g.4xlarge",
    r6g_8xlarge: "r6g.8xlarge",
    r6g_large: "r6g.large",
    r6g_medium: "r6g.medium",
    r6g_xlarge: "r6g.xlarge",
};
export const GameServerGroupStatus = {
    ACTIVATING: "ACTIVATING",
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    DELETE_SCHEDULED: "DELETE_SCHEDULED",
    DELETING: "DELETING",
    ERROR: "ERROR",
    NEW: "NEW",
};
export const GameServerGroupAction = {
    REPLACE_INSTANCE_TYPES: "REPLACE_INSTANCE_TYPES",
};
export const PlayerSessionCreationPolicy = {
    ACCEPT_ALL: "ACCEPT_ALL",
    DENY_ALL: "DENY_ALL",
};
export const GameSessionStatus = {
    ACTIVATING: "ACTIVATING",
    ACTIVE: "ACTIVE",
    ERROR: "ERROR",
    TERMINATED: "TERMINATED",
    TERMINATING: "TERMINATING",
};
export const GameSessionStatusReason = {
    INTERRUPTED: "INTERRUPTED",
};
export class FleetCapacityExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "FleetCapacityExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "FleetCapacityExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FleetCapacityExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class IdempotentParameterMismatchException extends __BaseException {
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
    }
}
export class TerminalRoutingStrategyException extends __BaseException {
    constructor(opts) {
        super({
            name: "TerminalRoutingStrategyException",
            $fault: "client",
            ...opts,
        });
        this.name = "TerminalRoutingStrategyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TerminalRoutingStrategyException.prototype);
        this.Message = opts.Message;
    }
}
export const PriorityType = {
    COST: "COST",
    DESTINATION: "DESTINATION",
    LATENCY: "LATENCY",
    LOCATION: "LOCATION",
};
export const FlexMatchMode = {
    STANDALONE: "STANDALONE",
    WITH_QUEUE: "WITH_QUEUE",
};
export const PlayerSessionStatus = {
    ACTIVE: "ACTIVE",
    COMPLETED: "COMPLETED",
    RESERVED: "RESERVED",
    TIMEDOUT: "TIMEDOUT",
};
export class GameSessionFullException extends __BaseException {
    constructor(opts) {
        super({
            name: "GameSessionFullException",
            $fault: "client",
            ...opts,
        });
        this.name = "GameSessionFullException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GameSessionFullException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidGameSessionStatusException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidGameSessionStatusException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidGameSessionStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGameSessionStatusException.prototype);
        this.Message = opts.Message;
    }
}
export const GameServerGroupDeleteOption = {
    FORCE_DELETE: "FORCE_DELETE",
    RETAIN: "RETAIN",
    SAFE_DELETE: "SAFE_DELETE",
};
export const EventCode = {
    FLEET_ACTIVATION_FAILED: "FLEET_ACTIVATION_FAILED",
    FLEET_ACTIVATION_FAILED_NO_INSTANCES: "FLEET_ACTIVATION_FAILED_NO_INSTANCES",
    FLEET_BINARY_DOWNLOAD_FAILED: "FLEET_BINARY_DOWNLOAD_FAILED",
    FLEET_CREATED: "FLEET_CREATED",
    FLEET_CREATION_EXTRACTING_BUILD: "FLEET_CREATION_EXTRACTING_BUILD",
    FLEET_CREATION_RUNNING_INSTALLER: "FLEET_CREATION_RUNNING_INSTALLER",
    FLEET_CREATION_VALIDATING_RUNTIME_CONFIG: "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG",
    FLEET_DELETED: "FLEET_DELETED",
    FLEET_INITIALIZATION_FAILED: "FLEET_INITIALIZATION_FAILED",
    FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED: "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED",
    FLEET_SCALING_EVENT: "FLEET_SCALING_EVENT",
    FLEET_STATE_ACTIVATING: "FLEET_STATE_ACTIVATING",
    FLEET_STATE_ACTIVE: "FLEET_STATE_ACTIVE",
    FLEET_STATE_BUILDING: "FLEET_STATE_BUILDING",
    FLEET_STATE_DOWNLOADING: "FLEET_STATE_DOWNLOADING",
    FLEET_STATE_ERROR: "FLEET_STATE_ERROR",
    FLEET_STATE_VALIDATING: "FLEET_STATE_VALIDATING",
    FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE: "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE",
    FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND: "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND",
    FLEET_VALIDATION_TIMED_OUT: "FLEET_VALIDATION_TIMED_OUT",
    FLEET_VPC_PEERING_DELETED: "FLEET_VPC_PEERING_DELETED",
    FLEET_VPC_PEERING_FAILED: "FLEET_VPC_PEERING_FAILED",
    FLEET_VPC_PEERING_SUCCEEDED: "FLEET_VPC_PEERING_SUCCEEDED",
    GAME_SESSION_ACTIVATION_TIMEOUT: "GAME_SESSION_ACTIVATION_TIMEOUT",
    GENERIC_EVENT: "GENERIC_EVENT",
    INSTANCE_INTERRUPTED: "INSTANCE_INTERRUPTED",
    INSTANCE_RECYCLED: "INSTANCE_RECYCLED",
    SERVER_PROCESS_CRASHED: "SERVER_PROCESS_CRASHED",
    SERVER_PROCESS_FORCE_TERMINATED: "SERVER_PROCESS_FORCE_TERMINATED",
    SERVER_PROCESS_INVALID_PATH: "SERVER_PROCESS_INVALID_PATH",
    SERVER_PROCESS_PROCESS_EXIT_TIMEOUT: "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT",
    SERVER_PROCESS_PROCESS_READY_TIMEOUT: "SERVER_PROCESS_PROCESS_READY_TIMEOUT",
    SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT: "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT",
    SERVER_PROCESS_TERMINATED_UNHEALTHY: "SERVER_PROCESS_TERMINATED_UNHEALTHY",
};
export const LocationUpdateStatus = {
    PENDING_UPDATE: "PENDING_UPDATE",
};
export const GameServerInstanceStatus = {
    ACTIVE: "ACTIVE",
    DRAINING: "DRAINING",
    SPOT_TERMINATING: "SPOT_TERMINATING",
};
export const GameSessionPlacementState = {
    CANCELLED: "CANCELLED",
    FAILED: "FAILED",
    FULFILLED: "FULFILLED",
    PENDING: "PENDING",
    TIMED_OUT: "TIMED_OUT",
};
export const InstanceStatus = {
    ACTIVE: "ACTIVE",
    PENDING: "PENDING",
    TERMINATING: "TERMINATING",
};
export const MatchmakingConfigurationStatus = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    PLACING: "PLACING",
    QUEUED: "QUEUED",
    REQUIRES_ACCEPTANCE: "REQUIRES_ACCEPTANCE",
    SEARCHING: "SEARCHING",
    TIMED_OUT: "TIMED_OUT",
};
export const ScalingStatusType = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    DELETE_REQUESTED: "DELETE_REQUESTED",
    DELETING: "DELETING",
    ERROR: "ERROR",
    UPDATE_REQUESTED: "UPDATE_REQUESTED",
    UPDATING: "UPDATING",
};
export const MetricName = {
    ActivatingGameSessions: "ActivatingGameSessions",
    ActiveGameSessions: "ActiveGameSessions",
    ActiveInstances: "ActiveInstances",
    AvailableGameSessions: "AvailableGameSessions",
    AvailablePlayerSessions: "AvailablePlayerSessions",
    ConcurrentActivatableGameSessions: "ConcurrentActivatableGameSessions",
    CurrentPlayerSessions: "CurrentPlayerSessions",
    IdleInstances: "IdleInstances",
    PercentAvailableGameSessions: "PercentAvailableGameSessions",
    PercentIdleInstances: "PercentIdleInstances",
    QueueDepth: "QueueDepth",
    WaitTime: "WaitTime",
};
export const PolicyType = {
    RuleBased: "RuleBased",
    TargetBased: "TargetBased",
};
export const ScalingAdjustmentType = {
    ChangeInCapacity: "ChangeInCapacity",
    ExactCapacity: "ExactCapacity",
    PercentChangeInCapacity: "PercentChangeInCapacity",
};
export const SortOrder = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
export const LocationFilter = {
    AWS: "AWS",
    CUSTOM: "CUSTOM",
};
export const AcceptMatchInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerIds && { PlayerIds: SENSITIVE_STRING }),
});
export const AwsCredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ContainerPortMappingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ContainerPort && { ContainerPort: SENSITIVE_STRING }),
    ...(obj.ConnectionPort && { ConnectionPort: SENSITIVE_STRING }),
});
export const ContainerAttributesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ContainerPortMappings && {
        ContainerPortMappings: obj.ContainerPortMappings.map((item) => ContainerPortMappingFilterSensitiveLog(item)),
    }),
});
export const ComputeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.IpAddress && { IpAddress: SENSITIVE_STRING }),
    ...(obj.ContainerAttributes && {
        ContainerAttributes: ContainerAttributesFilterSensitiveLog(obj.ContainerAttributes),
    }),
});
export const ConnectionPortRangeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FromPort && { FromPort: SENSITIVE_STRING }),
    ...(obj.ToPort && { ToPort: SENSITIVE_STRING }),
});
export const ContainerPortRangeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FromPort && { FromPort: SENSITIVE_STRING }),
    ...(obj.ToPort && { ToPort: SENSITIVE_STRING }),
});
export const ContainerPortConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ContainerPortRanges && {
        ContainerPortRanges: obj.ContainerPortRanges.map((item) => ContainerPortRangeFilterSensitiveLog(item)),
    }),
});
export const ContainerDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PortConfiguration && {
        PortConfiguration: ContainerPortConfigurationFilterSensitiveLog(obj.PortConfiguration),
    }),
});
export const ContainerDefinitionInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PortConfiguration && {
        PortConfiguration: ContainerPortConfigurationFilterSensitiveLog(obj.PortConfiguration),
    }),
});
export const ContainerGroupDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ContainerGroupsAttributesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConnectionPortRange && {
        ConnectionPortRange: ConnectionPortRangeFilterSensitiveLog(obj.ConnectionPortRange),
    }),
});
export const ContainerGroupsConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConnectionPortRange && {
        ConnectionPortRange: ConnectionPortRangeFilterSensitiveLog(obj.ConnectionPortRange),
    }),
});
export const CreateBuildOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UploadCredentials && { UploadCredentials: SENSITIVE_STRING }),
});
export const CreateContainerGroupDefinitionInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateContainerGroupDefinitionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const IpPermissionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FromPort && { FromPort: SENSITIVE_STRING }),
    ...(obj.ToPort && { ToPort: SENSITIVE_STRING }),
    ...(obj.IpRange && { IpRange: SENSITIVE_STRING }),
});
export const CreateFleetInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EC2InboundPermissions && {
        EC2InboundPermissions: obj.EC2InboundPermissions.map((item) => IpPermissionFilterSensitiveLog(item)),
    }),
    ...(obj.ContainerGroupsConfiguration && {
        ContainerGroupsConfiguration: ContainerGroupsConfigurationFilterSensitiveLog(obj.ContainerGroupsConfiguration),
    }),
});
export const FleetAttributesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ContainerGroupsAttributes && {
        ContainerGroupsAttributes: ContainerGroupsAttributesFilterSensitiveLog(obj.ContainerGroupsAttributes),
    }),
});
export const CreateFleetOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FleetAttributes && { FleetAttributes: FleetAttributesFilterSensitiveLog(obj.FleetAttributes) }),
});
export const GameSessionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.IpAddress && { IpAddress: SENSITIVE_STRING }),
    ...(obj.Port && { Port: SENSITIVE_STRING }),
});
export const CreateGameSessionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.GameSession && { GameSession: GameSessionFilterSensitiveLog(obj.GameSession) }),
});
export const CreatePlayerSessionInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerId && { PlayerId: SENSITIVE_STRING }),
});
export const PlayerSessionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerId && { PlayerId: SENSITIVE_STRING }),
    ...(obj.IpAddress && { IpAddress: SENSITIVE_STRING }),
    ...(obj.Port && { Port: SENSITIVE_STRING }),
});
export const CreatePlayerSessionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerSession && { PlayerSession: PlayerSessionFilterSensitiveLog(obj.PlayerSession) }),
});
export const CreatePlayerSessionsInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerIds && { PlayerIds: SENSITIVE_STRING }),
});
export const CreatePlayerSessionsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerSessions && {
        PlayerSessions: obj.PlayerSessions.map((item) => PlayerSessionFilterSensitiveLog(item)),
    }),
});
export const DescribeComputeOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Compute && { Compute: ComputeFilterSensitiveLog(obj.Compute) }),
});
export const DescribeContainerGroupDefinitionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeFleetAttributesOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FleetAttributes && {
        FleetAttributes: obj.FleetAttributes.map((item) => FleetAttributesFilterSensitiveLog(item)),
    }),
});
export const DescribeFleetPortSettingsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InboundPermissions && {
        InboundPermissions: obj.InboundPermissions.map((item) => IpPermissionFilterSensitiveLog(item)),
    }),
});
export const GameSessionDetailFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.GameSession && { GameSession: GameSessionFilterSensitiveLog(obj.GameSession) }),
});
export const DescribeGameSessionDetailsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.GameSessionDetails && {
        GameSessionDetails: obj.GameSessionDetails.map((item) => GameSessionDetailFilterSensitiveLog(item)),
    }),
});
export const PlacedPlayerSessionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerId && { PlayerId: SENSITIVE_STRING }),
});
export const PlayerLatencyFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerId && { PlayerId: SENSITIVE_STRING }),
});
export const GameSessionPlacementFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerLatencies && {
        PlayerLatencies: obj.PlayerLatencies.map((item) => PlayerLatencyFilterSensitiveLog(item)),
    }),
    ...(obj.IpAddress && { IpAddress: SENSITIVE_STRING }),
    ...(obj.Port && { Port: SENSITIVE_STRING }),
    ...(obj.PlacedPlayerSessions && {
        PlacedPlayerSessions: obj.PlacedPlayerSessions.map((item) => PlacedPlayerSessionFilterSensitiveLog(item)),
    }),
});
export const DescribeGameSessionPlacementOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.GameSessionPlacement && {
        GameSessionPlacement: GameSessionPlacementFilterSensitiveLog(obj.GameSessionPlacement),
    }),
});
export const DescribeGameSessionsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.GameSessions && { GameSessions: obj.GameSessions.map((item) => GameSessionFilterSensitiveLog(item)) }),
});
export const InstanceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.IpAddress && { IpAddress: SENSITIVE_STRING }),
});
export const DescribeInstancesOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Instances && { Instances: obj.Instances.map((item) => InstanceFilterSensitiveLog(item)) }),
});
export const MatchedPlayerSessionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerId && { PlayerId: SENSITIVE_STRING }),
});
export const GameSessionConnectionInfoFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.IpAddress && { IpAddress: SENSITIVE_STRING }),
    ...(obj.MatchedPlayerSessions && {
        MatchedPlayerSessions: obj.MatchedPlayerSessions.map((item) => MatchedPlayerSessionFilterSensitiveLog(item)),
    }),
});
export const PlayerFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerId && { PlayerId: SENSITIVE_STRING }),
});
export const MatchmakingTicketFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Players && { Players: obj.Players.map((item) => PlayerFilterSensitiveLog(item)) }),
    ...(obj.GameSessionConnectionInfo && {
        GameSessionConnectionInfo: GameSessionConnectionInfoFilterSensitiveLog(obj.GameSessionConnectionInfo),
    }),
});
export const DescribeMatchmakingOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TicketList && { TicketList: obj.TicketList.map((item) => MatchmakingTicketFilterSensitiveLog(item)) }),
});
export const DescribePlayerSessionsInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerId && { PlayerId: SENSITIVE_STRING }),
});
export const DescribePlayerSessionsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerSessions && {
        PlayerSessions: obj.PlayerSessions.map((item) => PlayerSessionFilterSensitiveLog(item)),
    }),
});
export const DesiredPlayerSessionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PlayerId && { PlayerId: SENSITIVE_STRING }),
});
export const GetComputeAccessOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Credentials && { Credentials: SENSITIVE_STRING }),
});
export const InstanceCredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const InstanceAccessFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.IpAddress && { IpAddress: SENSITIVE_STRING }),
    ...(obj.Credentials && { Credentials: SENSITIVE_STRING }),
});
export const GetInstanceAccessOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InstanceAccess && { InstanceAccess: InstanceAccessFilterSensitiveLog(obj.InstanceAccess) }),
});
export const ListComputeOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ComputeList && { ComputeList: obj.ComputeList.map((item) => ComputeFilterSensitiveLog(item)) }),
});
export const ListContainerGroupDefinitionsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RegisterComputeInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.IpAddress && { IpAddress: SENSITIVE_STRING }),
});
export const RegisterComputeOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Compute && { Compute: ComputeFilterSensitiveLog(obj.Compute) }),
});
export const RequestUploadCredentialsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UploadCredentials && { UploadCredentials: SENSITIVE_STRING }),
});
