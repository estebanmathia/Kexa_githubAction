import {
  Alias,
  AnywhereConfiguration,
  BackfillMode,
  BalancingStrategy,
  Build,
  DesiredPlayerSession,
  FilterConfiguration,
  FleetAction,
  FlexMatchMode,
  GameProperty,
  GameServer,
  GameServerGroup,
  GameServerGroupAction,
  GameServerProtectionPolicy,
  GameServerUtilizationStatus,
  GameSession,
  GameSessionPlacement,
  GameSessionQueue,
  GameSessionQueueDestination,
  InstanceDefinition,
  IpPermission,
  MatchmakingConfiguration,
  MatchmakingTicket,
  Player,
  PlayerLatency,
  PlayerLatencyPolicy,
  PlayerSessionCreationPolicy,
  PriorityConfiguration,
  ProtectionPolicy,
  ResourceCreationLimitPolicy,
  RoutingStrategy,
  RuntimeConfiguration,
  S3Location,
  Script,
  Tag,
} from "./models_0";
export interface ResumeGameServerGroupOutput {
  GameServerGroup?: GameServerGroup;
}
export interface SearchGameSessionsInput {
  FleetId?: string;
  AliasId?: string;
  Location?: string;
  FilterExpression?: string;
  SortExpression?: string;
  Limit?: number;
  NextToken?: string;
}
export interface SearchGameSessionsOutput {
  GameSessions?: GameSession[];
  NextToken?: string;
}
export interface StartFleetActionsInput {
  FleetId: string | undefined;
  Actions: FleetAction[] | undefined;
  Location?: string;
}
export interface StartFleetActionsOutput {
  FleetId?: string;
  FleetArn?: string;
}
export interface StartGameSessionPlacementInput {
  PlacementId: string | undefined;
  GameSessionQueueName: string | undefined;
  GameProperties?: GameProperty[];
  MaximumPlayerSessionCount: number | undefined;
  GameSessionName?: string;
  PlayerLatencies?: PlayerLatency[];
  DesiredPlayerSessions?: DesiredPlayerSession[];
  GameSessionData?: string;
}
export interface StartGameSessionPlacementOutput {
  GameSessionPlacement?: GameSessionPlacement;
}
export interface StartMatchBackfillInput {
  TicketId?: string;
  ConfigurationName: string | undefined;
  GameSessionArn?: string;
  Players: Player[] | undefined;
}
export interface StartMatchBackfillOutput {
  MatchmakingTicket?: MatchmakingTicket;
}
export interface StartMatchmakingInput {
  TicketId?: string;
  ConfigurationName: string | undefined;
  Players: Player[] | undefined;
}
export interface StartMatchmakingOutput {
  MatchmakingTicket?: MatchmakingTicket;
}
export interface StopFleetActionsInput {
  FleetId: string | undefined;
  Actions: FleetAction[] | undefined;
  Location?: string;
}
export interface StopFleetActionsOutput {
  FleetId?: string;
  FleetArn?: string;
}
export interface StopGameSessionPlacementInput {
  PlacementId: string | undefined;
}
export interface StopGameSessionPlacementOutput {
  GameSessionPlacement?: GameSessionPlacement;
}
export interface StopMatchmakingInput {
  TicketId: string | undefined;
}
export interface StopMatchmakingOutput {}
export interface SuspendGameServerGroupInput {
  GameServerGroupName: string | undefined;
  SuspendActions: GameServerGroupAction[] | undefined;
}
export interface SuspendGameServerGroupOutput {
  GameServerGroup?: GameServerGroup;
}
export interface TagResourceRequest {
  ResourceARN: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceARN: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateAliasInput {
  AliasId: string | undefined;
  Name?: string;
  Description?: string;
  RoutingStrategy?: RoutingStrategy;
}
export interface UpdateAliasOutput {
  Alias?: Alias;
}
export interface UpdateBuildInput {
  BuildId: string | undefined;
  Name?: string;
  Version?: string;
}
export interface UpdateBuildOutput {
  Build?: Build;
}
export interface UpdateFleetAttributesInput {
  FleetId: string | undefined;
  Name?: string;
  Description?: string;
  NewGameSessionProtectionPolicy?: ProtectionPolicy;
  ResourceCreationLimitPolicy?: ResourceCreationLimitPolicy;
  MetricGroups?: string[];
  AnywhereConfiguration?: AnywhereConfiguration;
}
export interface UpdateFleetAttributesOutput {
  FleetId?: string;
  FleetArn?: string;
}
export interface UpdateFleetCapacityInput {
  FleetId: string | undefined;
  DesiredInstances?: number;
  MinSize?: number;
  MaxSize?: number;
  Location?: string;
}
export interface UpdateFleetCapacityOutput {
  FleetId?: string;
  FleetArn?: string;
  Location?: string;
}
export interface UpdateFleetPortSettingsInput {
  FleetId: string | undefined;
  InboundPermissionAuthorizations?: IpPermission[];
  InboundPermissionRevocations?: IpPermission[];
}
export interface UpdateFleetPortSettingsOutput {
  FleetId?: string;
  FleetArn?: string;
}
export declare const GameServerHealthCheck: {
  readonly HEALTHY: "HEALTHY";
};
export type GameServerHealthCheck =
  (typeof GameServerHealthCheck)[keyof typeof GameServerHealthCheck];
export interface UpdateGameServerInput {
  GameServerGroupName: string | undefined;
  GameServerId: string | undefined;
  GameServerData?: string;
  UtilizationStatus?: GameServerUtilizationStatus;
  HealthCheck?: GameServerHealthCheck;
}
export interface UpdateGameServerOutput {
  GameServer?: GameServer;
}
export interface UpdateGameServerGroupInput {
  GameServerGroupName: string | undefined;
  RoleArn?: string;
  InstanceDefinitions?: InstanceDefinition[];
  GameServerProtectionPolicy?: GameServerProtectionPolicy;
  BalancingStrategy?: BalancingStrategy;
}
export interface UpdateGameServerGroupOutput {
  GameServerGroup?: GameServerGroup;
}
export interface UpdateGameSessionInput {
  GameSessionId: string | undefined;
  MaximumPlayerSessionCount?: number;
  Name?: string;
  PlayerSessionCreationPolicy?: PlayerSessionCreationPolicy;
  ProtectionPolicy?: ProtectionPolicy;
  GameProperties?: GameProperty[];
}
export interface UpdateGameSessionOutput {
  GameSession?: GameSession;
}
export interface UpdateGameSessionQueueInput {
  Name: string | undefined;
  TimeoutInSeconds?: number;
  PlayerLatencyPolicies?: PlayerLatencyPolicy[];
  Destinations?: GameSessionQueueDestination[];
  FilterConfiguration?: FilterConfiguration;
  PriorityConfiguration?: PriorityConfiguration;
  CustomEventData?: string;
  NotificationTarget?: string;
}
export interface UpdateGameSessionQueueOutput {
  GameSessionQueue?: GameSessionQueue;
}
export interface UpdateMatchmakingConfigurationInput {
  Name: string | undefined;
  Description?: string;
  GameSessionQueueArns?: string[];
  RequestTimeoutSeconds?: number;
  AcceptanceTimeoutSeconds?: number;
  AcceptanceRequired?: boolean;
  RuleSetName?: string;
  NotificationTarget?: string;
  AdditionalPlayerCount?: number;
  CustomEventData?: string;
  GameProperties?: GameProperty[];
  GameSessionData?: string;
  BackfillMode?: BackfillMode;
  FlexMatchMode?: FlexMatchMode;
}
export interface UpdateMatchmakingConfigurationOutput {
  Configuration?: MatchmakingConfiguration;
}
export interface UpdateRuntimeConfigurationInput {
  FleetId: string | undefined;
  RuntimeConfiguration: RuntimeConfiguration | undefined;
}
export interface UpdateRuntimeConfigurationOutput {
  RuntimeConfiguration?: RuntimeConfiguration;
}
export interface UpdateScriptInput {
  ScriptId: string | undefined;
  Name?: string;
  Version?: string;
  StorageLocation?: S3Location;
  ZipFile?: Uint8Array;
}
export interface UpdateScriptOutput {
  Script?: Script;
}
export interface ValidateMatchmakingRuleSetInput {
  RuleSetBody: string | undefined;
}
export interface ValidateMatchmakingRuleSetOutput {
  Valid?: boolean;
}
export declare const SearchGameSessionsOutputFilterSensitiveLog: (
  obj: SearchGameSessionsOutput
) => any;
export declare const StartGameSessionPlacementInputFilterSensitiveLog: (
  obj: StartGameSessionPlacementInput
) => any;
export declare const StartGameSessionPlacementOutputFilterSensitiveLog: (
  obj: StartGameSessionPlacementOutput
) => any;
export declare const StartMatchBackfillInputFilterSensitiveLog: (
  obj: StartMatchBackfillInput
) => any;
export declare const StartMatchBackfillOutputFilterSensitiveLog: (
  obj: StartMatchBackfillOutput
) => any;
export declare const StartMatchmakingInputFilterSensitiveLog: (
  obj: StartMatchmakingInput
) => any;
export declare const StartMatchmakingOutputFilterSensitiveLog: (
  obj: StartMatchmakingOutput
) => any;
export declare const StopGameSessionPlacementOutputFilterSensitiveLog: (
  obj: StopGameSessionPlacementOutput
) => any;
export declare const UpdateFleetPortSettingsInputFilterSensitiveLog: (
  obj: UpdateFleetPortSettingsInput
) => any;
export declare const UpdateGameSessionOutputFilterSensitiveLog: (
  obj: UpdateGameSessionOutput
) => any;
