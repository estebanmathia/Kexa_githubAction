import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { GameLiftServiceException as __BaseException } from "./GameLiftServiceException";
export declare const AcceptanceType: {
  readonly ACCEPT: "ACCEPT";
  readonly REJECT: "REJECT";
};
export type AcceptanceType =
  (typeof AcceptanceType)[keyof typeof AcceptanceType];
export interface AcceptMatchInput {
  TicketId: string | undefined;
  PlayerIds: string[] | undefined;
  AcceptanceType: AcceptanceType | undefined;
}
export interface AcceptMatchOutput {}
export declare class InternalServiceException extends __BaseException {
  readonly name: "InternalServiceException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServiceException, __BaseException>
  );
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export declare class UnsupportedRegionException extends __BaseException {
  readonly name: "UnsupportedRegionException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<UnsupportedRegionException, __BaseException>
  );
}
export declare const RoutingStrategyType: {
  readonly SIMPLE: "SIMPLE";
  readonly TERMINAL: "TERMINAL";
};
export type RoutingStrategyType =
  (typeof RoutingStrategyType)[keyof typeof RoutingStrategyType];
export interface RoutingStrategy {
  Type?: RoutingStrategyType;
  FleetId?: string;
  Message?: string;
}
export interface Alias {
  AliasId?: string;
  Name?: string;
  AliasArn?: string;
  Description?: string;
  RoutingStrategy?: RoutingStrategy;
  CreationTime?: Date;
  LastUpdatedTime?: Date;
}
export interface AnywhereConfiguration {
  Cost: string | undefined;
}
export interface AttributeValue {
  S?: string;
  N?: number;
  SL?: string[];
  SDM?: Record<string, number>;
}
export interface AwsCredentials {
  AccessKeyId?: string;
  SecretAccessKey?: string;
  SessionToken?: string;
}
export declare const BackfillMode: {
  readonly AUTOMATIC: "AUTOMATIC";
  readonly MANUAL: "MANUAL";
};
export type BackfillMode = (typeof BackfillMode)[keyof typeof BackfillMode];
export declare const BalancingStrategy: {
  readonly ON_DEMAND_ONLY: "ON_DEMAND_ONLY";
  readonly SPOT_ONLY: "SPOT_ONLY";
  readonly SPOT_PREFERRED: "SPOT_PREFERRED";
};
export type BalancingStrategy =
  (typeof BalancingStrategy)[keyof typeof BalancingStrategy];
export declare const OperatingSystem: {
  readonly AMAZON_LINUX: "AMAZON_LINUX";
  readonly AMAZON_LINUX_2: "AMAZON_LINUX_2";
  readonly AMAZON_LINUX_2023: "AMAZON_LINUX_2023";
  readonly WINDOWS_2012: "WINDOWS_2012";
  readonly WINDOWS_2016: "WINDOWS_2016";
};
export type OperatingSystem =
  (typeof OperatingSystem)[keyof typeof OperatingSystem];
export declare const BuildStatus: {
  readonly FAILED: "FAILED";
  readonly INITIALIZED: "INITIALIZED";
  readonly READY: "READY";
};
export type BuildStatus = (typeof BuildStatus)[keyof typeof BuildStatus];
export interface Build {
  BuildId?: string;
  BuildArn?: string;
  Name?: string;
  Version?: string;
  Status?: BuildStatus;
  SizeOnDisk?: number;
  OperatingSystem?: OperatingSystem;
  CreationTime?: Date;
  ServerSdkVersion?: string;
}
export declare const CertificateType: {
  readonly Disabled: "DISABLED";
  readonly Generated: "GENERATED";
};
export type CertificateType =
  (typeof CertificateType)[keyof typeof CertificateType];
export interface CertificateConfiguration {
  CertificateType: CertificateType | undefined;
}
export declare const FilterInstanceStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly DRAINING: "DRAINING";
};
export type FilterInstanceStatus =
  (typeof FilterInstanceStatus)[keyof typeof FilterInstanceStatus];
export interface ClaimFilterOption {
  InstanceStatuses?: FilterInstanceStatus[];
}
export interface ClaimGameServerInput {
  GameServerGroupName: string | undefined;
  GameServerId?: string;
  GameServerData?: string;
  FilterOption?: ClaimFilterOption;
}
export declare const GameServerClaimStatus: {
  readonly CLAIMED: "CLAIMED";
};
export type GameServerClaimStatus =
  (typeof GameServerClaimStatus)[keyof typeof GameServerClaimStatus];
export declare const GameServerUtilizationStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly UTILIZED: "UTILIZED";
};
export type GameServerUtilizationStatus =
  (typeof GameServerUtilizationStatus)[keyof typeof GameServerUtilizationStatus];
export interface GameServer {
  GameServerGroupName?: string;
  GameServerGroupArn?: string;
  GameServerId?: string;
  InstanceId?: string;
  ConnectionInfo?: string;
  GameServerData?: string;
  ClaimStatus?: GameServerClaimStatus;
  UtilizationStatus?: GameServerUtilizationStatus;
  RegistrationTime?: Date;
  LastClaimTime?: Date;
  LastHealthCheckTime?: Date;
}
export interface ClaimGameServerOutput {
  GameServer?: GameServer;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class OutOfCapacityException extends __BaseException {
  readonly name: "OutOfCapacityException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<OutOfCapacityException, __BaseException>
  );
}
export declare class UnauthorizedException extends __BaseException {
  readonly name: "UnauthorizedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<UnauthorizedException, __BaseException>
  );
}
export declare const ComparisonOperatorType: {
  readonly GreaterThanOrEqualToThreshold: "GreaterThanOrEqualToThreshold";
  readonly GreaterThanThreshold: "GreaterThanThreshold";
  readonly LessThanOrEqualToThreshold: "LessThanOrEqualToThreshold";
  readonly LessThanThreshold: "LessThanThreshold";
};
export type ComparisonOperatorType =
  (typeof ComparisonOperatorType)[keyof typeof ComparisonOperatorType];
export declare const ComputeStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly PENDING: "PENDING";
  readonly TERMINATING: "TERMINATING";
};
export type ComputeStatus = (typeof ComputeStatus)[keyof typeof ComputeStatus];
export declare const IpProtocol: {
  readonly TCP: "TCP";
  readonly UDP: "UDP";
};
export type IpProtocol = (typeof IpProtocol)[keyof typeof IpProtocol];
export interface ContainerPortMapping {
  ContainerPort?: number;
  ConnectionPort?: number;
  Protocol?: IpProtocol;
}
export interface ContainerAttributes {
  ContainerPortMappings?: ContainerPortMapping[];
}
export declare const EC2InstanceType: {
  readonly c3_2xlarge: "c3.2xlarge";
  readonly c3_4xlarge: "c3.4xlarge";
  readonly c3_8xlarge: "c3.8xlarge";
  readonly c3_large: "c3.large";
  readonly c3_xlarge: "c3.xlarge";
  readonly c4_2xlarge: "c4.2xlarge";
  readonly c4_4xlarge: "c4.4xlarge";
  readonly c4_8xlarge: "c4.8xlarge";
  readonly c4_large: "c4.large";
  readonly c4_xlarge: "c4.xlarge";
  readonly c5_12xlarge: "c5.12xlarge";
  readonly c5_18xlarge: "c5.18xlarge";
  readonly c5_24xlarge: "c5.24xlarge";
  readonly c5_2xlarge: "c5.2xlarge";
  readonly c5_4xlarge: "c5.4xlarge";
  readonly c5_9xlarge: "c5.9xlarge";
  readonly c5_large: "c5.large";
  readonly c5_xlarge: "c5.xlarge";
  readonly c5a_12xlarge: "c5a.12xlarge";
  readonly c5a_16xlarge: "c5a.16xlarge";
  readonly c5a_24xlarge: "c5a.24xlarge";
  readonly c5a_2xlarge: "c5a.2xlarge";
  readonly c5a_4xlarge: "c5a.4xlarge";
  readonly c5a_8xlarge: "c5a.8xlarge";
  readonly c5a_large: "c5a.large";
  readonly c5a_xlarge: "c5a.xlarge";
  readonly c5d_12xlarge: "c5d.12xlarge";
  readonly c5d_18xlarge: "c5d.18xlarge";
  readonly c5d_24xlarge: "c5d.24xlarge";
  readonly c5d_2xlarge: "c5d.2xlarge";
  readonly c5d_4xlarge: "c5d.4xlarge";
  readonly c5d_9xlarge: "c5d.9xlarge";
  readonly c5d_large: "c5d.large";
  readonly c5d_xlarge: "c5d.xlarge";
  readonly c6a_12xlarge: "c6a.12xlarge";
  readonly c6a_16xlarge: "c6a.16xlarge";
  readonly c6a_24xlarge: "c6a.24xlarge";
  readonly c6a_2xlarge: "c6a.2xlarge";
  readonly c6a_4xlarge: "c6a.4xlarge";
  readonly c6a_8xlarge: "c6a.8xlarge";
  readonly c6a_large: "c6a.large";
  readonly c6a_xlarge: "c6a.xlarge";
  readonly c6g_12xlarge: "c6g.12xlarge";
  readonly c6g_16xlarge: "c6g.16xlarge";
  readonly c6g_2xlarge: "c6g.2xlarge";
  readonly c6g_4xlarge: "c6g.4xlarge";
  readonly c6g_8xlarge: "c6g.8xlarge";
  readonly c6g_large: "c6g.large";
  readonly c6g_medium: "c6g.medium";
  readonly c6g_xlarge: "c6g.xlarge";
  readonly c6gn_12xlarge: "c6gn.12xlarge";
  readonly c6gn_16xlarge: "c6gn.16xlarge";
  readonly c6gn_2xlarge: "c6gn.2xlarge";
  readonly c6gn_4xlarge: "c6gn.4xlarge";
  readonly c6gn_8xlarge: "c6gn.8xlarge";
  readonly c6gn_large: "c6gn.large";
  readonly c6gn_medium: "c6gn.medium";
  readonly c6gn_xlarge: "c6gn.xlarge";
  readonly c6i_12xlarge: "c6i.12xlarge";
  readonly c6i_16xlarge: "c6i.16xlarge";
  readonly c6i_24xlarge: "c6i.24xlarge";
  readonly c6i_2xlarge: "c6i.2xlarge";
  readonly c6i_4xlarge: "c6i.4xlarge";
  readonly c6i_8xlarge: "c6i.8xlarge";
  readonly c6i_large: "c6i.large";
  readonly c6i_xlarge: "c6i.xlarge";
  readonly c7g_12xlarge: "c7g.12xlarge";
  readonly c7g_16xlarge: "c7g.16xlarge";
  readonly c7g_2xlarge: "c7g.2xlarge";
  readonly c7g_4xlarge: "c7g.4xlarge";
  readonly c7g_8xlarge: "c7g.8xlarge";
  readonly c7g_large: "c7g.large";
  readonly c7g_medium: "c7g.medium";
  readonly c7g_xlarge: "c7g.xlarge";
  readonly g5g_16xlarge: "g5g.16xlarge";
  readonly g5g_2xlarge: "g5g.2xlarge";
  readonly g5g_4xlarge: "g5g.4xlarge";
  readonly g5g_8xlarge: "g5g.8xlarge";
  readonly g5g_xlarge: "g5g.xlarge";
  readonly m3_2xlarge: "m3.2xlarge";
  readonly m3_large: "m3.large";
  readonly m3_medium: "m3.medium";
  readonly m3_xlarge: "m3.xlarge";
  readonly m4_10xlarge: "m4.10xlarge";
  readonly m4_2xlarge: "m4.2xlarge";
  readonly m4_4xlarge: "m4.4xlarge";
  readonly m4_large: "m4.large";
  readonly m4_xlarge: "m4.xlarge";
  readonly m5_12xlarge: "m5.12xlarge";
  readonly m5_16xlarge: "m5.16xlarge";
  readonly m5_24xlarge: "m5.24xlarge";
  readonly m5_2xlarge: "m5.2xlarge";
  readonly m5_4xlarge: "m5.4xlarge";
  readonly m5_8xlarge: "m5.8xlarge";
  readonly m5_large: "m5.large";
  readonly m5_xlarge: "m5.xlarge";
  readonly m5a_12xlarge: "m5a.12xlarge";
  readonly m5a_16xlarge: "m5a.16xlarge";
  readonly m5a_24xlarge: "m5a.24xlarge";
  readonly m5a_2xlarge: "m5a.2xlarge";
  readonly m5a_4xlarge: "m5a.4xlarge";
  readonly m5a_8xlarge: "m5a.8xlarge";
  readonly m5a_large: "m5a.large";
  readonly m5a_xlarge: "m5a.xlarge";
  readonly m6g_12xlarge: "m6g.12xlarge";
  readonly m6g_16xlarge: "m6g.16xlarge";
  readonly m6g_2xlarge: "m6g.2xlarge";
  readonly m6g_4xlarge: "m6g.4xlarge";
  readonly m6g_8xlarge: "m6g.8xlarge";
  readonly m6g_large: "m6g.large";
  readonly m6g_medium: "m6g.medium";
  readonly m6g_xlarge: "m6g.xlarge";
  readonly m7g_12xlarge: "m7g.12xlarge";
  readonly m7g_16xlarge: "m7g.16xlarge";
  readonly m7g_2xlarge: "m7g.2xlarge";
  readonly m7g_4xlarge: "m7g.4xlarge";
  readonly m7g_8xlarge: "m7g.8xlarge";
  readonly m7g_large: "m7g.large";
  readonly m7g_medium: "m7g.medium";
  readonly m7g_xlarge: "m7g.xlarge";
  readonly r3_2xlarge: "r3.2xlarge";
  readonly r3_4xlarge: "r3.4xlarge";
  readonly r3_8xlarge: "r3.8xlarge";
  readonly r3_large: "r3.large";
  readonly r3_xlarge: "r3.xlarge";
  readonly r4_16xlarge: "r4.16xlarge";
  readonly r4_2xlarge: "r4.2xlarge";
  readonly r4_4xlarge: "r4.4xlarge";
  readonly r4_8xlarge: "r4.8xlarge";
  readonly r4_large: "r4.large";
  readonly r4_xlarge: "r4.xlarge";
  readonly r5_12xlarge: "r5.12xlarge";
  readonly r5_16xlarge: "r5.16xlarge";
  readonly r5_24xlarge: "r5.24xlarge";
  readonly r5_2xlarge: "r5.2xlarge";
  readonly r5_4xlarge: "r5.4xlarge";
  readonly r5_8xlarge: "r5.8xlarge";
  readonly r5_large: "r5.large";
  readonly r5_xlarge: "r5.xlarge";
  readonly r5a_12xlarge: "r5a.12xlarge";
  readonly r5a_16xlarge: "r5a.16xlarge";
  readonly r5a_24xlarge: "r5a.24xlarge";
  readonly r5a_2xlarge: "r5a.2xlarge";
  readonly r5a_4xlarge: "r5a.4xlarge";
  readonly r5a_8xlarge: "r5a.8xlarge";
  readonly r5a_large: "r5a.large";
  readonly r5a_xlarge: "r5a.xlarge";
  readonly r5d_12xlarge: "r5d.12xlarge";
  readonly r5d_16xlarge: "r5d.16xlarge";
  readonly r5d_24xlarge: "r5d.24xlarge";
  readonly r5d_2xlarge: "r5d.2xlarge";
  readonly r5d_4xlarge: "r5d.4xlarge";
  readonly r5d_8xlarge: "r5d.8xlarge";
  readonly r5d_large: "r5d.large";
  readonly r5d_xlarge: "r5d.xlarge";
  readonly r6g_12xlarge: "r6g.12xlarge";
  readonly r6g_16xlarge: "r6g.16xlarge";
  readonly r6g_2xlarge: "r6g.2xlarge";
  readonly r6g_4xlarge: "r6g.4xlarge";
  readonly r6g_8xlarge: "r6g.8xlarge";
  readonly r6g_large: "r6g.large";
  readonly r6g_medium: "r6g.medium";
  readonly r6g_xlarge: "r6g.xlarge";
  readonly r7g_12xlarge: "r7g.12xlarge";
  readonly r7g_16xlarge: "r7g.16xlarge";
  readonly r7g_2xlarge: "r7g.2xlarge";
  readonly r7g_4xlarge: "r7g.4xlarge";
  readonly r7g_8xlarge: "r7g.8xlarge";
  readonly r7g_large: "r7g.large";
  readonly r7g_medium: "r7g.medium";
  readonly r7g_xlarge: "r7g.xlarge";
  readonly t2_large: "t2.large";
  readonly t2_medium: "t2.medium";
  readonly t2_micro: "t2.micro";
  readonly t2_small: "t2.small";
};
export type EC2InstanceType =
  (typeof EC2InstanceType)[keyof typeof EC2InstanceType];
export interface Compute {
  FleetId?: string;
  FleetArn?: string;
  ComputeName?: string;
  ComputeArn?: string;
  IpAddress?: string;
  DnsName?: string;
  ComputeStatus?: ComputeStatus;
  Location?: string;
  CreationTime?: Date;
  OperatingSystem?: OperatingSystem;
  Type?: EC2InstanceType;
  GameLiftServiceSdkEndpoint?: string;
  GameLiftAgentEndpoint?: string;
  InstanceId?: string;
  ContainerAttributes?: ContainerAttributes;
}
export declare const ComputeType: {
  readonly ANYWHERE: "ANYWHERE";
  readonly CONTAINER: "CONTAINER";
  readonly EC2: "EC2";
};
export type ComputeType = (typeof ComputeType)[keyof typeof ComputeType];
export interface ConnectionPortRange {
  FromPort: number | undefined;
  ToPort: number | undefined;
}
export declare const ContainerDependencyCondition: {
  readonly COMPLETE: "COMPLETE";
  readonly HEALTHY: "HEALTHY";
  readonly START: "START";
  readonly SUCCESS: "SUCCESS";
};
export type ContainerDependencyCondition =
  (typeof ContainerDependencyCondition)[keyof typeof ContainerDependencyCondition];
export interface ContainerDependency {
  ContainerName: string | undefined;
  Condition: ContainerDependencyCondition | undefined;
}
export interface ContainerEnvironment {
  Name: string | undefined;
  Value: string | undefined;
}
export interface ContainerHealthCheck {
  Command: string[] | undefined;
  Interval?: number;
  Timeout?: number;
  Retries?: number;
  StartPeriod?: number;
}
export interface ContainerMemoryLimits {
  SoftLimit?: number;
  HardLimit?: number;
}
export interface ContainerPortRange {
  FromPort: number | undefined;
  ToPort: number | undefined;
  Protocol: IpProtocol | undefined;
}
export interface ContainerPortConfiguration {
  ContainerPortRanges: ContainerPortRange[] | undefined;
}
export interface ContainerDefinition {
  ContainerName: string | undefined;
  ImageUri: string | undefined;
  ResolvedImageDigest?: string;
  MemoryLimits?: ContainerMemoryLimits;
  PortConfiguration?: ContainerPortConfiguration;
  Cpu?: number;
  HealthCheck?: ContainerHealthCheck;
  Command?: string[];
  Essential?: boolean;
  EntryPoint?: string[];
  WorkingDirectory?: string;
  Environment?: ContainerEnvironment[];
  DependsOn?: ContainerDependency[];
}
export interface ContainerDefinitionInput {
  ContainerName: string | undefined;
  ImageUri: string | undefined;
  MemoryLimits?: ContainerMemoryLimits;
  PortConfiguration?: ContainerPortConfiguration;
  Cpu?: number;
  HealthCheck?: ContainerHealthCheck;
  Command?: string[];
  Essential?: boolean;
  EntryPoint?: string[];
  WorkingDirectory?: string;
  Environment?: ContainerEnvironment[];
  DependsOn?: ContainerDependency[];
}
export declare const ContainerOperatingSystem: {
  readonly AMAZON_LINUX_2023: "AMAZON_LINUX_2023";
};
export type ContainerOperatingSystem =
  (typeof ContainerOperatingSystem)[keyof typeof ContainerOperatingSystem];
export declare const ContainerSchedulingStrategy: {
  readonly DAEMON: "DAEMON";
  readonly REPLICA: "REPLICA";
};
export type ContainerSchedulingStrategy =
  (typeof ContainerSchedulingStrategy)[keyof typeof ContainerSchedulingStrategy];
export declare const ContainerGroupDefinitionStatus: {
  readonly COPYING: "COPYING";
  readonly FAILED: "FAILED";
  readonly READY: "READY";
};
export type ContainerGroupDefinitionStatus =
  (typeof ContainerGroupDefinitionStatus)[keyof typeof ContainerGroupDefinitionStatus];
export interface ContainerGroupDefinition {
  ContainerGroupDefinitionArn?: string;
  CreationTime?: Date;
  OperatingSystem?: ContainerOperatingSystem;
  Name?: string;
  SchedulingStrategy?: ContainerSchedulingStrategy;
  TotalMemoryLimit?: number;
  TotalCpuLimit?: number;
  ContainerDefinitions?: ContainerDefinition[];
  Status?: ContainerGroupDefinitionStatus;
  StatusReason?: string;
}
export interface ContainerGroupDefinitionProperty {
  SchedulingStrategy?: ContainerSchedulingStrategy;
  ContainerGroupDefinitionName?: string;
}
export interface ContainerGroupsPerInstance {
  DesiredReplicaContainerGroupsPerInstance?: number;
  MaxReplicaContainerGroupsPerInstance?: number;
}
export interface ContainerGroupsAttributes {
  ContainerGroupDefinitionProperties?: ContainerGroupDefinitionProperty[];
  ConnectionPortRange?: ConnectionPortRange;
  ContainerGroupsPerInstance?: ContainerGroupsPerInstance;
}
export interface ContainerGroupsConfiguration {
  ContainerGroupDefinitionNames: string[] | undefined;
  ConnectionPortRange: ConnectionPortRange | undefined;
  DesiredReplicaContainerGroupsPerInstance?: number;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateAliasInput {
  Name: string | undefined;
  Description?: string;
  RoutingStrategy: RoutingStrategy | undefined;
  Tags?: Tag[];
}
export interface CreateAliasOutput {
  Alias?: Alias;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class TaggingFailedException extends __BaseException {
  readonly name: "TaggingFailedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<TaggingFailedException, __BaseException>
  );
}
export interface S3Location {
  Bucket?: string;
  Key?: string;
  RoleArn?: string;
  ObjectVersion?: string;
}
export interface CreateBuildInput {
  Name?: string;
  Version?: string;
  StorageLocation?: S3Location;
  OperatingSystem?: OperatingSystem;
  Tags?: Tag[];
  ServerSdkVersion?: string;
}
export interface CreateBuildOutput {
  Build?: Build;
  UploadCredentials?: AwsCredentials;
  StorageLocation?: S3Location;
}
export interface CreateContainerGroupDefinitionInput {
  Name: string | undefined;
  SchedulingStrategy?: ContainerSchedulingStrategy;
  TotalMemoryLimit: number | undefined;
  TotalCpuLimit: number | undefined;
  ContainerDefinitions: ContainerDefinitionInput[] | undefined;
  OperatingSystem: ContainerOperatingSystem | undefined;
  Tags?: Tag[];
}
export interface CreateContainerGroupDefinitionOutput {
  ContainerGroupDefinition?: ContainerGroupDefinition;
}
export interface IpPermission {
  FromPort: number | undefined;
  ToPort: number | undefined;
  IpRange: string | undefined;
  Protocol: IpProtocol | undefined;
}
export declare const FleetType: {
  readonly OnDemand: "ON_DEMAND";
  readonly Spot: "SPOT";
};
export type FleetType = (typeof FleetType)[keyof typeof FleetType];
export declare const InstanceRoleCredentialsProvider: {
  readonly SHARED_CREDENTIAL_FILE: "SHARED_CREDENTIAL_FILE";
};
export type InstanceRoleCredentialsProvider =
  (typeof InstanceRoleCredentialsProvider)[keyof typeof InstanceRoleCredentialsProvider];
export interface LocationConfiguration {
  Location: string | undefined;
}
export declare const ProtectionPolicy: {
  readonly FullProtection: "FullProtection";
  readonly NoProtection: "NoProtection";
};
export type ProtectionPolicy =
  (typeof ProtectionPolicy)[keyof typeof ProtectionPolicy];
export interface ResourceCreationLimitPolicy {
  NewGameSessionsPerCreator?: number;
  PolicyPeriodInMinutes?: number;
}
export interface ServerProcess {
  LaunchPath: string | undefined;
  Parameters?: string;
  ConcurrentExecutions: number | undefined;
}
export interface RuntimeConfiguration {
  ServerProcesses?: ServerProcess[];
  MaxConcurrentGameSessionActivations?: number;
  GameSessionActivationTimeoutSeconds?: number;
}
export interface CreateFleetInput {
  Name: string | undefined;
  Description?: string;
  BuildId?: string;
  ScriptId?: string;
  ServerLaunchPath?: string;
  ServerLaunchParameters?: string;
  LogPaths?: string[];
  EC2InstanceType?: EC2InstanceType;
  EC2InboundPermissions?: IpPermission[];
  NewGameSessionProtectionPolicy?: ProtectionPolicy;
  RuntimeConfiguration?: RuntimeConfiguration;
  ResourceCreationLimitPolicy?: ResourceCreationLimitPolicy;
  MetricGroups?: string[];
  PeerVpcAwsAccountId?: string;
  PeerVpcId?: string;
  FleetType?: FleetType;
  InstanceRoleArn?: string;
  CertificateConfiguration?: CertificateConfiguration;
  Locations?: LocationConfiguration[];
  Tags?: Tag[];
  ComputeType?: ComputeType;
  AnywhereConfiguration?: AnywhereConfiguration;
  InstanceRoleCredentialsProvider?: InstanceRoleCredentialsProvider;
  ContainerGroupsConfiguration?: ContainerGroupsConfiguration;
}
export declare const FleetStatus: {
  readonly ACTIVATING: "ACTIVATING";
  readonly ACTIVE: "ACTIVE";
  readonly BUILDING: "BUILDING";
  readonly DELETING: "DELETING";
  readonly DOWNLOADING: "DOWNLOADING";
  readonly ERROR: "ERROR";
  readonly NEW: "NEW";
  readonly NOT_FOUND: "NOT_FOUND";
  readonly TERMINATED: "TERMINATED";
  readonly VALIDATING: "VALIDATING";
};
export type FleetStatus = (typeof FleetStatus)[keyof typeof FleetStatus];
export declare const FleetAction: {
  readonly AutoScaling: "AUTO_SCALING";
};
export type FleetAction = (typeof FleetAction)[keyof typeof FleetAction];
export interface FleetAttributes {
  FleetId?: string;
  FleetArn?: string;
  FleetType?: FleetType;
  InstanceType?: EC2InstanceType;
  Description?: string;
  Name?: string;
  CreationTime?: Date;
  TerminationTime?: Date;
  Status?: FleetStatus;
  BuildId?: string;
  BuildArn?: string;
  ScriptId?: string;
  ScriptArn?: string;
  ServerLaunchPath?: string;
  ServerLaunchParameters?: string;
  LogPaths?: string[];
  NewGameSessionProtectionPolicy?: ProtectionPolicy;
  OperatingSystem?: OperatingSystem;
  ResourceCreationLimitPolicy?: ResourceCreationLimitPolicy;
  MetricGroups?: string[];
  StoppedActions?: FleetAction[];
  InstanceRoleArn?: string;
  CertificateConfiguration?: CertificateConfiguration;
  ComputeType?: ComputeType;
  AnywhereConfiguration?: AnywhereConfiguration;
  InstanceRoleCredentialsProvider?: InstanceRoleCredentialsProvider;
  ContainerGroupsAttributes?: ContainerGroupsAttributes;
}
export interface LocationState {
  Location?: string;
  Status?: FleetStatus;
}
export interface CreateFleetOutput {
  FleetAttributes?: FleetAttributes;
  LocationStates?: LocationState[];
}
export declare class NotReadyException extends __BaseException {
  readonly name: "NotReadyException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<NotReadyException, __BaseException>);
}
export interface CreateFleetLocationsInput {
  FleetId: string | undefined;
  Locations: LocationConfiguration[] | undefined;
}
export interface CreateFleetLocationsOutput {
  FleetId?: string;
  FleetArn?: string;
  LocationStates?: LocationState[];
}
export declare class InvalidFleetStatusException extends __BaseException {
  readonly name: "InvalidFleetStatusException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidFleetStatusException, __BaseException>
  );
}
export interface TargetTrackingConfiguration {
  TargetValue: number | undefined;
}
export interface GameServerGroupAutoScalingPolicy {
  EstimatedInstanceWarmup?: number;
  TargetTrackingConfiguration: TargetTrackingConfiguration | undefined;
}
export declare const GameServerProtectionPolicy: {
  readonly FULL_PROTECTION: "FULL_PROTECTION";
  readonly NO_PROTECTION: "NO_PROTECTION";
};
export type GameServerProtectionPolicy =
  (typeof GameServerProtectionPolicy)[keyof typeof GameServerProtectionPolicy];
export declare const GameServerGroupInstanceType: {
  readonly c4_2xlarge: "c4.2xlarge";
  readonly c4_4xlarge: "c4.4xlarge";
  readonly c4_8xlarge: "c4.8xlarge";
  readonly c4_large: "c4.large";
  readonly c4_xlarge: "c4.xlarge";
  readonly c5_12xlarge: "c5.12xlarge";
  readonly c5_18xlarge: "c5.18xlarge";
  readonly c5_24xlarge: "c5.24xlarge";
  readonly c5_2xlarge: "c5.2xlarge";
  readonly c5_4xlarge: "c5.4xlarge";
  readonly c5_9xlarge: "c5.9xlarge";
  readonly c5_large: "c5.large";
  readonly c5_xlarge: "c5.xlarge";
  readonly c5a_12xlarge: "c5a.12xlarge";
  readonly c5a_16xlarge: "c5a.16xlarge";
  readonly c5a_24xlarge: "c5a.24xlarge";
  readonly c5a_2xlarge: "c5a.2xlarge";
  readonly c5a_4xlarge: "c5a.4xlarge";
  readonly c5a_8xlarge: "c5a.8xlarge";
  readonly c5a_large: "c5a.large";
  readonly c5a_xlarge: "c5a.xlarge";
  readonly c6g_12xlarge: "c6g.12xlarge";
  readonly c6g_16xlarge: "c6g.16xlarge";
  readonly c6g_2xlarge: "c6g.2xlarge";
  readonly c6g_4xlarge: "c6g.4xlarge";
  readonly c6g_8xlarge: "c6g.8xlarge";
  readonly c6g_large: "c6g.large";
  readonly c6g_medium: "c6g.medium";
  readonly c6g_xlarge: "c6g.xlarge";
  readonly m4_10xlarge: "m4.10xlarge";
  readonly m4_2xlarge: "m4.2xlarge";
  readonly m4_4xlarge: "m4.4xlarge";
  readonly m4_large: "m4.large";
  readonly m4_xlarge: "m4.xlarge";
  readonly m5_12xlarge: "m5.12xlarge";
  readonly m5_16xlarge: "m5.16xlarge";
  readonly m5_24xlarge: "m5.24xlarge";
  readonly m5_2xlarge: "m5.2xlarge";
  readonly m5_4xlarge: "m5.4xlarge";
  readonly m5_8xlarge: "m5.8xlarge";
  readonly m5_large: "m5.large";
  readonly m5_xlarge: "m5.xlarge";
  readonly m5a_12xlarge: "m5a.12xlarge";
  readonly m5a_16xlarge: "m5a.16xlarge";
  readonly m5a_24xlarge: "m5a.24xlarge";
  readonly m5a_2xlarge: "m5a.2xlarge";
  readonly m5a_4xlarge: "m5a.4xlarge";
  readonly m5a_8xlarge: "m5a.8xlarge";
  readonly m5a_large: "m5a.large";
  readonly m5a_xlarge: "m5a.xlarge";
  readonly m6g_12xlarge: "m6g.12xlarge";
  readonly m6g_16xlarge: "m6g.16xlarge";
  readonly m6g_2xlarge: "m6g.2xlarge";
  readonly m6g_4xlarge: "m6g.4xlarge";
  readonly m6g_8xlarge: "m6g.8xlarge";
  readonly m6g_large: "m6g.large";
  readonly m6g_medium: "m6g.medium";
  readonly m6g_xlarge: "m6g.xlarge";
  readonly r4_16xlarge: "r4.16xlarge";
  readonly r4_2xlarge: "r4.2xlarge";
  readonly r4_4xlarge: "r4.4xlarge";
  readonly r4_8xlarge: "r4.8xlarge";
  readonly r4_large: "r4.large";
  readonly r4_xlarge: "r4.xlarge";
  readonly r5_12xlarge: "r5.12xlarge";
  readonly r5_16xlarge: "r5.16xlarge";
  readonly r5_24xlarge: "r5.24xlarge";
  readonly r5_2xlarge: "r5.2xlarge";
  readonly r5_4xlarge: "r5.4xlarge";
  readonly r5_8xlarge: "r5.8xlarge";
  readonly r5_large: "r5.large";
  readonly r5_xlarge: "r5.xlarge";
  readonly r5a_12xlarge: "r5a.12xlarge";
  readonly r5a_16xlarge: "r5a.16xlarge";
  readonly r5a_24xlarge: "r5a.24xlarge";
  readonly r5a_2xlarge: "r5a.2xlarge";
  readonly r5a_4xlarge: "r5a.4xlarge";
  readonly r5a_8xlarge: "r5a.8xlarge";
  readonly r5a_large: "r5a.large";
  readonly r5a_xlarge: "r5a.xlarge";
  readonly r6g_12xlarge: "r6g.12xlarge";
  readonly r6g_16xlarge: "r6g.16xlarge";
  readonly r6g_2xlarge: "r6g.2xlarge";
  readonly r6g_4xlarge: "r6g.4xlarge";
  readonly r6g_8xlarge: "r6g.8xlarge";
  readonly r6g_large: "r6g.large";
  readonly r6g_medium: "r6g.medium";
  readonly r6g_xlarge: "r6g.xlarge";
};
export type GameServerGroupInstanceType =
  (typeof GameServerGroupInstanceType)[keyof typeof GameServerGroupInstanceType];
export interface InstanceDefinition {
  InstanceType: GameServerGroupInstanceType | undefined;
  WeightedCapacity?: string;
}
export interface LaunchTemplateSpecification {
  LaunchTemplateId?: string;
  LaunchTemplateName?: string;
  Version?: string;
}
export interface CreateGameServerGroupInput {
  GameServerGroupName: string | undefined;
  RoleArn: string | undefined;
  MinSize: number | undefined;
  MaxSize: number | undefined;
  LaunchTemplate: LaunchTemplateSpecification | undefined;
  InstanceDefinitions: InstanceDefinition[] | undefined;
  AutoScalingPolicy?: GameServerGroupAutoScalingPolicy;
  BalancingStrategy?: BalancingStrategy;
  GameServerProtectionPolicy?: GameServerProtectionPolicy;
  VpcSubnets?: string[];
  Tags?: Tag[];
}
export declare const GameServerGroupStatus: {
  readonly ACTIVATING: "ACTIVATING";
  readonly ACTIVE: "ACTIVE";
  readonly DELETED: "DELETED";
  readonly DELETE_SCHEDULED: "DELETE_SCHEDULED";
  readonly DELETING: "DELETING";
  readonly ERROR: "ERROR";
  readonly NEW: "NEW";
};
export type GameServerGroupStatus =
  (typeof GameServerGroupStatus)[keyof typeof GameServerGroupStatus];
export declare const GameServerGroupAction: {
  readonly REPLACE_INSTANCE_TYPES: "REPLACE_INSTANCE_TYPES";
};
export type GameServerGroupAction =
  (typeof GameServerGroupAction)[keyof typeof GameServerGroupAction];
export interface GameServerGroup {
  GameServerGroupName?: string;
  GameServerGroupArn?: string;
  RoleArn?: string;
  InstanceDefinitions?: InstanceDefinition[];
  BalancingStrategy?: BalancingStrategy;
  GameServerProtectionPolicy?: GameServerProtectionPolicy;
  AutoScalingGroupArn?: string;
  Status?: GameServerGroupStatus;
  StatusReason?: string;
  SuspendedActions?: GameServerGroupAction[];
  CreationTime?: Date;
  LastUpdatedTime?: Date;
}
export interface CreateGameServerGroupOutput {
  GameServerGroup?: GameServerGroup;
}
export interface GameProperty {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateGameSessionInput {
  FleetId?: string;
  AliasId?: string;
  MaximumPlayerSessionCount: number | undefined;
  Name?: string;
  GameProperties?: GameProperty[];
  CreatorId?: string;
  GameSessionId?: string;
  IdempotencyToken?: string;
  GameSessionData?: string;
  Location?: string;
}
export declare const PlayerSessionCreationPolicy: {
  readonly ACCEPT_ALL: "ACCEPT_ALL";
  readonly DENY_ALL: "DENY_ALL";
};
export type PlayerSessionCreationPolicy =
  (typeof PlayerSessionCreationPolicy)[keyof typeof PlayerSessionCreationPolicy];
export declare const GameSessionStatus: {
  readonly ACTIVATING: "ACTIVATING";
  readonly ACTIVE: "ACTIVE";
  readonly ERROR: "ERROR";
  readonly TERMINATED: "TERMINATED";
  readonly TERMINATING: "TERMINATING";
};
export type GameSessionStatus =
  (typeof GameSessionStatus)[keyof typeof GameSessionStatus];
export declare const GameSessionStatusReason: {
  readonly INTERRUPTED: "INTERRUPTED";
};
export type GameSessionStatusReason =
  (typeof GameSessionStatusReason)[keyof typeof GameSessionStatusReason];
export interface GameSession {
  GameSessionId?: string;
  Name?: string;
  FleetId?: string;
  FleetArn?: string;
  CreationTime?: Date;
  TerminationTime?: Date;
  CurrentPlayerSessionCount?: number;
  MaximumPlayerSessionCount?: number;
  Status?: GameSessionStatus;
  StatusReason?: GameSessionStatusReason;
  GameProperties?: GameProperty[];
  IpAddress?: string;
  DnsName?: string;
  Port?: number;
  PlayerSessionCreationPolicy?: PlayerSessionCreationPolicy;
  CreatorId?: string;
  GameSessionData?: string;
  MatchmakerData?: string;
  Location?: string;
}
export interface CreateGameSessionOutput {
  GameSession?: GameSession;
}
export declare class FleetCapacityExceededException extends __BaseException {
  readonly name: "FleetCapacityExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<FleetCapacityExceededException, __BaseException>
  );
}
export declare class IdempotentParameterMismatchException extends __BaseException {
  readonly name: "IdempotentParameterMismatchException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      IdempotentParameterMismatchException,
      __BaseException
    >
  );
}
export declare class TerminalRoutingStrategyException extends __BaseException {
  readonly name: "TerminalRoutingStrategyException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      TerminalRoutingStrategyException,
      __BaseException
    >
  );
}
export interface GameSessionQueueDestination {
  DestinationArn?: string;
}
export interface FilterConfiguration {
  AllowedLocations?: string[];
}
export interface PlayerLatencyPolicy {
  MaximumIndividualPlayerLatencyMilliseconds?: number;
  PolicyDurationSeconds?: number;
}
export declare const PriorityType: {
  readonly COST: "COST";
  readonly DESTINATION: "DESTINATION";
  readonly LATENCY: "LATENCY";
  readonly LOCATION: "LOCATION";
};
export type PriorityType = (typeof PriorityType)[keyof typeof PriorityType];
export interface PriorityConfiguration {
  PriorityOrder?: PriorityType[];
  LocationOrder?: string[];
}
export interface CreateGameSessionQueueInput {
  Name: string | undefined;
  TimeoutInSeconds?: number;
  PlayerLatencyPolicies?: PlayerLatencyPolicy[];
  Destinations?: GameSessionQueueDestination[];
  FilterConfiguration?: FilterConfiguration;
  PriorityConfiguration?: PriorityConfiguration;
  CustomEventData?: string;
  NotificationTarget?: string;
  Tags?: Tag[];
}
export interface GameSessionQueue {
  Name?: string;
  GameSessionQueueArn?: string;
  TimeoutInSeconds?: number;
  PlayerLatencyPolicies?: PlayerLatencyPolicy[];
  Destinations?: GameSessionQueueDestination[];
  FilterConfiguration?: FilterConfiguration;
  PriorityConfiguration?: PriorityConfiguration;
  CustomEventData?: string;
  NotificationTarget?: string;
}
export interface CreateGameSessionQueueOutput {
  GameSessionQueue?: GameSessionQueue;
}
export interface CreateLocationInput {
  LocationName: string | undefined;
  Tags?: Tag[];
}
export interface LocationModel {
  LocationName?: string;
  LocationArn?: string;
}
export interface CreateLocationOutput {
  Location?: LocationModel;
}
export declare const FlexMatchMode: {
  readonly STANDALONE: "STANDALONE";
  readonly WITH_QUEUE: "WITH_QUEUE";
};
export type FlexMatchMode = (typeof FlexMatchMode)[keyof typeof FlexMatchMode];
export interface CreateMatchmakingConfigurationInput {
  Name: string | undefined;
  Description?: string;
  GameSessionQueueArns?: string[];
  RequestTimeoutSeconds: number | undefined;
  AcceptanceTimeoutSeconds?: number;
  AcceptanceRequired: boolean | undefined;
  RuleSetName: string | undefined;
  NotificationTarget?: string;
  AdditionalPlayerCount?: number;
  CustomEventData?: string;
  GameProperties?: GameProperty[];
  GameSessionData?: string;
  BackfillMode?: BackfillMode;
  FlexMatchMode?: FlexMatchMode;
  Tags?: Tag[];
}
export interface MatchmakingConfiguration {
  Name?: string;
  ConfigurationArn?: string;
  Description?: string;
  GameSessionQueueArns?: string[];
  RequestTimeoutSeconds?: number;
  AcceptanceTimeoutSeconds?: number;
  AcceptanceRequired?: boolean;
  RuleSetName?: string;
  RuleSetArn?: string;
  NotificationTarget?: string;
  AdditionalPlayerCount?: number;
  CustomEventData?: string;
  CreationTime?: Date;
  GameProperties?: GameProperty[];
  GameSessionData?: string;
  BackfillMode?: BackfillMode;
  FlexMatchMode?: FlexMatchMode;
}
export interface CreateMatchmakingConfigurationOutput {
  Configuration?: MatchmakingConfiguration;
}
export interface CreateMatchmakingRuleSetInput {
  Name: string | undefined;
  RuleSetBody: string | undefined;
  Tags?: Tag[];
}
export interface MatchmakingRuleSet {
  RuleSetName?: string;
  RuleSetArn?: string;
  RuleSetBody: string | undefined;
  CreationTime?: Date;
}
export interface CreateMatchmakingRuleSetOutput {
  RuleSet: MatchmakingRuleSet | undefined;
}
export interface CreatePlayerSessionInput {
  GameSessionId: string | undefined;
  PlayerId: string | undefined;
  PlayerData?: string;
}
export declare const PlayerSessionStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly COMPLETED: "COMPLETED";
  readonly RESERVED: "RESERVED";
  readonly TIMEDOUT: "TIMEDOUT";
};
export type PlayerSessionStatus =
  (typeof PlayerSessionStatus)[keyof typeof PlayerSessionStatus];
export interface PlayerSession {
  PlayerSessionId?: string;
  PlayerId?: string;
  GameSessionId?: string;
  FleetId?: string;
  FleetArn?: string;
  CreationTime?: Date;
  TerminationTime?: Date;
  Status?: PlayerSessionStatus;
  IpAddress?: string;
  DnsName?: string;
  Port?: number;
  PlayerData?: string;
}
export interface CreatePlayerSessionOutput {
  PlayerSession?: PlayerSession;
}
export declare class GameSessionFullException extends __BaseException {
  readonly name: "GameSessionFullException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<GameSessionFullException, __BaseException>
  );
}
export declare class InvalidGameSessionStatusException extends __BaseException {
  readonly name: "InvalidGameSessionStatusException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      InvalidGameSessionStatusException,
      __BaseException
    >
  );
}
export interface CreatePlayerSessionsInput {
  GameSessionId: string | undefined;
  PlayerIds: string[] | undefined;
  PlayerDataMap?: Record<string, string>;
}
export interface CreatePlayerSessionsOutput {
  PlayerSessions?: PlayerSession[];
}
export interface CreateScriptInput {
  Name?: string;
  Version?: string;
  StorageLocation?: S3Location;
  ZipFile?: Uint8Array;
  Tags?: Tag[];
}
export interface Script {
  ScriptId?: string;
  ScriptArn?: string;
  Name?: string;
  Version?: string;
  SizeOnDisk?: number;
  CreationTime?: Date;
  StorageLocation?: S3Location;
}
export interface CreateScriptOutput {
  Script?: Script;
}
export interface CreateVpcPeeringAuthorizationInput {
  GameLiftAwsAccountId: string | undefined;
  PeerVpcId: string | undefined;
}
export interface VpcPeeringAuthorization {
  GameLiftAwsAccountId?: string;
  PeerVpcAwsAccountId?: string;
  PeerVpcId?: string;
  CreationTime?: Date;
  ExpirationTime?: Date;
}
export interface CreateVpcPeeringAuthorizationOutput {
  VpcPeeringAuthorization?: VpcPeeringAuthorization;
}
export interface CreateVpcPeeringConnectionInput {
  FleetId: string | undefined;
  PeerVpcAwsAccountId: string | undefined;
  PeerVpcId: string | undefined;
}
export interface CreateVpcPeeringConnectionOutput {}
export interface DeleteAliasInput {
  AliasId: string | undefined;
}
export interface DeleteBuildInput {
  BuildId: string | undefined;
}
export interface DeleteContainerGroupDefinitionInput {
  Name: string | undefined;
}
export interface DeleteFleetInput {
  FleetId: string | undefined;
}
export interface DeleteFleetLocationsInput {
  FleetId: string | undefined;
  Locations: string[] | undefined;
}
export interface DeleteFleetLocationsOutput {
  FleetId?: string;
  FleetArn?: string;
  LocationStates?: LocationState[];
}
export declare const GameServerGroupDeleteOption: {
  readonly FORCE_DELETE: "FORCE_DELETE";
  readonly RETAIN: "RETAIN";
  readonly SAFE_DELETE: "SAFE_DELETE";
};
export type GameServerGroupDeleteOption =
  (typeof GameServerGroupDeleteOption)[keyof typeof GameServerGroupDeleteOption];
export interface DeleteGameServerGroupInput {
  GameServerGroupName: string | undefined;
  DeleteOption?: GameServerGroupDeleteOption;
}
export interface DeleteGameServerGroupOutput {
  GameServerGroup?: GameServerGroup;
}
export interface DeleteGameSessionQueueInput {
  Name: string | undefined;
}
export interface DeleteGameSessionQueueOutput {}
export interface DeleteLocationInput {
  LocationName: string | undefined;
}
export interface DeleteLocationOutput {}
export interface DeleteMatchmakingConfigurationInput {
  Name: string | undefined;
}
export interface DeleteMatchmakingConfigurationOutput {}
export interface DeleteMatchmakingRuleSetInput {
  Name: string | undefined;
}
export interface DeleteMatchmakingRuleSetOutput {}
export interface DeleteScalingPolicyInput {
  Name: string | undefined;
  FleetId: string | undefined;
}
export interface DeleteScriptInput {
  ScriptId: string | undefined;
}
export interface DeleteVpcPeeringAuthorizationInput {
  GameLiftAwsAccountId: string | undefined;
  PeerVpcId: string | undefined;
}
export interface DeleteVpcPeeringAuthorizationOutput {}
export interface DeleteVpcPeeringConnectionInput {
  FleetId: string | undefined;
  VpcPeeringConnectionId: string | undefined;
}
export interface DeleteVpcPeeringConnectionOutput {}
export interface DeregisterComputeInput {
  FleetId: string | undefined;
  ComputeName: string | undefined;
}
export interface DeregisterComputeOutput {}
export interface DeregisterGameServerInput {
  GameServerGroupName: string | undefined;
  GameServerId: string | undefined;
}
export interface DescribeAliasInput {
  AliasId: string | undefined;
}
export interface DescribeAliasOutput {
  Alias?: Alias;
}
export interface DescribeBuildInput {
  BuildId: string | undefined;
}
export interface DescribeBuildOutput {
  Build?: Build;
}
export interface DescribeComputeInput {
  FleetId: string | undefined;
  ComputeName: string | undefined;
}
export interface DescribeComputeOutput {
  Compute?: Compute;
}
export interface DescribeContainerGroupDefinitionInput {
  Name: string | undefined;
}
export interface DescribeContainerGroupDefinitionOutput {
  ContainerGroupDefinition?: ContainerGroupDefinition;
}
export interface DescribeEC2InstanceLimitsInput {
  EC2InstanceType?: EC2InstanceType;
  Location?: string;
}
export interface EC2InstanceLimit {
  EC2InstanceType?: EC2InstanceType;
  CurrentInstances?: number;
  InstanceLimit?: number;
  Location?: string;
}
export interface DescribeEC2InstanceLimitsOutput {
  EC2InstanceLimits?: EC2InstanceLimit[];
}
export interface DescribeFleetAttributesInput {
  FleetIds?: string[];
  Limit?: number;
  NextToken?: string;
}
export interface DescribeFleetAttributesOutput {
  FleetAttributes?: FleetAttributes[];
  NextToken?: string;
}
export interface DescribeFleetCapacityInput {
  FleetIds?: string[];
  Limit?: number;
  NextToken?: string;
}
export interface EC2InstanceCounts {
  DESIRED?: number;
  MINIMUM?: number;
  MAXIMUM?: number;
  PENDING?: number;
  ACTIVE?: number;
  IDLE?: number;
  TERMINATING?: number;
}
export interface ReplicaContainerGroupCounts {
  PENDING?: number;
  ACTIVE?: number;
  IDLE?: number;
  TERMINATING?: number;
}
export interface FleetCapacity {
  FleetId?: string;
  FleetArn?: string;
  InstanceType?: EC2InstanceType;
  InstanceCounts?: EC2InstanceCounts;
  Location?: string;
  ReplicaContainerGroupCounts?: ReplicaContainerGroupCounts;
}
export interface DescribeFleetCapacityOutput {
  FleetCapacity?: FleetCapacity[];
  NextToken?: string;
}
export interface DescribeFleetEventsInput {
  FleetId: string | undefined;
  StartTime?: Date;
  EndTime?: Date;
  Limit?: number;
  NextToken?: string;
}
export declare const EventCode: {
  readonly FLEET_ACTIVATION_FAILED: "FLEET_ACTIVATION_FAILED";
  readonly FLEET_ACTIVATION_FAILED_NO_INSTANCES: "FLEET_ACTIVATION_FAILED_NO_INSTANCES";
  readonly FLEET_BINARY_DOWNLOAD_FAILED: "FLEET_BINARY_DOWNLOAD_FAILED";
  readonly FLEET_CREATED: "FLEET_CREATED";
  readonly FLEET_CREATION_EXTRACTING_BUILD: "FLEET_CREATION_EXTRACTING_BUILD";
  readonly FLEET_CREATION_RUNNING_INSTALLER: "FLEET_CREATION_RUNNING_INSTALLER";
  readonly FLEET_CREATION_VALIDATING_RUNTIME_CONFIG: "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG";
  readonly FLEET_DELETED: "FLEET_DELETED";
  readonly FLEET_INITIALIZATION_FAILED: "FLEET_INITIALIZATION_FAILED";
  readonly FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED: "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED";
  readonly FLEET_SCALING_EVENT: "FLEET_SCALING_EVENT";
  readonly FLEET_STATE_ACTIVATING: "FLEET_STATE_ACTIVATING";
  readonly FLEET_STATE_ACTIVE: "FLEET_STATE_ACTIVE";
  readonly FLEET_STATE_BUILDING: "FLEET_STATE_BUILDING";
  readonly FLEET_STATE_DOWNLOADING: "FLEET_STATE_DOWNLOADING";
  readonly FLEET_STATE_ERROR: "FLEET_STATE_ERROR";
  readonly FLEET_STATE_VALIDATING: "FLEET_STATE_VALIDATING";
  readonly FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE: "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE";
  readonly FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND: "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND";
  readonly FLEET_VALIDATION_TIMED_OUT: "FLEET_VALIDATION_TIMED_OUT";
  readonly FLEET_VPC_PEERING_DELETED: "FLEET_VPC_PEERING_DELETED";
  readonly FLEET_VPC_PEERING_FAILED: "FLEET_VPC_PEERING_FAILED";
  readonly FLEET_VPC_PEERING_SUCCEEDED: "FLEET_VPC_PEERING_SUCCEEDED";
  readonly GAME_SESSION_ACTIVATION_TIMEOUT: "GAME_SESSION_ACTIVATION_TIMEOUT";
  readonly GENERIC_EVENT: "GENERIC_EVENT";
  readonly INSTANCE_INTERRUPTED: "INSTANCE_INTERRUPTED";
  readonly INSTANCE_RECYCLED: "INSTANCE_RECYCLED";
  readonly SERVER_PROCESS_CRASHED: "SERVER_PROCESS_CRASHED";
  readonly SERVER_PROCESS_FORCE_TERMINATED: "SERVER_PROCESS_FORCE_TERMINATED";
  readonly SERVER_PROCESS_INVALID_PATH: "SERVER_PROCESS_INVALID_PATH";
  readonly SERVER_PROCESS_PROCESS_EXIT_TIMEOUT: "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT";
  readonly SERVER_PROCESS_PROCESS_READY_TIMEOUT: "SERVER_PROCESS_PROCESS_READY_TIMEOUT";
  readonly SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT: "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT";
  readonly SERVER_PROCESS_TERMINATED_UNHEALTHY: "SERVER_PROCESS_TERMINATED_UNHEALTHY";
};
export type EventCode = (typeof EventCode)[keyof typeof EventCode];
export interface Event {
  EventId?: string;
  ResourceId?: string;
  EventCode?: EventCode;
  Message?: string;
  EventTime?: Date;
  PreSignedLogUrl?: string;
  Count?: number;
}
export interface DescribeFleetEventsOutput {
  Events?: Event[];
  NextToken?: string;
}
export interface DescribeFleetLocationAttributesInput {
  FleetId: string | undefined;
  Locations?: string[];
  Limit?: number;
  NextToken?: string;
}
export declare const LocationUpdateStatus: {
  readonly PENDING_UPDATE: "PENDING_UPDATE";
};
export type LocationUpdateStatus =
  (typeof LocationUpdateStatus)[keyof typeof LocationUpdateStatus];
export interface LocationAttributes {
  LocationState?: LocationState;
  StoppedActions?: FleetAction[];
  UpdateStatus?: LocationUpdateStatus;
}
export interface DescribeFleetLocationAttributesOutput {
  FleetId?: string;
  FleetArn?: string;
  LocationAttributes?: LocationAttributes[];
  NextToken?: string;
}
export interface DescribeFleetLocationCapacityInput {
  FleetId: string | undefined;
  Location: string | undefined;
}
export interface DescribeFleetLocationCapacityOutput {
  FleetCapacity?: FleetCapacity;
}
export interface DescribeFleetLocationUtilizationInput {
  FleetId: string | undefined;
  Location: string | undefined;
}
export interface FleetUtilization {
  FleetId?: string;
  FleetArn?: string;
  ActiveServerProcessCount?: number;
  ActiveGameSessionCount?: number;
  CurrentPlayerSessionCount?: number;
  MaximumPlayerSessionCount?: number;
  Location?: string;
}
export interface DescribeFleetLocationUtilizationOutput {
  FleetUtilization?: FleetUtilization;
}
export interface DescribeFleetPortSettingsInput {
  FleetId: string | undefined;
  Location?: string;
}
export interface DescribeFleetPortSettingsOutput {
  FleetId?: string;
  FleetArn?: string;
  InboundPermissions?: IpPermission[];
  UpdateStatus?: LocationUpdateStatus;
  Location?: string;
}
export interface DescribeFleetUtilizationInput {
  FleetIds?: string[];
  Limit?: number;
  NextToken?: string;
}
export interface DescribeFleetUtilizationOutput {
  FleetUtilization?: FleetUtilization[];
  NextToken?: string;
}
export interface DescribeGameServerInput {
  GameServerGroupName: string | undefined;
  GameServerId: string | undefined;
}
export interface DescribeGameServerOutput {
  GameServer?: GameServer;
}
export interface DescribeGameServerGroupInput {
  GameServerGroupName: string | undefined;
}
export interface DescribeGameServerGroupOutput {
  GameServerGroup?: GameServerGroup;
}
export interface DescribeGameServerInstancesInput {
  GameServerGroupName: string | undefined;
  InstanceIds?: string[];
  Limit?: number;
  NextToken?: string;
}
export declare const GameServerInstanceStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly DRAINING: "DRAINING";
  readonly SPOT_TERMINATING: "SPOT_TERMINATING";
};
export type GameServerInstanceStatus =
  (typeof GameServerInstanceStatus)[keyof typeof GameServerInstanceStatus];
export interface GameServerInstance {
  GameServerGroupName?: string;
  GameServerGroupArn?: string;
  InstanceId?: string;
  InstanceStatus?: GameServerInstanceStatus;
}
export interface DescribeGameServerInstancesOutput {
  GameServerInstances?: GameServerInstance[];
  NextToken?: string;
}
export interface DescribeGameSessionDetailsInput {
  FleetId?: string;
  GameSessionId?: string;
  AliasId?: string;
  Location?: string;
  StatusFilter?: string;
  Limit?: number;
  NextToken?: string;
}
export interface GameSessionDetail {
  GameSession?: GameSession;
  ProtectionPolicy?: ProtectionPolicy;
}
export interface DescribeGameSessionDetailsOutput {
  GameSessionDetails?: GameSessionDetail[];
  NextToken?: string;
}
export interface DescribeGameSessionPlacementInput {
  PlacementId: string | undefined;
}
export interface PlacedPlayerSession {
  PlayerId?: string;
  PlayerSessionId?: string;
}
export interface PlayerLatency {
  PlayerId?: string;
  RegionIdentifier?: string;
  LatencyInMilliseconds?: number;
}
export declare const GameSessionPlacementState: {
  readonly CANCELLED: "CANCELLED";
  readonly FAILED: "FAILED";
  readonly FULFILLED: "FULFILLED";
  readonly PENDING: "PENDING";
  readonly TIMED_OUT: "TIMED_OUT";
};
export type GameSessionPlacementState =
  (typeof GameSessionPlacementState)[keyof typeof GameSessionPlacementState];
export interface GameSessionPlacement {
  PlacementId?: string;
  GameSessionQueueName?: string;
  Status?: GameSessionPlacementState;
  GameProperties?: GameProperty[];
  MaximumPlayerSessionCount?: number;
  GameSessionName?: string;
  GameSessionId?: string;
  GameSessionArn?: string;
  GameSessionRegion?: string;
  PlayerLatencies?: PlayerLatency[];
  StartTime?: Date;
  EndTime?: Date;
  IpAddress?: string;
  DnsName?: string;
  Port?: number;
  PlacedPlayerSessions?: PlacedPlayerSession[];
  GameSessionData?: string;
  MatchmakerData?: string;
}
export interface DescribeGameSessionPlacementOutput {
  GameSessionPlacement?: GameSessionPlacement;
}
export interface DescribeGameSessionQueuesInput {
  Names?: string[];
  Limit?: number;
  NextToken?: string;
}
export interface DescribeGameSessionQueuesOutput {
  GameSessionQueues?: GameSessionQueue[];
  NextToken?: string;
}
export interface DescribeGameSessionsInput {
  FleetId?: string;
  GameSessionId?: string;
  AliasId?: string;
  Location?: string;
  StatusFilter?: string;
  Limit?: number;
  NextToken?: string;
}
export interface DescribeGameSessionsOutput {
  GameSessions?: GameSession[];
  NextToken?: string;
}
export interface DescribeInstancesInput {
  FleetId: string | undefined;
  InstanceId?: string;
  Limit?: number;
  NextToken?: string;
  Location?: string;
}
export declare const InstanceStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly PENDING: "PENDING";
  readonly TERMINATING: "TERMINATING";
};
export type InstanceStatus =
  (typeof InstanceStatus)[keyof typeof InstanceStatus];
export interface Instance {
  FleetId?: string;
  FleetArn?: string;
  InstanceId?: string;
  IpAddress?: string;
  DnsName?: string;
  OperatingSystem?: OperatingSystem;
  Type?: EC2InstanceType;
  Status?: InstanceStatus;
  CreationTime?: Date;
  Location?: string;
}
export interface DescribeInstancesOutput {
  Instances?: Instance[];
  NextToken?: string;
}
export interface DescribeMatchmakingInput {
  TicketIds: string[] | undefined;
}
export interface MatchedPlayerSession {
  PlayerId?: string;
  PlayerSessionId?: string;
}
export interface GameSessionConnectionInfo {
  GameSessionArn?: string;
  IpAddress?: string;
  DnsName?: string;
  Port?: number;
  MatchedPlayerSessions?: MatchedPlayerSession[];
}
export interface Player {
  PlayerId?: string;
  PlayerAttributes?: Record<string, AttributeValue>;
  Team?: string;
  LatencyInMs?: Record<string, number>;
}
export declare const MatchmakingConfigurationStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly PLACING: "PLACING";
  readonly QUEUED: "QUEUED";
  readonly REQUIRES_ACCEPTANCE: "REQUIRES_ACCEPTANCE";
  readonly SEARCHING: "SEARCHING";
  readonly TIMED_OUT: "TIMED_OUT";
};
export type MatchmakingConfigurationStatus =
  (typeof MatchmakingConfigurationStatus)[keyof typeof MatchmakingConfigurationStatus];
export interface MatchmakingTicket {
  TicketId?: string;
  ConfigurationName?: string;
  ConfigurationArn?: string;
  Status?: MatchmakingConfigurationStatus;
  StatusReason?: string;
  StatusMessage?: string;
  StartTime?: Date;
  EndTime?: Date;
  Players?: Player[];
  GameSessionConnectionInfo?: GameSessionConnectionInfo;
  EstimatedWaitTime?: number;
}
export interface DescribeMatchmakingOutput {
  TicketList?: MatchmakingTicket[];
}
export interface DescribeMatchmakingConfigurationsInput {
  Names?: string[];
  RuleSetName?: string;
  Limit?: number;
  NextToken?: string;
}
export interface DescribeMatchmakingConfigurationsOutput {
  Configurations?: MatchmakingConfiguration[];
  NextToken?: string;
}
export interface DescribeMatchmakingRuleSetsInput {
  Names?: string[];
  Limit?: number;
  NextToken?: string;
}
export interface DescribeMatchmakingRuleSetsOutput {
  RuleSets: MatchmakingRuleSet[] | undefined;
  NextToken?: string;
}
export interface DescribePlayerSessionsInput {
  GameSessionId?: string;
  PlayerId?: string;
  PlayerSessionId?: string;
  PlayerSessionStatusFilter?: string;
  Limit?: number;
  NextToken?: string;
}
export interface DescribePlayerSessionsOutput {
  PlayerSessions?: PlayerSession[];
  NextToken?: string;
}
export interface DescribeRuntimeConfigurationInput {
  FleetId: string | undefined;
}
export interface DescribeRuntimeConfigurationOutput {
  RuntimeConfiguration?: RuntimeConfiguration;
}
export declare const ScalingStatusType: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETED: "DELETED";
  readonly DELETE_REQUESTED: "DELETE_REQUESTED";
  readonly DELETING: "DELETING";
  readonly ERROR: "ERROR";
  readonly UPDATE_REQUESTED: "UPDATE_REQUESTED";
  readonly UPDATING: "UPDATING";
};
export type ScalingStatusType =
  (typeof ScalingStatusType)[keyof typeof ScalingStatusType];
export interface DescribeScalingPoliciesInput {
  FleetId: string | undefined;
  StatusFilter?: ScalingStatusType;
  Limit?: number;
  NextToken?: string;
  Location?: string;
}
export declare const MetricName: {
  readonly ActivatingGameSessions: "ActivatingGameSessions";
  readonly ActiveGameSessions: "ActiveGameSessions";
  readonly ActiveInstances: "ActiveInstances";
  readonly AvailableGameSessions: "AvailableGameSessions";
  readonly AvailablePlayerSessions: "AvailablePlayerSessions";
  readonly ConcurrentActivatableGameSessions: "ConcurrentActivatableGameSessions";
  readonly CurrentPlayerSessions: "CurrentPlayerSessions";
  readonly IdleInstances: "IdleInstances";
  readonly PercentAvailableGameSessions: "PercentAvailableGameSessions";
  readonly PercentIdleInstances: "PercentIdleInstances";
  readonly QueueDepth: "QueueDepth";
  readonly WaitTime: "WaitTime";
};
export type MetricName = (typeof MetricName)[keyof typeof MetricName];
export declare const PolicyType: {
  readonly RuleBased: "RuleBased";
  readonly TargetBased: "TargetBased";
};
export type PolicyType = (typeof PolicyType)[keyof typeof PolicyType];
export declare const ScalingAdjustmentType: {
  readonly ChangeInCapacity: "ChangeInCapacity";
  readonly ExactCapacity: "ExactCapacity";
  readonly PercentChangeInCapacity: "PercentChangeInCapacity";
};
export type ScalingAdjustmentType =
  (typeof ScalingAdjustmentType)[keyof typeof ScalingAdjustmentType];
export interface TargetConfiguration {
  TargetValue: number | undefined;
}
export interface ScalingPolicy {
  FleetId?: string;
  FleetArn?: string;
  Name?: string;
  Status?: ScalingStatusType;
  ScalingAdjustment?: number;
  ScalingAdjustmentType?: ScalingAdjustmentType;
  ComparisonOperator?: ComparisonOperatorType;
  Threshold?: number;
  EvaluationPeriods?: number;
  MetricName?: MetricName;
  PolicyType?: PolicyType;
  TargetConfiguration?: TargetConfiguration;
  UpdateStatus?: LocationUpdateStatus;
  Location?: string;
}
export interface DescribeScalingPoliciesOutput {
  ScalingPolicies?: ScalingPolicy[];
  NextToken?: string;
}
export interface DescribeScriptInput {
  ScriptId: string | undefined;
}
export interface DescribeScriptOutput {
  Script?: Script;
}
export interface DescribeVpcPeeringAuthorizationsInput {}
export interface DescribeVpcPeeringAuthorizationsOutput {
  VpcPeeringAuthorizations?: VpcPeeringAuthorization[];
}
export interface DescribeVpcPeeringConnectionsInput {
  FleetId?: string;
}
export interface VpcPeeringConnectionStatus {
  Code?: string;
  Message?: string;
}
export interface VpcPeeringConnection {
  FleetId?: string;
  FleetArn?: string;
  IpV4CidrBlock?: string;
  VpcPeeringConnectionId?: string;
  Status?: VpcPeeringConnectionStatus;
  PeerVpcId?: string;
  GameLiftVpcId?: string;
}
export interface DescribeVpcPeeringConnectionsOutput {
  VpcPeeringConnections?: VpcPeeringConnection[];
}
export interface DesiredPlayerSession {
  PlayerId?: string;
  PlayerData?: string;
}
export interface GetComputeAccessInput {
  FleetId: string | undefined;
  ComputeName: string | undefined;
}
export interface GetComputeAccessOutput {
  FleetId?: string;
  FleetArn?: string;
  ComputeName?: string;
  ComputeArn?: string;
  Credentials?: AwsCredentials;
  Target?: string;
}
export interface GetComputeAuthTokenInput {
  FleetId: string | undefined;
  ComputeName: string | undefined;
}
export interface GetComputeAuthTokenOutput {
  FleetId?: string;
  FleetArn?: string;
  ComputeName?: string;
  ComputeArn?: string;
  AuthToken?: string;
  ExpirationTimestamp?: Date;
}
export interface GetGameSessionLogUrlInput {
  GameSessionId: string | undefined;
}
export interface GetGameSessionLogUrlOutput {
  PreSignedUrl?: string;
}
export interface GetInstanceAccessInput {
  FleetId: string | undefined;
  InstanceId: string | undefined;
}
export interface InstanceCredentials {
  UserName?: string;
  Secret?: string;
}
export interface InstanceAccess {
  FleetId?: string;
  InstanceId?: string;
  IpAddress?: string;
  OperatingSystem?: OperatingSystem;
  Credentials?: InstanceCredentials;
}
export interface GetInstanceAccessOutput {
  InstanceAccess?: InstanceAccess;
}
export interface ListAliasesInput {
  RoutingStrategyType?: RoutingStrategyType;
  Name?: string;
  Limit?: number;
  NextToken?: string;
}
export interface ListAliasesOutput {
  Aliases?: Alias[];
  NextToken?: string;
}
export interface ListBuildsInput {
  Status?: BuildStatus;
  Limit?: number;
  NextToken?: string;
}
export interface ListBuildsOutput {
  Builds?: Build[];
  NextToken?: string;
}
export interface ListComputeInput {
  FleetId: string | undefined;
  Location?: string;
  Limit?: number;
  NextToken?: string;
}
export interface ListComputeOutput {
  ComputeList?: Compute[];
  NextToken?: string;
}
export interface ListContainerGroupDefinitionsInput {
  SchedulingStrategy?: ContainerSchedulingStrategy;
  Limit?: number;
  NextToken?: string;
}
export interface ListContainerGroupDefinitionsOutput {
  ContainerGroupDefinitions?: ContainerGroupDefinition[];
  NextToken?: string;
}
export interface ListFleetsInput {
  BuildId?: string;
  ScriptId?: string;
  ContainerGroupDefinitionName?: string;
  Limit?: number;
  NextToken?: string;
}
export interface ListFleetsOutput {
  FleetIds?: string[];
  NextToken?: string;
}
export interface ListGameServerGroupsInput {
  Limit?: number;
  NextToken?: string;
}
export interface ListGameServerGroupsOutput {
  GameServerGroups?: GameServerGroup[];
  NextToken?: string;
}
export declare const SortOrder: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];
export interface ListGameServersInput {
  GameServerGroupName: string | undefined;
  SortOrder?: SortOrder;
  Limit?: number;
  NextToken?: string;
}
export interface ListGameServersOutput {
  GameServers?: GameServer[];
  NextToken?: string;
}
export declare const LocationFilter: {
  readonly AWS: "AWS";
  readonly CUSTOM: "CUSTOM";
};
export type LocationFilter =
  (typeof LocationFilter)[keyof typeof LocationFilter];
export interface ListLocationsInput {
  Filters?: LocationFilter[];
  Limit?: number;
  NextToken?: string;
}
export interface ListLocationsOutput {
  Locations?: LocationModel[];
  NextToken?: string;
}
export interface ListScriptsInput {
  Limit?: number;
  NextToken?: string;
}
export interface ListScriptsOutput {
  Scripts?: Script[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceARN: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
}
export interface PutScalingPolicyInput {
  Name: string | undefined;
  FleetId: string | undefined;
  ScalingAdjustment?: number;
  ScalingAdjustmentType?: ScalingAdjustmentType;
  Threshold?: number;
  ComparisonOperator?: ComparisonOperatorType;
  EvaluationPeriods?: number;
  MetricName: MetricName | undefined;
  PolicyType?: PolicyType;
  TargetConfiguration?: TargetConfiguration;
}
export interface PutScalingPolicyOutput {
  Name?: string;
}
export interface RegisterComputeInput {
  FleetId: string | undefined;
  ComputeName: string | undefined;
  CertificatePath?: string;
  DnsName?: string;
  IpAddress?: string;
  Location?: string;
}
export interface RegisterComputeOutput {
  Compute?: Compute;
}
export interface RegisterGameServerInput {
  GameServerGroupName: string | undefined;
  GameServerId: string | undefined;
  InstanceId: string | undefined;
  ConnectionInfo?: string;
  GameServerData?: string;
}
export interface RegisterGameServerOutput {
  GameServer?: GameServer;
}
export interface RequestUploadCredentialsInput {
  BuildId: string | undefined;
}
export interface RequestUploadCredentialsOutput {
  UploadCredentials?: AwsCredentials;
  StorageLocation?: S3Location;
}
export interface ResolveAliasInput {
  AliasId: string | undefined;
}
export interface ResolveAliasOutput {
  FleetId?: string;
  FleetArn?: string;
}
export interface ResumeGameServerGroupInput {
  GameServerGroupName: string | undefined;
  ResumeActions: GameServerGroupAction[] | undefined;
}
export declare const AcceptMatchInputFilterSensitiveLog: (
  obj: AcceptMatchInput
) => any;
export declare const AwsCredentialsFilterSensitiveLog: (
  obj: AwsCredentials
) => any;
export declare const ContainerPortMappingFilterSensitiveLog: (
  obj: ContainerPortMapping
) => any;
export declare const ContainerAttributesFilterSensitiveLog: (
  obj: ContainerAttributes
) => any;
export declare const ComputeFilterSensitiveLog: (obj: Compute) => any;
export declare const ConnectionPortRangeFilterSensitiveLog: (
  obj: ConnectionPortRange
) => any;
export declare const ContainerPortRangeFilterSensitiveLog: (
  obj: ContainerPortRange
) => any;
export declare const ContainerPortConfigurationFilterSensitiveLog: (
  obj: ContainerPortConfiguration
) => any;
export declare const ContainerDefinitionFilterSensitiveLog: (
  obj: ContainerDefinition
) => any;
export declare const ContainerDefinitionInputFilterSensitiveLog: (
  obj: ContainerDefinitionInput
) => any;
export declare const ContainerGroupDefinitionFilterSensitiveLog: (
  obj: ContainerGroupDefinition
) => any;
export declare const ContainerGroupsAttributesFilterSensitiveLog: (
  obj: ContainerGroupsAttributes
) => any;
export declare const ContainerGroupsConfigurationFilterSensitiveLog: (
  obj: ContainerGroupsConfiguration
) => any;
export declare const CreateBuildOutputFilterSensitiveLog: (
  obj: CreateBuildOutput
) => any;
export declare const CreateContainerGroupDefinitionInputFilterSensitiveLog: (
  obj: CreateContainerGroupDefinitionInput
) => any;
export declare const CreateContainerGroupDefinitionOutputFilterSensitiveLog: (
  obj: CreateContainerGroupDefinitionOutput
) => any;
export declare const IpPermissionFilterSensitiveLog: (obj: IpPermission) => any;
export declare const CreateFleetInputFilterSensitiveLog: (
  obj: CreateFleetInput
) => any;
export declare const FleetAttributesFilterSensitiveLog: (
  obj: FleetAttributes
) => any;
export declare const CreateFleetOutputFilterSensitiveLog: (
  obj: CreateFleetOutput
) => any;
export declare const GameSessionFilterSensitiveLog: (obj: GameSession) => any;
export declare const CreateGameSessionOutputFilterSensitiveLog: (
  obj: CreateGameSessionOutput
) => any;
export declare const CreatePlayerSessionInputFilterSensitiveLog: (
  obj: CreatePlayerSessionInput
) => any;
export declare const PlayerSessionFilterSensitiveLog: (
  obj: PlayerSession
) => any;
export declare const CreatePlayerSessionOutputFilterSensitiveLog: (
  obj: CreatePlayerSessionOutput
) => any;
export declare const CreatePlayerSessionsInputFilterSensitiveLog: (
  obj: CreatePlayerSessionsInput
) => any;
export declare const CreatePlayerSessionsOutputFilterSensitiveLog: (
  obj: CreatePlayerSessionsOutput
) => any;
export declare const DescribeComputeOutputFilterSensitiveLog: (
  obj: DescribeComputeOutput
) => any;
export declare const DescribeContainerGroupDefinitionOutputFilterSensitiveLog: (
  obj: DescribeContainerGroupDefinitionOutput
) => any;
export declare const DescribeFleetAttributesOutputFilterSensitiveLog: (
  obj: DescribeFleetAttributesOutput
) => any;
export declare const DescribeFleetPortSettingsOutputFilterSensitiveLog: (
  obj: DescribeFleetPortSettingsOutput
) => any;
export declare const GameSessionDetailFilterSensitiveLog: (
  obj: GameSessionDetail
) => any;
export declare const DescribeGameSessionDetailsOutputFilterSensitiveLog: (
  obj: DescribeGameSessionDetailsOutput
) => any;
export declare const PlacedPlayerSessionFilterSensitiveLog: (
  obj: PlacedPlayerSession
) => any;
export declare const PlayerLatencyFilterSensitiveLog: (
  obj: PlayerLatency
) => any;
export declare const GameSessionPlacementFilterSensitiveLog: (
  obj: GameSessionPlacement
) => any;
export declare const DescribeGameSessionPlacementOutputFilterSensitiveLog: (
  obj: DescribeGameSessionPlacementOutput
) => any;
export declare const DescribeGameSessionsOutputFilterSensitiveLog: (
  obj: DescribeGameSessionsOutput
) => any;
export declare const InstanceFilterSensitiveLog: (obj: Instance) => any;
export declare const DescribeInstancesOutputFilterSensitiveLog: (
  obj: DescribeInstancesOutput
) => any;
export declare const MatchedPlayerSessionFilterSensitiveLog: (
  obj: MatchedPlayerSession
) => any;
export declare const GameSessionConnectionInfoFilterSensitiveLog: (
  obj: GameSessionConnectionInfo
) => any;
export declare const PlayerFilterSensitiveLog: (obj: Player) => any;
export declare const MatchmakingTicketFilterSensitiveLog: (
  obj: MatchmakingTicket
) => any;
export declare const DescribeMatchmakingOutputFilterSensitiveLog: (
  obj: DescribeMatchmakingOutput
) => any;
export declare const DescribePlayerSessionsInputFilterSensitiveLog: (
  obj: DescribePlayerSessionsInput
) => any;
export declare const DescribePlayerSessionsOutputFilterSensitiveLog: (
  obj: DescribePlayerSessionsOutput
) => any;
export declare const DesiredPlayerSessionFilterSensitiveLog: (
  obj: DesiredPlayerSession
) => any;
export declare const GetComputeAccessOutputFilterSensitiveLog: (
  obj: GetComputeAccessOutput
) => any;
export declare const InstanceCredentialsFilterSensitiveLog: (
  obj: InstanceCredentials
) => any;
export declare const InstanceAccessFilterSensitiveLog: (
  obj: InstanceAccess
) => any;
export declare const GetInstanceAccessOutputFilterSensitiveLog: (
  obj: GetInstanceAccessOutput
) => any;
export declare const ListComputeOutputFilterSensitiveLog: (
  obj: ListComputeOutput
) => any;
export declare const ListContainerGroupDefinitionsOutputFilterSensitiveLog: (
  obj: ListContainerGroupDefinitionsOutput
) => any;
export declare const RegisterComputeInputFilterSensitiveLog: (
  obj: RegisterComputeInput
) => any;
export declare const RegisterComputeOutputFilterSensitiveLog: (
  obj: RegisterComputeOutput
) => any;
export declare const RequestUploadCredentialsOutputFilterSensitiveLog: (
  obj: RequestUploadCredentialsOutput
) => any;
