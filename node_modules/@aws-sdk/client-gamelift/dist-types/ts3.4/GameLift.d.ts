import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  AcceptMatchCommandInput,
  AcceptMatchCommandOutput,
} from "./commands/AcceptMatchCommand";
import {
  ClaimGameServerCommandInput,
  ClaimGameServerCommandOutput,
} from "./commands/ClaimGameServerCommand";
import {
  CreateAliasCommandInput,
  CreateAliasCommandOutput,
} from "./commands/CreateAliasCommand";
import {
  CreateBuildCommandInput,
  CreateBuildCommandOutput,
} from "./commands/CreateBuildCommand";
import {
  CreateContainerGroupDefinitionCommandInput,
  CreateContainerGroupDefinitionCommandOutput,
} from "./commands/CreateContainerGroupDefinitionCommand";
import {
  CreateFleetCommandInput,
  CreateFleetCommandOutput,
} from "./commands/CreateFleetCommand";
import {
  CreateFleetLocationsCommandInput,
  CreateFleetLocationsCommandOutput,
} from "./commands/CreateFleetLocationsCommand";
import {
  CreateGameServerGroupCommandInput,
  CreateGameServerGroupCommandOutput,
} from "./commands/CreateGameServerGroupCommand";
import {
  CreateGameSessionCommandInput,
  CreateGameSessionCommandOutput,
} from "./commands/CreateGameSessionCommand";
import {
  CreateGameSessionQueueCommandInput,
  CreateGameSessionQueueCommandOutput,
} from "./commands/CreateGameSessionQueueCommand";
import {
  CreateLocationCommandInput,
  CreateLocationCommandOutput,
} from "./commands/CreateLocationCommand";
import {
  CreateMatchmakingConfigurationCommandInput,
  CreateMatchmakingConfigurationCommandOutput,
} from "./commands/CreateMatchmakingConfigurationCommand";
import {
  CreateMatchmakingRuleSetCommandInput,
  CreateMatchmakingRuleSetCommandOutput,
} from "./commands/CreateMatchmakingRuleSetCommand";
import {
  CreatePlayerSessionCommandInput,
  CreatePlayerSessionCommandOutput,
} from "./commands/CreatePlayerSessionCommand";
import {
  CreatePlayerSessionsCommandInput,
  CreatePlayerSessionsCommandOutput,
} from "./commands/CreatePlayerSessionsCommand";
import {
  CreateScriptCommandInput,
  CreateScriptCommandOutput,
} from "./commands/CreateScriptCommand";
import {
  CreateVpcPeeringAuthorizationCommandInput,
  CreateVpcPeeringAuthorizationCommandOutput,
} from "./commands/CreateVpcPeeringAuthorizationCommand";
import {
  CreateVpcPeeringConnectionCommandInput,
  CreateVpcPeeringConnectionCommandOutput,
} from "./commands/CreateVpcPeeringConnectionCommand";
import {
  DeleteAliasCommandInput,
  DeleteAliasCommandOutput,
} from "./commands/DeleteAliasCommand";
import {
  DeleteBuildCommandInput,
  DeleteBuildCommandOutput,
} from "./commands/DeleteBuildCommand";
import {
  DeleteContainerGroupDefinitionCommandInput,
  DeleteContainerGroupDefinitionCommandOutput,
} from "./commands/DeleteContainerGroupDefinitionCommand";
import {
  DeleteFleetCommandInput,
  DeleteFleetCommandOutput,
} from "./commands/DeleteFleetCommand";
import {
  DeleteFleetLocationsCommandInput,
  DeleteFleetLocationsCommandOutput,
} from "./commands/DeleteFleetLocationsCommand";
import {
  DeleteGameServerGroupCommandInput,
  DeleteGameServerGroupCommandOutput,
} from "./commands/DeleteGameServerGroupCommand";
import {
  DeleteGameSessionQueueCommandInput,
  DeleteGameSessionQueueCommandOutput,
} from "./commands/DeleteGameSessionQueueCommand";
import {
  DeleteLocationCommandInput,
  DeleteLocationCommandOutput,
} from "./commands/DeleteLocationCommand";
import {
  DeleteMatchmakingConfigurationCommandInput,
  DeleteMatchmakingConfigurationCommandOutput,
} from "./commands/DeleteMatchmakingConfigurationCommand";
import {
  DeleteMatchmakingRuleSetCommandInput,
  DeleteMatchmakingRuleSetCommandOutput,
} from "./commands/DeleteMatchmakingRuleSetCommand";
import {
  DeleteScalingPolicyCommandInput,
  DeleteScalingPolicyCommandOutput,
} from "./commands/DeleteScalingPolicyCommand";
import {
  DeleteScriptCommandInput,
  DeleteScriptCommandOutput,
} from "./commands/DeleteScriptCommand";
import {
  DeleteVpcPeeringAuthorizationCommandInput,
  DeleteVpcPeeringAuthorizationCommandOutput,
} from "./commands/DeleteVpcPeeringAuthorizationCommand";
import {
  DeleteVpcPeeringConnectionCommandInput,
  DeleteVpcPeeringConnectionCommandOutput,
} from "./commands/DeleteVpcPeeringConnectionCommand";
import {
  DeregisterComputeCommandInput,
  DeregisterComputeCommandOutput,
} from "./commands/DeregisterComputeCommand";
import {
  DeregisterGameServerCommandInput,
  DeregisterGameServerCommandOutput,
} from "./commands/DeregisterGameServerCommand";
import {
  DescribeAliasCommandInput,
  DescribeAliasCommandOutput,
} from "./commands/DescribeAliasCommand";
import {
  DescribeBuildCommandInput,
  DescribeBuildCommandOutput,
} from "./commands/DescribeBuildCommand";
import {
  DescribeComputeCommandInput,
  DescribeComputeCommandOutput,
} from "./commands/DescribeComputeCommand";
import {
  DescribeContainerGroupDefinitionCommandInput,
  DescribeContainerGroupDefinitionCommandOutput,
} from "./commands/DescribeContainerGroupDefinitionCommand";
import {
  DescribeEC2InstanceLimitsCommandInput,
  DescribeEC2InstanceLimitsCommandOutput,
} from "./commands/DescribeEC2InstanceLimitsCommand";
import {
  DescribeFleetAttributesCommandInput,
  DescribeFleetAttributesCommandOutput,
} from "./commands/DescribeFleetAttributesCommand";
import {
  DescribeFleetCapacityCommandInput,
  DescribeFleetCapacityCommandOutput,
} from "./commands/DescribeFleetCapacityCommand";
import {
  DescribeFleetEventsCommandInput,
  DescribeFleetEventsCommandOutput,
} from "./commands/DescribeFleetEventsCommand";
import {
  DescribeFleetLocationAttributesCommandInput,
  DescribeFleetLocationAttributesCommandOutput,
} from "./commands/DescribeFleetLocationAttributesCommand";
import {
  DescribeFleetLocationCapacityCommandInput,
  DescribeFleetLocationCapacityCommandOutput,
} from "./commands/DescribeFleetLocationCapacityCommand";
import {
  DescribeFleetLocationUtilizationCommandInput,
  DescribeFleetLocationUtilizationCommandOutput,
} from "./commands/DescribeFleetLocationUtilizationCommand";
import {
  DescribeFleetPortSettingsCommandInput,
  DescribeFleetPortSettingsCommandOutput,
} from "./commands/DescribeFleetPortSettingsCommand";
import {
  DescribeFleetUtilizationCommandInput,
  DescribeFleetUtilizationCommandOutput,
} from "./commands/DescribeFleetUtilizationCommand";
import {
  DescribeGameServerCommandInput,
  DescribeGameServerCommandOutput,
} from "./commands/DescribeGameServerCommand";
import {
  DescribeGameServerGroupCommandInput,
  DescribeGameServerGroupCommandOutput,
} from "./commands/DescribeGameServerGroupCommand";
import {
  DescribeGameServerInstancesCommandInput,
  DescribeGameServerInstancesCommandOutput,
} from "./commands/DescribeGameServerInstancesCommand";
import {
  DescribeGameSessionDetailsCommandInput,
  DescribeGameSessionDetailsCommandOutput,
} from "./commands/DescribeGameSessionDetailsCommand";
import {
  DescribeGameSessionPlacementCommandInput,
  DescribeGameSessionPlacementCommandOutput,
} from "./commands/DescribeGameSessionPlacementCommand";
import {
  DescribeGameSessionQueuesCommandInput,
  DescribeGameSessionQueuesCommandOutput,
} from "./commands/DescribeGameSessionQueuesCommand";
import {
  DescribeGameSessionsCommandInput,
  DescribeGameSessionsCommandOutput,
} from "./commands/DescribeGameSessionsCommand";
import {
  DescribeInstancesCommandInput,
  DescribeInstancesCommandOutput,
} from "./commands/DescribeInstancesCommand";
import {
  DescribeMatchmakingCommandInput,
  DescribeMatchmakingCommandOutput,
} from "./commands/DescribeMatchmakingCommand";
import {
  DescribeMatchmakingConfigurationsCommandInput,
  DescribeMatchmakingConfigurationsCommandOutput,
} from "./commands/DescribeMatchmakingConfigurationsCommand";
import {
  DescribeMatchmakingRuleSetsCommandInput,
  DescribeMatchmakingRuleSetsCommandOutput,
} from "./commands/DescribeMatchmakingRuleSetsCommand";
import {
  DescribePlayerSessionsCommandInput,
  DescribePlayerSessionsCommandOutput,
} from "./commands/DescribePlayerSessionsCommand";
import {
  DescribeRuntimeConfigurationCommandInput,
  DescribeRuntimeConfigurationCommandOutput,
} from "./commands/DescribeRuntimeConfigurationCommand";
import {
  DescribeScalingPoliciesCommandInput,
  DescribeScalingPoliciesCommandOutput,
} from "./commands/DescribeScalingPoliciesCommand";
import {
  DescribeScriptCommandInput,
  DescribeScriptCommandOutput,
} from "./commands/DescribeScriptCommand";
import {
  DescribeVpcPeeringAuthorizationsCommandInput,
  DescribeVpcPeeringAuthorizationsCommandOutput,
} from "./commands/DescribeVpcPeeringAuthorizationsCommand";
import {
  DescribeVpcPeeringConnectionsCommandInput,
  DescribeVpcPeeringConnectionsCommandOutput,
} from "./commands/DescribeVpcPeeringConnectionsCommand";
import {
  GetComputeAccessCommandInput,
  GetComputeAccessCommandOutput,
} from "./commands/GetComputeAccessCommand";
import {
  GetComputeAuthTokenCommandInput,
  GetComputeAuthTokenCommandOutput,
} from "./commands/GetComputeAuthTokenCommand";
import {
  GetGameSessionLogUrlCommandInput,
  GetGameSessionLogUrlCommandOutput,
} from "./commands/GetGameSessionLogUrlCommand";
import {
  GetInstanceAccessCommandInput,
  GetInstanceAccessCommandOutput,
} from "./commands/GetInstanceAccessCommand";
import {
  ListAliasesCommandInput,
  ListAliasesCommandOutput,
} from "./commands/ListAliasesCommand";
import {
  ListBuildsCommandInput,
  ListBuildsCommandOutput,
} from "./commands/ListBuildsCommand";
import {
  ListComputeCommandInput,
  ListComputeCommandOutput,
} from "./commands/ListComputeCommand";
import {
  ListContainerGroupDefinitionsCommandInput,
  ListContainerGroupDefinitionsCommandOutput,
} from "./commands/ListContainerGroupDefinitionsCommand";
import {
  ListFleetsCommandInput,
  ListFleetsCommandOutput,
} from "./commands/ListFleetsCommand";
import {
  ListGameServerGroupsCommandInput,
  ListGameServerGroupsCommandOutput,
} from "./commands/ListGameServerGroupsCommand";
import {
  ListGameServersCommandInput,
  ListGameServersCommandOutput,
} from "./commands/ListGameServersCommand";
import {
  ListLocationsCommandInput,
  ListLocationsCommandOutput,
} from "./commands/ListLocationsCommand";
import {
  ListScriptsCommandInput,
  ListScriptsCommandOutput,
} from "./commands/ListScriptsCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  PutScalingPolicyCommandInput,
  PutScalingPolicyCommandOutput,
} from "./commands/PutScalingPolicyCommand";
import {
  RegisterComputeCommandInput,
  RegisterComputeCommandOutput,
} from "./commands/RegisterComputeCommand";
import {
  RegisterGameServerCommandInput,
  RegisterGameServerCommandOutput,
} from "./commands/RegisterGameServerCommand";
import {
  RequestUploadCredentialsCommandInput,
  RequestUploadCredentialsCommandOutput,
} from "./commands/RequestUploadCredentialsCommand";
import {
  ResolveAliasCommandInput,
  ResolveAliasCommandOutput,
} from "./commands/ResolveAliasCommand";
import {
  ResumeGameServerGroupCommandInput,
  ResumeGameServerGroupCommandOutput,
} from "./commands/ResumeGameServerGroupCommand";
import {
  SearchGameSessionsCommandInput,
  SearchGameSessionsCommandOutput,
} from "./commands/SearchGameSessionsCommand";
import {
  StartFleetActionsCommandInput,
  StartFleetActionsCommandOutput,
} from "./commands/StartFleetActionsCommand";
import {
  StartGameSessionPlacementCommandInput,
  StartGameSessionPlacementCommandOutput,
} from "./commands/StartGameSessionPlacementCommand";
import {
  StartMatchBackfillCommandInput,
  StartMatchBackfillCommandOutput,
} from "./commands/StartMatchBackfillCommand";
import {
  StartMatchmakingCommandInput,
  StartMatchmakingCommandOutput,
} from "./commands/StartMatchmakingCommand";
import {
  StopFleetActionsCommandInput,
  StopFleetActionsCommandOutput,
} from "./commands/StopFleetActionsCommand";
import {
  StopGameSessionPlacementCommandInput,
  StopGameSessionPlacementCommandOutput,
} from "./commands/StopGameSessionPlacementCommand";
import {
  StopMatchmakingCommandInput,
  StopMatchmakingCommandOutput,
} from "./commands/StopMatchmakingCommand";
import {
  SuspendGameServerGroupCommandInput,
  SuspendGameServerGroupCommandOutput,
} from "./commands/SuspendGameServerGroupCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import {
  UpdateAliasCommandInput,
  UpdateAliasCommandOutput,
} from "./commands/UpdateAliasCommand";
import {
  UpdateBuildCommandInput,
  UpdateBuildCommandOutput,
} from "./commands/UpdateBuildCommand";
import {
  UpdateFleetAttributesCommandInput,
  UpdateFleetAttributesCommandOutput,
} from "./commands/UpdateFleetAttributesCommand";
import {
  UpdateFleetCapacityCommandInput,
  UpdateFleetCapacityCommandOutput,
} from "./commands/UpdateFleetCapacityCommand";
import {
  UpdateFleetPortSettingsCommandInput,
  UpdateFleetPortSettingsCommandOutput,
} from "./commands/UpdateFleetPortSettingsCommand";
import {
  UpdateGameServerCommandInput,
  UpdateGameServerCommandOutput,
} from "./commands/UpdateGameServerCommand";
import {
  UpdateGameServerGroupCommandInput,
  UpdateGameServerGroupCommandOutput,
} from "./commands/UpdateGameServerGroupCommand";
import {
  UpdateGameSessionCommandInput,
  UpdateGameSessionCommandOutput,
} from "./commands/UpdateGameSessionCommand";
import {
  UpdateGameSessionQueueCommandInput,
  UpdateGameSessionQueueCommandOutput,
} from "./commands/UpdateGameSessionQueueCommand";
import {
  UpdateMatchmakingConfigurationCommandInput,
  UpdateMatchmakingConfigurationCommandOutput,
} from "./commands/UpdateMatchmakingConfigurationCommand";
import {
  UpdateRuntimeConfigurationCommandInput,
  UpdateRuntimeConfigurationCommandOutput,
} from "./commands/UpdateRuntimeConfigurationCommand";
import {
  UpdateScriptCommandInput,
  UpdateScriptCommandOutput,
} from "./commands/UpdateScriptCommand";
import {
  ValidateMatchmakingRuleSetCommandInput,
  ValidateMatchmakingRuleSetCommandOutput,
} from "./commands/ValidateMatchmakingRuleSetCommand";
import { GameLiftClient } from "./GameLiftClient";
export interface GameLift {
  acceptMatch(
    args: AcceptMatchCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<AcceptMatchCommandOutput>;
  acceptMatch(
    args: AcceptMatchCommandInput,
    cb: (err: any, data?: AcceptMatchCommandOutput) => void
  ): void;
  acceptMatch(
    args: AcceptMatchCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: AcceptMatchCommandOutput) => void
  ): void;
  claimGameServer(
    args: ClaimGameServerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ClaimGameServerCommandOutput>;
  claimGameServer(
    args: ClaimGameServerCommandInput,
    cb: (err: any, data?: ClaimGameServerCommandOutput) => void
  ): void;
  claimGameServer(
    args: ClaimGameServerCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ClaimGameServerCommandOutput) => void
  ): void;
  createAlias(
    args: CreateAliasCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateAliasCommandOutput>;
  createAlias(
    args: CreateAliasCommandInput,
    cb: (err: any, data?: CreateAliasCommandOutput) => void
  ): void;
  createAlias(
    args: CreateAliasCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateAliasCommandOutput) => void
  ): void;
  createBuild(): Promise<CreateBuildCommandOutput>;
  createBuild(
    args: CreateBuildCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateBuildCommandOutput>;
  createBuild(
    args: CreateBuildCommandInput,
    cb: (err: any, data?: CreateBuildCommandOutput) => void
  ): void;
  createBuild(
    args: CreateBuildCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateBuildCommandOutput) => void
  ): void;
  createContainerGroupDefinition(
    args: CreateContainerGroupDefinitionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateContainerGroupDefinitionCommandOutput>;
  createContainerGroupDefinition(
    args: CreateContainerGroupDefinitionCommandInput,
    cb: (err: any, data?: CreateContainerGroupDefinitionCommandOutput) => void
  ): void;
  createContainerGroupDefinition(
    args: CreateContainerGroupDefinitionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateContainerGroupDefinitionCommandOutput) => void
  ): void;
  createFleet(
    args: CreateFleetCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateFleetCommandOutput>;
  createFleet(
    args: CreateFleetCommandInput,
    cb: (err: any, data?: CreateFleetCommandOutput) => void
  ): void;
  createFleet(
    args: CreateFleetCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateFleetCommandOutput) => void
  ): void;
  createFleetLocations(
    args: CreateFleetLocationsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateFleetLocationsCommandOutput>;
  createFleetLocations(
    args: CreateFleetLocationsCommandInput,
    cb: (err: any, data?: CreateFleetLocationsCommandOutput) => void
  ): void;
  createFleetLocations(
    args: CreateFleetLocationsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateFleetLocationsCommandOutput) => void
  ): void;
  createGameServerGroup(
    args: CreateGameServerGroupCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateGameServerGroupCommandOutput>;
  createGameServerGroup(
    args: CreateGameServerGroupCommandInput,
    cb: (err: any, data?: CreateGameServerGroupCommandOutput) => void
  ): void;
  createGameServerGroup(
    args: CreateGameServerGroupCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateGameServerGroupCommandOutput) => void
  ): void;
  createGameSession(
    args: CreateGameSessionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateGameSessionCommandOutput>;
  createGameSession(
    args: CreateGameSessionCommandInput,
    cb: (err: any, data?: CreateGameSessionCommandOutput) => void
  ): void;
  createGameSession(
    args: CreateGameSessionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateGameSessionCommandOutput) => void
  ): void;
  createGameSessionQueue(
    args: CreateGameSessionQueueCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateGameSessionQueueCommandOutput>;
  createGameSessionQueue(
    args: CreateGameSessionQueueCommandInput,
    cb: (err: any, data?: CreateGameSessionQueueCommandOutput) => void
  ): void;
  createGameSessionQueue(
    args: CreateGameSessionQueueCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateGameSessionQueueCommandOutput) => void
  ): void;
  createLocation(
    args: CreateLocationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateLocationCommandOutput>;
  createLocation(
    args: CreateLocationCommandInput,
    cb: (err: any, data?: CreateLocationCommandOutput) => void
  ): void;
  createLocation(
    args: CreateLocationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateLocationCommandOutput) => void
  ): void;
  createMatchmakingConfiguration(
    args: CreateMatchmakingConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateMatchmakingConfigurationCommandOutput>;
  createMatchmakingConfiguration(
    args: CreateMatchmakingConfigurationCommandInput,
    cb: (err: any, data?: CreateMatchmakingConfigurationCommandOutput) => void
  ): void;
  createMatchmakingConfiguration(
    args: CreateMatchmakingConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateMatchmakingConfigurationCommandOutput) => void
  ): void;
  createMatchmakingRuleSet(
    args: CreateMatchmakingRuleSetCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateMatchmakingRuleSetCommandOutput>;
  createMatchmakingRuleSet(
    args: CreateMatchmakingRuleSetCommandInput,
    cb: (err: any, data?: CreateMatchmakingRuleSetCommandOutput) => void
  ): void;
  createMatchmakingRuleSet(
    args: CreateMatchmakingRuleSetCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateMatchmakingRuleSetCommandOutput) => void
  ): void;
  createPlayerSession(
    args: CreatePlayerSessionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreatePlayerSessionCommandOutput>;
  createPlayerSession(
    args: CreatePlayerSessionCommandInput,
    cb: (err: any, data?: CreatePlayerSessionCommandOutput) => void
  ): void;
  createPlayerSession(
    args: CreatePlayerSessionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreatePlayerSessionCommandOutput) => void
  ): void;
  createPlayerSessions(
    args: CreatePlayerSessionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreatePlayerSessionsCommandOutput>;
  createPlayerSessions(
    args: CreatePlayerSessionsCommandInput,
    cb: (err: any, data?: CreatePlayerSessionsCommandOutput) => void
  ): void;
  createPlayerSessions(
    args: CreatePlayerSessionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreatePlayerSessionsCommandOutput) => void
  ): void;
  createScript(): Promise<CreateScriptCommandOutput>;
  createScript(
    args: CreateScriptCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateScriptCommandOutput>;
  createScript(
    args: CreateScriptCommandInput,
    cb: (err: any, data?: CreateScriptCommandOutput) => void
  ): void;
  createScript(
    args: CreateScriptCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateScriptCommandOutput) => void
  ): void;
  createVpcPeeringAuthorization(
    args: CreateVpcPeeringAuthorizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateVpcPeeringAuthorizationCommandOutput>;
  createVpcPeeringAuthorization(
    args: CreateVpcPeeringAuthorizationCommandInput,
    cb: (err: any, data?: CreateVpcPeeringAuthorizationCommandOutput) => void
  ): void;
  createVpcPeeringAuthorization(
    args: CreateVpcPeeringAuthorizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateVpcPeeringAuthorizationCommandOutput) => void
  ): void;
  createVpcPeeringConnection(
    args: CreateVpcPeeringConnectionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateVpcPeeringConnectionCommandOutput>;
  createVpcPeeringConnection(
    args: CreateVpcPeeringConnectionCommandInput,
    cb: (err: any, data?: CreateVpcPeeringConnectionCommandOutput) => void
  ): void;
  createVpcPeeringConnection(
    args: CreateVpcPeeringConnectionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateVpcPeeringConnectionCommandOutput) => void
  ): void;
  deleteAlias(
    args: DeleteAliasCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteAliasCommandOutput>;
  deleteAlias(
    args: DeleteAliasCommandInput,
    cb: (err: any, data?: DeleteAliasCommandOutput) => void
  ): void;
  deleteAlias(
    args: DeleteAliasCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteAliasCommandOutput) => void
  ): void;
  deleteBuild(
    args: DeleteBuildCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteBuildCommandOutput>;
  deleteBuild(
    args: DeleteBuildCommandInput,
    cb: (err: any, data?: DeleteBuildCommandOutput) => void
  ): void;
  deleteBuild(
    args: DeleteBuildCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteBuildCommandOutput) => void
  ): void;
  deleteContainerGroupDefinition(
    args: DeleteContainerGroupDefinitionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteContainerGroupDefinitionCommandOutput>;
  deleteContainerGroupDefinition(
    args: DeleteContainerGroupDefinitionCommandInput,
    cb: (err: any, data?: DeleteContainerGroupDefinitionCommandOutput) => void
  ): void;
  deleteContainerGroupDefinition(
    args: DeleteContainerGroupDefinitionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteContainerGroupDefinitionCommandOutput) => void
  ): void;
  deleteFleet(
    args: DeleteFleetCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteFleetCommandOutput>;
  deleteFleet(
    args: DeleteFleetCommandInput,
    cb: (err: any, data?: DeleteFleetCommandOutput) => void
  ): void;
  deleteFleet(
    args: DeleteFleetCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteFleetCommandOutput) => void
  ): void;
  deleteFleetLocations(
    args: DeleteFleetLocationsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteFleetLocationsCommandOutput>;
  deleteFleetLocations(
    args: DeleteFleetLocationsCommandInput,
    cb: (err: any, data?: DeleteFleetLocationsCommandOutput) => void
  ): void;
  deleteFleetLocations(
    args: DeleteFleetLocationsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteFleetLocationsCommandOutput) => void
  ): void;
  deleteGameServerGroup(
    args: DeleteGameServerGroupCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteGameServerGroupCommandOutput>;
  deleteGameServerGroup(
    args: DeleteGameServerGroupCommandInput,
    cb: (err: any, data?: DeleteGameServerGroupCommandOutput) => void
  ): void;
  deleteGameServerGroup(
    args: DeleteGameServerGroupCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteGameServerGroupCommandOutput) => void
  ): void;
  deleteGameSessionQueue(
    args: DeleteGameSessionQueueCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteGameSessionQueueCommandOutput>;
  deleteGameSessionQueue(
    args: DeleteGameSessionQueueCommandInput,
    cb: (err: any, data?: DeleteGameSessionQueueCommandOutput) => void
  ): void;
  deleteGameSessionQueue(
    args: DeleteGameSessionQueueCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteGameSessionQueueCommandOutput) => void
  ): void;
  deleteLocation(
    args: DeleteLocationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteLocationCommandOutput>;
  deleteLocation(
    args: DeleteLocationCommandInput,
    cb: (err: any, data?: DeleteLocationCommandOutput) => void
  ): void;
  deleteLocation(
    args: DeleteLocationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteLocationCommandOutput) => void
  ): void;
  deleteMatchmakingConfiguration(
    args: DeleteMatchmakingConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteMatchmakingConfigurationCommandOutput>;
  deleteMatchmakingConfiguration(
    args: DeleteMatchmakingConfigurationCommandInput,
    cb: (err: any, data?: DeleteMatchmakingConfigurationCommandOutput) => void
  ): void;
  deleteMatchmakingConfiguration(
    args: DeleteMatchmakingConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteMatchmakingConfigurationCommandOutput) => void
  ): void;
  deleteMatchmakingRuleSet(
    args: DeleteMatchmakingRuleSetCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteMatchmakingRuleSetCommandOutput>;
  deleteMatchmakingRuleSet(
    args: DeleteMatchmakingRuleSetCommandInput,
    cb: (err: any, data?: DeleteMatchmakingRuleSetCommandOutput) => void
  ): void;
  deleteMatchmakingRuleSet(
    args: DeleteMatchmakingRuleSetCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteMatchmakingRuleSetCommandOutput) => void
  ): void;
  deleteScalingPolicy(
    args: DeleteScalingPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteScalingPolicyCommandOutput>;
  deleteScalingPolicy(
    args: DeleteScalingPolicyCommandInput,
    cb: (err: any, data?: DeleteScalingPolicyCommandOutput) => void
  ): void;
  deleteScalingPolicy(
    args: DeleteScalingPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteScalingPolicyCommandOutput) => void
  ): void;
  deleteScript(
    args: DeleteScriptCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteScriptCommandOutput>;
  deleteScript(
    args: DeleteScriptCommandInput,
    cb: (err: any, data?: DeleteScriptCommandOutput) => void
  ): void;
  deleteScript(
    args: DeleteScriptCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteScriptCommandOutput) => void
  ): void;
  deleteVpcPeeringAuthorization(
    args: DeleteVpcPeeringAuthorizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteVpcPeeringAuthorizationCommandOutput>;
  deleteVpcPeeringAuthorization(
    args: DeleteVpcPeeringAuthorizationCommandInput,
    cb: (err: any, data?: DeleteVpcPeeringAuthorizationCommandOutput) => void
  ): void;
  deleteVpcPeeringAuthorization(
    args: DeleteVpcPeeringAuthorizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteVpcPeeringAuthorizationCommandOutput) => void
  ): void;
  deleteVpcPeeringConnection(
    args: DeleteVpcPeeringConnectionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteVpcPeeringConnectionCommandOutput>;
  deleteVpcPeeringConnection(
    args: DeleteVpcPeeringConnectionCommandInput,
    cb: (err: any, data?: DeleteVpcPeeringConnectionCommandOutput) => void
  ): void;
  deleteVpcPeeringConnection(
    args: DeleteVpcPeeringConnectionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteVpcPeeringConnectionCommandOutput) => void
  ): void;
  deregisterCompute(
    args: DeregisterComputeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeregisterComputeCommandOutput>;
  deregisterCompute(
    args: DeregisterComputeCommandInput,
    cb: (err: any, data?: DeregisterComputeCommandOutput) => void
  ): void;
  deregisterCompute(
    args: DeregisterComputeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeregisterComputeCommandOutput) => void
  ): void;
  deregisterGameServer(
    args: DeregisterGameServerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeregisterGameServerCommandOutput>;
  deregisterGameServer(
    args: DeregisterGameServerCommandInput,
    cb: (err: any, data?: DeregisterGameServerCommandOutput) => void
  ): void;
  deregisterGameServer(
    args: DeregisterGameServerCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeregisterGameServerCommandOutput) => void
  ): void;
  describeAlias(
    args: DescribeAliasCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeAliasCommandOutput>;
  describeAlias(
    args: DescribeAliasCommandInput,
    cb: (err: any, data?: DescribeAliasCommandOutput) => void
  ): void;
  describeAlias(
    args: DescribeAliasCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeAliasCommandOutput) => void
  ): void;
  describeBuild(
    args: DescribeBuildCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeBuildCommandOutput>;
  describeBuild(
    args: DescribeBuildCommandInput,
    cb: (err: any, data?: DescribeBuildCommandOutput) => void
  ): void;
  describeBuild(
    args: DescribeBuildCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeBuildCommandOutput) => void
  ): void;
  describeCompute(
    args: DescribeComputeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeComputeCommandOutput>;
  describeCompute(
    args: DescribeComputeCommandInput,
    cb: (err: any, data?: DescribeComputeCommandOutput) => void
  ): void;
  describeCompute(
    args: DescribeComputeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeComputeCommandOutput) => void
  ): void;
  describeContainerGroupDefinition(
    args: DescribeContainerGroupDefinitionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeContainerGroupDefinitionCommandOutput>;
  describeContainerGroupDefinition(
    args: DescribeContainerGroupDefinitionCommandInput,
    cb: (err: any, data?: DescribeContainerGroupDefinitionCommandOutput) => void
  ): void;
  describeContainerGroupDefinition(
    args: DescribeContainerGroupDefinitionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeContainerGroupDefinitionCommandOutput) => void
  ): void;
  describeEC2InstanceLimits(): Promise<DescribeEC2InstanceLimitsCommandOutput>;
  describeEC2InstanceLimits(
    args: DescribeEC2InstanceLimitsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeEC2InstanceLimitsCommandOutput>;
  describeEC2InstanceLimits(
    args: DescribeEC2InstanceLimitsCommandInput,
    cb: (err: any, data?: DescribeEC2InstanceLimitsCommandOutput) => void
  ): void;
  describeEC2InstanceLimits(
    args: DescribeEC2InstanceLimitsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeEC2InstanceLimitsCommandOutput) => void
  ): void;
  describeFleetAttributes(): Promise<DescribeFleetAttributesCommandOutput>;
  describeFleetAttributes(
    args: DescribeFleetAttributesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeFleetAttributesCommandOutput>;
  describeFleetAttributes(
    args: DescribeFleetAttributesCommandInput,
    cb: (err: any, data?: DescribeFleetAttributesCommandOutput) => void
  ): void;
  describeFleetAttributes(
    args: DescribeFleetAttributesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeFleetAttributesCommandOutput) => void
  ): void;
  describeFleetCapacity(): Promise<DescribeFleetCapacityCommandOutput>;
  describeFleetCapacity(
    args: DescribeFleetCapacityCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeFleetCapacityCommandOutput>;
  describeFleetCapacity(
    args: DescribeFleetCapacityCommandInput,
    cb: (err: any, data?: DescribeFleetCapacityCommandOutput) => void
  ): void;
  describeFleetCapacity(
    args: DescribeFleetCapacityCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeFleetCapacityCommandOutput) => void
  ): void;
  describeFleetEvents(
    args: DescribeFleetEventsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeFleetEventsCommandOutput>;
  describeFleetEvents(
    args: DescribeFleetEventsCommandInput,
    cb: (err: any, data?: DescribeFleetEventsCommandOutput) => void
  ): void;
  describeFleetEvents(
    args: DescribeFleetEventsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeFleetEventsCommandOutput) => void
  ): void;
  describeFleetLocationAttributes(
    args: DescribeFleetLocationAttributesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeFleetLocationAttributesCommandOutput>;
  describeFleetLocationAttributes(
    args: DescribeFleetLocationAttributesCommandInput,
    cb: (err: any, data?: DescribeFleetLocationAttributesCommandOutput) => void
  ): void;
  describeFleetLocationAttributes(
    args: DescribeFleetLocationAttributesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeFleetLocationAttributesCommandOutput) => void
  ): void;
  describeFleetLocationCapacity(
    args: DescribeFleetLocationCapacityCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeFleetLocationCapacityCommandOutput>;
  describeFleetLocationCapacity(
    args: DescribeFleetLocationCapacityCommandInput,
    cb: (err: any, data?: DescribeFleetLocationCapacityCommandOutput) => void
  ): void;
  describeFleetLocationCapacity(
    args: DescribeFleetLocationCapacityCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeFleetLocationCapacityCommandOutput) => void
  ): void;
  describeFleetLocationUtilization(
    args: DescribeFleetLocationUtilizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeFleetLocationUtilizationCommandOutput>;
  describeFleetLocationUtilization(
    args: DescribeFleetLocationUtilizationCommandInput,
    cb: (err: any, data?: DescribeFleetLocationUtilizationCommandOutput) => void
  ): void;
  describeFleetLocationUtilization(
    args: DescribeFleetLocationUtilizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeFleetLocationUtilizationCommandOutput) => void
  ): void;
  describeFleetPortSettings(
    args: DescribeFleetPortSettingsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeFleetPortSettingsCommandOutput>;
  describeFleetPortSettings(
    args: DescribeFleetPortSettingsCommandInput,
    cb: (err: any, data?: DescribeFleetPortSettingsCommandOutput) => void
  ): void;
  describeFleetPortSettings(
    args: DescribeFleetPortSettingsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeFleetPortSettingsCommandOutput) => void
  ): void;
  describeFleetUtilization(): Promise<DescribeFleetUtilizationCommandOutput>;
  describeFleetUtilization(
    args: DescribeFleetUtilizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeFleetUtilizationCommandOutput>;
  describeFleetUtilization(
    args: DescribeFleetUtilizationCommandInput,
    cb: (err: any, data?: DescribeFleetUtilizationCommandOutput) => void
  ): void;
  describeFleetUtilization(
    args: DescribeFleetUtilizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeFleetUtilizationCommandOutput) => void
  ): void;
  describeGameServer(
    args: DescribeGameServerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeGameServerCommandOutput>;
  describeGameServer(
    args: DescribeGameServerCommandInput,
    cb: (err: any, data?: DescribeGameServerCommandOutput) => void
  ): void;
  describeGameServer(
    args: DescribeGameServerCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeGameServerCommandOutput) => void
  ): void;
  describeGameServerGroup(
    args: DescribeGameServerGroupCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeGameServerGroupCommandOutput>;
  describeGameServerGroup(
    args: DescribeGameServerGroupCommandInput,
    cb: (err: any, data?: DescribeGameServerGroupCommandOutput) => void
  ): void;
  describeGameServerGroup(
    args: DescribeGameServerGroupCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeGameServerGroupCommandOutput) => void
  ): void;
  describeGameServerInstances(
    args: DescribeGameServerInstancesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeGameServerInstancesCommandOutput>;
  describeGameServerInstances(
    args: DescribeGameServerInstancesCommandInput,
    cb: (err: any, data?: DescribeGameServerInstancesCommandOutput) => void
  ): void;
  describeGameServerInstances(
    args: DescribeGameServerInstancesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeGameServerInstancesCommandOutput) => void
  ): void;
  describeGameSessionDetails(): Promise<DescribeGameSessionDetailsCommandOutput>;
  describeGameSessionDetails(
    args: DescribeGameSessionDetailsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeGameSessionDetailsCommandOutput>;
  describeGameSessionDetails(
    args: DescribeGameSessionDetailsCommandInput,
    cb: (err: any, data?: DescribeGameSessionDetailsCommandOutput) => void
  ): void;
  describeGameSessionDetails(
    args: DescribeGameSessionDetailsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeGameSessionDetailsCommandOutput) => void
  ): void;
  describeGameSessionPlacement(
    args: DescribeGameSessionPlacementCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeGameSessionPlacementCommandOutput>;
  describeGameSessionPlacement(
    args: DescribeGameSessionPlacementCommandInput,
    cb: (err: any, data?: DescribeGameSessionPlacementCommandOutput) => void
  ): void;
  describeGameSessionPlacement(
    args: DescribeGameSessionPlacementCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeGameSessionPlacementCommandOutput) => void
  ): void;
  describeGameSessionQueues(): Promise<DescribeGameSessionQueuesCommandOutput>;
  describeGameSessionQueues(
    args: DescribeGameSessionQueuesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeGameSessionQueuesCommandOutput>;
  describeGameSessionQueues(
    args: DescribeGameSessionQueuesCommandInput,
    cb: (err: any, data?: DescribeGameSessionQueuesCommandOutput) => void
  ): void;
  describeGameSessionQueues(
    args: DescribeGameSessionQueuesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeGameSessionQueuesCommandOutput) => void
  ): void;
  describeGameSessions(): Promise<DescribeGameSessionsCommandOutput>;
  describeGameSessions(
    args: DescribeGameSessionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeGameSessionsCommandOutput>;
  describeGameSessions(
    args: DescribeGameSessionsCommandInput,
    cb: (err: any, data?: DescribeGameSessionsCommandOutput) => void
  ): void;
  describeGameSessions(
    args: DescribeGameSessionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeGameSessionsCommandOutput) => void
  ): void;
  describeInstances(
    args: DescribeInstancesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeInstancesCommandOutput>;
  describeInstances(
    args: DescribeInstancesCommandInput,
    cb: (err: any, data?: DescribeInstancesCommandOutput) => void
  ): void;
  describeInstances(
    args: DescribeInstancesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeInstancesCommandOutput) => void
  ): void;
  describeMatchmaking(
    args: DescribeMatchmakingCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeMatchmakingCommandOutput>;
  describeMatchmaking(
    args: DescribeMatchmakingCommandInput,
    cb: (err: any, data?: DescribeMatchmakingCommandOutput) => void
  ): void;
  describeMatchmaking(
    args: DescribeMatchmakingCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeMatchmakingCommandOutput) => void
  ): void;
  describeMatchmakingConfigurations(): Promise<DescribeMatchmakingConfigurationsCommandOutput>;
  describeMatchmakingConfigurations(
    args: DescribeMatchmakingConfigurationsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeMatchmakingConfigurationsCommandOutput>;
  describeMatchmakingConfigurations(
    args: DescribeMatchmakingConfigurationsCommandInput,
    cb: (
      err: any,
      data?: DescribeMatchmakingConfigurationsCommandOutput
    ) => void
  ): void;
  describeMatchmakingConfigurations(
    args: DescribeMatchmakingConfigurationsCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: DescribeMatchmakingConfigurationsCommandOutput
    ) => void
  ): void;
  describeMatchmakingRuleSets(): Promise<DescribeMatchmakingRuleSetsCommandOutput>;
  describeMatchmakingRuleSets(
    args: DescribeMatchmakingRuleSetsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeMatchmakingRuleSetsCommandOutput>;
  describeMatchmakingRuleSets(
    args: DescribeMatchmakingRuleSetsCommandInput,
    cb: (err: any, data?: DescribeMatchmakingRuleSetsCommandOutput) => void
  ): void;
  describeMatchmakingRuleSets(
    args: DescribeMatchmakingRuleSetsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeMatchmakingRuleSetsCommandOutput) => void
  ): void;
  describePlayerSessions(): Promise<DescribePlayerSessionsCommandOutput>;
  describePlayerSessions(
    args: DescribePlayerSessionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribePlayerSessionsCommandOutput>;
  describePlayerSessions(
    args: DescribePlayerSessionsCommandInput,
    cb: (err: any, data?: DescribePlayerSessionsCommandOutput) => void
  ): void;
  describePlayerSessions(
    args: DescribePlayerSessionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribePlayerSessionsCommandOutput) => void
  ): void;
  describeRuntimeConfiguration(
    args: DescribeRuntimeConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeRuntimeConfigurationCommandOutput>;
  describeRuntimeConfiguration(
    args: DescribeRuntimeConfigurationCommandInput,
    cb: (err: any, data?: DescribeRuntimeConfigurationCommandOutput) => void
  ): void;
  describeRuntimeConfiguration(
    args: DescribeRuntimeConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeRuntimeConfigurationCommandOutput) => void
  ): void;
  describeScalingPolicies(
    args: DescribeScalingPoliciesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeScalingPoliciesCommandOutput>;
  describeScalingPolicies(
    args: DescribeScalingPoliciesCommandInput,
    cb: (err: any, data?: DescribeScalingPoliciesCommandOutput) => void
  ): void;
  describeScalingPolicies(
    args: DescribeScalingPoliciesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeScalingPoliciesCommandOutput) => void
  ): void;
  describeScript(
    args: DescribeScriptCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeScriptCommandOutput>;
  describeScript(
    args: DescribeScriptCommandInput,
    cb: (err: any, data?: DescribeScriptCommandOutput) => void
  ): void;
  describeScript(
    args: DescribeScriptCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeScriptCommandOutput) => void
  ): void;
  describeVpcPeeringAuthorizations(): Promise<DescribeVpcPeeringAuthorizationsCommandOutput>;
  describeVpcPeeringAuthorizations(
    args: DescribeVpcPeeringAuthorizationsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeVpcPeeringAuthorizationsCommandOutput>;
  describeVpcPeeringAuthorizations(
    args: DescribeVpcPeeringAuthorizationsCommandInput,
    cb: (err: any, data?: DescribeVpcPeeringAuthorizationsCommandOutput) => void
  ): void;
  describeVpcPeeringAuthorizations(
    args: DescribeVpcPeeringAuthorizationsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeVpcPeeringAuthorizationsCommandOutput) => void
  ): void;
  describeVpcPeeringConnections(): Promise<DescribeVpcPeeringConnectionsCommandOutput>;
  describeVpcPeeringConnections(
    args: DescribeVpcPeeringConnectionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeVpcPeeringConnectionsCommandOutput>;
  describeVpcPeeringConnections(
    args: DescribeVpcPeeringConnectionsCommandInput,
    cb: (err: any, data?: DescribeVpcPeeringConnectionsCommandOutput) => void
  ): void;
  describeVpcPeeringConnections(
    args: DescribeVpcPeeringConnectionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeVpcPeeringConnectionsCommandOutput) => void
  ): void;
  getComputeAccess(
    args: GetComputeAccessCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetComputeAccessCommandOutput>;
  getComputeAccess(
    args: GetComputeAccessCommandInput,
    cb: (err: any, data?: GetComputeAccessCommandOutput) => void
  ): void;
  getComputeAccess(
    args: GetComputeAccessCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetComputeAccessCommandOutput) => void
  ): void;
  getComputeAuthToken(
    args: GetComputeAuthTokenCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetComputeAuthTokenCommandOutput>;
  getComputeAuthToken(
    args: GetComputeAuthTokenCommandInput,
    cb: (err: any, data?: GetComputeAuthTokenCommandOutput) => void
  ): void;
  getComputeAuthToken(
    args: GetComputeAuthTokenCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetComputeAuthTokenCommandOutput) => void
  ): void;
  getGameSessionLogUrl(
    args: GetGameSessionLogUrlCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetGameSessionLogUrlCommandOutput>;
  getGameSessionLogUrl(
    args: GetGameSessionLogUrlCommandInput,
    cb: (err: any, data?: GetGameSessionLogUrlCommandOutput) => void
  ): void;
  getGameSessionLogUrl(
    args: GetGameSessionLogUrlCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetGameSessionLogUrlCommandOutput) => void
  ): void;
  getInstanceAccess(
    args: GetInstanceAccessCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetInstanceAccessCommandOutput>;
  getInstanceAccess(
    args: GetInstanceAccessCommandInput,
    cb: (err: any, data?: GetInstanceAccessCommandOutput) => void
  ): void;
  getInstanceAccess(
    args: GetInstanceAccessCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetInstanceAccessCommandOutput) => void
  ): void;
  listAliases(): Promise<ListAliasesCommandOutput>;
  listAliases(
    args: ListAliasesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListAliasesCommandOutput>;
  listAliases(
    args: ListAliasesCommandInput,
    cb: (err: any, data?: ListAliasesCommandOutput) => void
  ): void;
  listAliases(
    args: ListAliasesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListAliasesCommandOutput) => void
  ): void;
  listBuilds(): Promise<ListBuildsCommandOutput>;
  listBuilds(
    args: ListBuildsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListBuildsCommandOutput>;
  listBuilds(
    args: ListBuildsCommandInput,
    cb: (err: any, data?: ListBuildsCommandOutput) => void
  ): void;
  listBuilds(
    args: ListBuildsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListBuildsCommandOutput) => void
  ): void;
  listCompute(
    args: ListComputeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListComputeCommandOutput>;
  listCompute(
    args: ListComputeCommandInput,
    cb: (err: any, data?: ListComputeCommandOutput) => void
  ): void;
  listCompute(
    args: ListComputeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListComputeCommandOutput) => void
  ): void;
  listContainerGroupDefinitions(): Promise<ListContainerGroupDefinitionsCommandOutput>;
  listContainerGroupDefinitions(
    args: ListContainerGroupDefinitionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListContainerGroupDefinitionsCommandOutput>;
  listContainerGroupDefinitions(
    args: ListContainerGroupDefinitionsCommandInput,
    cb: (err: any, data?: ListContainerGroupDefinitionsCommandOutput) => void
  ): void;
  listContainerGroupDefinitions(
    args: ListContainerGroupDefinitionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListContainerGroupDefinitionsCommandOutput) => void
  ): void;
  listFleets(): Promise<ListFleetsCommandOutput>;
  listFleets(
    args: ListFleetsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListFleetsCommandOutput>;
  listFleets(
    args: ListFleetsCommandInput,
    cb: (err: any, data?: ListFleetsCommandOutput) => void
  ): void;
  listFleets(
    args: ListFleetsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListFleetsCommandOutput) => void
  ): void;
  listGameServerGroups(): Promise<ListGameServerGroupsCommandOutput>;
  listGameServerGroups(
    args: ListGameServerGroupsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListGameServerGroupsCommandOutput>;
  listGameServerGroups(
    args: ListGameServerGroupsCommandInput,
    cb: (err: any, data?: ListGameServerGroupsCommandOutput) => void
  ): void;
  listGameServerGroups(
    args: ListGameServerGroupsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListGameServerGroupsCommandOutput) => void
  ): void;
  listGameServers(
    args: ListGameServersCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListGameServersCommandOutput>;
  listGameServers(
    args: ListGameServersCommandInput,
    cb: (err: any, data?: ListGameServersCommandOutput) => void
  ): void;
  listGameServers(
    args: ListGameServersCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListGameServersCommandOutput) => void
  ): void;
  listLocations(): Promise<ListLocationsCommandOutput>;
  listLocations(
    args: ListLocationsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListLocationsCommandOutput>;
  listLocations(
    args: ListLocationsCommandInput,
    cb: (err: any, data?: ListLocationsCommandOutput) => void
  ): void;
  listLocations(
    args: ListLocationsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListLocationsCommandOutput) => void
  ): void;
  listScripts(): Promise<ListScriptsCommandOutput>;
  listScripts(
    args: ListScriptsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListScriptsCommandOutput>;
  listScripts(
    args: ListScriptsCommandInput,
    cb: (err: any, data?: ListScriptsCommandOutput) => void
  ): void;
  listScripts(
    args: ListScriptsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListScriptsCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  putScalingPolicy(
    args: PutScalingPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutScalingPolicyCommandOutput>;
  putScalingPolicy(
    args: PutScalingPolicyCommandInput,
    cb: (err: any, data?: PutScalingPolicyCommandOutput) => void
  ): void;
  putScalingPolicy(
    args: PutScalingPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutScalingPolicyCommandOutput) => void
  ): void;
  registerCompute(
    args: RegisterComputeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RegisterComputeCommandOutput>;
  registerCompute(
    args: RegisterComputeCommandInput,
    cb: (err: any, data?: RegisterComputeCommandOutput) => void
  ): void;
  registerCompute(
    args: RegisterComputeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RegisterComputeCommandOutput) => void
  ): void;
  registerGameServer(
    args: RegisterGameServerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RegisterGameServerCommandOutput>;
  registerGameServer(
    args: RegisterGameServerCommandInput,
    cb: (err: any, data?: RegisterGameServerCommandOutput) => void
  ): void;
  registerGameServer(
    args: RegisterGameServerCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RegisterGameServerCommandOutput) => void
  ): void;
  requestUploadCredentials(
    args: RequestUploadCredentialsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RequestUploadCredentialsCommandOutput>;
  requestUploadCredentials(
    args: RequestUploadCredentialsCommandInput,
    cb: (err: any, data?: RequestUploadCredentialsCommandOutput) => void
  ): void;
  requestUploadCredentials(
    args: RequestUploadCredentialsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RequestUploadCredentialsCommandOutput) => void
  ): void;
  resolveAlias(
    args: ResolveAliasCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ResolveAliasCommandOutput>;
  resolveAlias(
    args: ResolveAliasCommandInput,
    cb: (err: any, data?: ResolveAliasCommandOutput) => void
  ): void;
  resolveAlias(
    args: ResolveAliasCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ResolveAliasCommandOutput) => void
  ): void;
  resumeGameServerGroup(
    args: ResumeGameServerGroupCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ResumeGameServerGroupCommandOutput>;
  resumeGameServerGroup(
    args: ResumeGameServerGroupCommandInput,
    cb: (err: any, data?: ResumeGameServerGroupCommandOutput) => void
  ): void;
  resumeGameServerGroup(
    args: ResumeGameServerGroupCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ResumeGameServerGroupCommandOutput) => void
  ): void;
  searchGameSessions(): Promise<SearchGameSessionsCommandOutput>;
  searchGameSessions(
    args: SearchGameSessionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<SearchGameSessionsCommandOutput>;
  searchGameSessions(
    args: SearchGameSessionsCommandInput,
    cb: (err: any, data?: SearchGameSessionsCommandOutput) => void
  ): void;
  searchGameSessions(
    args: SearchGameSessionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: SearchGameSessionsCommandOutput) => void
  ): void;
  startFleetActions(
    args: StartFleetActionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StartFleetActionsCommandOutput>;
  startFleetActions(
    args: StartFleetActionsCommandInput,
    cb: (err: any, data?: StartFleetActionsCommandOutput) => void
  ): void;
  startFleetActions(
    args: StartFleetActionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StartFleetActionsCommandOutput) => void
  ): void;
  startGameSessionPlacement(
    args: StartGameSessionPlacementCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StartGameSessionPlacementCommandOutput>;
  startGameSessionPlacement(
    args: StartGameSessionPlacementCommandInput,
    cb: (err: any, data?: StartGameSessionPlacementCommandOutput) => void
  ): void;
  startGameSessionPlacement(
    args: StartGameSessionPlacementCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StartGameSessionPlacementCommandOutput) => void
  ): void;
  startMatchBackfill(
    args: StartMatchBackfillCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StartMatchBackfillCommandOutput>;
  startMatchBackfill(
    args: StartMatchBackfillCommandInput,
    cb: (err: any, data?: StartMatchBackfillCommandOutput) => void
  ): void;
  startMatchBackfill(
    args: StartMatchBackfillCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StartMatchBackfillCommandOutput) => void
  ): void;
  startMatchmaking(
    args: StartMatchmakingCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StartMatchmakingCommandOutput>;
  startMatchmaking(
    args: StartMatchmakingCommandInput,
    cb: (err: any, data?: StartMatchmakingCommandOutput) => void
  ): void;
  startMatchmaking(
    args: StartMatchmakingCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StartMatchmakingCommandOutput) => void
  ): void;
  stopFleetActions(
    args: StopFleetActionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StopFleetActionsCommandOutput>;
  stopFleetActions(
    args: StopFleetActionsCommandInput,
    cb: (err: any, data?: StopFleetActionsCommandOutput) => void
  ): void;
  stopFleetActions(
    args: StopFleetActionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StopFleetActionsCommandOutput) => void
  ): void;
  stopGameSessionPlacement(
    args: StopGameSessionPlacementCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StopGameSessionPlacementCommandOutput>;
  stopGameSessionPlacement(
    args: StopGameSessionPlacementCommandInput,
    cb: (err: any, data?: StopGameSessionPlacementCommandOutput) => void
  ): void;
  stopGameSessionPlacement(
    args: StopGameSessionPlacementCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StopGameSessionPlacementCommandOutput) => void
  ): void;
  stopMatchmaking(
    args: StopMatchmakingCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StopMatchmakingCommandOutput>;
  stopMatchmaking(
    args: StopMatchmakingCommandInput,
    cb: (err: any, data?: StopMatchmakingCommandOutput) => void
  ): void;
  stopMatchmaking(
    args: StopMatchmakingCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StopMatchmakingCommandOutput) => void
  ): void;
  suspendGameServerGroup(
    args: SuspendGameServerGroupCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<SuspendGameServerGroupCommandOutput>;
  suspendGameServerGroup(
    args: SuspendGameServerGroupCommandInput,
    cb: (err: any, data?: SuspendGameServerGroupCommandOutput) => void
  ): void;
  suspendGameServerGroup(
    args: SuspendGameServerGroupCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: SuspendGameServerGroupCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  updateAlias(
    args: UpdateAliasCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateAliasCommandOutput>;
  updateAlias(
    args: UpdateAliasCommandInput,
    cb: (err: any, data?: UpdateAliasCommandOutput) => void
  ): void;
  updateAlias(
    args: UpdateAliasCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateAliasCommandOutput) => void
  ): void;
  updateBuild(
    args: UpdateBuildCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateBuildCommandOutput>;
  updateBuild(
    args: UpdateBuildCommandInput,
    cb: (err: any, data?: UpdateBuildCommandOutput) => void
  ): void;
  updateBuild(
    args: UpdateBuildCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateBuildCommandOutput) => void
  ): void;
  updateFleetAttributes(
    args: UpdateFleetAttributesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateFleetAttributesCommandOutput>;
  updateFleetAttributes(
    args: UpdateFleetAttributesCommandInput,
    cb: (err: any, data?: UpdateFleetAttributesCommandOutput) => void
  ): void;
  updateFleetAttributes(
    args: UpdateFleetAttributesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateFleetAttributesCommandOutput) => void
  ): void;
  updateFleetCapacity(
    args: UpdateFleetCapacityCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateFleetCapacityCommandOutput>;
  updateFleetCapacity(
    args: UpdateFleetCapacityCommandInput,
    cb: (err: any, data?: UpdateFleetCapacityCommandOutput) => void
  ): void;
  updateFleetCapacity(
    args: UpdateFleetCapacityCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateFleetCapacityCommandOutput) => void
  ): void;
  updateFleetPortSettings(
    args: UpdateFleetPortSettingsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateFleetPortSettingsCommandOutput>;
  updateFleetPortSettings(
    args: UpdateFleetPortSettingsCommandInput,
    cb: (err: any, data?: UpdateFleetPortSettingsCommandOutput) => void
  ): void;
  updateFleetPortSettings(
    args: UpdateFleetPortSettingsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateFleetPortSettingsCommandOutput) => void
  ): void;
  updateGameServer(
    args: UpdateGameServerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateGameServerCommandOutput>;
  updateGameServer(
    args: UpdateGameServerCommandInput,
    cb: (err: any, data?: UpdateGameServerCommandOutput) => void
  ): void;
  updateGameServer(
    args: UpdateGameServerCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateGameServerCommandOutput) => void
  ): void;
  updateGameServerGroup(
    args: UpdateGameServerGroupCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateGameServerGroupCommandOutput>;
  updateGameServerGroup(
    args: UpdateGameServerGroupCommandInput,
    cb: (err: any, data?: UpdateGameServerGroupCommandOutput) => void
  ): void;
  updateGameServerGroup(
    args: UpdateGameServerGroupCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateGameServerGroupCommandOutput) => void
  ): void;
  updateGameSession(
    args: UpdateGameSessionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateGameSessionCommandOutput>;
  updateGameSession(
    args: UpdateGameSessionCommandInput,
    cb: (err: any, data?: UpdateGameSessionCommandOutput) => void
  ): void;
  updateGameSession(
    args: UpdateGameSessionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateGameSessionCommandOutput) => void
  ): void;
  updateGameSessionQueue(
    args: UpdateGameSessionQueueCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateGameSessionQueueCommandOutput>;
  updateGameSessionQueue(
    args: UpdateGameSessionQueueCommandInput,
    cb: (err: any, data?: UpdateGameSessionQueueCommandOutput) => void
  ): void;
  updateGameSessionQueue(
    args: UpdateGameSessionQueueCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateGameSessionQueueCommandOutput) => void
  ): void;
  updateMatchmakingConfiguration(
    args: UpdateMatchmakingConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateMatchmakingConfigurationCommandOutput>;
  updateMatchmakingConfiguration(
    args: UpdateMatchmakingConfigurationCommandInput,
    cb: (err: any, data?: UpdateMatchmakingConfigurationCommandOutput) => void
  ): void;
  updateMatchmakingConfiguration(
    args: UpdateMatchmakingConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateMatchmakingConfigurationCommandOutput) => void
  ): void;
  updateRuntimeConfiguration(
    args: UpdateRuntimeConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateRuntimeConfigurationCommandOutput>;
  updateRuntimeConfiguration(
    args: UpdateRuntimeConfigurationCommandInput,
    cb: (err: any, data?: UpdateRuntimeConfigurationCommandOutput) => void
  ): void;
  updateRuntimeConfiguration(
    args: UpdateRuntimeConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateRuntimeConfigurationCommandOutput) => void
  ): void;
  updateScript(
    args: UpdateScriptCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateScriptCommandOutput>;
  updateScript(
    args: UpdateScriptCommandInput,
    cb: (err: any, data?: UpdateScriptCommandOutput) => void
  ): void;
  updateScript(
    args: UpdateScriptCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateScriptCommandOutput) => void
  ): void;
  validateMatchmakingRuleSet(
    args: ValidateMatchmakingRuleSetCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ValidateMatchmakingRuleSetCommandOutput>;
  validateMatchmakingRuleSet(
    args: ValidateMatchmakingRuleSetCommandInput,
    cb: (err: any, data?: ValidateMatchmakingRuleSetCommandOutput) => void
  ): void;
  validateMatchmakingRuleSet(
    args: ValidateMatchmakingRuleSetCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ValidateMatchmakingRuleSetCommandOutput) => void
  ): void;
}
export declare class GameLift extends GameLiftClient implements GameLift {}
