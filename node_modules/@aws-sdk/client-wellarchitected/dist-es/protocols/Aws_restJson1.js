import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
import { WellArchitectedServiceException as __BaseException } from "../models/WellArchitectedServiceException";
export const se_AssociateLensesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/associateLenses");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    let body;
    body = JSON.stringify(take(input, {
        LensAliases: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_AssociateProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/associateProfiles");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ProfileArns: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_CreateLensShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/lenses/{LensAlias}/shares");
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        SharedWith: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateLensVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/lenses/{LensAlias}/versions");
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        IsMajorVersion: [],
        LensVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMilestoneCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/milestones");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        MilestoneName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/profiles");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ProfileDescription: [],
        ProfileName: [],
        ProfileQuestions: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateProfileShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/profiles/{ProfileArn}/shares");
    b.p("ProfileArn", () => input.ProfileArn, "{ProfileArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        SharedWith: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateReviewTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/reviewTemplates");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        Lenses: (_) => _json(_),
        Notes: [],
        Tags: (_) => _json(_),
        TemplateName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateTemplateShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/templates/shares/{TemplateArn}");
    b.p("TemplateArn", () => input.TemplateArn, "{TemplateArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        SharedWith: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateWorkloadCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
        Applications: (_) => _json(_),
        ArchitecturalDesign: [],
        AwsRegions: (_) => _json(_),
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        DiscoveryConfig: (_) => _json(_),
        Environment: [],
        Industry: [],
        IndustryType: [],
        JiraConfiguration: (_) => _json(_),
        Lenses: (_) => _json(_),
        NonAwsRegions: (_) => _json(_),
        Notes: [],
        PillarPriorities: (_) => _json(_),
        ProfileArns: (_) => _json(_),
        ReviewOwner: [],
        ReviewTemplateArns: (_) => _json(_),
        Tags: (_) => _json(_),
        WorkloadName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateWorkloadShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/shares");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        PermissionType: [],
        SharedWith: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteLensCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/lenses/{LensAlias}");
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    const query = map({
        [_CRT]: [, __expectNonNull(input[_CRT], `ClientRequestToken`)],
        [_LS]: [, __expectNonNull(input[_LS], `LensStatus`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteLensShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/lenses/{LensAlias}/shares/{ShareId}");
    b.p("ShareId", () => input.ShareId, "{ShareId}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    const query = map({
        [_CRT]: [, __expectNonNull(input[_CRT], `ClientRequestToken`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profiles/{ProfileArn}");
    b.p("ProfileArn", () => input.ProfileArn, "{ProfileArn}", false);
    const query = map({
        [_CRT]: [, __expectNonNull(input[_CRT], `ClientRequestToken`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteProfileShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profiles/{ProfileArn}/shares/{ShareId}");
    b.p("ShareId", () => input.ShareId, "{ShareId}", false);
    b.p("ProfileArn", () => input.ProfileArn, "{ProfileArn}", false);
    const query = map({
        [_CRT]: [, __expectNonNull(input[_CRT], `ClientRequestToken`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteReviewTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/reviewTemplates/{TemplateArn}");
    b.p("TemplateArn", () => input.TemplateArn, "{TemplateArn}", false);
    const query = map({
        [_CRT]: [, __expectNonNull(input[_CRT], `ClientRequestToken`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteTemplateShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/templates/shares/{TemplateArn}/{ShareId}");
    b.p("ShareId", () => input.ShareId, "{ShareId}", false);
    b.p("TemplateArn", () => input.TemplateArn, "{TemplateArn}", false);
    const query = map({
        [_CRT]: [, __expectNonNull(input[_CRT], `ClientRequestToken`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteWorkloadCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workloads/{WorkloadId}");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    const query = map({
        [_CRT]: [, __expectNonNull(input[_CRT], `ClientRequestToken`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteWorkloadShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workloads/{WorkloadId}/shares/{ShareId}");
    b.p("ShareId", () => input.ShareId, "{ShareId}", false);
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    const query = map({
        [_CRT]: [, __expectNonNull(input[_CRT], `ClientRequestToken`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateLensesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/disassociateLenses");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    let body;
    body = JSON.stringify(take(input, {
        LensAliases: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_DisassociateProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/disassociateProfiles");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ProfileArns: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_ExportLensCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/lenses/{LensAlias}/export");
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    const query = map({
        [_LV]: [, input[_LV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetAnswerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    b.p("QuestionId", () => input.QuestionId, "{QuestionId}", false);
    const query = map({
        [_MN]: [() => input.MilestoneNumber !== void 0, () => input[_MN].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetConsolidatedReportCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/consolidatedReport");
    const query = map({
        [_F]: [, __expectNonNull(input[_F], `Format`)],
        [_ISR]: [() => input.IncludeSharedResources !== void 0, () => input[_ISR].toString()],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetGlobalSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-settings");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetLensCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/lenses/{LensAlias}");
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    const query = map({
        [_LV]: [, input[_LV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetLensReviewCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workloads/{WorkloadId}/lensReviews/{LensAlias}");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    const query = map({
        [_MN]: [() => input.MilestoneNumber !== void 0, () => input[_MN].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetLensReviewReportCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workloads/{WorkloadId}/lensReviews/{LensAlias}/report");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    const query = map({
        [_MN]: [() => input.MilestoneNumber !== void 0, () => input[_MN].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetLensVersionDifferenceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/lenses/{LensAlias}/versionDifference");
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    const query = map({
        [_BLV]: [, input[_BLV]],
        [_TLV]: [, input[_TLV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetMilestoneCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workloads/{WorkloadId}/milestones/{MilestoneNumber}");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    b.p("MilestoneNumber", () => input.MilestoneNumber.toString(), "{MilestoneNumber}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profiles/{ProfileArn}");
    b.p("ProfileArn", () => input.ProfileArn, "{ProfileArn}", false);
    const query = map({
        [_PV]: [, input[_PV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetProfileTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/profileTemplate");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetReviewTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/reviewTemplates/{TemplateArn}");
    b.p("TemplateArn", () => input.TemplateArn, "{TemplateArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetReviewTemplateAnswerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/reviewTemplates/{TemplateArn}/lensReviews/{LensAlias}/answers/{QuestionId}");
    b.p("TemplateArn", () => input.TemplateArn, "{TemplateArn}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    b.p("QuestionId", () => input.QuestionId, "{QuestionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetReviewTemplateLensReviewCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/reviewTemplates/{TemplateArn}/lensReviews/{LensAlias}");
    b.p("TemplateArn", () => input.TemplateArn, "{TemplateArn}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetWorkloadCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workloads/{WorkloadId}");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ImportLensCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/importLens");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        JSONString: [],
        LensAlias: [],
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_ListAnswersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    const query = map({
        [_PI]: [, input[_PI]],
        [_MN]: [() => input.MilestoneNumber !== void 0, () => input[_MN].toString()],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_QP]: [, input[_QP]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCheckDetailsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/checks");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ChoiceId: [],
        LensArn: [],
        MaxResults: [],
        NextToken: [],
        PillarId: [],
        QuestionId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListCheckSummariesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/checkSummaries");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ChoiceId: [],
        LensArn: [],
        MaxResults: [],
        NextToken: [],
        PillarId: [],
        QuestionId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListLensesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/lenses");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_LT]: [, input[_LT]],
        [_LS]: [, input[_LS]],
        [_LN]: [, input[_LN]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListLensReviewImprovementsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workloads/{WorkloadId}/lensReviews/{LensAlias}/improvements");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    const query = map({
        [_PI]: [, input[_PI]],
        [_MN]: [() => input.MilestoneNumber !== void 0, () => input[_MN].toString()],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_QP]: [, input[_QP]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListLensReviewsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workloads/{WorkloadId}/lensReviews");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    const query = map({
        [_MN]: [() => input.MilestoneNumber !== void 0, () => input[_MN].toString()],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListLensSharesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/lenses/{LensAlias}/shares");
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    const query = map({
        [_SWP]: [, input[_SWP]],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_S]: [, input[_S]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMilestonesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/milestonesSummaries");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    let body;
    body = JSON.stringify(take(input, {
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListNotificationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/notifications");
    let body;
    body = JSON.stringify(take(input, {
        MaxResults: [],
        NextToken: [],
        ResourceArn: [],
        WorkloadId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListProfileNotificationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profileNotifications");
    const query = map({
        [_WI]: [, input[_WI]],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profileSummaries");
    const query = map({
        [_PNP]: [, input[_PNP]],
        [_POT]: [, input[_POT]],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProfileSharesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profiles/{ProfileArn}/shares");
    b.p("ProfileArn", () => input.ProfileArn, "{ProfileArn}", false);
    const query = map({
        [_SWP]: [, input[_SWP]],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_S]: [, input[_S]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListReviewTemplateAnswersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/reviewTemplates/{TemplateArn}/lensReviews/{LensAlias}/answers");
    b.p("TemplateArn", () => input.TemplateArn, "{TemplateArn}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    const query = map({
        [_PI]: [, input[_PI]],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListReviewTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/reviewTemplates");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListShareInvitationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/shareInvitations");
    const query = map({
        [_WNP]: [, input[_WNP]],
        [_LNP]: [, input[_LNP]],
        [_SRT]: [, input[_SRT]],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_PNP]: [, input[_PNP]],
        [_TNP]: [, input[_TNP]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{WorkloadArn}");
    b.p("WorkloadArn", () => input.WorkloadArn, "{WorkloadArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListTemplateSharesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/templates/shares/{TemplateArn}");
    b.p("TemplateArn", () => input.TemplateArn, "{TemplateArn}", false);
    const query = map({
        [_SWP]: [, input[_SWP]],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_S]: [, input[_S]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListWorkloadsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloadsSummaries");
    let body;
    body = JSON.stringify(take(input, {
        MaxResults: [],
        NextToken: [],
        WorkloadNamePrefix: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListWorkloadSharesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workloads/{WorkloadId}/shares");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    const query = map({
        [_SWP]: [, input[_SWP]],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_S]: [, input[_S]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{WorkloadArn}");
    b.p("WorkloadArn", () => input.WorkloadArn, "{WorkloadArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{WorkloadArn}");
    b.p("WorkloadArn", () => input.WorkloadArn, "{WorkloadArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAnswerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    b.p("QuestionId", () => input.QuestionId, "{QuestionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ChoiceUpdates: (_) => _json(_),
        IsApplicable: [],
        Notes: [],
        Reason: [],
        SelectedChoices: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateGlobalSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-settings");
    let body;
    body = JSON.stringify(take(input, {
        DiscoveryIntegrationStatus: [],
        JiraConfiguration: (_) => _json(_),
        OrganizationSharingStatus: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateIntegrationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/updateIntegration");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        IntegratingService: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateLensReviewCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/lensReviews/{LensAlias}");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    let body;
    body = JSON.stringify(take(input, {
        JiraConfiguration: (_) => _json(_),
        LensNotes: [],
        PillarNotes: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/profiles/{ProfileArn}");
    b.p("ProfileArn", () => input.ProfileArn, "{ProfileArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        ProfileDescription: [],
        ProfileQuestions: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateReviewTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/reviewTemplates/{TemplateArn}");
    b.p("TemplateArn", () => input.TemplateArn, "{TemplateArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        LensesToAssociate: (_) => _json(_),
        LensesToDisassociate: (_) => _json(_),
        Notes: [],
        TemplateName: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateReviewTemplateAnswerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/reviewTemplates/{TemplateArn}/lensReviews/{LensAlias}/answers/{QuestionId}");
    b.p("TemplateArn", () => input.TemplateArn, "{TemplateArn}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    b.p("QuestionId", () => input.QuestionId, "{QuestionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ChoiceUpdates: (_) => _json(_),
        IsApplicable: [],
        Notes: [],
        Reason: [],
        SelectedChoices: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateReviewTemplateLensReviewCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/reviewTemplates/{TemplateArn}/lensReviews/{LensAlias}");
    b.p("TemplateArn", () => input.TemplateArn, "{TemplateArn}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    let body;
    body = JSON.stringify(take(input, {
        LensNotes: [],
        PillarNotes: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateShareInvitationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/shareInvitations/{ShareInvitationId}");
    b.p("ShareInvitationId", () => input.ShareInvitationId, "{ShareInvitationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ShareInvitationAction: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateWorkloadCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
        Applications: (_) => _json(_),
        ArchitecturalDesign: [],
        AwsRegions: (_) => _json(_),
        Description: [],
        DiscoveryConfig: (_) => _json(_),
        Environment: [],
        ImprovementStatus: [],
        Industry: [],
        IndustryType: [],
        IsReviewOwnerUpdateAcknowledged: [],
        JiraConfiguration: (_) => _json(_),
        NonAwsRegions: (_) => _json(_),
        Notes: [],
        PillarPriorities: (_) => _json(_),
        ReviewOwner: [],
        WorkloadName: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateWorkloadShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/shares/{ShareId}");
    b.p("ShareId", () => input.ShareId, "{ShareId}", false);
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    let body;
    body = JSON.stringify(take(input, {
        PermissionType: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpgradeLensReviewCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/lensReviews/{LensAlias}/upgrade");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [],
        MilestoneName: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpgradeProfileVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workloads/{WorkloadId}/profiles/{ProfileArn}/upgrade");
    b.p("WorkloadId", () => input.WorkloadId, "{WorkloadId}", false);
    b.p("ProfileArn", () => input.ProfileArn, "{ProfileArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        MilestoneName: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpgradeReviewTemplateLensReviewCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/reviewTemplates/{TemplateArn}/lensReviews/{LensAlias}/upgrade");
    b.p("TemplateArn", () => input.TemplateArn, "{TemplateArn}", false);
    b.p("LensAlias", () => input.LensAlias, "{LensAlias}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_AssociateLensesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateLensShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ShareId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateLensVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LensArn: __expectString,
        LensVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMilestoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MilestoneNumber: __expectInt32,
        WorkloadId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProfileArn: __expectString,
        ProfileVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateProfileShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProfileArn: __expectString,
        ShareId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateReviewTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        TemplateArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateTemplateShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ShareId: __expectString,
        TemplateArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateWorkloadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        WorkloadArn: __expectString,
        WorkloadId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateWorkloadShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ShareId: __expectString,
        WorkloadId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteLensCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteLensShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteProfileShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteReviewTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteTemplateShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteWorkloadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteWorkloadShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateLensesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_ExportLensCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LensJSON: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAnswerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Answer: (_) => de_Answer(_, context),
        LensAlias: __expectString,
        LensArn: __expectString,
        MilestoneNumber: __expectInt32,
        WorkloadId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConsolidatedReportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Base64String: __expectString,
        Metrics: (_) => de_ConsolidatedReportMetrics(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetGlobalSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DiscoveryIntegrationStatus: __expectString,
        JiraConfiguration: _json,
        OrganizationSharingStatus: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLensCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Lens: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLensReviewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LensReview: (_) => de_LensReview(_, context),
        MilestoneNumber: __expectInt32,
        WorkloadId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLensReviewReportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LensReviewReport: _json,
        MilestoneNumber: __expectInt32,
        WorkloadId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLensVersionDifferenceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BaseLensVersion: __expectString,
        LatestLensVersion: __expectString,
        LensAlias: __expectString,
        LensArn: __expectString,
        TargetLensVersion: __expectString,
        VersionDifferences: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMilestoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Milestone: (_) => de_Milestone(_, context),
        WorkloadId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Profile: (_) => de_Profile(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetProfileTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProfileTemplate: (_) => de_ProfileTemplate(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetReviewTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ReviewTemplate: (_) => de_ReviewTemplate(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetReviewTemplateAnswerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Answer: _json,
        LensAlias: __expectString,
        TemplateArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetReviewTemplateLensReviewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LensReview: (_) => de_ReviewTemplateLensReview(_, context),
        TemplateArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWorkloadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Workload: (_) => de_Workload(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ImportLensCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LensArn: __expectString,
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAnswersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnswerSummaries: (_) => de_AnswerSummaries(_, context),
        LensAlias: __expectString,
        LensArn: __expectString,
        MilestoneNumber: __expectInt32,
        NextToken: __expectString,
        WorkloadId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCheckDetailsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CheckDetails: (_) => de_CheckDetails(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCheckSummariesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CheckSummaries: (_) => de_CheckSummaries(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLensesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LensSummaries: (_) => de_LensSummaries(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLensReviewImprovementsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ImprovementSummaries: (_) => de_ImprovementSummaries(_, context),
        LensAlias: __expectString,
        LensArn: __expectString,
        MilestoneNumber: __expectInt32,
        NextToken: __expectString,
        WorkloadId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLensReviewsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LensReviewSummaries: (_) => de_LensReviewSummaries(_, context),
        MilestoneNumber: __expectInt32,
        NextToken: __expectString,
        WorkloadId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLensSharesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LensShareSummaries: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMilestonesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MilestoneSummaries: (_) => de_MilestoneSummaries(_, context),
        NextToken: __expectString,
        WorkloadId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListNotificationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        NotificationSummaries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProfileNotificationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        NotificationSummaries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ProfileSummaries: (_) => de_ProfileSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProfileSharesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ProfileShareSummaries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListReviewTemplateAnswersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnswerSummaries: _json,
        LensAlias: __expectString,
        NextToken: __expectString,
        TemplateArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListReviewTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ReviewTemplates: (_) => de_ReviewTemplates(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListShareInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ShareInvitationSummaries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTemplateSharesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        TemplateArn: __expectString,
        TemplateShareSummaries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWorkloadsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        WorkloadSummaries: (_) => de_WorkloadSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWorkloadSharesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        WorkloadId: __expectString,
        WorkloadShareSummaries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAnswerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Answer: (_) => de_Answer(_, context),
        LensAlias: __expectString,
        LensArn: __expectString,
        WorkloadId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateGlobalSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateIntegrationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateLensReviewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LensReview: (_) => de_LensReview(_, context),
        WorkloadId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Profile: (_) => de_Profile(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateReviewTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ReviewTemplate: (_) => de_ReviewTemplate(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateReviewTemplateAnswerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Answer: _json,
        LensAlias: __expectString,
        TemplateArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateReviewTemplateLensReviewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LensReview: (_) => de_ReviewTemplateLensReview(_, context),
        TemplateArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateShareInvitationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ShareInvitation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateWorkloadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Workload: (_) => de_Workload(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateWorkloadShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        WorkloadId: __expectString,
        WorkloadShare: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpgradeLensReviewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpgradeProfileVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpgradeReviewTemplateLensReviewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.wellarchitected#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.wellarchitected#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.wellarchitected#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.wellarchitected#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.wellarchitected#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.wellarchitected#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.wellarchitected#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        QuotaCode: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
        ServiceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        QuotaCode: __expectString,
        ServiceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Fields: _json,
        Message: __expectString,
        Reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_Answer = (output, context) => {
    return take(output, {
        ChoiceAnswers: _json,
        Choices: _json,
        HelpfulResourceDisplayText: __expectString,
        HelpfulResourceUrl: __expectString,
        ImprovementPlanUrl: __expectString,
        IsApplicable: __expectBoolean,
        JiraConfiguration: (_) => de_JiraConfiguration(_, context),
        Notes: __expectString,
        PillarId: __expectString,
        QuestionDescription: __expectString,
        QuestionId: __expectString,
        QuestionTitle: __expectString,
        Reason: __expectString,
        Risk: __expectString,
        SelectedChoices: _json,
    });
};
const de_AnswerSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnswerSummary(entry, context);
    });
    return retVal;
};
const de_AnswerSummary = (output, context) => {
    return take(output, {
        ChoiceAnswerSummaries: _json,
        Choices: _json,
        IsApplicable: __expectBoolean,
        JiraConfiguration: (_) => de_JiraConfiguration(_, context),
        PillarId: __expectString,
        QuestionId: __expectString,
        QuestionTitle: __expectString,
        QuestionType: __expectString,
        Reason: __expectString,
        Risk: __expectString,
        SelectedChoices: _json,
    });
};
const de_CheckDetail = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        ChoiceId: __expectString,
        Description: __expectString,
        FlaggedResources: __expectInt32,
        Id: __expectString,
        LensArn: __expectString,
        Name: __expectString,
        PillarId: __expectString,
        Provider: __expectString,
        QuestionId: __expectString,
        Reason: __expectString,
        Status: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_CheckDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CheckDetail(entry, context);
    });
    return retVal;
};
const de_CheckSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CheckSummary(entry, context);
    });
    return retVal;
};
const de_CheckSummary = (output, context) => {
    return take(output, {
        AccountSummary: _json,
        ChoiceId: __expectString,
        Description: __expectString,
        Id: __expectString,
        LensArn: __expectString,
        Name: __expectString,
        PillarId: __expectString,
        Provider: __expectString,
        QuestionId: __expectString,
        Status: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ConsolidatedReportMetric = (output, context) => {
    return take(output, {
        Lenses: _json,
        LensesAppliedCount: __expectInt32,
        MetricType: __expectString,
        RiskCounts: _json,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        WorkloadArn: __expectString,
        WorkloadId: __expectString,
        WorkloadName: __expectString,
    });
};
const de_ConsolidatedReportMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConsolidatedReportMetric(entry, context);
    });
    return retVal;
};
const de_ImprovementSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImprovementSummary(entry, context);
    });
    return retVal;
};
const de_ImprovementSummary = (output, context) => {
    return take(output, {
        ImprovementPlanUrl: __expectString,
        ImprovementPlans: _json,
        JiraConfiguration: (_) => de_JiraConfiguration(_, context),
        PillarId: __expectString,
        QuestionId: __expectString,
        QuestionTitle: __expectString,
        Risk: __expectString,
    });
};
const de_JiraConfiguration = (output, context) => {
    return take(output, {
        JiraIssueUrl: __expectString,
        LastSyncedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_LensReview = (output, context) => {
    return take(output, {
        JiraConfiguration: _json,
        LensAlias: __expectString,
        LensArn: __expectString,
        LensName: __expectString,
        LensStatus: __expectString,
        LensVersion: __expectString,
        NextToken: __expectString,
        Notes: __expectString,
        PillarReviewSummaries: _json,
        PrioritizedRiskCounts: _json,
        Profiles: _json,
        RiskCounts: _json,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_LensReviewSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LensReviewSummary(entry, context);
    });
    return retVal;
};
const de_LensReviewSummary = (output, context) => {
    return take(output, {
        LensAlias: __expectString,
        LensArn: __expectString,
        LensName: __expectString,
        LensStatus: __expectString,
        LensVersion: __expectString,
        PrioritizedRiskCounts: _json,
        Profiles: _json,
        RiskCounts: _json,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_LensSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LensSummary(entry, context);
    });
    return retVal;
};
const de_LensSummary = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LensAlias: __expectString,
        LensArn: __expectString,
        LensName: __expectString,
        LensStatus: __expectString,
        LensType: __expectString,
        LensVersion: __expectString,
        Owner: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Milestone = (output, context) => {
    return take(output, {
        MilestoneName: __expectString,
        MilestoneNumber: __expectInt32,
        RecordedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Workload: (_) => de_Workload(_, context),
    });
};
const de_MilestoneSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MilestoneSummary(entry, context);
    });
    return retVal;
};
const de_MilestoneSummary = (output, context) => {
    return take(output, {
        MilestoneName: __expectString,
        MilestoneNumber: __expectInt32,
        RecordedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        WorkloadSummary: (_) => de_WorkloadSummary(_, context),
    });
};
const de_Profile = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Owner: __expectString,
        ProfileArn: __expectString,
        ProfileDescription: __expectString,
        ProfileName: __expectString,
        ProfileQuestions: _json,
        ProfileVersion: __expectString,
        ShareInvitationId: __expectString,
        Tags: _json,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ProfileSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProfileSummary(entry, context);
    });
    return retVal;
};
const de_ProfileSummary = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Owner: __expectString,
        ProfileArn: __expectString,
        ProfileDescription: __expectString,
        ProfileName: __expectString,
        ProfileVersion: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ProfileTemplate = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TemplateName: __expectString,
        TemplateQuestions: _json,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ReviewTemplate = (output, context) => {
    return take(output, {
        Description: __expectString,
        Lenses: _json,
        Notes: __expectString,
        Owner: __expectString,
        QuestionCounts: _json,
        ShareInvitationId: __expectString,
        Tags: _json,
        TemplateArn: __expectString,
        TemplateName: __expectString,
        UpdateStatus: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ReviewTemplateLensReview = (output, context) => {
    return take(output, {
        LensAlias: __expectString,
        LensArn: __expectString,
        LensName: __expectString,
        LensStatus: __expectString,
        LensVersion: __expectString,
        NextToken: __expectString,
        Notes: __expectString,
        PillarReviewSummaries: _json,
        QuestionCounts: _json,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ReviewTemplates = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReviewTemplateSummary(entry, context);
    });
    return retVal;
};
const de_ReviewTemplateSummary = (output, context) => {
    return take(output, {
        Description: __expectString,
        Lenses: _json,
        Owner: __expectString,
        TemplateArn: __expectString,
        TemplateName: __expectString,
        UpdateStatus: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Workload = (output, context) => {
    return take(output, {
        AccountIds: _json,
        Applications: _json,
        ArchitecturalDesign: __expectString,
        AwsRegions: _json,
        Description: __expectString,
        DiscoveryConfig: _json,
        Environment: __expectString,
        ImprovementStatus: __expectString,
        Industry: __expectString,
        IndustryType: __expectString,
        IsReviewOwnerUpdateAcknowledged: __expectBoolean,
        JiraConfiguration: _json,
        Lenses: _json,
        NonAwsRegions: _json,
        Notes: __expectString,
        Owner: __expectString,
        PillarPriorities: _json,
        PrioritizedRiskCounts: _json,
        Profiles: _json,
        ReviewOwner: __expectString,
        ReviewRestrictionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RiskCounts: _json,
        ShareInvitationId: __expectString,
        Tags: _json,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        WorkloadArn: __expectString,
        WorkloadId: __expectString,
        WorkloadName: __expectString,
    });
};
const de_WorkloadSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorkloadSummary(entry, context);
    });
    return retVal;
};
const de_WorkloadSummary = (output, context) => {
    return take(output, {
        ImprovementStatus: __expectString,
        Lenses: _json,
        Owner: __expectString,
        PrioritizedRiskCounts: _json,
        Profiles: _json,
        RiskCounts: _json,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        WorkloadArn: __expectString,
        WorkloadId: __expectString,
        WorkloadName: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _BLV = "BaseLensVersion";
const _CRT = "ClientRequestToken";
const _F = "Format";
const _ISR = "IncludeSharedResources";
const _LN = "LensName";
const _LNP = "LensNamePrefix";
const _LS = "LensStatus";
const _LT = "LensType";
const _LV = "LensVersion";
const _MN = "MilestoneNumber";
const _MR = "MaxResults";
const _NT = "NextToken";
const _PI = "PillarId";
const _PNP = "ProfileNamePrefix";
const _POT = "ProfileOwnerType";
const _PV = "ProfileVersion";
const _QP = "QuestionPriority";
const _S = "Status";
const _SRT = "ShareResourceType";
const _SWP = "SharedWithPrefix";
const _TK = "TagKeys";
const _TLV = "TargetLensVersion";
const _TNP = "TemplateNamePrefix";
const _WI = "WorkloadId";
const _WNP = "WorkloadNamePrefix";
const _tK = "tagKeys";
