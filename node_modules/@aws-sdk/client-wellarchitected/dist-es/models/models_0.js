import { WellArchitectedServiceException as __BaseException } from "./WellArchitectedServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const IntegrationStatusInput = {
    NOT_CONFIGURED: "NOT_CONFIGURED",
};
export const AccountJiraIssueManagementStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const IssueManagementType = {
    AUTO: "AUTO",
    MANUAL: "MANUAL",
};
export const IntegrationStatus = {
    CONFIGURED: "CONFIGURED",
    NOT_CONFIGURED: "NOT_CONFIGURED",
};
export const CheckStatus = {
    ERROR: "ERROR",
    FETCH_FAILED: "FETCH_FAILED",
    NOT_AVAILABLE: "NOT_AVAILABLE",
    OKAY: "OKAY",
    WARNING: "WARNING",
};
export const AdditionalResourceType = {
    HELPFUL_RESOURCE: "HELPFUL_RESOURCE",
    IMPROVEMENT_PLAN: "IMPROVEMENT_PLAN",
};
export const ChoiceReason = {
    ARCHITECTURE_CONSTRAINTS: "ARCHITECTURE_CONSTRAINTS",
    BUSINESS_PRIORITIES: "BUSINESS_PRIORITIES",
    NONE: "NONE",
    OTHER: "OTHER",
    OUT_OF_SCOPE: "OUT_OF_SCOPE",
};
export const ChoiceStatus = {
    NOT_APPLICABLE: "NOT_APPLICABLE",
    SELECTED: "SELECTED",
    UNSELECTED: "UNSELECTED",
};
export const AnswerReason = {
    ARCHITECTURE_CONSTRAINTS: "ARCHITECTURE_CONSTRAINTS",
    BUSINESS_PRIORITIES: "BUSINESS_PRIORITIES",
    NONE: "NONE",
    OTHER: "OTHER",
    OUT_OF_SCOPE: "OUT_OF_SCOPE",
};
export const Risk = {
    HIGH: "HIGH",
    MEDIUM: "MEDIUM",
    NONE: "NONE",
    NOT_APPLICABLE: "NOT_APPLICABLE",
    UNANSWERED: "UNANSWERED",
};
export const QuestionType = {
    NON_PRIORITIZED: "NON_PRIORITIZED",
    PRIORITIZED: "PRIORITIZED",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
    }
}
export const ValidationExceptionReason = {
    CANNOT_PARSE: "CANNOT_PARSE",
    FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED",
    OTHER: "OTHER",
    UNKNOWN_OPERATION: "UNKNOWN_OPERATION",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
        this.Fields = opts.Fields;
    }
}
export const CheckProvider = {
    TRUSTED_ADVISOR: "TRUSTED_ADVISOR",
};
export const CheckFailureReason = {
    ACCESS_DENIED: "ACCESS_DENIED",
    ASSUME_ROLE_ERROR: "ASSUME_ROLE_ERROR",
    PREMIUM_SUPPORT_REQUIRED: "PREMIUM_SUPPORT_REQUIRED",
    UNKNOWN_ERROR: "UNKNOWN_ERROR",
};
export const MetricType = {
    WORKLOAD: "WORKLOAD",
};
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
    }
}
export const TrustedAdvisorIntegrationStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const DefinitionType = {
    APP_REGISTRY: "APP_REGISTRY",
    WORKLOAD_METADATA: "WORKLOAD_METADATA",
};
export const WorkloadEnvironment = {
    PREPRODUCTION: "PREPRODUCTION",
    PRODUCTION: "PRODUCTION",
};
export const WorkloadIssueManagementStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    INHERIT: "INHERIT",
};
export const PermissionType = {
    CONTRIBUTOR: "CONTRIBUTOR",
    READONLY: "READONLY",
};
export const LensStatusType = {
    ALL: "ALL",
    DRAFT: "DRAFT",
    PUBLISHED: "PUBLISHED",
};
export const DifferenceStatus = {
    DELETED: "DELETED",
    NEW: "NEW",
    UPDATED: "UPDATED",
};
export const DiscoveryIntegrationStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const ReportFormat = {
    JSON: "JSON",
    PDF: "PDF",
};
export const OrganizationSharingStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const LensStatus = {
    CURRENT: "CURRENT",
    DELETED: "DELETED",
    DEPRECATED: "DEPRECATED",
    NOT_CURRENT: "NOT_CURRENT",
    UNSHARED: "UNSHARED",
};
export const WorkloadImprovementStatus = {
    COMPLETE: "COMPLETE",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_APPLICABLE: "NOT_APPLICABLE",
    NOT_STARTED: "NOT_STARTED",
    RISK_ACKNOWLEDGED: "RISK_ACKNOWLEDGED",
};
export const Question = {
    ANSWERED: "ANSWERED",
    UNANSWERED: "UNANSWERED",
};
export const ReviewTemplateUpdateStatus = {
    CURRENT: "CURRENT",
    LENS_NOT_CURRENT: "LENS_NOT_CURRENT",
};
export const ReviewTemplateAnswerStatus = {
    ANSWERED: "ANSWERED",
    UNANSWERED: "UNANSWERED",
};
export const ImportLensStatus = {
    COMPLETE: "COMPLETE",
    ERROR: "ERROR",
    IN_PROGRESS: "IN_PROGRESS",
};
export const IntegratingService = {
    JIRA: "JIRA",
};
export const ShareStatus = {
    ACCEPTED: "ACCEPTED",
    ASSOCIATED: "ASSOCIATED",
    ASSOCIATING: "ASSOCIATING",
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    REJECTED: "REJECTED",
    REVOKED: "REVOKED",
};
export const LensType = {
    AWS_OFFICIAL: "AWS_OFFICIAL",
    CUSTOM_SELF: "CUSTOM_SELF",
    CUSTOM_SHARED: "CUSTOM_SHARED",
};
export const QuestionPriority = {
    NONE: "NONE",
    PRIORITIZED: "PRIORITIZED",
};
export const NotificationType = {
    LENS_VERSION_DEPRECATED: "LENS_VERSION_DEPRECATED",
    LENS_VERSION_UPGRADED: "LENS_VERSION_UPGRADED",
};
export const ProfileNotificationType = {
    PROFILE_ANSWERS_UPDATED: "PROFILE_ANSWERS_UPDATED",
    PROFILE_DELETED: "PROFILE_DELETED",
};
export const ProfileOwnerType = {
    SELF: "SELF",
    SHARED: "SHARED",
};
export const ShareResourceType = {
    LENS: "LENS",
    PROFILE: "PROFILE",
    TEMPLATE: "TEMPLATE",
    WORKLOAD: "WORKLOAD",
};
export const ShareInvitationAction = {
    ACCEPT: "ACCEPT",
    REJECT: "REJECT",
};
