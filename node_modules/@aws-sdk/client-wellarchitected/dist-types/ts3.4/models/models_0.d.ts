import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { WellArchitectedServiceException as __BaseException } from "./WellArchitectedServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const IntegrationStatusInput: {
  readonly NOT_CONFIGURED: "NOT_CONFIGURED";
};
export type IntegrationStatusInput =
  (typeof IntegrationStatusInput)[keyof typeof IntegrationStatusInput];
export declare const AccountJiraIssueManagementStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type AccountJiraIssueManagementStatus =
  (typeof AccountJiraIssueManagementStatus)[keyof typeof AccountJiraIssueManagementStatus];
export declare const IssueManagementType: {
  readonly AUTO: "AUTO";
  readonly MANUAL: "MANUAL";
};
export type IssueManagementType =
  (typeof IssueManagementType)[keyof typeof IssueManagementType];
export interface AccountJiraConfigurationInput {
  IssueManagementStatus?: AccountJiraIssueManagementStatus;
  IssueManagementType?: IssueManagementType;
  JiraProjectKey?: string;
  IntegrationStatus?: IntegrationStatusInput;
}
export declare const IntegrationStatus: {
  readonly CONFIGURED: "CONFIGURED";
  readonly NOT_CONFIGURED: "NOT_CONFIGURED";
};
export type IntegrationStatus =
  (typeof IntegrationStatus)[keyof typeof IntegrationStatus];
export interface AccountJiraConfigurationOutput {
  IntegrationStatus?: IntegrationStatus;
  IssueManagementStatus?: AccountJiraIssueManagementStatus;
  IssueManagementType?: IssueManagementType;
  Subdomain?: string;
  JiraProjectKey?: string;
  StatusMessage?: string;
}
export declare const CheckStatus: {
  readonly ERROR: "ERROR";
  readonly FETCH_FAILED: "FETCH_FAILED";
  readonly NOT_AVAILABLE: "NOT_AVAILABLE";
  readonly OKAY: "OKAY";
  readonly WARNING: "WARNING";
};
export type CheckStatus = (typeof CheckStatus)[keyof typeof CheckStatus];
export interface ChoiceContent {
  DisplayText?: string;
  Url?: string;
}
export declare const AdditionalResourceType: {
  readonly HELPFUL_RESOURCE: "HELPFUL_RESOURCE";
  readonly IMPROVEMENT_PLAN: "IMPROVEMENT_PLAN";
};
export type AdditionalResourceType =
  (typeof AdditionalResourceType)[keyof typeof AdditionalResourceType];
export interface AdditionalResources {
  Type?: AdditionalResourceType;
  Content?: ChoiceContent[];
}
export declare const ChoiceReason: {
  readonly ARCHITECTURE_CONSTRAINTS: "ARCHITECTURE_CONSTRAINTS";
  readonly BUSINESS_PRIORITIES: "BUSINESS_PRIORITIES";
  readonly NONE: "NONE";
  readonly OTHER: "OTHER";
  readonly OUT_OF_SCOPE: "OUT_OF_SCOPE";
};
export type ChoiceReason = (typeof ChoiceReason)[keyof typeof ChoiceReason];
export declare const ChoiceStatus: {
  readonly NOT_APPLICABLE: "NOT_APPLICABLE";
  readonly SELECTED: "SELECTED";
  readonly UNSELECTED: "UNSELECTED";
};
export type ChoiceStatus = (typeof ChoiceStatus)[keyof typeof ChoiceStatus];
export interface ChoiceAnswer {
  ChoiceId?: string;
  Status?: ChoiceStatus;
  Reason?: ChoiceReason;
  Notes?: string;
}
export interface Choice {
  ChoiceId?: string;
  Title?: string;
  Description?: string;
  HelpfulResource?: ChoiceContent;
  ImprovementPlan?: ChoiceContent;
  AdditionalResources?: AdditionalResources[];
}
export interface JiraConfiguration {
  JiraIssueUrl?: string;
  LastSyncedTime?: Date;
}
export declare const AnswerReason: {
  readonly ARCHITECTURE_CONSTRAINTS: "ARCHITECTURE_CONSTRAINTS";
  readonly BUSINESS_PRIORITIES: "BUSINESS_PRIORITIES";
  readonly NONE: "NONE";
  readonly OTHER: "OTHER";
  readonly OUT_OF_SCOPE: "OUT_OF_SCOPE";
};
export type AnswerReason = (typeof AnswerReason)[keyof typeof AnswerReason];
export declare const Risk: {
  readonly HIGH: "HIGH";
  readonly MEDIUM: "MEDIUM";
  readonly NONE: "NONE";
  readonly NOT_APPLICABLE: "NOT_APPLICABLE";
  readonly UNANSWERED: "UNANSWERED";
};
export type Risk = (typeof Risk)[keyof typeof Risk];
export interface Answer {
  QuestionId?: string;
  PillarId?: string;
  QuestionTitle?: string;
  QuestionDescription?: string;
  ImprovementPlanUrl?: string;
  HelpfulResourceUrl?: string;
  HelpfulResourceDisplayText?: string;
  Choices?: Choice[];
  SelectedChoices?: string[];
  ChoiceAnswers?: ChoiceAnswer[];
  IsApplicable?: boolean;
  Risk?: Risk;
  Notes?: string;
  Reason?: AnswerReason;
  JiraConfiguration?: JiraConfiguration;
}
export interface ChoiceAnswerSummary {
  ChoiceId?: string;
  Status?: ChoiceStatus;
  Reason?: ChoiceReason;
}
export declare const QuestionType: {
  readonly NON_PRIORITIZED: "NON_PRIORITIZED";
  readonly PRIORITIZED: "PRIORITIZED";
};
export type QuestionType = (typeof QuestionType)[keyof typeof QuestionType];
export interface AnswerSummary {
  QuestionId?: string;
  PillarId?: string;
  QuestionTitle?: string;
  Choices?: Choice[];
  SelectedChoices?: string[];
  ChoiceAnswerSummaries?: ChoiceAnswerSummary[];
  IsApplicable?: boolean;
  Risk?: Risk;
  Reason?: AnswerReason;
  QuestionType?: QuestionType;
  JiraConfiguration?: JiraConfiguration;
}
export interface AssociateLensesInput {
  WorkloadId: string | undefined;
  LensAliases: string[] | undefined;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message: string | undefined;
  QuotaCode?: string;
  ServiceCode?: string;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface ValidationExceptionField {
  Name: string | undefined;
  Message: string | undefined;
}
export declare const ValidationExceptionReason: {
  readonly CANNOT_PARSE: "CANNOT_PARSE";
  readonly FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED";
  readonly OTHER: "OTHER";
  readonly UNKNOWN_OPERATION: "UNKNOWN_OPERATION";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message: string | undefined;
  Reason?: ValidationExceptionReason;
  Fields?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface AssociateProfilesInput {
  WorkloadId: string | undefined;
  ProfileArns: string[] | undefined;
}
export interface BestPractice {
  ChoiceId?: string;
  ChoiceTitle?: string;
}
export declare const CheckProvider: {
  readonly TRUSTED_ADVISOR: "TRUSTED_ADVISOR";
};
export type CheckProvider = (typeof CheckProvider)[keyof typeof CheckProvider];
export declare const CheckFailureReason: {
  readonly ACCESS_DENIED: "ACCESS_DENIED";
  readonly ASSUME_ROLE_ERROR: "ASSUME_ROLE_ERROR";
  readonly PREMIUM_SUPPORT_REQUIRED: "PREMIUM_SUPPORT_REQUIRED";
  readonly UNKNOWN_ERROR: "UNKNOWN_ERROR";
};
export type CheckFailureReason =
  (typeof CheckFailureReason)[keyof typeof CheckFailureReason];
export interface CheckDetail {
  Id?: string;
  Name?: string;
  Description?: string;
  Provider?: CheckProvider;
  LensArn?: string;
  PillarId?: string;
  QuestionId?: string;
  ChoiceId?: string;
  Status?: CheckStatus;
  AccountId?: string;
  FlaggedResources?: number;
  Reason?: CheckFailureReason;
  UpdatedAt?: Date;
}
export interface CheckSummary {
  Id?: string;
  Name?: string;
  Provider?: CheckProvider;
  Description?: string;
  UpdatedAt?: Date;
  LensArn?: string;
  PillarId?: string;
  QuestionId?: string;
  ChoiceId?: string;
  Status?: CheckStatus;
  AccountSummary?: Partial<Record<CheckStatus, number>>;
}
export interface ChoiceImprovementPlan {
  ChoiceId?: string;
  DisplayText?: string;
  ImprovementPlanUrl?: string;
}
export interface ChoiceUpdate {
  Status: ChoiceStatus | undefined;
  Reason?: ChoiceReason;
  Notes?: string;
}
export interface QuestionMetric {
  QuestionId?: string;
  Risk?: Risk;
  BestPractices?: BestPractice[];
}
export interface PillarMetric {
  PillarId?: string;
  RiskCounts?: Partial<Record<Risk, number>>;
  Questions?: QuestionMetric[];
}
export interface LensMetric {
  LensArn?: string;
  Pillars?: PillarMetric[];
  RiskCounts?: Partial<Record<Risk, number>>;
}
export declare const MetricType: {
  readonly WORKLOAD: "WORKLOAD";
};
export type MetricType = (typeof MetricType)[keyof typeof MetricType];
export interface ConsolidatedReportMetric {
  MetricType?: MetricType;
  RiskCounts?: Partial<Record<Risk, number>>;
  WorkloadId?: string;
  WorkloadName?: string;
  WorkloadArn?: string;
  UpdatedAt?: Date;
  Lenses?: LensMetric[];
  LensesAppliedCount?: number;
}
export interface CreateLensShareInput {
  LensAlias: string | undefined;
  SharedWith: string | undefined;
  ClientRequestToken?: string;
}
export interface CreateLensShareOutput {
  ShareId?: string;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId?: string;
  ResourceType?: string;
  QuotaCode: string | undefined;
  ServiceCode: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface CreateLensVersionInput {
  LensAlias: string | undefined;
  LensVersion: string | undefined;
  IsMajorVersion?: boolean;
  ClientRequestToken?: string;
}
export interface CreateLensVersionOutput {
  LensArn?: string;
  LensVersion?: string;
}
export interface CreateMilestoneInput {
  WorkloadId: string | undefined;
  MilestoneName: string | undefined;
  ClientRequestToken?: string;
}
export interface CreateMilestoneOutput {
  WorkloadId?: string;
  MilestoneNumber?: number;
}
export interface ProfileQuestionUpdate {
  QuestionId?: string;
  SelectedChoiceIds?: string[];
}
export interface CreateProfileInput {
  ProfileName: string | undefined;
  ProfileDescription: string | undefined;
  ProfileQuestions: ProfileQuestionUpdate[] | undefined;
  ClientRequestToken?: string;
  Tags?: Record<string, string>;
}
export interface CreateProfileOutput {
  ProfileArn?: string;
  ProfileVersion?: string;
}
export interface CreateProfileShareInput {
  ProfileArn: string | undefined;
  SharedWith: string | undefined;
  ClientRequestToken?: string;
}
export interface CreateProfileShareOutput {
  ShareId?: string;
  ProfileArn?: string;
}
export interface CreateReviewTemplateInput {
  TemplateName: string | undefined;
  Description: string | undefined;
  Lenses: string[] | undefined;
  Notes?: string;
  Tags?: Record<string, string>;
  ClientRequestToken?: string;
}
export interface CreateReviewTemplateOutput {
  TemplateArn?: string;
}
export interface CreateTemplateShareInput {
  TemplateArn: string | undefined;
  SharedWith: string | undefined;
  ClientRequestToken?: string;
}
export interface CreateTemplateShareOutput {
  TemplateArn?: string;
  ShareId?: string;
}
export declare const TrustedAdvisorIntegrationStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type TrustedAdvisorIntegrationStatus =
  (typeof TrustedAdvisorIntegrationStatus)[keyof typeof TrustedAdvisorIntegrationStatus];
export declare const DefinitionType: {
  readonly APP_REGISTRY: "APP_REGISTRY";
  readonly WORKLOAD_METADATA: "WORKLOAD_METADATA";
};
export type DefinitionType =
  (typeof DefinitionType)[keyof typeof DefinitionType];
export interface WorkloadDiscoveryConfig {
  TrustedAdvisorIntegrationStatus?: TrustedAdvisorIntegrationStatus;
  WorkloadResourceDefinition?: DefinitionType[];
}
export declare const WorkloadEnvironment: {
  readonly PREPRODUCTION: "PREPRODUCTION";
  readonly PRODUCTION: "PRODUCTION";
};
export type WorkloadEnvironment =
  (typeof WorkloadEnvironment)[keyof typeof WorkloadEnvironment];
export declare const WorkloadIssueManagementStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
  readonly INHERIT: "INHERIT";
};
export type WorkloadIssueManagementStatus =
  (typeof WorkloadIssueManagementStatus)[keyof typeof WorkloadIssueManagementStatus];
export interface WorkloadJiraConfigurationInput {
  IssueManagementStatus?: WorkloadIssueManagementStatus;
  IssueManagementType?: IssueManagementType;
  JiraProjectKey?: string;
}
export interface CreateWorkloadInput {
  WorkloadName: string | undefined;
  Description: string | undefined;
  Environment: WorkloadEnvironment | undefined;
  AccountIds?: string[];
  AwsRegions?: string[];
  NonAwsRegions?: string[];
  PillarPriorities?: string[];
  ArchitecturalDesign?: string;
  ReviewOwner?: string;
  IndustryType?: string;
  Industry?: string;
  Lenses: string[] | undefined;
  Notes?: string;
  ClientRequestToken?: string;
  Tags?: Record<string, string>;
  DiscoveryConfig?: WorkloadDiscoveryConfig;
  Applications?: string[];
  ProfileArns?: string[];
  ReviewTemplateArns?: string[];
  JiraConfiguration?: WorkloadJiraConfigurationInput;
}
export interface CreateWorkloadOutput {
  WorkloadId?: string;
  WorkloadArn?: string;
}
export declare const PermissionType: {
  readonly CONTRIBUTOR: "CONTRIBUTOR";
  readonly READONLY: "READONLY";
};
export type PermissionType =
  (typeof PermissionType)[keyof typeof PermissionType];
export interface CreateWorkloadShareInput {
  WorkloadId: string | undefined;
  SharedWith: string | undefined;
  PermissionType: PermissionType | undefined;
  ClientRequestToken?: string;
}
export interface CreateWorkloadShareOutput {
  WorkloadId?: string;
  ShareId?: string;
}
export declare const LensStatusType: {
  readonly ALL: "ALL";
  readonly DRAFT: "DRAFT";
  readonly PUBLISHED: "PUBLISHED";
};
export type LensStatusType =
  (typeof LensStatusType)[keyof typeof LensStatusType];
export interface DeleteLensInput {
  LensAlias: string | undefined;
  ClientRequestToken?: string;
  LensStatus: LensStatusType | undefined;
}
export interface DeleteLensShareInput {
  ShareId: string | undefined;
  LensAlias: string | undefined;
  ClientRequestToken?: string;
}
export interface DeleteProfileInput {
  ProfileArn: string | undefined;
  ClientRequestToken?: string;
}
export interface DeleteProfileShareInput {
  ShareId: string | undefined;
  ProfileArn: string | undefined;
  ClientRequestToken?: string;
}
export interface DeleteReviewTemplateInput {
  TemplateArn: string | undefined;
  ClientRequestToken?: string;
}
export interface DeleteTemplateShareInput {
  ShareId: string | undefined;
  TemplateArn: string | undefined;
  ClientRequestToken?: string;
}
export interface DeleteWorkloadInput {
  WorkloadId: string | undefined;
  ClientRequestToken?: string;
}
export interface DeleteWorkloadShareInput {
  ShareId: string | undefined;
  WorkloadId: string | undefined;
  ClientRequestToken?: string;
}
export declare const DifferenceStatus: {
  readonly DELETED: "DELETED";
  readonly NEW: "NEW";
  readonly UPDATED: "UPDATED";
};
export type DifferenceStatus =
  (typeof DifferenceStatus)[keyof typeof DifferenceStatus];
export interface DisassociateLensesInput {
  WorkloadId: string | undefined;
  LensAliases: string[] | undefined;
}
export interface DisassociateProfilesInput {
  WorkloadId: string | undefined;
  ProfileArns: string[] | undefined;
}
export declare const DiscoveryIntegrationStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type DiscoveryIntegrationStatus =
  (typeof DiscoveryIntegrationStatus)[keyof typeof DiscoveryIntegrationStatus];
export interface ExportLensInput {
  LensAlias: string | undefined;
  LensVersion?: string;
}
export interface ExportLensOutput {
  LensJSON?: string;
}
export interface GetAnswerInput {
  WorkloadId: string | undefined;
  LensAlias: string | undefined;
  QuestionId: string | undefined;
  MilestoneNumber?: number;
}
export interface GetAnswerOutput {
  WorkloadId?: string;
  MilestoneNumber?: number;
  LensAlias?: string;
  LensArn?: string;
  Answer?: Answer;
}
export declare const ReportFormat: {
  readonly JSON: "JSON";
  readonly PDF: "PDF";
};
export type ReportFormat = (typeof ReportFormat)[keyof typeof ReportFormat];
export interface GetConsolidatedReportInput {
  Format: ReportFormat | undefined;
  IncludeSharedResources?: boolean;
  NextToken?: string;
  MaxResults?: number;
}
export interface GetConsolidatedReportOutput {
  Metrics?: ConsolidatedReportMetric[];
  NextToken?: string;
  Base64String?: string;
}
export declare const OrganizationSharingStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type OrganizationSharingStatus =
  (typeof OrganizationSharingStatus)[keyof typeof OrganizationSharingStatus];
export interface GetGlobalSettingsOutput {
  OrganizationSharingStatus?: OrganizationSharingStatus;
  DiscoveryIntegrationStatus?: DiscoveryIntegrationStatus;
  JiraConfiguration?: AccountJiraConfigurationOutput;
}
export interface GetLensInput {
  LensAlias: string | undefined;
  LensVersion?: string;
}
export interface Lens {
  LensArn?: string;
  LensVersion?: string;
  Name?: string;
  Description?: string;
  Owner?: string;
  ShareInvitationId?: string;
  Tags?: Record<string, string>;
}
export interface GetLensOutput {
  Lens?: Lens;
}
export interface GetLensReviewInput {
  WorkloadId: string | undefined;
  LensAlias: string | undefined;
  MilestoneNumber?: number;
}
export interface SelectedPillar {
  PillarId?: string;
  SelectedQuestionIds?: string[];
}
export interface JiraSelectedQuestionConfiguration {
  SelectedPillars?: SelectedPillar[];
}
export declare const LensStatus: {
  readonly CURRENT: "CURRENT";
  readonly DELETED: "DELETED";
  readonly DEPRECATED: "DEPRECATED";
  readonly NOT_CURRENT: "NOT_CURRENT";
  readonly UNSHARED: "UNSHARED";
};
export type LensStatus = (typeof LensStatus)[keyof typeof LensStatus];
export interface PillarReviewSummary {
  PillarId?: string;
  PillarName?: string;
  Notes?: string;
  RiskCounts?: Partial<Record<Risk, number>>;
  PrioritizedRiskCounts?: Partial<Record<Risk, number>>;
}
export interface WorkloadProfile {
  ProfileArn?: string;
  ProfileVersion?: string;
}
export interface LensReview {
  LensAlias?: string;
  LensArn?: string;
  LensVersion?: string;
  LensName?: string;
  LensStatus?: LensStatus;
  PillarReviewSummaries?: PillarReviewSummary[];
  JiraConfiguration?: JiraSelectedQuestionConfiguration;
  UpdatedAt?: Date;
  Notes?: string;
  RiskCounts?: Partial<Record<Risk, number>>;
  NextToken?: string;
  Profiles?: WorkloadProfile[];
  PrioritizedRiskCounts?: Partial<Record<Risk, number>>;
}
export interface GetLensReviewOutput {
  WorkloadId?: string;
  MilestoneNumber?: number;
  LensReview?: LensReview;
}
export interface GetLensReviewReportInput {
  WorkloadId: string | undefined;
  LensAlias: string | undefined;
  MilestoneNumber?: number;
}
export interface LensReviewReport {
  LensAlias?: string;
  LensArn?: string;
  Base64String?: string;
}
export interface GetLensReviewReportOutput {
  WorkloadId?: string;
  MilestoneNumber?: number;
  LensReviewReport?: LensReviewReport;
}
export interface GetLensVersionDifferenceInput {
  LensAlias: string | undefined;
  BaseLensVersion?: string;
  TargetLensVersion?: string;
}
export interface QuestionDifference {
  QuestionId?: string;
  QuestionTitle?: string;
  DifferenceStatus?: DifferenceStatus;
}
export interface PillarDifference {
  PillarId?: string;
  PillarName?: string;
  DifferenceStatus?: DifferenceStatus;
  QuestionDifferences?: QuestionDifference[];
}
export interface VersionDifferences {
  PillarDifferences?: PillarDifference[];
}
export interface GetLensVersionDifferenceOutput {
  LensAlias?: string;
  LensArn?: string;
  BaseLensVersion?: string;
  TargetLensVersion?: string;
  LatestLensVersion?: string;
  VersionDifferences?: VersionDifferences;
}
export interface GetMilestoneInput {
  WorkloadId: string | undefined;
  MilestoneNumber: number | undefined;
}
export declare const WorkloadImprovementStatus: {
  readonly COMPLETE: "COMPLETE";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly NOT_APPLICABLE: "NOT_APPLICABLE";
  readonly NOT_STARTED: "NOT_STARTED";
  readonly RISK_ACKNOWLEDGED: "RISK_ACKNOWLEDGED";
};
export type WorkloadImprovementStatus =
  (typeof WorkloadImprovementStatus)[keyof typeof WorkloadImprovementStatus];
export interface WorkloadJiraConfigurationOutput {
  IssueManagementStatus?: WorkloadIssueManagementStatus;
  IssueManagementType?: IssueManagementType;
  JiraProjectKey?: string;
  StatusMessage?: string;
}
export interface Workload {
  WorkloadId?: string;
  WorkloadArn?: string;
  WorkloadName?: string;
  Description?: string;
  Environment?: WorkloadEnvironment;
  UpdatedAt?: Date;
  AccountIds?: string[];
  AwsRegions?: string[];
  NonAwsRegions?: string[];
  ArchitecturalDesign?: string;
  ReviewOwner?: string;
  ReviewRestrictionDate?: Date;
  IsReviewOwnerUpdateAcknowledged?: boolean;
  IndustryType?: string;
  Industry?: string;
  Notes?: string;
  ImprovementStatus?: WorkloadImprovementStatus;
  RiskCounts?: Partial<Record<Risk, number>>;
  PillarPriorities?: string[];
  Lenses?: string[];
  Owner?: string;
  ShareInvitationId?: string;
  Tags?: Record<string, string>;
  DiscoveryConfig?: WorkloadDiscoveryConfig;
  Applications?: string[];
  Profiles?: WorkloadProfile[];
  PrioritizedRiskCounts?: Partial<Record<Risk, number>>;
  JiraConfiguration?: WorkloadJiraConfigurationOutput;
}
export interface Milestone {
  MilestoneNumber?: number;
  MilestoneName?: string;
  RecordedAt?: Date;
  Workload?: Workload;
}
export interface GetMilestoneOutput {
  WorkloadId?: string;
  Milestone?: Milestone;
}
export interface GetProfileInput {
  ProfileArn: string | undefined;
  ProfileVersion?: string;
}
export interface ProfileChoice {
  ChoiceId?: string;
  ChoiceTitle?: string;
  ChoiceDescription?: string;
}
export interface ProfileQuestion {
  QuestionId?: string;
  QuestionTitle?: string;
  QuestionDescription?: string;
  QuestionChoices?: ProfileChoice[];
  SelectedChoiceIds?: string[];
  MinSelectedChoices?: number;
  MaxSelectedChoices?: number;
}
export interface Profile {
  ProfileArn?: string;
  ProfileVersion?: string;
  ProfileName?: string;
  ProfileDescription?: string;
  ProfileQuestions?: ProfileQuestion[];
  Owner?: string;
  CreatedAt?: Date;
  UpdatedAt?: Date;
  ShareInvitationId?: string;
  Tags?: Record<string, string>;
}
export interface GetProfileOutput {
  Profile?: Profile;
}
export interface GetProfileTemplateInput {}
export interface ProfileTemplateChoice {
  ChoiceId?: string;
  ChoiceTitle?: string;
  ChoiceDescription?: string;
}
export interface ProfileTemplateQuestion {
  QuestionId?: string;
  QuestionTitle?: string;
  QuestionDescription?: string;
  QuestionChoices?: ProfileTemplateChoice[];
  MinSelectedChoices?: number;
  MaxSelectedChoices?: number;
}
export interface ProfileTemplate {
  TemplateName?: string;
  TemplateQuestions?: ProfileTemplateQuestion[];
  CreatedAt?: Date;
  UpdatedAt?: Date;
}
export interface GetProfileTemplateOutput {
  ProfileTemplate?: ProfileTemplate;
}
export interface GetReviewTemplateInput {
  TemplateArn: string | undefined;
}
export declare const Question: {
  readonly ANSWERED: "ANSWERED";
  readonly UNANSWERED: "UNANSWERED";
};
export type Question = (typeof Question)[keyof typeof Question];
export declare const ReviewTemplateUpdateStatus: {
  readonly CURRENT: "CURRENT";
  readonly LENS_NOT_CURRENT: "LENS_NOT_CURRENT";
};
export type ReviewTemplateUpdateStatus =
  (typeof ReviewTemplateUpdateStatus)[keyof typeof ReviewTemplateUpdateStatus];
export interface ReviewTemplate {
  Description?: string;
  Lenses?: string[];
  Notes?: string;
  QuestionCounts?: Partial<Record<Question, number>>;
  Owner?: string;
  UpdatedAt?: Date;
  TemplateArn?: string;
  TemplateName?: string;
  Tags?: Record<string, string>;
  UpdateStatus?: ReviewTemplateUpdateStatus;
  ShareInvitationId?: string;
}
export interface GetReviewTemplateOutput {
  ReviewTemplate?: ReviewTemplate;
}
export interface GetReviewTemplateAnswerInput {
  TemplateArn: string | undefined;
  LensAlias: string | undefined;
  QuestionId: string | undefined;
}
export declare const ReviewTemplateAnswerStatus: {
  readonly ANSWERED: "ANSWERED";
  readonly UNANSWERED: "UNANSWERED";
};
export type ReviewTemplateAnswerStatus =
  (typeof ReviewTemplateAnswerStatus)[keyof typeof ReviewTemplateAnswerStatus];
export interface ReviewTemplateAnswer {
  QuestionId?: string;
  PillarId?: string;
  QuestionTitle?: string;
  QuestionDescription?: string;
  ImprovementPlanUrl?: string;
  HelpfulResourceUrl?: string;
  HelpfulResourceDisplayText?: string;
  Choices?: Choice[];
  SelectedChoices?: string[];
  ChoiceAnswers?: ChoiceAnswer[];
  IsApplicable?: boolean;
  AnswerStatus?: ReviewTemplateAnswerStatus;
  Notes?: string;
  Reason?: AnswerReason;
}
export interface GetReviewTemplateAnswerOutput {
  TemplateArn?: string;
  LensAlias?: string;
  Answer?: ReviewTemplateAnswer;
}
export interface GetReviewTemplateLensReviewInput {
  TemplateArn: string | undefined;
  LensAlias: string | undefined;
}
export interface ReviewTemplatePillarReviewSummary {
  PillarId?: string;
  PillarName?: string;
  Notes?: string;
  QuestionCounts?: Partial<Record<Question, number>>;
}
export interface ReviewTemplateLensReview {
  LensAlias?: string;
  LensArn?: string;
  LensVersion?: string;
  LensName?: string;
  LensStatus?: LensStatus;
  PillarReviewSummaries?: ReviewTemplatePillarReviewSummary[];
  UpdatedAt?: Date;
  Notes?: string;
  QuestionCounts?: Partial<Record<Question, number>>;
  NextToken?: string;
}
export interface GetReviewTemplateLensReviewOutput {
  TemplateArn?: string;
  LensReview?: ReviewTemplateLensReview;
}
export interface GetWorkloadInput {
  WorkloadId: string | undefined;
}
export interface GetWorkloadOutput {
  Workload?: Workload;
}
export interface ImportLensInput {
  LensAlias?: string;
  JSONString: string | undefined;
  ClientRequestToken?: string;
  Tags?: Record<string, string>;
}
export declare const ImportLensStatus: {
  readonly COMPLETE: "COMPLETE";
  readonly ERROR: "ERROR";
  readonly IN_PROGRESS: "IN_PROGRESS";
};
export type ImportLensStatus =
  (typeof ImportLensStatus)[keyof typeof ImportLensStatus];
export interface ImportLensOutput {
  LensArn?: string;
  Status?: ImportLensStatus;
}
export interface ImprovementSummary {
  QuestionId?: string;
  PillarId?: string;
  QuestionTitle?: string;
  Risk?: Risk;
  ImprovementPlanUrl?: string;
  ImprovementPlans?: ChoiceImprovementPlan[];
  JiraConfiguration?: JiraConfiguration;
}
export declare const IntegratingService: {
  readonly JIRA: "JIRA";
};
export type IntegratingService =
  (typeof IntegratingService)[keyof typeof IntegratingService];
export interface LensReviewSummary {
  LensAlias?: string;
  LensArn?: string;
  LensVersion?: string;
  LensName?: string;
  LensStatus?: LensStatus;
  UpdatedAt?: Date;
  RiskCounts?: Partial<Record<Risk, number>>;
  Profiles?: WorkloadProfile[];
  PrioritizedRiskCounts?: Partial<Record<Risk, number>>;
}
export declare const ShareStatus: {
  readonly ACCEPTED: "ACCEPTED";
  readonly ASSOCIATED: "ASSOCIATED";
  readonly ASSOCIATING: "ASSOCIATING";
  readonly EXPIRED: "EXPIRED";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly REJECTED: "REJECTED";
  readonly REVOKED: "REVOKED";
};
export type ShareStatus = (typeof ShareStatus)[keyof typeof ShareStatus];
export interface LensShareSummary {
  ShareId?: string;
  SharedWith?: string;
  Status?: ShareStatus;
  StatusMessage?: string;
}
export declare const LensType: {
  readonly AWS_OFFICIAL: "AWS_OFFICIAL";
  readonly CUSTOM_SELF: "CUSTOM_SELF";
  readonly CUSTOM_SHARED: "CUSTOM_SHARED";
};
export type LensType = (typeof LensType)[keyof typeof LensType];
export interface LensSummary {
  LensArn?: string;
  LensAlias?: string;
  LensName?: string;
  LensType?: LensType;
  Description?: string;
  CreatedAt?: Date;
  UpdatedAt?: Date;
  LensVersion?: string;
  Owner?: string;
  LensStatus?: LensStatus;
}
export interface LensUpgradeSummary {
  WorkloadId?: string;
  WorkloadName?: string;
  LensAlias?: string;
  LensArn?: string;
  CurrentLensVersion?: string;
  LatestLensVersion?: string;
  ResourceArn?: string;
  ResourceName?: string;
}
export declare const QuestionPriority: {
  readonly NONE: "NONE";
  readonly PRIORITIZED: "PRIORITIZED";
};
export type QuestionPriority =
  (typeof QuestionPriority)[keyof typeof QuestionPriority];
export interface ListAnswersInput {
  WorkloadId: string | undefined;
  LensAlias: string | undefined;
  PillarId?: string;
  MilestoneNumber?: number;
  NextToken?: string;
  MaxResults?: number;
  QuestionPriority?: QuestionPriority;
}
export interface ListAnswersOutput {
  WorkloadId?: string;
  MilestoneNumber?: number;
  LensAlias?: string;
  LensArn?: string;
  AnswerSummaries?: AnswerSummary[];
  NextToken?: string;
}
export interface ListCheckDetailsInput {
  WorkloadId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  LensArn: string | undefined;
  PillarId: string | undefined;
  QuestionId: string | undefined;
  ChoiceId: string | undefined;
}
export interface ListCheckDetailsOutput {
  CheckDetails?: CheckDetail[];
  NextToken?: string;
}
export interface ListCheckSummariesInput {
  WorkloadId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  LensArn: string | undefined;
  PillarId: string | undefined;
  QuestionId: string | undefined;
  ChoiceId: string | undefined;
}
export interface ListCheckSummariesOutput {
  CheckSummaries?: CheckSummary[];
  NextToken?: string;
}
export interface ListLensesInput {
  NextToken?: string;
  MaxResults?: number;
  LensType?: LensType;
  LensStatus?: LensStatusType;
  LensName?: string;
}
export interface ListLensesOutput {
  LensSummaries?: LensSummary[];
  NextToken?: string;
}
export interface ListLensReviewImprovementsInput {
  WorkloadId: string | undefined;
  LensAlias: string | undefined;
  PillarId?: string;
  MilestoneNumber?: number;
  NextToken?: string;
  MaxResults?: number;
  QuestionPriority?: QuestionPriority;
}
export interface ListLensReviewImprovementsOutput {
  WorkloadId?: string;
  MilestoneNumber?: number;
  LensAlias?: string;
  LensArn?: string;
  ImprovementSummaries?: ImprovementSummary[];
  NextToken?: string;
}
export interface ListLensReviewsInput {
  WorkloadId: string | undefined;
  MilestoneNumber?: number;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListLensReviewsOutput {
  WorkloadId?: string;
  MilestoneNumber?: number;
  LensReviewSummaries?: LensReviewSummary[];
  NextToken?: string;
}
export interface ListLensSharesInput {
  LensAlias: string | undefined;
  SharedWithPrefix?: string;
  NextToken?: string;
  MaxResults?: number;
  Status?: ShareStatus;
}
export interface ListLensSharesOutput {
  LensShareSummaries?: LensShareSummary[];
  NextToken?: string;
}
export interface ListMilestonesInput {
  WorkloadId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface WorkloadSummary {
  WorkloadId?: string;
  WorkloadArn?: string;
  WorkloadName?: string;
  Owner?: string;
  UpdatedAt?: Date;
  Lenses?: string[];
  RiskCounts?: Partial<Record<Risk, number>>;
  ImprovementStatus?: WorkloadImprovementStatus;
  Profiles?: WorkloadProfile[];
  PrioritizedRiskCounts?: Partial<Record<Risk, number>>;
}
export interface MilestoneSummary {
  MilestoneNumber?: number;
  MilestoneName?: string;
  RecordedAt?: Date;
  WorkloadSummary?: WorkloadSummary;
}
export interface ListMilestonesOutput {
  WorkloadId?: string;
  MilestoneSummaries?: MilestoneSummary[];
  NextToken?: string;
}
export interface ListNotificationsInput {
  WorkloadId?: string;
  NextToken?: string;
  MaxResults?: number;
  ResourceArn?: string;
}
export declare const NotificationType: {
  readonly LENS_VERSION_DEPRECATED: "LENS_VERSION_DEPRECATED";
  readonly LENS_VERSION_UPGRADED: "LENS_VERSION_UPGRADED";
};
export type NotificationType =
  (typeof NotificationType)[keyof typeof NotificationType];
export interface NotificationSummary {
  Type?: NotificationType;
  LensUpgradeSummary?: LensUpgradeSummary;
}
export interface ListNotificationsOutput {
  NotificationSummaries?: NotificationSummary[];
  NextToken?: string;
}
export interface ListProfileNotificationsInput {
  WorkloadId?: string;
  NextToken?: string;
  MaxResults?: number;
}
export declare const ProfileNotificationType: {
  readonly PROFILE_ANSWERS_UPDATED: "PROFILE_ANSWERS_UPDATED";
  readonly PROFILE_DELETED: "PROFILE_DELETED";
};
export type ProfileNotificationType =
  (typeof ProfileNotificationType)[keyof typeof ProfileNotificationType];
export interface ProfileNotificationSummary {
  CurrentProfileVersion?: string;
  LatestProfileVersion?: string;
  Type?: ProfileNotificationType;
  ProfileArn?: string;
  ProfileName?: string;
  WorkloadId?: string;
  WorkloadName?: string;
}
export interface ListProfileNotificationsOutput {
  NotificationSummaries?: ProfileNotificationSummary[];
  NextToken?: string;
}
export declare const ProfileOwnerType: {
  readonly SELF: "SELF";
  readonly SHARED: "SHARED";
};
export type ProfileOwnerType =
  (typeof ProfileOwnerType)[keyof typeof ProfileOwnerType];
export interface ListProfilesInput {
  ProfileNamePrefix?: string;
  ProfileOwnerType?: ProfileOwnerType;
  NextToken?: string;
  MaxResults?: number;
}
export interface ProfileSummary {
  ProfileArn?: string;
  ProfileVersion?: string;
  ProfileName?: string;
  ProfileDescription?: string;
  Owner?: string;
  CreatedAt?: Date;
  UpdatedAt?: Date;
}
export interface ListProfilesOutput {
  ProfileSummaries?: ProfileSummary[];
  NextToken?: string;
}
export interface ListProfileSharesInput {
  ProfileArn: string | undefined;
  SharedWithPrefix?: string;
  NextToken?: string;
  MaxResults?: number;
  Status?: ShareStatus;
}
export interface ProfileShareSummary {
  ShareId?: string;
  SharedWith?: string;
  Status?: ShareStatus;
  StatusMessage?: string;
}
export interface ListProfileSharesOutput {
  ProfileShareSummaries?: ProfileShareSummary[];
  NextToken?: string;
}
export interface ListReviewTemplateAnswersInput {
  TemplateArn: string | undefined;
  LensAlias: string | undefined;
  PillarId?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface ReviewTemplateAnswerSummary {
  QuestionId?: string;
  PillarId?: string;
  QuestionTitle?: string;
  Choices?: Choice[];
  SelectedChoices?: string[];
  ChoiceAnswerSummaries?: ChoiceAnswerSummary[];
  IsApplicable?: boolean;
  AnswerStatus?: ReviewTemplateAnswerStatus;
  Reason?: AnswerReason;
  QuestionType?: QuestionType;
}
export interface ListReviewTemplateAnswersOutput {
  TemplateArn?: string;
  LensAlias?: string;
  AnswerSummaries?: ReviewTemplateAnswerSummary[];
  NextToken?: string;
}
export interface ListReviewTemplatesInput {
  NextToken?: string;
  MaxResults?: number;
}
export interface ReviewTemplateSummary {
  Description?: string;
  Lenses?: string[];
  Owner?: string;
  UpdatedAt?: Date;
  TemplateArn?: string;
  TemplateName?: string;
  UpdateStatus?: ReviewTemplateUpdateStatus;
}
export interface ListReviewTemplatesOutput {
  ReviewTemplates?: ReviewTemplateSummary[];
  NextToken?: string;
}
export declare const ShareResourceType: {
  readonly LENS: "LENS";
  readonly PROFILE: "PROFILE";
  readonly TEMPLATE: "TEMPLATE";
  readonly WORKLOAD: "WORKLOAD";
};
export type ShareResourceType =
  (typeof ShareResourceType)[keyof typeof ShareResourceType];
export interface ListShareInvitationsInput {
  WorkloadNamePrefix?: string;
  LensNamePrefix?: string;
  ShareResourceType?: ShareResourceType;
  NextToken?: string;
  MaxResults?: number;
  ProfileNamePrefix?: string;
  TemplateNamePrefix?: string;
}
export interface ShareInvitationSummary {
  ShareInvitationId?: string;
  SharedBy?: string;
  SharedWith?: string;
  PermissionType?: PermissionType;
  ShareResourceType?: ShareResourceType;
  WorkloadName?: string;
  WorkloadId?: string;
  LensName?: string;
  LensArn?: string;
  ProfileName?: string;
  ProfileArn?: string;
  TemplateName?: string;
  TemplateArn?: string;
}
export interface ListShareInvitationsOutput {
  ShareInvitationSummaries?: ShareInvitationSummary[];
  NextToken?: string;
}
export interface ListTagsForResourceInput {
  WorkloadArn: string | undefined;
}
export interface ListTagsForResourceOutput {
  Tags?: Record<string, string>;
}
export interface ListTemplateSharesInput {
  TemplateArn: string | undefined;
  SharedWithPrefix?: string;
  NextToken?: string;
  MaxResults?: number;
  Status?: ShareStatus;
}
export interface TemplateShareSummary {
  ShareId?: string;
  SharedWith?: string;
  Status?: ShareStatus;
  StatusMessage?: string;
}
export interface ListTemplateSharesOutput {
  TemplateArn?: string;
  TemplateShareSummaries?: TemplateShareSummary[];
  NextToken?: string;
}
export interface ListWorkloadsInput {
  WorkloadNamePrefix?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListWorkloadsOutput {
  WorkloadSummaries?: WorkloadSummary[];
  NextToken?: string;
}
export interface ListWorkloadSharesInput {
  WorkloadId: string | undefined;
  SharedWithPrefix?: string;
  NextToken?: string;
  MaxResults?: number;
  Status?: ShareStatus;
}
export interface WorkloadShareSummary {
  ShareId?: string;
  SharedWith?: string;
  PermissionType?: PermissionType;
  Status?: ShareStatus;
  StatusMessage?: string;
}
export interface ListWorkloadSharesOutput {
  WorkloadId?: string;
  WorkloadShareSummaries?: WorkloadShareSummary[];
  NextToken?: string;
}
export interface ShareInvitation {
  ShareInvitationId?: string;
  ShareResourceType?: ShareResourceType;
  WorkloadId?: string;
  LensAlias?: string;
  LensArn?: string;
  ProfileArn?: string;
  TemplateArn?: string;
}
export declare const ShareInvitationAction: {
  readonly ACCEPT: "ACCEPT";
  readonly REJECT: "REJECT";
};
export type ShareInvitationAction =
  (typeof ShareInvitationAction)[keyof typeof ShareInvitationAction];
export interface TagResourceInput {
  WorkloadArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface TagResourceOutput {}
export interface UntagResourceInput {
  WorkloadArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceOutput {}
export interface UpdateAnswerInput {
  WorkloadId: string | undefined;
  LensAlias: string | undefined;
  QuestionId: string | undefined;
  SelectedChoices?: string[];
  ChoiceUpdates?: Record<string, ChoiceUpdate>;
  Notes?: string;
  IsApplicable?: boolean;
  Reason?: AnswerReason;
}
export interface UpdateAnswerOutput {
  WorkloadId?: string;
  LensAlias?: string;
  LensArn?: string;
  Answer?: Answer;
}
export interface UpdateGlobalSettingsInput {
  OrganizationSharingStatus?: OrganizationSharingStatus;
  DiscoveryIntegrationStatus?: DiscoveryIntegrationStatus;
  JiraConfiguration?: AccountJiraConfigurationInput;
}
export interface UpdateIntegrationInput {
  WorkloadId: string | undefined;
  ClientRequestToken?: string;
  IntegratingService: IntegratingService | undefined;
}
export interface UpdateLensReviewInput {
  WorkloadId: string | undefined;
  LensAlias: string | undefined;
  LensNotes?: string;
  PillarNotes?: Record<string, string>;
  JiraConfiguration?: JiraSelectedQuestionConfiguration;
}
export interface UpdateLensReviewOutput {
  WorkloadId?: string;
  LensReview?: LensReview;
}
export interface UpdateProfileInput {
  ProfileArn: string | undefined;
  ProfileDescription?: string;
  ProfileQuestions?: ProfileQuestionUpdate[];
}
export interface UpdateProfileOutput {
  Profile?: Profile;
}
export interface UpdateReviewTemplateInput {
  TemplateArn: string | undefined;
  TemplateName?: string;
  Description?: string;
  Notes?: string;
  LensesToAssociate?: string[];
  LensesToDisassociate?: string[];
}
export interface UpdateReviewTemplateOutput {
  ReviewTemplate?: ReviewTemplate;
}
export interface UpdateReviewTemplateAnswerInput {
  TemplateArn: string | undefined;
  LensAlias: string | undefined;
  QuestionId: string | undefined;
  SelectedChoices?: string[];
  ChoiceUpdates?: Record<string, ChoiceUpdate>;
  Notes?: string;
  IsApplicable?: boolean;
  Reason?: AnswerReason;
}
export interface UpdateReviewTemplateAnswerOutput {
  TemplateArn?: string;
  LensAlias?: string;
  Answer?: ReviewTemplateAnswer;
}
export interface UpdateReviewTemplateLensReviewInput {
  TemplateArn: string | undefined;
  LensAlias: string | undefined;
  LensNotes?: string;
  PillarNotes?: Record<string, string>;
}
export interface UpdateReviewTemplateLensReviewOutput {
  TemplateArn?: string;
  LensReview?: ReviewTemplateLensReview;
}
export interface UpdateShareInvitationInput {
  ShareInvitationId: string | undefined;
  ShareInvitationAction: ShareInvitationAction | undefined;
}
export interface UpdateShareInvitationOutput {
  ShareInvitation?: ShareInvitation;
}
export interface UpdateWorkloadInput {
  WorkloadId: string | undefined;
  WorkloadName?: string;
  Description?: string;
  Environment?: WorkloadEnvironment;
  AccountIds?: string[];
  AwsRegions?: string[];
  NonAwsRegions?: string[];
  PillarPriorities?: string[];
  ArchitecturalDesign?: string;
  ReviewOwner?: string;
  IsReviewOwnerUpdateAcknowledged?: boolean;
  IndustryType?: string;
  Industry?: string;
  Notes?: string;
  ImprovementStatus?: WorkloadImprovementStatus;
  DiscoveryConfig?: WorkloadDiscoveryConfig;
  Applications?: string[];
  JiraConfiguration?: WorkloadJiraConfigurationInput;
}
export interface UpdateWorkloadOutput {
  Workload?: Workload;
}
export interface UpdateWorkloadShareInput {
  ShareId: string | undefined;
  WorkloadId: string | undefined;
  PermissionType: PermissionType | undefined;
}
export interface WorkloadShare {
  ShareId?: string;
  SharedBy?: string;
  SharedWith?: string;
  PermissionType?: PermissionType;
  Status?: ShareStatus;
  WorkloadName?: string;
  WorkloadId?: string;
}
export interface UpdateWorkloadShareOutput {
  WorkloadId?: string;
  WorkloadShare?: WorkloadShare;
}
export interface UpgradeLensReviewInput {
  WorkloadId: string | undefined;
  LensAlias: string | undefined;
  MilestoneName: string | undefined;
  ClientRequestToken?: string;
}
export interface UpgradeProfileVersionInput {
  WorkloadId: string | undefined;
  ProfileArn: string | undefined;
  MilestoneName?: string;
  ClientRequestToken?: string;
}
export interface UpgradeReviewTemplateLensReviewInput {
  TemplateArn: string | undefined;
  LensAlias: string | undefined;
  ClientRequestToken?: string;
}
