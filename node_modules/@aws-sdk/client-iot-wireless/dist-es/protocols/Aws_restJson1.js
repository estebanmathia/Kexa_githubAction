import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, limitedParseFloat32 as __limitedParseFloat32, map, parseEpochTimestamp as __parseEpochTimestamp, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { IoTWirelessServiceException as __BaseException } from "../models/IoTWirelessServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ThrottlingException, ValidationException, } from "../models/models_0";
import { TooManyTagsException, } from "../models/models_1";
export const se_AssociateAwsAccountWithPartnerAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/partner-accounts");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Sidewalk: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateMulticastGroupWithFuotaTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/fuota-tasks/{Id}/multicast-group");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        MulticastGroupId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateWirelessDeviceWithFuotaTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/fuota-tasks/{Id}/wireless-device");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        WirelessDeviceId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateWirelessDeviceWithMulticastGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/multicast-groups/{Id}/wireless-device");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        WirelessDeviceId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateWirelessDeviceWithThingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/wireless-devices/{Id}/thing");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        ThingArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateWirelessGatewayWithCertificateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/wireless-gateways/{Id}/certificate");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        IotCertificateId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateWirelessGatewayWithThingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/wireless-gateways/{Id}/thing");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        ThingArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CancelMulticastGroupSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/multicast-groups/{Id}/session");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_CreateDestinationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/destinations");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        Expression: [],
        ExpressionType: [],
        Name: [],
        RoleArn: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDeviceProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/device-profiles");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        LoRaWAN: (_) => _json(_),
        Name: [],
        Sidewalk: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFuotaTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/fuota-tasks");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        FirmwareUpdateImage: [],
        FirmwareUpdateRole: [],
        FragmentIntervalMS: [],
        FragmentSizeBytes: [],
        LoRaWAN: (_) => _json(_),
        Name: [],
        RedundancyPercent: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMulticastGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/multicast-groups");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        LoRaWAN: (_) => _json(_),
        Name: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateNetworkAnalyzerConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/network-analyzer-configurations");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        MulticastGroups: (_) => _json(_),
        Name: [],
        Tags: (_) => _json(_),
        TraceContent: (_) => _json(_),
        WirelessDevices: (_) => _json(_),
        WirelessGateways: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateServiceProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/service-profiles");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        LoRaWAN: (_) => _json(_),
        Name: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateWirelessDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/wireless-devices");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        DestinationName: [],
        LoRaWAN: (_) => _json(_),
        Name: [],
        Positioning: [],
        Sidewalk: (_) => _json(_),
        Tags: (_) => _json(_),
        Type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateWirelessGatewayCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/wireless-gateways");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        LoRaWAN: (_) => se_LoRaWANGateway(_, context),
        Name: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateWirelessGatewayTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/wireless-gateways/{Id}/tasks");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        WirelessGatewayTaskDefinitionId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateWirelessGatewayTaskDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/wireless-gateway-task-definitions");
    let body;
    body = JSON.stringify(take(input, {
        AutoCreateTasks: [],
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Name: [],
        Tags: (_) => _json(_),
        Update: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteDestinationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/destinations/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDeviceProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/device-profiles/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteFuotaTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/fuota-tasks/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteMulticastGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/multicast-groups/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteNetworkAnalyzerConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/network-analyzer-configurations/{ConfigurationName}");
    b.p("ConfigurationName", () => input.ConfigurationName, "{ConfigurationName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteQueuedMessagesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-devices/{Id}/data");
    b.p("Id", () => input.Id, "{Id}", false);
    const query = map({
        [_mI]: [, __expectNonNull(input[_MI], `MessageId`)],
        [_WDT]: [, input[_WDT]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteServiceProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/service-profiles/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteWirelessDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-devices/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteWirelessDeviceImportTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless_device_import_task/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteWirelessGatewayCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-gateways/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteWirelessGatewayTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-gateways/{Id}/tasks");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteWirelessGatewayTaskDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-gateway-task-definitions/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeregisterWirelessDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-devices/{Identifier}/deregister");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    const query = map({
        [_WDT]: [, input[_WDT]],
    });
    let body;
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateAwsAccountFromPartnerAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/partner-accounts/{PartnerAccountId}");
    b.p("PartnerAccountId", () => input.PartnerAccountId, "{PartnerAccountId}", false);
    const query = map({
        [_pT]: [, __expectNonNull(input[_PT], `PartnerType`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateMulticastGroupFromFuotaTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/fuota-tasks/{Id}/multicast-groups/{MulticastGroupId}");
    b.p("Id", () => input.Id, "{Id}", false);
    b.p("MulticastGroupId", () => input.MulticastGroupId, "{MulticastGroupId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateWirelessDeviceFromFuotaTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/fuota-tasks/{Id}/wireless-devices/{WirelessDeviceId}");
    b.p("Id", () => input.Id, "{Id}", false);
    b.p("WirelessDeviceId", () => input.WirelessDeviceId, "{WirelessDeviceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateWirelessDeviceFromMulticastGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/multicast-groups/{Id}/wireless-devices/{WirelessDeviceId}");
    b.p("Id", () => input.Id, "{Id}", false);
    b.p("WirelessDeviceId", () => input.WirelessDeviceId, "{WirelessDeviceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateWirelessDeviceFromThingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-devices/{Id}/thing");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateWirelessGatewayFromCertificateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-gateways/{Id}/certificate");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateWirelessGatewayFromThingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-gateways/{Id}/thing");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetDestinationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/destinations/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDeviceProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/device-profiles/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetEventConfigurationByResourceTypesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/event-configurations-resource-types");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFuotaTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/fuota-tasks/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetLogLevelsByResourceTypesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/log-levels");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMetricConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/metric-configuration");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMetricsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/metrics");
    let body;
    body = JSON.stringify(take(input, {
        SummaryMetricQueries: (_) => se_SummaryMetricQueries(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetMulticastGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/multicast-groups/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMulticastGroupSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/multicast-groups/{Id}/session");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetNetworkAnalyzerConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/network-analyzer-configurations/{ConfigurationName}");
    b.p("ConfigurationName", () => input.ConfigurationName, "{ConfigurationName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPartnerAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/partner-accounts/{PartnerAccountId}");
    b.p("PartnerAccountId", () => input.PartnerAccountId, "{PartnerAccountId}", false);
    const query = map({
        [_pT]: [, __expectNonNull(input[_PT], `PartnerType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetPositionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/positions/{ResourceIdentifier}");
    b.p("ResourceIdentifier", () => input.ResourceIdentifier, "{ResourceIdentifier}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetPositionConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/position-configurations/{ResourceIdentifier}");
    b.p("ResourceIdentifier", () => input.ResourceIdentifier, "{ResourceIdentifier}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetPositionEstimateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/position-estimate");
    let body;
    body = JSON.stringify(take(input, {
        CellTowers: (_) => se_CellTowers(_, context),
        Gnss: (_) => se_Gnss(_, context),
        Ip: (_) => _json(_),
        Timestamp: (_) => Math.round(_.getTime() / 1000),
        WiFiAccessPoints: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetResourceEventConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/event-configurations/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    const query = map({
        [_iT]: [, __expectNonNull(input[_IT], `IdentifierType`)],
        [_pT]: [, input[_PT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetResourceLogLevelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/log-levels/{ResourceIdentifier}");
    b.p("ResourceIdentifier", () => input.ResourceIdentifier, "{ResourceIdentifier}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetResourcePositionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resource-positions/{ResourceIdentifier}");
    b.p("ResourceIdentifier", () => input.ResourceIdentifier, "{ResourceIdentifier}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetServiceEndpointCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/service-endpoint");
    const query = map({
        [_sT]: [, input[_ST]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetServiceProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/service-profiles/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetWirelessDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-devices/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    const query = map({
        [_iT]: [, __expectNonNull(input[_IT], `IdentifierType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetWirelessDeviceImportTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless_device_import_task/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetWirelessDeviceStatisticsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-devices/{WirelessDeviceId}/statistics");
    b.p("WirelessDeviceId", () => input.WirelessDeviceId, "{WirelessDeviceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetWirelessGatewayCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-gateways/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    const query = map({
        [_iT]: [, __expectNonNull(input[_IT], `IdentifierType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetWirelessGatewayCertificateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-gateways/{Id}/certificate");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetWirelessGatewayFirmwareInformationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-gateways/{Id}/firmware-information");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetWirelessGatewayStatisticsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-gateways/{WirelessGatewayId}/statistics");
    b.p("WirelessGatewayId", () => input.WirelessGatewayId, "{WirelessGatewayId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetWirelessGatewayTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-gateways/{Id}/tasks");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetWirelessGatewayTaskDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-gateway-task-definitions/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListDestinationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/destinations");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDeviceProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/device-profiles");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_dPT]: [, input[_DPT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDevicesForWirelessDeviceImportTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless_device_import_task");
    const query = map({
        [_i]: [, __expectNonNull(input[_I], `Id`)],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_s]: [, input[_S]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListEventConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/event-configurations");
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFuotaTasksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/fuota-tasks");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMulticastGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/multicast-groups");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMulticastGroupsByFuotaTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/fuota-tasks/{Id}/multicast-groups");
    b.p("Id", () => input.Id, "{Id}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListNetworkAnalyzerConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/network-analyzer-configurations");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPartnerAccountsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/partner-accounts");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPositionConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/position-configurations");
    const query = map({
        [_rT]: [, input[_RT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListQueuedMessagesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-devices/{Id}/data");
    b.p("Id", () => input.Id, "{Id}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_WDT]: [, input[_WDT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListServiceProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/service-profiles");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags");
    const query = map({
        [_rA]: [, __expectNonNull(input[_RA], `ResourceArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListWirelessDeviceImportTasksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless_device_import_tasks");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListWirelessDevicesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-devices");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_dN]: [, input[_DN]],
        [_dPI]: [, input[_DPI]],
        [_sPI]: [, input[_SPI]],
        [_wDT]: [, input[_WDT]],
        [_fTI]: [, input[_FTI]],
        [_mGI]: [, input[_MGI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListWirelessGatewaysCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-gateways");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListWirelessGatewayTaskDefinitionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-gateway-task-definitions");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_tDT]: [, input[_TDT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutPositionConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/position-configurations/{ResourceIdentifier}");
    b.p("ResourceIdentifier", () => input.ResourceIdentifier, "{ResourceIdentifier}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        Destination: [],
        Solvers: (_) => _json(_),
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutResourceLogLevelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/log-levels/{ResourceIdentifier}");
    b.p("ResourceIdentifier", () => input.ResourceIdentifier, "{ResourceIdentifier}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        LogLevel: [],
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_ResetAllResourceLogLevelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/log-levels");
    let body;
    body = "";
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_ResetResourceLogLevelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/log-levels/{ResourceIdentifier}");
    b.p("ResourceIdentifier", () => input.ResourceIdentifier, "{ResourceIdentifier}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_SendDataToMulticastGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/multicast-groups/{Id}/data");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        PayloadData: [],
        WirelessMetadata: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SendDataToWirelessDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/wireless-devices/{Id}/data");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        PayloadData: [],
        TransmitMode: [],
        WirelessMetadata: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartBulkAssociateWirelessDeviceWithMulticastGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/multicast-groups/{Id}/bulk");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        QueryString: [],
        Tags: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/multicast-groups/{Id}/bulk");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        QueryString: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartFuotaTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/fuota-tasks/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        LoRaWAN: (_) => se_LoRaWANStartFuotaTask(_, context),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartMulticastGroupSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/multicast-groups/{Id}/session");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        LoRaWAN: (_) => se_LoRaWANMulticastSession(_, context),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartSingleWirelessDeviceImportTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/wireless_single_device_import_task");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DestinationName: [],
        DeviceName: [],
        Sidewalk: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartWirelessDeviceImportTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/wireless_device_import_task");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DestinationName: [],
        Sidewalk: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags");
    const query = map({
        [_rA]: [, __expectNonNull(input[_RA], `ResourceArn`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_TestWirelessDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/wireless-devices/{Id}/test");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags");
    const query = map({
        [_rA]: [, __expectNonNull(input[_RA], `ResourceArn`)],
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateDestinationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/destinations/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Expression: [],
        ExpressionType: [],
        RoleArn: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateEventConfigurationByResourceTypesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/event-configurations-resource-types");
    let body;
    body = JSON.stringify(take(input, {
        ConnectionStatus: (_) => _json(_),
        DeviceRegistrationState: (_) => _json(_),
        Join: (_) => _json(_),
        MessageDeliveryStatus: (_) => _json(_),
        Proximity: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateFuotaTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/fuota-tasks/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        FirmwareUpdateImage: [],
        FirmwareUpdateRole: [],
        FragmentIntervalMS: [],
        FragmentSizeBytes: [],
        LoRaWAN: (_) => _json(_),
        Name: [],
        RedundancyPercent: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateLogLevelsByResourceTypesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/log-levels");
    let body;
    body = JSON.stringify(take(input, {
        DefaultLogLevel: [],
        WirelessDeviceLogOptions: (_) => _json(_),
        WirelessGatewayLogOptions: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateMetricConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/metric-configuration");
    let body;
    body = JSON.stringify(take(input, {
        SummaryMetric: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateMulticastGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/multicast-groups/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        LoRaWAN: (_) => _json(_),
        Name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateNetworkAnalyzerConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/network-analyzer-configurations/{ConfigurationName}");
    b.p("ConfigurationName", () => input.ConfigurationName, "{ConfigurationName}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        MulticastGroupsToAdd: (_) => _json(_),
        MulticastGroupsToRemove: (_) => _json(_),
        TraceContent: (_) => _json(_),
        WirelessDevicesToAdd: (_) => _json(_),
        WirelessDevicesToRemove: (_) => _json(_),
        WirelessGatewaysToAdd: (_) => _json(_),
        WirelessGatewaysToRemove: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdatePartnerAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/partner-accounts/{PartnerAccountId}");
    b.p("PartnerAccountId", () => input.PartnerAccountId, "{PartnerAccountId}", false);
    const query = map({
        [_pT]: [, __expectNonNull(input[_PT], `PartnerType`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        Sidewalk: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdatePositionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/positions/{ResourceIdentifier}");
    b.p("ResourceIdentifier", () => input.ResourceIdentifier, "{ResourceIdentifier}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        Position: (_) => se_PositionCoordinate(_, context),
    }));
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateResourceEventConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/event-configurations/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    const query = map({
        [_iT]: [, __expectNonNull(input[_IT], `IdentifierType`)],
        [_pT]: [, input[_PT]],
    });
    let body;
    body = JSON.stringify(take(input, {
        ConnectionStatus: (_) => _json(_),
        DeviceRegistrationState: (_) => _json(_),
        Join: (_) => _json(_),
        MessageDeliveryStatus: (_) => _json(_),
        Proximity: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateResourcePositionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/octet-stream",
    };
    b.bp("/resource-positions/{ResourceIdentifier}");
    b.p("ResourceIdentifier", () => input.ResourceIdentifier, "{ResourceIdentifier}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
    });
    let body;
    if (input.GeoJsonPayload !== undefined) {
        body = input.GeoJsonPayload;
    }
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateWirelessDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/wireless-devices/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        DestinationName: [],
        LoRaWAN: (_) => _json(_),
        Name: [],
        Positioning: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateWirelessDeviceImportTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/wireless_device_import_task/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        Sidewalk: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateWirelessGatewayCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/wireless-gateways/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        JoinEuiFilters: (_) => _json(_),
        MaxEirp: (_) => __serializeFloat(_),
        Name: [],
        NetIdFilters: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_AssociateAwsAccountWithPartnerAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Sidewalk: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateMulticastGroupWithFuotaTaskCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateWirelessDeviceWithFuotaTaskCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateWirelessDeviceWithMulticastGroupCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateWirelessDeviceWithThingCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateWirelessGatewayWithCertificateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IotCertificateId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateWirelessGatewayWithThingCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CancelMulticastGroupSessionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateDestinationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDeviceProfileCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFuotaTaskCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMulticastGroupCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateNetworkAnalyzerConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateServiceProfileCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateWirelessDeviceCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateWirelessGatewayCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateWirelessGatewayTaskCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Status: __expectString,
        WirelessGatewayTaskDefinitionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateWirelessGatewayTaskDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteDestinationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteDeviceProfileCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteFuotaTaskCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteMulticastGroupCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteNetworkAnalyzerConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteQueuedMessagesCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteServiceProfileCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteWirelessDeviceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteWirelessDeviceImportTaskCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteWirelessGatewayCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteWirelessGatewayTaskCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteWirelessGatewayTaskDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeregisterWirelessDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateAwsAccountFromPartnerAccountCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateMulticastGroupFromFuotaTaskCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateWirelessDeviceFromFuotaTaskCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateWirelessDeviceFromMulticastGroupCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateWirelessDeviceFromThingCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateWirelessGatewayFromCertificateCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateWirelessGatewayFromThingCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetDestinationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Description: __expectString,
        Expression: __expectString,
        ExpressionType: __expectString,
        Name: __expectString,
        RoleArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDeviceProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
        LoRaWAN: _json,
        Name: __expectString,
        Sidewalk: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEventConfigurationByResourceTypesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectionStatus: _json,
        DeviceRegistrationState: _json,
        Join: _json,
        MessageDeliveryStatus: _json,
        Proximity: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFuotaTaskCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        FirmwareUpdateImage: __expectString,
        FirmwareUpdateRole: __expectString,
        FragmentIntervalMS: __expectInt32,
        FragmentSizeBytes: __expectInt32,
        Id: __expectString,
        LoRaWAN: (_) => de_LoRaWANFuotaTaskGetInfo(_, context),
        Name: __expectString,
        RedundancyPercent: __expectInt32,
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLogLevelsByResourceTypesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DefaultLogLevel: __expectString,
        WirelessDeviceLogOptions: _json,
        WirelessGatewayLogOptions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMetricConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SummaryMetric: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMetricsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SummaryMetricQueryResults: (_) => de_SummaryMetricQueryResults(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMulticastGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Id: __expectString,
        LoRaWAN: _json,
        Name: __expectString,
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMulticastGroupSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LoRaWAN: (_) => de_LoRaWANMulticastSession(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetNetworkAnalyzerConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Description: __expectString,
        MulticastGroups: _json,
        Name: __expectString,
        TraceContent: _json,
        WirelessDevices: _json,
        WirelessGateways: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPartnerAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccountLinked: __expectBoolean,
        Sidewalk: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPositionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Accuracy: (_) => de_Accuracy(_, context),
        Position: (_) => de_PositionCoordinate(_, context),
        SolverProvider: __expectString,
        SolverType: __expectString,
        SolverVersion: __expectString,
        Timestamp: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPositionConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Destination: __expectString,
        Solvers: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPositionEstimateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = await collectBody(output.body, context);
    contents.GeoJsonPayload = data;
    return contents;
};
export const de_GetResourceEventConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectionStatus: _json,
        DeviceRegistrationState: _json,
        Join: _json,
        MessageDeliveryStatus: _json,
        Proximity: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourceLogLevelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LogLevel: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourcePositionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = await collectBody(output.body, context);
    contents.GeoJsonPayload = data;
    return contents;
};
export const de_GetServiceEndpointCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ServerTrust: __expectString,
        ServiceEndpoint: __expectString,
        ServiceType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetServiceProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
        LoRaWAN: _json,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWirelessDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Description: __expectString,
        DestinationName: __expectString,
        Id: __expectString,
        LoRaWAN: _json,
        Name: __expectString,
        Positioning: __expectString,
        Sidewalk: _json,
        ThingArn: __expectString,
        ThingName: __expectString,
        Type: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWirelessDeviceImportTaskCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        DestinationName: __expectString,
        FailedImportedDeviceCount: __expectLong,
        Id: __expectString,
        InitializedImportedDeviceCount: __expectLong,
        OnboardedImportedDeviceCount: __expectLong,
        PendingImportedDeviceCount: __expectLong,
        Sidewalk: _json,
        Status: __expectString,
        StatusReason: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWirelessDeviceStatisticsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LastUplinkReceivedAt: __expectString,
        LoRaWAN: (_) => de_LoRaWANDeviceMetadata(_, context),
        Sidewalk: _json,
        WirelessDeviceId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWirelessGatewayCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Description: __expectString,
        Id: __expectString,
        LoRaWAN: (_) => de_LoRaWANGateway(_, context),
        Name: __expectString,
        ThingArn: __expectString,
        ThingName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWirelessGatewayCertificateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IotCertificateId: __expectString,
        LoRaWANNetworkServerCertificateId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWirelessGatewayFirmwareInformationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LoRaWAN: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWirelessGatewayStatisticsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectionStatus: __expectString,
        LastUplinkReceivedAt: __expectString,
        WirelessGatewayId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWirelessGatewayTaskCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LastUplinkReceivedAt: __expectString,
        Status: __expectString,
        TaskCreatedAt: __expectString,
        WirelessGatewayId: __expectString,
        WirelessGatewayTaskDefinitionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWirelessGatewayTaskDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AutoCreateTasks: __expectBoolean,
        Name: __expectString,
        Update: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDestinationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DestinationList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDeviceProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeviceProfileList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDevicesForWirelessDeviceImportTaskCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DestinationName: __expectString,
        ImportedWirelessDeviceList: (_) => de_ImportedWirelessDeviceList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEventConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EventConfigurationsList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFuotaTasksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FuotaTaskList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMulticastGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MulticastGroupList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMulticastGroupsByFuotaTaskCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MulticastGroupList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListNetworkAnalyzerConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NetworkAnalyzerConfigurationList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPartnerAccountsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Sidewalk: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPositionConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        PositionConfigurationList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListQueuedMessagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DownlinkQueueMessagesList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListServiceProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ServiceProfileList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWirelessDeviceImportTasksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        WirelessDeviceImportTaskList: (_) => de_WirelessDeviceImportTaskList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWirelessDevicesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        WirelessDeviceList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWirelessGatewaysCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        WirelessGatewayList: (_) => de_WirelessGatewayStatisticsList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWirelessGatewayTaskDefinitionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        TaskDefinitions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutPositionConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_PutResourceLogLevelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_ResetAllResourceLogLevelsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_ResetResourceLogLevelCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_SendDataToMulticastGroupCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MessageId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SendDataToWirelessDeviceCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MessageId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartBulkAssociateWirelessDeviceWithMulticastGroupCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartBulkDisassociateWirelessDeviceFromMulticastGroupCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartFuotaTaskCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartMulticastGroupSessionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartSingleWirelessDeviceImportTaskCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartWirelessDeviceImportTaskCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TestWirelessDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Result: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDestinationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateEventConfigurationByResourceTypesCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateFuotaTaskCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateLogLevelsByResourceTypesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateMetricConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateMulticastGroupCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateNetworkAnalyzerConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdatePartnerAccountCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdatePositionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateResourceEventConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateResourcePositionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateWirelessDeviceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateWirelessDeviceImportTaskCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateWirelessGatewayCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.iotwireless#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.iotwireless#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.iotwireless#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.iotwireless#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.iotwireless#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.iotwireless#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.iotwireless#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceName: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_AssistPosition = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return __serializeFloat(entry);
    });
};
const se_CdmaList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CdmaObj(entry, context);
    });
};
const se_CdmaObj = (input, context) => {
    return take(input, {
        BaseLat: __serializeFloat,
        BaseLng: __serializeFloat,
        BaseStationId: [],
        CdmaLocalId: _json,
        CdmaNmr: _json,
        NetworkId: [],
        PilotPower: [],
        RegistrationZone: [],
        SystemId: [],
    });
};
const se_CellTowers = (input, context) => {
    return take(input, {
        Cdma: (_) => se_CdmaList(_, context),
        Gsm: _json,
        Lte: (_) => se_LteList(_, context),
        Tdscdma: _json,
        Wcdma: _json,
    });
};
const se_Gnss = (input, context) => {
    return take(input, {
        AssistAltitude: __serializeFloat,
        AssistPosition: (_) => se_AssistPosition(_, context),
        CaptureTime: __serializeFloat,
        CaptureTimeAccuracy: __serializeFloat,
        Payload: [],
        Use2DSolver: [],
    });
};
const se_LoRaWANGateway = (input, context) => {
    return take(input, {
        Beaconing: _json,
        GatewayEui: [],
        JoinEuiFilters: _json,
        MaxEirp: __serializeFloat,
        NetIdFilters: _json,
        RfRegion: [],
        SubBands: _json,
    });
};
const se_LoRaWANMulticastSession = (input, context) => {
    return take(input, {
        DlDr: [],
        DlFreq: [],
        PingSlotPeriod: [],
        SessionStartTime: (_) => _.toISOString().split(".")[0] + "Z",
        SessionTimeout: [],
    });
};
const se_LoRaWANStartFuotaTask = (input, context) => {
    return take(input, {
        StartTime: (_) => _.toISOString().split(".")[0] + "Z",
    });
};
const se_LteList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_LteObj(entry, context);
    });
};
const se_LteNmrList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_LteNmrObj(entry, context);
    });
};
const se_LteNmrObj = (input, context) => {
    return take(input, {
        Earfcn: [],
        EutranCid: [],
        Pci: [],
        Rsrp: [],
        Rsrq: __serializeFloat,
    });
};
const se_LteObj = (input, context) => {
    return take(input, {
        EutranCid: [],
        LteLocalId: _json,
        LteNmr: (_) => se_LteNmrList(_, context),
        LteTimingAdvance: [],
        Mcc: [],
        Mnc: [],
        NrCapable: [],
        Rsrp: [],
        Rsrq: __serializeFloat,
        Tac: [],
    });
};
const se_PositionCoordinate = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return __serializeFloat(entry);
    });
};
const se_SummaryMetricQueries = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SummaryMetricQuery(entry, context);
    });
};
const se_SummaryMetricQuery = (input, context) => {
    return take(input, {
        AggregationPeriod: [],
        Dimensions: _json,
        EndTimestamp: (_) => Math.round(_.getTime() / 1000),
        MetricName: [],
        QueryId: [],
        StartTimestamp: (_) => Math.round(_.getTime() / 1000),
    });
};
const de_Accuracy = (output, context) => {
    return take(output, {
        HorizontalAccuracy: __limitedParseFloat32,
        VerticalAccuracy: __limitedParseFloat32,
    });
};
const de_ImportedSidewalkDevice = (output, context) => {
    return take(output, {
        LastUpdateTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        OnboardingStatus: __expectString,
        OnboardingStatusReason: __expectString,
        SidewalkManufacturingSn: __expectString,
    });
};
const de_ImportedWirelessDevice = (output, context) => {
    return take(output, {
        Sidewalk: (_) => de_ImportedSidewalkDevice(_, context),
    });
};
const de_ImportedWirelessDeviceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportedWirelessDevice(entry, context);
    });
    return retVal;
};
const de_LoRaWANDeviceMetadata = (output, context) => {
    return take(output, {
        DataRate: __expectInt32,
        DevEui: __expectString,
        FPort: __expectInt32,
        Frequency: __expectInt32,
        Gateways: (_) => de_LoRaWANGatewayMetadataList(_, context),
        PublicGateways: (_) => de_LoRaWANPublicGatewayMetadataList(_, context),
        Timestamp: __expectString,
    });
};
const de_LoRaWANFuotaTaskGetInfo = (output, context) => {
    return take(output, {
        RfRegion: __expectString,
        StartTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_LoRaWANGateway = (output, context) => {
    return take(output, {
        Beaconing: _json,
        GatewayEui: __expectString,
        JoinEuiFilters: _json,
        MaxEirp: __limitedParseFloat32,
        NetIdFilters: _json,
        RfRegion: __expectString,
        SubBands: _json,
    });
};
const de_LoRaWANGatewayMetadata = (output, context) => {
    return take(output, {
        GatewayEui: __expectString,
        Rssi: __limitedParseDouble,
        Snr: __limitedParseDouble,
    });
};
const de_LoRaWANGatewayMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LoRaWANGatewayMetadata(entry, context);
    });
    return retVal;
};
const de_LoRaWANMulticastSession = (output, context) => {
    return take(output, {
        DlDr: __expectInt32,
        DlFreq: __expectInt32,
        PingSlotPeriod: __expectInt32,
        SessionStartTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SessionTimeout: __expectInt32,
    });
};
const de_LoRaWANPublicGatewayMetadata = (output, context) => {
    return take(output, {
        DlAllowed: __expectBoolean,
        Id: __expectString,
        ProviderNetId: __expectString,
        RfRegion: __expectString,
        Rssi: __limitedParseDouble,
        Snr: __limitedParseDouble,
    });
};
const de_LoRaWANPublicGatewayMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LoRaWANPublicGatewayMetadata(entry, context);
    });
    return retVal;
};
const de_MetricQueryTimestamps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectNonNull(__parseEpochTimestamp(__expectNumber(entry)));
    });
    return retVal;
};
const de_MetricQueryValue = (output, context) => {
    return take(output, {
        Avg: __limitedParseDouble,
        Max: __limitedParseDouble,
        Min: __limitedParseDouble,
        P90: __limitedParseDouble,
        Std: __limitedParseDouble,
        Sum: __limitedParseDouble,
    });
};
const de_MetricQueryValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricQueryValue(entry, context);
    });
    return retVal;
};
const de_PositionCoordinate = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __limitedParseFloat32(entry);
    });
    return retVal;
};
const de_SummaryMetricQueryResult = (output, context) => {
    return take(output, {
        AggregationPeriod: __expectString,
        Dimensions: _json,
        EndTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Error: __expectString,
        MetricName: __expectString,
        QueryId: __expectString,
        QueryStatus: __expectString,
        StartTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Timestamps: (_) => de_MetricQueryTimestamps(_, context),
        Unit: __expectString,
        Values: (_) => de_MetricQueryValues(_, context),
    });
};
const de_SummaryMetricQueryResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SummaryMetricQueryResult(entry, context);
    });
    return retVal;
};
const de_WirelessDeviceImportTask = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        DestinationName: __expectString,
        FailedImportedDeviceCount: __expectLong,
        Id: __expectString,
        InitializedImportedDeviceCount: __expectLong,
        OnboardedImportedDeviceCount: __expectLong,
        PendingImportedDeviceCount: __expectLong,
        Sidewalk: _json,
        Status: __expectString,
        StatusReason: __expectString,
    });
};
const de_WirelessDeviceImportTaskList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WirelessDeviceImportTask(entry, context);
    });
    return retVal;
};
const de_WirelessGatewayStatistics = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Description: __expectString,
        Id: __expectString,
        LastUplinkReceivedAt: __expectString,
        LoRaWAN: (_) => de_LoRaWANGateway(_, context),
        Name: __expectString,
    });
};
const de_WirelessGatewayStatisticsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WirelessGatewayStatistics(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _DN = "DestinationName";
const _DPI = "DeviceProfileId";
const _DPT = "DeviceProfileType";
const _FTI = "FuotaTaskId";
const _I = "Id";
const _IT = "IdentifierType";
const _MGI = "MulticastGroupId";
const _MI = "MessageId";
const _MR = "MaxResults";
const _NT = "NextToken";
const _PT = "PartnerType";
const _RA = "ResourceArn";
const _RT = "ResourceType";
const _S = "Status";
const _SPI = "ServiceProfileId";
const _ST = "ServiceType";
const _TDT = "TaskDefinitionType";
const _TK = "TagKeys";
const _WDT = "WirelessDeviceType";
const _dN = "destinationName";
const _dPI = "deviceProfileId";
const _dPT = "deviceProfileType";
const _fTI = "fuotaTaskId";
const _i = "id";
const _iT = "identifierType";
const _mGI = "multicastGroupId";
const _mI = "messageId";
const _mR = "maxResults";
const _nT = "nextToken";
const _pT = "partnerType";
const _rA = "resourceArn";
const _rT = "resourceType";
const _s = "status";
const _sPI = "serviceProfileId";
const _sT = "serviceType";
const _tDT = "taskDefinitionType";
const _tK = "tagKeys";
const _wDT = "wirelessDeviceType";
