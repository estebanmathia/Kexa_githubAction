import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { IoTWirelessServiceException as __BaseException } from "./IoTWirelessServiceException";
export interface SessionKeysAbpV1_0_x {
  NwkSKey?: string;
  AppSKey?: string;
}
export interface AbpV1_0_x {
  DevAddr?: string;
  SessionKeys?: SessionKeysAbpV1_0_x;
  FCntStart?: number;
}
export interface SessionKeysAbpV1_1 {
  FNwkSIntKey?: string;
  SNwkSIntKey?: string;
  NwkSEncKey?: string;
  AppSKey?: string;
}
export interface AbpV1_1 {
  DevAddr?: string;
  SessionKeys?: SessionKeysAbpV1_1;
  FCntStart?: number;
}
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface Accuracy {
  HorizontalAccuracy?: number;
  VerticalAccuracy?: number;
}
export declare const AggregationPeriod: {
  readonly OneDay: "OneDay";
  readonly OneHour: "OneHour";
  readonly OneWeek: "OneWeek";
};
export type AggregationPeriod =
  (typeof AggregationPeriod)[keyof typeof AggregationPeriod];
export declare const ApplicationConfigType: {
  readonly SemtechGeoLocation: "SemtechGeolocation";
};
export type ApplicationConfigType =
  (typeof ApplicationConfigType)[keyof typeof ApplicationConfigType];
export interface ApplicationConfig {
  FPort?: number;
  Type?: ApplicationConfigType;
  DestinationName?: string;
}
export interface SidewalkAccountInfo {
  AmazonId?: string;
  AppServerPrivateKey?: string;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface AssociateAwsAccountWithPartnerAccountRequest {
  Sidewalk: SidewalkAccountInfo | undefined;
  ClientRequestToken?: string;
  Tags?: Tag[];
}
export interface AssociateAwsAccountWithPartnerAccountResponse {
  Sidewalk?: SidewalkAccountInfo;
  Arn?: string;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  ResourceId?: string;
  ResourceType?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  ResourceId?: string;
  ResourceType?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface AssociateMulticastGroupWithFuotaTaskRequest {
  Id: string | undefined;
  MulticastGroupId: string | undefined;
}
export interface AssociateMulticastGroupWithFuotaTaskResponse {}
export interface AssociateWirelessDeviceWithFuotaTaskRequest {
  Id: string | undefined;
  WirelessDeviceId: string | undefined;
}
export interface AssociateWirelessDeviceWithFuotaTaskResponse {}
export interface AssociateWirelessDeviceWithMulticastGroupRequest {
  Id: string | undefined;
  WirelessDeviceId: string | undefined;
}
export interface AssociateWirelessDeviceWithMulticastGroupResponse {}
export interface AssociateWirelessDeviceWithThingRequest {
  Id: string | undefined;
  ThingArn: string | undefined;
}
export interface AssociateWirelessDeviceWithThingResponse {}
export interface AssociateWirelessGatewayWithCertificateRequest {
  Id: string | undefined;
  IotCertificateId: string | undefined;
}
export interface AssociateWirelessGatewayWithCertificateResponse {
  IotCertificateId?: string;
}
export interface AssociateWirelessGatewayWithThingRequest {
  Id: string | undefined;
  ThingArn: string | undefined;
}
export interface AssociateWirelessGatewayWithThingResponse {}
export declare const BatteryLevel: {
  readonly CRITICAL: "critical";
  readonly LOW: "low";
  readonly NORMAL: "normal";
};
export type BatteryLevel = (typeof BatteryLevel)[keyof typeof BatteryLevel];
export interface Beaconing {
  DataRate?: number;
  Frequencies?: number[];
}
export interface CancelMulticastGroupSessionRequest {
  Id: string | undefined;
}
export interface CancelMulticastGroupSessionResponse {}
export interface CdmaLocalId {
  PnOffset: number | undefined;
  CdmaChannel: number | undefined;
}
export interface CdmaNmrObj {
  PnOffset: number | undefined;
  CdmaChannel: number | undefined;
  PilotPower?: number;
  BaseStationId?: number;
}
export interface CdmaObj {
  SystemId: number | undefined;
  NetworkId: number | undefined;
  BaseStationId: number | undefined;
  RegistrationZone?: number;
  CdmaLocalId?: CdmaLocalId;
  PilotPower?: number;
  BaseLat?: number;
  BaseLng?: number;
  CdmaNmr?: CdmaNmrObj[];
}
export interface GsmLocalId {
  Bsic: number | undefined;
  Bcch: number | undefined;
}
export interface GlobalIdentity {
  Lac: number | undefined;
  GeranCid: number | undefined;
}
export interface GsmNmrObj {
  Bsic: number | undefined;
  Bcch: number | undefined;
  RxLevel?: number;
  GlobalIdentity?: GlobalIdentity;
}
export interface GsmObj {
  Mcc: number | undefined;
  Mnc: number | undefined;
  Lac: number | undefined;
  GeranCid: number | undefined;
  GsmLocalId?: GsmLocalId;
  GsmTimingAdvance?: number;
  RxLevel?: number;
  GsmNmr?: GsmNmrObj[];
}
export interface LteLocalId {
  Pci: number | undefined;
  Earfcn: number | undefined;
}
export interface LteNmrObj {
  Pci: number | undefined;
  Earfcn: number | undefined;
  EutranCid: number | undefined;
  Rsrp?: number;
  Rsrq?: number;
}
export interface LteObj {
  Mcc: number | undefined;
  Mnc: number | undefined;
  EutranCid: number | undefined;
  Tac?: number;
  LteLocalId?: LteLocalId;
  LteTimingAdvance?: number;
  Rsrp?: number;
  Rsrq?: number;
  NrCapable?: boolean;
  LteNmr?: LteNmrObj[];
}
export interface TdscdmaLocalId {
  Uarfcn: number | undefined;
  CellParams: number | undefined;
}
export interface TdscdmaNmrObj {
  Uarfcn: number | undefined;
  CellParams: number | undefined;
  UtranCid?: number;
  Rscp?: number;
  PathLoss?: number;
}
export interface TdscdmaObj {
  Mcc: number | undefined;
  Mnc: number | undefined;
  Lac?: number;
  UtranCid: number | undefined;
  TdscdmaLocalId?: TdscdmaLocalId;
  TdscdmaTimingAdvance?: number;
  Rscp?: number;
  PathLoss?: number;
  TdscdmaNmr?: TdscdmaNmrObj[];
}
export interface WcdmaLocalId {
  Uarfcndl: number | undefined;
  Psc: number | undefined;
}
export interface WcdmaNmrObj {
  Uarfcndl: number | undefined;
  Psc: number | undefined;
  UtranCid: number | undefined;
  Rscp?: number;
  PathLoss?: number;
}
export interface WcdmaObj {
  Mcc: number | undefined;
  Mnc: number | undefined;
  Lac?: number;
  UtranCid: number | undefined;
  WcdmaLocalId?: WcdmaLocalId;
  Rscp?: number;
  PathLoss?: number;
  WcdmaNmr?: WcdmaNmrObj[];
}
export interface CellTowers {
  Gsm?: GsmObj[];
  Wcdma?: WcdmaObj[];
  Tdscdma?: TdscdmaObj[];
  Lte?: LteObj[];
  Cdma?: CdmaObj[];
}
export declare const SigningAlg: {
  readonly Ed25519: "Ed25519";
  readonly P256r1: "P256r1";
};
export type SigningAlg = (typeof SigningAlg)[keyof typeof SigningAlg];
export interface CertificateList {
  SigningAlg: SigningAlg | undefined;
  Value: string | undefined;
}
export declare const ConnectionStatus: {
  readonly CONNECTED: "Connected";
  readonly DISCONNECTED: "Disconnected";
};
export type ConnectionStatus =
  (typeof ConnectionStatus)[keyof typeof ConnectionStatus];
export declare const EventNotificationTopicStatus: {
  readonly Disabled: "Disabled";
  readonly Enabled: "Enabled";
};
export type EventNotificationTopicStatus =
  (typeof EventNotificationTopicStatus)[keyof typeof EventNotificationTopicStatus];
export interface LoRaWANConnectionStatusEventNotificationConfigurations {
  GatewayEuiEventTopic?: EventNotificationTopicStatus;
}
export interface ConnectionStatusEventConfiguration {
  LoRaWAN?: LoRaWANConnectionStatusEventNotificationConfigurations;
  WirelessGatewayIdEventTopic?: EventNotificationTopicStatus;
}
export interface LoRaWANConnectionStatusResourceTypeEventConfiguration {
  WirelessGatewayEventTopic?: EventNotificationTopicStatus;
}
export interface ConnectionStatusResourceTypeEventConfiguration {
  LoRaWAN?: LoRaWANConnectionStatusResourceTypeEventConfiguration;
}
export declare const ExpressionType: {
  readonly MqttTopic: "MqttTopic";
  readonly RuleName: "RuleName";
};
export type ExpressionType =
  (typeof ExpressionType)[keyof typeof ExpressionType];
export interface CreateDestinationRequest {
  Name: string | undefined;
  ExpressionType: ExpressionType | undefined;
  Expression: string | undefined;
  Description?: string;
  RoleArn: string | undefined;
  Tags?: Tag[];
  ClientRequestToken?: string;
}
export interface CreateDestinationResponse {
  Arn?: string;
  Name?: string;
}
export interface LoRaWANDeviceProfile {
  SupportsClassB?: boolean;
  ClassBTimeout?: number;
  PingSlotPeriod?: number;
  PingSlotDr?: number;
  PingSlotFreq?: number;
  SupportsClassC?: boolean;
  ClassCTimeout?: number;
  MacVersion?: string;
  RegParamsRevision?: string;
  RxDelay1?: number;
  RxDrOffset1?: number;
  RxDataRate2?: number;
  RxFreq2?: number;
  FactoryPresetFreqsList?: number[];
  MaxEirp?: number;
  MaxDutyCycle?: number;
  RfRegion?: string;
  SupportsJoin?: boolean;
  Supports32BitFCnt?: boolean;
}
export interface SidewalkCreateDeviceProfile {}
export interface CreateDeviceProfileRequest {
  Name?: string;
  LoRaWAN?: LoRaWANDeviceProfile;
  Tags?: Tag[];
  ClientRequestToken?: string;
  Sidewalk?: SidewalkCreateDeviceProfile;
}
export interface CreateDeviceProfileResponse {
  Arn?: string;
  Id?: string;
}
export declare const SupportedRfRegion: {
  readonly AS923_1: "AS923-1";
  readonly AS923_2: "AS923-2";
  readonly AS923_3: "AS923-3";
  readonly AS923_4: "AS923-4";
  readonly AU915: "AU915";
  readonly CN470: "CN470";
  readonly CN779: "CN779";
  readonly EU433: "EU433";
  readonly EU868: "EU868";
  readonly IN865: "IN865";
  readonly KR920: "KR920";
  readonly RU864: "RU864";
  readonly US915: "US915";
};
export type SupportedRfRegion =
  (typeof SupportedRfRegion)[keyof typeof SupportedRfRegion];
export interface LoRaWANFuotaTask {
  RfRegion?: SupportedRfRegion;
}
export interface CreateFuotaTaskRequest {
  Name?: string;
  Description?: string;
  ClientRequestToken?: string;
  LoRaWAN?: LoRaWANFuotaTask;
  FirmwareUpdateImage: string | undefined;
  FirmwareUpdateRole: string | undefined;
  Tags?: Tag[];
  RedundancyPercent?: number;
  FragmentSizeBytes?: number;
  FragmentIntervalMS?: number;
}
export interface CreateFuotaTaskResponse {
  Arn?: string;
  Id?: string;
}
export declare const DlClass: {
  readonly ClassB: "ClassB";
  readonly ClassC: "ClassC";
};
export type DlClass = (typeof DlClass)[keyof typeof DlClass];
export interface LoRaWANMulticast {
  RfRegion?: SupportedRfRegion;
  DlClass?: DlClass;
}
export interface CreateMulticastGroupRequest {
  Name?: string;
  Description?: string;
  ClientRequestToken?: string;
  LoRaWAN: LoRaWANMulticast | undefined;
  Tags?: Tag[];
}
export interface CreateMulticastGroupResponse {
  Arn?: string;
  Id?: string;
}
export declare const LogLevel: {
  readonly DISABLED: "DISABLED";
  readonly ERROR: "ERROR";
  readonly INFO: "INFO";
};
export type LogLevel = (typeof LogLevel)[keyof typeof LogLevel];
export declare const MulticastFrameInfo: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type MulticastFrameInfo =
  (typeof MulticastFrameInfo)[keyof typeof MulticastFrameInfo];
export declare const WirelessDeviceFrameInfo: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type WirelessDeviceFrameInfo =
  (typeof WirelessDeviceFrameInfo)[keyof typeof WirelessDeviceFrameInfo];
export interface TraceContent {
  WirelessDeviceFrameInfo?: WirelessDeviceFrameInfo;
  LogLevel?: LogLevel;
  MulticastFrameInfo?: MulticastFrameInfo;
}
export interface CreateNetworkAnalyzerConfigurationRequest {
  Name: string | undefined;
  TraceContent?: TraceContent;
  WirelessDevices?: string[];
  WirelessGateways?: string[];
  Description?: string;
  Tags?: Tag[];
  ClientRequestToken?: string;
  MulticastGroups?: string[];
}
export interface CreateNetworkAnalyzerConfigurationResponse {
  Arn?: string;
  Name?: string;
}
export interface LoRaWANServiceProfile {
  AddGwMetadata?: boolean;
  DrMin?: number;
  DrMax?: number;
  PrAllowed?: boolean;
  RaAllowed?: boolean;
}
export interface CreateServiceProfileRequest {
  Name?: string;
  LoRaWAN?: LoRaWANServiceProfile;
  Tags?: Tag[];
  ClientRequestToken?: string;
}
export interface CreateServiceProfileResponse {
  Arn?: string;
  Id?: string;
}
export interface Positioning {
  ClockSync?: number;
  Stream?: number;
  Gnss?: number;
}
export interface FPorts {
  Fuota?: number;
  Multicast?: number;
  ClockSync?: number;
  Positioning?: Positioning;
  Applications?: ApplicationConfig[];
}
export interface OtaaV1_0_x {
  AppKey?: string;
  AppEui?: string;
  JoinEui?: string;
  GenAppKey?: string;
}
export interface OtaaV1_1 {
  AppKey?: string;
  NwkKey?: string;
  JoinEui?: string;
}
export interface LoRaWANDevice {
  DevEui?: string;
  DeviceProfileId?: string;
  ServiceProfileId?: string;
  OtaaV1_1?: OtaaV1_1;
  OtaaV1_0_x?: OtaaV1_0_x;
  AbpV1_1?: AbpV1_1;
  AbpV1_0_x?: AbpV1_0_x;
  FPorts?: FPorts;
}
export declare const PositioningConfigStatus: {
  readonly Disabled: "Disabled";
  readonly Enabled: "Enabled";
};
export type PositioningConfigStatus =
  (typeof PositioningConfigStatus)[keyof typeof PositioningConfigStatus];
export interface SidewalkCreateWirelessDevice {
  DeviceProfileId?: string;
}
export declare const WirelessDeviceType: {
  readonly LoRaWAN: "LoRaWAN";
  readonly Sidewalk: "Sidewalk";
};
export type WirelessDeviceType =
  (typeof WirelessDeviceType)[keyof typeof WirelessDeviceType];
export interface CreateWirelessDeviceRequest {
  Type: WirelessDeviceType | undefined;
  Name?: string;
  Description?: string;
  DestinationName: string | undefined;
  ClientRequestToken?: string;
  LoRaWAN?: LoRaWANDevice;
  Tags?: Tag[];
  Positioning?: PositioningConfigStatus;
  Sidewalk?: SidewalkCreateWirelessDevice;
}
export interface CreateWirelessDeviceResponse {
  Arn?: string;
  Id?: string;
}
export interface LoRaWANGateway {
  GatewayEui?: string;
  RfRegion?: string;
  JoinEuiFilters?: string[][];
  NetIdFilters?: string[];
  SubBands?: number[];
  Beaconing?: Beaconing;
  MaxEirp?: number;
}
export interface CreateWirelessGatewayRequest {
  Name?: string;
  Description?: string;
  LoRaWAN: LoRaWANGateway | undefined;
  Tags?: Tag[];
  ClientRequestToken?: string;
}
export interface CreateWirelessGatewayResponse {
  Arn?: string;
  Id?: string;
}
export interface CreateWirelessGatewayTaskRequest {
  Id: string | undefined;
  WirelessGatewayTaskDefinitionId: string | undefined;
}
export declare const WirelessGatewayTaskStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly FIRST_RETRY: "FIRST_RETRY";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly PENDING: "PENDING";
  readonly SECOND_RETRY: "SECOND_RETRY";
};
export type WirelessGatewayTaskStatus =
  (typeof WirelessGatewayTaskStatus)[keyof typeof WirelessGatewayTaskStatus];
export interface CreateWirelessGatewayTaskResponse {
  WirelessGatewayTaskDefinitionId?: string;
  Status?: WirelessGatewayTaskStatus;
}
export interface LoRaWANGatewayVersion {
  PackageVersion?: string;
  Model?: string;
  Station?: string;
}
export interface LoRaWANUpdateGatewayTaskCreate {
  UpdateSignature?: string;
  SigKeyCrc?: number;
  CurrentVersion?: LoRaWANGatewayVersion;
  UpdateVersion?: LoRaWANGatewayVersion;
}
export interface UpdateWirelessGatewayTaskCreate {
  UpdateDataSource?: string;
  UpdateDataRole?: string;
  LoRaWAN?: LoRaWANUpdateGatewayTaskCreate;
}
export interface CreateWirelessGatewayTaskDefinitionRequest {
  AutoCreateTasks: boolean | undefined;
  Name?: string;
  Update?: UpdateWirelessGatewayTaskCreate;
  ClientRequestToken?: string;
  Tags?: Tag[];
}
export interface CreateWirelessGatewayTaskDefinitionResponse {
  Id?: string;
  Arn?: string;
}
export interface DakCertificateMetadata {
  CertificateId: string | undefined;
  MaxAllowedSignature?: number;
  FactorySupport?: boolean;
  ApId?: string;
  DeviceTypeId?: string;
}
export interface DeleteDestinationRequest {
  Name: string | undefined;
}
export interface DeleteDestinationResponse {}
export interface DeleteDeviceProfileRequest {
  Id: string | undefined;
}
export interface DeleteDeviceProfileResponse {}
export interface DeleteFuotaTaskRequest {
  Id: string | undefined;
}
export interface DeleteFuotaTaskResponse {}
export interface DeleteMulticastGroupRequest {
  Id: string | undefined;
}
export interface DeleteMulticastGroupResponse {}
export interface DeleteNetworkAnalyzerConfigurationRequest {
  ConfigurationName: string | undefined;
}
export interface DeleteNetworkAnalyzerConfigurationResponse {}
export interface DeleteQueuedMessagesRequest {
  Id: string | undefined;
  MessageId: string | undefined;
  WirelessDeviceType?: WirelessDeviceType;
}
export interface DeleteQueuedMessagesResponse {}
export interface DeleteServiceProfileRequest {
  Id: string | undefined;
}
export interface DeleteServiceProfileResponse {}
export interface DeleteWirelessDeviceRequest {
  Id: string | undefined;
}
export interface DeleteWirelessDeviceResponse {}
export interface DeleteWirelessDeviceImportTaskRequest {
  Id: string | undefined;
}
export interface DeleteWirelessDeviceImportTaskResponse {}
export interface DeleteWirelessGatewayRequest {
  Id: string | undefined;
}
export interface DeleteWirelessGatewayResponse {}
export interface DeleteWirelessGatewayTaskRequest {
  Id: string | undefined;
}
export interface DeleteWirelessGatewayTaskResponse {}
export interface DeleteWirelessGatewayTaskDefinitionRequest {
  Id: string | undefined;
}
export interface DeleteWirelessGatewayTaskDefinitionResponse {}
export interface DeregisterWirelessDeviceRequest {
  Identifier: string | undefined;
  WirelessDeviceType?: WirelessDeviceType;
}
export interface DeregisterWirelessDeviceResponse {}
export interface Destinations {
  Arn?: string;
  Name?: string;
  ExpressionType?: ExpressionType;
  Expression?: string;
  Description?: string;
  RoleArn?: string;
}
export interface DeviceProfile {
  Arn?: string;
  Name?: string;
  Id?: string;
}
export declare const DeviceProfileType: {
  readonly LoRaWAN: "LoRaWAN";
  readonly Sidewalk: "Sidewalk";
};
export type DeviceProfileType =
  (typeof DeviceProfileType)[keyof typeof DeviceProfileType];
export interface SidewalkEventNotificationConfigurations {
  AmazonIdEventTopic?: EventNotificationTopicStatus;
}
export interface DeviceRegistrationStateEventConfiguration {
  Sidewalk?: SidewalkEventNotificationConfigurations;
  WirelessDeviceIdEventTopic?: EventNotificationTopicStatus;
}
export interface SidewalkResourceTypeEventConfiguration {
  WirelessDeviceEventTopic?: EventNotificationTopicStatus;
}
export interface DeviceRegistrationStateResourceTypeEventConfiguration {
  Sidewalk?: SidewalkResourceTypeEventConfiguration;
}
export declare const DeviceState: {
  readonly PROVISIONED: "Provisioned";
  readonly REGISTEREDNOTSEEN: "RegisteredNotSeen";
  readonly REGISTEREDREACHABLE: "RegisteredReachable";
  readonly REGISTEREDUNREACHABLE: "RegisteredUnreachable";
};
export type DeviceState = (typeof DeviceState)[keyof typeof DeviceState];
export declare const DimensionName: {
  readonly DeviceId: "DeviceId";
  readonly GatewayId: "GatewayId";
};
export type DimensionName = (typeof DimensionName)[keyof typeof DimensionName];
export interface Dimension {
  name?: DimensionName;
  value?: string;
}
export declare const PartnerType: {
  readonly Sidewalk: "Sidewalk";
};
export type PartnerType = (typeof PartnerType)[keyof typeof PartnerType];
export interface DisassociateAwsAccountFromPartnerAccountRequest {
  PartnerAccountId: string | undefined;
  PartnerType: PartnerType | undefined;
}
export interface DisassociateAwsAccountFromPartnerAccountResponse {}
export interface DisassociateMulticastGroupFromFuotaTaskRequest {
  Id: string | undefined;
  MulticastGroupId: string | undefined;
}
export interface DisassociateMulticastGroupFromFuotaTaskResponse {}
export interface DisassociateWirelessDeviceFromFuotaTaskRequest {
  Id: string | undefined;
  WirelessDeviceId: string | undefined;
}
export interface DisassociateWirelessDeviceFromFuotaTaskResponse {}
export interface DisassociateWirelessDeviceFromMulticastGroupRequest {
  Id: string | undefined;
  WirelessDeviceId: string | undefined;
}
export interface DisassociateWirelessDeviceFromMulticastGroupResponse {}
export interface DisassociateWirelessDeviceFromThingRequest {
  Id: string | undefined;
}
export interface DisassociateWirelessDeviceFromThingResponse {}
export interface DisassociateWirelessGatewayFromCertificateRequest {
  Id: string | undefined;
}
export interface DisassociateWirelessGatewayFromCertificateResponse {}
export interface DisassociateWirelessGatewayFromThingRequest {
  Id: string | undefined;
}
export interface DisassociateWirelessGatewayFromThingResponse {}
export declare const DownlinkMode: {
  readonly CONCURRENT: "CONCURRENT";
  readonly SEQUENTIAL: "SEQUENTIAL";
  readonly USING_UPLINK_GATEWAY: "USING_UPLINK_GATEWAY";
};
export type DownlinkMode = (typeof DownlinkMode)[keyof typeof DownlinkMode];
export interface GatewayListItem {
  GatewayId: string | undefined;
  DownlinkFrequency: number | undefined;
}
export interface ParticipatingGateways {
  DownlinkMode: DownlinkMode | undefined;
  GatewayList: GatewayListItem[] | undefined;
  TransmissionInterval: number | undefined;
}
export interface LoRaWANSendDataToDevice {
  FPort?: number;
  ParticipatingGateways?: ParticipatingGateways;
}
export interface DownlinkQueueMessage {
  MessageId?: string;
  TransmitMode?: number;
  ReceivedAt?: string;
  LoRaWAN?: LoRaWANSendDataToDevice;
}
export declare const Event: {
  readonly ACK: "ack";
  readonly DISCOVERED: "discovered";
  readonly LOST: "lost";
  readonly NACK: "nack";
  readonly PASSTHROUGH: "passthrough";
};
export type Event = (typeof Event)[keyof typeof Event];
export interface LoRaWANJoinEventNotificationConfigurations {
  DevEuiEventTopic?: EventNotificationTopicStatus;
}
export interface JoinEventConfiguration {
  LoRaWAN?: LoRaWANJoinEventNotificationConfigurations;
  WirelessDeviceIdEventTopic?: EventNotificationTopicStatus;
}
export interface MessageDeliveryStatusEventConfiguration {
  Sidewalk?: SidewalkEventNotificationConfigurations;
  WirelessDeviceIdEventTopic?: EventNotificationTopicStatus;
}
export interface ProximityEventConfiguration {
  Sidewalk?: SidewalkEventNotificationConfigurations;
  WirelessDeviceIdEventTopic?: EventNotificationTopicStatus;
}
export interface EventNotificationItemConfigurations {
  DeviceRegistrationState?: DeviceRegistrationStateEventConfiguration;
  Proximity?: ProximityEventConfiguration;
  Join?: JoinEventConfiguration;
  ConnectionStatus?: ConnectionStatusEventConfiguration;
  MessageDeliveryStatus?: MessageDeliveryStatusEventConfiguration;
}
export declare const IdentifierType: {
  readonly DevEui: "DevEui";
  readonly GatewayEui: "GatewayEui";
  readonly PartnerAccountId: "PartnerAccountId";
  readonly WirelessDeviceId: "WirelessDeviceId";
  readonly WirelessGatewayId: "WirelessGatewayId";
};
export type IdentifierType =
  (typeof IdentifierType)[keyof typeof IdentifierType];
export declare const EventNotificationPartnerType: {
  readonly Sidewalk: "Sidewalk";
};
export type EventNotificationPartnerType =
  (typeof EventNotificationPartnerType)[keyof typeof EventNotificationPartnerType];
export interface EventConfigurationItem {
  Identifier?: string;
  IdentifierType?: IdentifierType;
  PartnerType?: EventNotificationPartnerType;
  Events?: EventNotificationItemConfigurations;
}
export declare const EventNotificationResourceType: {
  readonly SidewalkAccount: "SidewalkAccount";
  readonly WirelessDevice: "WirelessDevice";
  readonly WirelessGateway: "WirelessGateway";
};
export type EventNotificationResourceType =
  (typeof EventNotificationResourceType)[keyof typeof EventNotificationResourceType];
export declare const FuotaDeviceStatus: {
  readonly FragAlgo_unsupported: "FragAlgo_unsupported";
  readonly FragIndex_unsupported: "FragIndex_unsupported";
  readonly Initial: "Initial";
  readonly MICError: "MICError";
  readonly MemoryError: "MemoryError";
  readonly MissingFrag: "MissingFrag";
  readonly Not_enough_memory: "Not_enough_memory";
  readonly Package_Not_Supported: "Package_Not_Supported";
  readonly SessionCnt_replay: "SessionCnt_replay";
  readonly Successful: "Successful";
  readonly Wrong_descriptor: "Wrong_descriptor";
};
export type FuotaDeviceStatus =
  (typeof FuotaDeviceStatus)[keyof typeof FuotaDeviceStatus];
export interface FuotaTask {
  Id?: string;
  Arn?: string;
  Name?: string;
}
export declare const FuotaTaskStatus: {
  readonly Delete_Waiting: "Delete_Waiting";
  readonly FuotaDone: "FuotaDone";
  readonly FuotaSession_Waiting: "FuotaSession_Waiting";
  readonly In_FuotaSession: "In_FuotaSession";
  readonly Pending: "Pending";
};
export type FuotaTaskStatus =
  (typeof FuotaTaskStatus)[keyof typeof FuotaTaskStatus];
export interface GetDestinationRequest {
  Name: string | undefined;
}
export interface GetDestinationResponse {
  Arn?: string;
  Name?: string;
  Expression?: string;
  ExpressionType?: ExpressionType;
  Description?: string;
  RoleArn?: string;
}
export interface GetDeviceProfileRequest {
  Id: string | undefined;
}
export interface SidewalkGetDeviceProfile {
  ApplicationServerPublicKey?: string;
  QualificationStatus?: boolean;
  DakCertificateMetadata?: DakCertificateMetadata[];
}
export interface GetDeviceProfileResponse {
  Arn?: string;
  Name?: string;
  Id?: string;
  LoRaWAN?: LoRaWANDeviceProfile;
  Sidewalk?: SidewalkGetDeviceProfile;
}
export interface GetEventConfigurationByResourceTypesRequest {}
export interface LoRaWANJoinResourceTypeEventConfiguration {
  WirelessDeviceEventTopic?: EventNotificationTopicStatus;
}
export interface JoinResourceTypeEventConfiguration {
  LoRaWAN?: LoRaWANJoinResourceTypeEventConfiguration;
}
export interface MessageDeliveryStatusResourceTypeEventConfiguration {
  Sidewalk?: SidewalkResourceTypeEventConfiguration;
}
export interface ProximityResourceTypeEventConfiguration {
  Sidewalk?: SidewalkResourceTypeEventConfiguration;
}
export interface GetEventConfigurationByResourceTypesResponse {
  DeviceRegistrationState?: DeviceRegistrationStateResourceTypeEventConfiguration;
  Proximity?: ProximityResourceTypeEventConfiguration;
  Join?: JoinResourceTypeEventConfiguration;
  ConnectionStatus?: ConnectionStatusResourceTypeEventConfiguration;
  MessageDeliveryStatus?: MessageDeliveryStatusResourceTypeEventConfiguration;
}
export interface GetFuotaTaskRequest {
  Id: string | undefined;
}
export interface LoRaWANFuotaTaskGetInfo {
  RfRegion?: string;
  StartTime?: Date;
}
export interface GetFuotaTaskResponse {
  Arn?: string;
  Id?: string;
  Status?: FuotaTaskStatus;
  Name?: string;
  Description?: string;
  LoRaWAN?: LoRaWANFuotaTaskGetInfo;
  FirmwareUpdateImage?: string;
  FirmwareUpdateRole?: string;
  CreatedAt?: Date;
  RedundancyPercent?: number;
  FragmentSizeBytes?: number;
  FragmentIntervalMS?: number;
}
export interface GetLogLevelsByResourceTypesRequest {}
export declare const WirelessDeviceEvent: {
  readonly Downlink_Data: "Downlink_Data";
  readonly Join: "Join";
  readonly Registration: "Registration";
  readonly Rejoin: "Rejoin";
  readonly Uplink_Data: "Uplink_Data";
};
export type WirelessDeviceEvent =
  (typeof WirelessDeviceEvent)[keyof typeof WirelessDeviceEvent];
export interface WirelessDeviceEventLogOption {
  Event: WirelessDeviceEvent | undefined;
  LogLevel: LogLevel | undefined;
}
export interface WirelessDeviceLogOption {
  Type: WirelessDeviceType | undefined;
  LogLevel: LogLevel | undefined;
  Events?: WirelessDeviceEventLogOption[];
}
export declare const WirelessGatewayEvent: {
  readonly CUPS_Request: "CUPS_Request";
  readonly Certificate: "Certificate";
};
export type WirelessGatewayEvent =
  (typeof WirelessGatewayEvent)[keyof typeof WirelessGatewayEvent];
export interface WirelessGatewayEventLogOption {
  Event: WirelessGatewayEvent | undefined;
  LogLevel: LogLevel | undefined;
}
export declare const WirelessGatewayType: {
  readonly LoRaWAN: "LoRaWAN";
};
export type WirelessGatewayType =
  (typeof WirelessGatewayType)[keyof typeof WirelessGatewayType];
export interface WirelessGatewayLogOption {
  Type: WirelessGatewayType | undefined;
  LogLevel: LogLevel | undefined;
  Events?: WirelessGatewayEventLogOption[];
}
export interface GetLogLevelsByResourceTypesResponse {
  DefaultLogLevel?: LogLevel;
  WirelessGatewayLogOptions?: WirelessGatewayLogOption[];
  WirelessDeviceLogOptions?: WirelessDeviceLogOption[];
}
export interface GetMetricConfigurationRequest {}
export declare const SummaryMetricConfigurationStatus: {
  readonly Disabled: "Disabled";
  readonly Enabled: "Enabled";
};
export type SummaryMetricConfigurationStatus =
  (typeof SummaryMetricConfigurationStatus)[keyof typeof SummaryMetricConfigurationStatus];
export interface SummaryMetricConfiguration {
  Status?: SummaryMetricConfigurationStatus;
}
export interface GetMetricConfigurationResponse {
  SummaryMetric?: SummaryMetricConfiguration;
}
export declare const MetricName: {
  readonly AwsAccountActiveDeviceCount: "AwsAccountActiveDeviceCount";
  readonly AwsAccountActiveGatewayCount: "AwsAccountActiveGatewayCount";
  readonly AwsAccountDeviceCount: "AwsAccountDeviceCount";
  readonly AwsAccountDownlinkCount: "AwsAccountDownlinkCount";
  readonly AwsAccountGatewayCount: "AwsAccountGatewayCount";
  readonly AwsAccountJoinAcceptCount: "AwsAccountJoinAcceptCount";
  readonly AwsAccountJoinRequestCount: "AwsAccountJoinRequestCount";
  readonly AwsAccountRoamingDownlinkCount: "AwsAccountRoamingDownlinkCount";
  readonly AwsAccountRoamingUplinkCount: "AwsAccountRoamingUplinkCount";
  readonly AwsAccountUplinkCount: "AwsAccountUplinkCount";
  readonly AwsAccountUplinkLostCount: "AwsAccountUplinkLostCount";
  readonly AwsAccountUplinkLostRate: "AwsAccountUplinkLostRate";
  readonly DeviceDownlinkCount: "DeviceDownlinkCount";
  readonly DeviceJoinAcceptCount: "DeviceJoinAcceptCount";
  readonly DeviceJoinRequestCount: "DeviceJoinRequestCount";
  readonly DeviceRSSI: "DeviceRSSI";
  readonly DeviceRoamingDownlinkCount: "DeviceRoamingDownlinkCount";
  readonly DeviceRoamingUplinkCount: "DeviceRoamingUplinkCount";
  readonly DeviceSNR: "DeviceSNR";
  readonly DeviceUplinkCount: "DeviceUplinkCount";
  readonly DeviceUplinkLostCount: "DeviceUplinkLostCount";
  readonly DeviceUplinkLostRate: "DeviceUplinkLostRate";
  readonly GatewayDownTime: "GatewayDownTime";
  readonly GatewayDownlinkCount: "GatewayDownlinkCount";
  readonly GatewayJoinAcceptCount: "GatewayJoinAcceptCount";
  readonly GatewayJoinRequestCount: "GatewayJoinRequestCount";
  readonly GatewayRSSI: "GatewayRSSI";
  readonly GatewaySNR: "GatewaySNR";
  readonly GatewayUpTime: "GatewayUpTime";
  readonly GatewayUplinkCount: "GatewayUplinkCount";
};
export type MetricName = (typeof MetricName)[keyof typeof MetricName];
export interface SummaryMetricQuery {
  QueryId?: string;
  MetricName?: MetricName;
  Dimensions?: Dimension[];
  AggregationPeriod?: AggregationPeriod;
  StartTimestamp?: Date;
  EndTimestamp?: Date;
}
export interface GetMetricsRequest {
  SummaryMetricQueries?: SummaryMetricQuery[];
}
export declare const MetricQueryStatus: {
  readonly Failed: "Failed";
  readonly Succeeded: "Succeeded";
};
export type MetricQueryStatus =
  (typeof MetricQueryStatus)[keyof typeof MetricQueryStatus];
export interface MetricQueryValue {
  Min?: number;
  Max?: number;
  Sum?: number;
  Avg?: number;
  Std?: number;
  P90?: number;
}
export interface SummaryMetricQueryResult {
  QueryId?: string;
  QueryStatus?: MetricQueryStatus;
  Error?: string;
  MetricName?: MetricName;
  Dimensions?: Dimension[];
  AggregationPeriod?: AggregationPeriod;
  StartTimestamp?: Date;
  EndTimestamp?: Date;
  Timestamps?: Date[];
  Values?: MetricQueryValue[];
  Unit?: string;
}
export interface GetMetricsResponse {
  SummaryMetricQueryResults?: SummaryMetricQueryResult[];
}
export interface GetMulticastGroupRequest {
  Id: string | undefined;
}
export interface LoRaWANMulticastGet {
  RfRegion?: SupportedRfRegion;
  DlClass?: DlClass;
  NumberOfDevicesRequested?: number;
  NumberOfDevicesInGroup?: number;
}
export interface GetMulticastGroupResponse {
  Arn?: string;
  Id?: string;
  Name?: string;
  Description?: string;
  Status?: string;
  LoRaWAN?: LoRaWANMulticastGet;
  CreatedAt?: Date;
}
export interface GetMulticastGroupSessionRequest {
  Id: string | undefined;
}
export interface LoRaWANMulticastSession {
  DlDr?: number;
  DlFreq?: number;
  SessionStartTime?: Date;
  SessionTimeout?: number;
  PingSlotPeriod?: number;
}
export interface GetMulticastGroupSessionResponse {
  LoRaWAN?: LoRaWANMulticastSession;
}
export interface GetNetworkAnalyzerConfigurationRequest {
  ConfigurationName: string | undefined;
}
export interface GetNetworkAnalyzerConfigurationResponse {
  TraceContent?: TraceContent;
  WirelessDevices?: string[];
  WirelessGateways?: string[];
  Description?: string;
  Arn?: string;
  Name?: string;
  MulticastGroups?: string[];
}
export interface GetPartnerAccountRequest {
  PartnerAccountId: string | undefined;
  PartnerType: PartnerType | undefined;
}
export interface SidewalkAccountInfoWithFingerprint {
  AmazonId?: string;
  Fingerprint?: string;
  Arn?: string;
}
export interface GetPartnerAccountResponse {
  Sidewalk?: SidewalkAccountInfoWithFingerprint;
  AccountLinked?: boolean;
}
export declare const PositionResourceType: {
  readonly WirelessDevice: "WirelessDevice";
  readonly WirelessGateway: "WirelessGateway";
};
export type PositionResourceType =
  (typeof PositionResourceType)[keyof typeof PositionResourceType];
export interface GetPositionRequest {
  ResourceIdentifier: string | undefined;
  ResourceType: PositionResourceType | undefined;
}
export declare const PositionSolverProvider: {
  readonly SEMTECH: "Semtech";
};
export type PositionSolverProvider =
  (typeof PositionSolverProvider)[keyof typeof PositionSolverProvider];
export declare const PositionSolverType: {
  readonly GNSS: "GNSS";
};
export type PositionSolverType =
  (typeof PositionSolverType)[keyof typeof PositionSolverType];
export interface GetPositionResponse {
  Position?: number[];
  Accuracy?: Accuracy;
  SolverType?: PositionSolverType;
  SolverProvider?: PositionSolverProvider;
  SolverVersion?: string;
  Timestamp?: string;
}
export interface GetPositionConfigurationRequest {
  ResourceIdentifier: string | undefined;
  ResourceType: PositionResourceType | undefined;
}
export declare const PositionConfigurationFec: {
  readonly NONE: "NONE";
  readonly ROSE: "ROSE";
};
export type PositionConfigurationFec =
  (typeof PositionConfigurationFec)[keyof typeof PositionConfigurationFec];
export declare const PositionConfigurationStatus: {
  readonly Disabled: "Disabled";
  readonly Enabled: "Enabled";
};
export type PositionConfigurationStatus =
  (typeof PositionConfigurationStatus)[keyof typeof PositionConfigurationStatus];
export interface SemtechGnssDetail {
  Provider?: PositionSolverProvider;
  Type?: PositionSolverType;
  Status?: PositionConfigurationStatus;
  Fec?: PositionConfigurationFec;
}
export interface PositionSolverDetails {
  SemtechGnss?: SemtechGnssDetail;
}
export interface GetPositionConfigurationResponse {
  Solvers?: PositionSolverDetails;
  Destination?: string;
}
export interface Gnss {
  Payload: string | undefined;
  CaptureTime?: number;
  CaptureTimeAccuracy?: number;
  AssistPosition?: number[];
  AssistAltitude?: number;
  Use2DSolver?: boolean;
}
export interface Ip {
  IpAddress: string | undefined;
}
export interface WiFiAccessPoint {
  MacAddress: string | undefined;
  Rss: number | undefined;
}
export interface GetPositionEstimateRequest {
  WiFiAccessPoints?: WiFiAccessPoint[];
  CellTowers?: CellTowers;
  Ip?: Ip;
  Gnss?: Gnss;
  Timestamp?: Date;
}
export interface GetPositionEstimateResponse {
  GeoJsonPayload?: Uint8Array;
}
export interface GetResourceEventConfigurationRequest {
  Identifier: string | undefined;
  IdentifierType: IdentifierType | undefined;
  PartnerType?: EventNotificationPartnerType;
}
export interface GetResourceEventConfigurationResponse {
  DeviceRegistrationState?: DeviceRegistrationStateEventConfiguration;
  Proximity?: ProximityEventConfiguration;
  Join?: JoinEventConfiguration;
  ConnectionStatus?: ConnectionStatusEventConfiguration;
  MessageDeliveryStatus?: MessageDeliveryStatusEventConfiguration;
}
export interface GetResourceLogLevelRequest {
  ResourceIdentifier: string | undefined;
  ResourceType: string | undefined;
}
export interface GetResourceLogLevelResponse {
  LogLevel?: LogLevel;
}
export interface GetResourcePositionRequest {
  ResourceIdentifier: string | undefined;
  ResourceType: PositionResourceType | undefined;
}
export interface GetResourcePositionResponse {
  GeoJsonPayload?: Uint8Array;
}
export declare const WirelessGatewayServiceType: {
  readonly CUPS: "CUPS";
  readonly LNS: "LNS";
};
export type WirelessGatewayServiceType =
  (typeof WirelessGatewayServiceType)[keyof typeof WirelessGatewayServiceType];
export interface GetServiceEndpointRequest {
  ServiceType?: WirelessGatewayServiceType;
}
export interface GetServiceEndpointResponse {
  ServiceType?: WirelessGatewayServiceType;
  ServiceEndpoint?: string;
  ServerTrust?: string;
}
export interface GetServiceProfileRequest {
  Id: string | undefined;
}
export interface LoRaWANGetServiceProfileInfo {
  UlRate?: number;
  UlBucketSize?: number;
  UlRatePolicy?: string;
  DlRate?: number;
  DlBucketSize?: number;
  DlRatePolicy?: string;
  AddGwMetadata?: boolean;
  DevStatusReqFreq?: number;
  ReportDevStatusBattery?: boolean;
  ReportDevStatusMargin?: boolean;
  DrMin?: number;
  DrMax?: number;
  ChannelMask?: string;
  PrAllowed?: boolean;
  HrAllowed?: boolean;
  RaAllowed?: boolean;
  NwkGeoLoc?: boolean;
  TargetPer?: number;
  MinGwDiversity?: number;
}
export interface GetServiceProfileResponse {
  Arn?: string;
  Name?: string;
  Id?: string;
  LoRaWAN?: LoRaWANGetServiceProfileInfo;
}
export declare const WirelessDeviceIdType: {
  readonly DevEui: "DevEui";
  readonly SidewalkManufacturingSn: "SidewalkManufacturingSn";
  readonly ThingName: "ThingName";
  readonly WirelessDeviceId: "WirelessDeviceId";
};
export type WirelessDeviceIdType =
  (typeof WirelessDeviceIdType)[keyof typeof WirelessDeviceIdType];
export interface GetWirelessDeviceRequest {
  Identifier: string | undefined;
  IdentifierType: WirelessDeviceIdType | undefined;
}
export declare const WirelessDeviceSidewalkStatus: {
  readonly ACTIVATED: "ACTIVATED";
  readonly PROVISIONED: "PROVISIONED";
  readonly REGISTERED: "REGISTERED";
  readonly UNKNOWN: "UNKNOWN";
};
export type WirelessDeviceSidewalkStatus =
  (typeof WirelessDeviceSidewalkStatus)[keyof typeof WirelessDeviceSidewalkStatus];
export interface SidewalkDevice {
  AmazonId?: string;
  SidewalkId?: string;
  SidewalkManufacturingSn?: string;
  DeviceCertificates?: CertificateList[];
  PrivateKeys?: CertificateList[];
  DeviceProfileId?: string;
  CertificateId?: string;
  Status?: WirelessDeviceSidewalkStatus;
}
export interface GetWirelessDeviceResponse {
  Type?: WirelessDeviceType;
  Name?: string;
  Description?: string;
  DestinationName?: string;
  Id?: string;
  Arn?: string;
  ThingName?: string;
  ThingArn?: string;
  LoRaWAN?: LoRaWANDevice;
  Sidewalk?: SidewalkDevice;
  Positioning?: PositioningConfigStatus;
}
export interface GetWirelessDeviceImportTaskRequest {
  Id: string | undefined;
}
export interface SidewalkGetStartImportInfo {
  DeviceCreationFileList?: string[];
  Role?: string;
}
export declare const ImportTaskStatus: {
  readonly COMPLETE: "COMPLETE";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly INITIALIZED: "INITIALIZED";
  readonly INITIALIZING: "INITIALIZING";
  readonly PENDING: "PENDING";
};
export type ImportTaskStatus =
  (typeof ImportTaskStatus)[keyof typeof ImportTaskStatus];
export interface GetWirelessDeviceImportTaskResponse {
  Id?: string;
  Arn?: string;
  DestinationName?: string;
  Sidewalk?: SidewalkGetStartImportInfo;
  CreationTime?: Date;
  Status?: ImportTaskStatus;
  StatusReason?: string;
  InitializedImportedDeviceCount?: number;
  PendingImportedDeviceCount?: number;
  OnboardedImportedDeviceCount?: number;
  FailedImportedDeviceCount?: number;
}
export interface GetWirelessDeviceStatisticsRequest {
  WirelessDeviceId: string | undefined;
}
export interface LoRaWANGatewayMetadata {
  GatewayEui?: string;
  Snr?: number;
  Rssi?: number;
}
export interface LoRaWANPublicGatewayMetadata {
  ProviderNetId?: string;
  Id?: string;
  Rssi?: number;
  Snr?: number;
  RfRegion?: string;
  DlAllowed?: boolean;
}
export interface LoRaWANDeviceMetadata {
  DevEui?: string;
  FPort?: number;
  DataRate?: number;
  Frequency?: number;
  Timestamp?: string;
  Gateways?: LoRaWANGatewayMetadata[];
  PublicGateways?: LoRaWANPublicGatewayMetadata[];
}
export interface SidewalkDeviceMetadata {
  Rssi?: number;
  BatteryLevel?: BatteryLevel;
  Event?: Event;
  DeviceState?: DeviceState;
}
export interface GetWirelessDeviceStatisticsResponse {
  WirelessDeviceId?: string;
  LastUplinkReceivedAt?: string;
  LoRaWAN?: LoRaWANDeviceMetadata;
  Sidewalk?: SidewalkDeviceMetadata;
}
export declare const WirelessGatewayIdType: {
  readonly GatewayEui: "GatewayEui";
  readonly ThingName: "ThingName";
  readonly WirelessGatewayId: "WirelessGatewayId";
};
export type WirelessGatewayIdType =
  (typeof WirelessGatewayIdType)[keyof typeof WirelessGatewayIdType];
export interface GetWirelessGatewayRequest {
  Identifier: string | undefined;
  IdentifierType: WirelessGatewayIdType | undefined;
}
export interface GetWirelessGatewayResponse {
  Name?: string;
  Id?: string;
  Description?: string;
  LoRaWAN?: LoRaWANGateway;
  Arn?: string;
  ThingName?: string;
  ThingArn?: string;
}
export interface GetWirelessGatewayCertificateRequest {
  Id: string | undefined;
}
export interface GetWirelessGatewayCertificateResponse {
  IotCertificateId?: string;
  LoRaWANNetworkServerCertificateId?: string;
}
export interface GetWirelessGatewayFirmwareInformationRequest {
  Id: string | undefined;
}
export interface LoRaWANGatewayCurrentVersion {
  CurrentVersion?: LoRaWANGatewayVersion;
}
export interface GetWirelessGatewayFirmwareInformationResponse {
  LoRaWAN?: LoRaWANGatewayCurrentVersion;
}
export interface GetWirelessGatewayStatisticsRequest {
  WirelessGatewayId: string | undefined;
}
export interface GetWirelessGatewayStatisticsResponse {
  WirelessGatewayId?: string;
  LastUplinkReceivedAt?: string;
  ConnectionStatus?: ConnectionStatus;
}
export interface GetWirelessGatewayTaskRequest {
  Id: string | undefined;
}
export interface GetWirelessGatewayTaskResponse {
  WirelessGatewayId?: string;
  WirelessGatewayTaskDefinitionId?: string;
  LastUplinkReceivedAt?: string;
  TaskCreatedAt?: string;
  Status?: WirelessGatewayTaskStatus;
}
export interface GetWirelessGatewayTaskDefinitionRequest {
  Id: string | undefined;
}
export interface GetWirelessGatewayTaskDefinitionResponse {
  AutoCreateTasks?: boolean;
  Name?: string;
  Update?: UpdateWirelessGatewayTaskCreate;
  Arn?: string;
}
export declare const OnboardStatus: {
  readonly FAILED: "FAILED";
  readonly INITIALIZED: "INITIALIZED";
  readonly ONBOARDED: "ONBOARDED";
  readonly PENDING: "PENDING";
};
export type OnboardStatus = (typeof OnboardStatus)[keyof typeof OnboardStatus];
export interface ImportedSidewalkDevice {
  SidewalkManufacturingSn?: string;
  OnboardingStatus?: OnboardStatus;
  OnboardingStatusReason?: string;
  LastUpdateTime?: Date;
}
export interface ImportedWirelessDevice {
  Sidewalk?: ImportedSidewalkDevice;
}
export interface ListDestinationsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListDestinationsResponse {
  NextToken?: string;
  DestinationList?: Destinations[];
}
export interface ListDeviceProfilesRequest {
  NextToken?: string;
  MaxResults?: number;
  DeviceProfileType?: DeviceProfileType;
}
export interface ListDeviceProfilesResponse {
  NextToken?: string;
  DeviceProfileList?: DeviceProfile[];
}
export interface ListDevicesForWirelessDeviceImportTaskRequest {
  Id: string | undefined;
  MaxResults?: number;
  NextToken?: string;
  Status?: OnboardStatus;
}
export interface ListDevicesForWirelessDeviceImportTaskResponse {
  NextToken?: string;
  DestinationName?: string;
  ImportedWirelessDeviceList?: ImportedWirelessDevice[];
}
export interface ListEventConfigurationsRequest {
  ResourceType: EventNotificationResourceType | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListEventConfigurationsResponse {
  NextToken?: string;
  EventConfigurationsList?: EventConfigurationItem[];
}
export interface ListFuotaTasksRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListFuotaTasksResponse {
  NextToken?: string;
  FuotaTaskList?: FuotaTask[];
}
export interface ListMulticastGroupsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface MulticastGroup {
  Id?: string;
  Arn?: string;
  Name?: string;
}
export interface ListMulticastGroupsResponse {
  NextToken?: string;
  MulticastGroupList?: MulticastGroup[];
}
export interface ListMulticastGroupsByFuotaTaskRequest {
  Id: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface MulticastGroupByFuotaTask {
  Id?: string;
}
export interface ListMulticastGroupsByFuotaTaskResponse {
  NextToken?: string;
  MulticastGroupList?: MulticastGroupByFuotaTask[];
}
export interface ListNetworkAnalyzerConfigurationsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface NetworkAnalyzerConfigurations {
  Arn?: string;
  Name?: string;
}
export interface ListNetworkAnalyzerConfigurationsResponse {
  NextToken?: string;
  NetworkAnalyzerConfigurationList?: NetworkAnalyzerConfigurations[];
}
export interface ListPartnerAccountsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListPartnerAccountsResponse {
  NextToken?: string;
  Sidewalk?: SidewalkAccountInfoWithFingerprint[];
}
export declare const SidewalkAccountInfoFilterSensitiveLog: (
  obj: SidewalkAccountInfo
) => any;
export declare const AssociateAwsAccountWithPartnerAccountRequestFilterSensitiveLog: (
  obj: AssociateAwsAccountWithPartnerAccountRequest
) => any;
export declare const AssociateAwsAccountWithPartnerAccountResponseFilterSensitiveLog: (
  obj: AssociateAwsAccountWithPartnerAccountResponse
) => any;
export declare const SidewalkGetDeviceProfileFilterSensitiveLog: (
  obj: SidewalkGetDeviceProfile
) => any;
export declare const GetDeviceProfileResponseFilterSensitiveLog: (
  obj: GetDeviceProfileResponse
) => any;
export declare const SidewalkAccountInfoWithFingerprintFilterSensitiveLog: (
  obj: SidewalkAccountInfoWithFingerprint
) => any;
export declare const GetPartnerAccountResponseFilterSensitiveLog: (
  obj: GetPartnerAccountResponse
) => any;
export declare const ListPartnerAccountsResponseFilterSensitiveLog: (
  obj: ListPartnerAccountsResponse
) => any;
