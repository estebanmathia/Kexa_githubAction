import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { EMRServerlessServiceException as __BaseException } from "./EMRServerlessServiceException";
export declare const Architecture: {
  readonly ARM64: "ARM64";
  readonly X86_64: "X86_64";
};
export type Architecture = (typeof Architecture)[keyof typeof Architecture];
export interface AutoStartConfig {
  enabled?: boolean;
}
export interface AutoStopConfig {
  enabled?: boolean;
  idleTimeoutMinutes?: number;
}
export interface ImageConfiguration {
  imageUri: string | undefined;
  resolvedImageDigest?: string;
}
export interface WorkerResourceConfig {
  cpu: string | undefined;
  memory: string | undefined;
  disk?: string;
  diskType?: string;
}
export interface InitialCapacityConfig {
  workerCount: number | undefined;
  workerConfiguration?: WorkerResourceConfig;
}
export interface MaximumAllowedResources {
  cpu: string | undefined;
  memory: string | undefined;
  disk?: string;
}
export interface CloudWatchLoggingConfiguration {
  enabled: boolean | undefined;
  logGroupName?: string;
  logStreamNamePrefix?: string;
  encryptionKeyArn?: string;
  logTypes?: Record<string, string[]>;
}
export interface ManagedPersistenceMonitoringConfiguration {
  enabled?: boolean;
  encryptionKeyArn?: string;
}
export interface PrometheusMonitoringConfiguration {
  remoteWriteUrl?: string;
}
export interface S3MonitoringConfiguration {
  logUri?: string;
  encryptionKeyArn?: string;
}
export interface MonitoringConfiguration {
  s3MonitoringConfiguration?: S3MonitoringConfiguration;
  managedPersistenceMonitoringConfiguration?: ManagedPersistenceMonitoringConfiguration;
  cloudWatchLoggingConfiguration?: CloudWatchLoggingConfiguration;
  prometheusMonitoringConfiguration?: PrometheusMonitoringConfiguration;
}
export interface NetworkConfiguration {
  subnetIds?: string[];
  securityGroupIds?: string[];
}
export declare const ApplicationState: {
  readonly CREATED: "CREATED";
  readonly CREATING: "CREATING";
  readonly STARTED: "STARTED";
  readonly STARTING: "STARTING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
  readonly TERMINATED: "TERMINATED";
};
export type ApplicationState =
  (typeof ApplicationState)[keyof typeof ApplicationState];
export interface WorkerTypeSpecification {
  imageConfiguration?: ImageConfiguration;
}
export interface ApplicationSummary {
  id: string | undefined;
  name?: string;
  arn: string | undefined;
  releaseLabel: string | undefined;
  type: string | undefined;
  state: ApplicationState | undefined;
  stateDetails?: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  architecture?: Architecture;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface ImageConfigurationInput {
  imageUri?: string;
}
export interface WorkerTypeSpecificationInput {
  imageConfiguration?: ImageConfigurationInput;
}
export interface CreateApplicationResponse {
  applicationId: string | undefined;
  name?: string;
  arn: string | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface DeleteApplicationRequest {
  applicationId: string | undefined;
}
export interface DeleteApplicationResponse {}
export interface GetApplicationRequest {
  applicationId: string | undefined;
}
export interface ListApplicationsRequest {
  nextToken?: string;
  maxResults?: number;
  states?: ApplicationState[];
}
export interface ListApplicationsResponse {
  applications: ApplicationSummary[] | undefined;
  nextToken?: string;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface StartApplicationRequest {
  applicationId: string | undefined;
}
export interface StartApplicationResponse {}
export interface StopApplicationRequest {
  applicationId: string | undefined;
}
export interface StopApplicationResponse {}
export interface CancelJobRunRequest {
  applicationId: string | undefined;
  jobRunId: string | undefined;
}
export interface CancelJobRunResponse {
  applicationId: string | undefined;
  jobRunId: string | undefined;
}
export interface GetDashboardForJobRunRequest {
  applicationId: string | undefined;
  jobRunId: string | undefined;
}
export interface GetDashboardForJobRunResponse {
  url?: string;
}
export interface GetJobRunRequest {
  applicationId: string | undefined;
  jobRunId: string | undefined;
}
export interface ResourceUtilization {
  vCPUHour?: number;
  memoryGBHour?: number;
  storageGBHour?: number;
}
export interface Hive {
  query: string | undefined;
  initQueryFile?: string;
  parameters?: string;
}
export interface SparkSubmit {
  entryPoint: string | undefined;
  entryPointArguments?: string[];
  sparkSubmitParameters?: string;
}
export type JobDriver =
  | JobDriver.HiveMember
  | JobDriver.SparkSubmitMember
  | JobDriver.$UnknownMember;
export declare namespace JobDriver {
  interface SparkSubmitMember {
    sparkSubmit: SparkSubmit;
    hive?: never;
    $unknown?: never;
  }
  interface HiveMember {
    sparkSubmit?: never;
    hive: Hive;
    $unknown?: never;
  }
  interface $UnknownMember {
    sparkSubmit?: never;
    hive?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    sparkSubmit: (value: SparkSubmit) => T;
    hive: (value: Hive) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: JobDriver, visitor: Visitor<T>) => T;
}
export declare const JobRunState: {
  readonly CANCELLED: "CANCELLED";
  readonly CANCELLING: "CANCELLING";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly RUNNING: "RUNNING";
  readonly SCHEDULED: "SCHEDULED";
  readonly SUBMITTED: "SUBMITTED";
  readonly SUCCESS: "SUCCESS";
};
export type JobRunState = (typeof JobRunState)[keyof typeof JobRunState];
export interface TotalResourceUtilization {
  vCPUHour?: number;
  memoryGBHour?: number;
  storageGBHour?: number;
}
export interface ListJobRunsRequest {
  applicationId: string | undefined;
  nextToken?: string;
  maxResults?: number;
  createdAtAfter?: Date;
  createdAtBefore?: Date;
  states?: JobRunState[];
}
export interface JobRunSummary {
  applicationId: string | undefined;
  id: string | undefined;
  name?: string;
  arn: string | undefined;
  createdBy: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  executionRole: string | undefined;
  state: JobRunState | undefined;
  stateDetails: string | undefined;
  releaseLabel: string | undefined;
  type?: string;
}
export interface ListJobRunsResponse {
  jobRuns: JobRunSummary[] | undefined;
  nextToken?: string;
}
export interface StartJobRunResponse {
  applicationId: string | undefined;
  jobRunId: string | undefined;
  arn: string | undefined;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface Configuration {
  classification: string | undefined;
  properties?: Record<string, string>;
  configurations?: Configuration[];
}
export interface Application {
  applicationId: string | undefined;
  name?: string;
  arn: string | undefined;
  releaseLabel: string | undefined;
  type: string | undefined;
  state: ApplicationState | undefined;
  stateDetails?: string;
  initialCapacity?: Record<string, InitialCapacityConfig>;
  maximumCapacity?: MaximumAllowedResources;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  tags?: Record<string, string>;
  autoStartConfiguration?: AutoStartConfig;
  autoStopConfiguration?: AutoStopConfig;
  networkConfiguration?: NetworkConfiguration;
  architecture?: Architecture;
  imageConfiguration?: ImageConfiguration;
  workerTypeSpecifications?: Record<string, WorkerTypeSpecification>;
  runtimeConfiguration?: Configuration[];
  monitoringConfiguration?: MonitoringConfiguration;
}
export interface ConfigurationOverrides {
  applicationConfiguration?: Configuration[];
  monitoringConfiguration?: MonitoringConfiguration;
}
export interface CreateApplicationRequest {
  name?: string;
  releaseLabel: string | undefined;
  type: string | undefined;
  clientToken?: string;
  initialCapacity?: Record<string, InitialCapacityConfig>;
  maximumCapacity?: MaximumAllowedResources;
  tags?: Record<string, string>;
  autoStartConfiguration?: AutoStartConfig;
  autoStopConfiguration?: AutoStopConfig;
  networkConfiguration?: NetworkConfiguration;
  architecture?: Architecture;
  imageConfiguration?: ImageConfigurationInput;
  workerTypeSpecifications?: Record<string, WorkerTypeSpecificationInput>;
  runtimeConfiguration?: Configuration[];
  monitoringConfiguration?: MonitoringConfiguration;
}
export interface UpdateApplicationRequest {
  applicationId: string | undefined;
  clientToken?: string;
  initialCapacity?: Record<string, InitialCapacityConfig>;
  maximumCapacity?: MaximumAllowedResources;
  autoStartConfiguration?: AutoStartConfig;
  autoStopConfiguration?: AutoStopConfig;
  networkConfiguration?: NetworkConfiguration;
  architecture?: Architecture;
  imageConfiguration?: ImageConfigurationInput;
  workerTypeSpecifications?: Record<string, WorkerTypeSpecificationInput>;
  releaseLabel?: string;
  runtimeConfiguration?: Configuration[];
  monitoringConfiguration?: MonitoringConfiguration;
}
export interface GetApplicationResponse {
  application: Application | undefined;
}
export interface JobRun {
  applicationId: string | undefined;
  jobRunId: string | undefined;
  name?: string;
  arn: string | undefined;
  createdBy: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  executionRole: string | undefined;
  state: JobRunState | undefined;
  stateDetails: string | undefined;
  releaseLabel: string | undefined;
  configurationOverrides?: ConfigurationOverrides;
  jobDriver: JobDriver | undefined;
  tags?: Record<string, string>;
  totalResourceUtilization?: TotalResourceUtilization;
  networkConfiguration?: NetworkConfiguration;
  totalExecutionDurationSeconds?: number;
  executionTimeoutMinutes?: number;
  billedResourceUtilization?: ResourceUtilization;
}
export interface StartJobRunRequest {
  applicationId: string | undefined;
  clientToken?: string;
  executionRoleArn: string | undefined;
  jobDriver?: JobDriver;
  configurationOverrides?: ConfigurationOverrides;
  tags?: Record<string, string>;
  executionTimeoutMinutes?: number;
  name?: string;
}
export interface UpdateApplicationResponse {
  application: Application | undefined;
}
export interface GetJobRunResponse {
  jobRun: JobRun | undefined;
}
export declare const HiveFilterSensitiveLog: (obj: Hive) => any;
export declare const SparkSubmitFilterSensitiveLog: (obj: SparkSubmit) => any;
export declare const JobDriverFilterSensitiveLog: (obj: JobDriver) => any;
export declare const ConfigurationFilterSensitiveLog: (
  obj: Configuration
) => any;
export declare const ApplicationFilterSensitiveLog: (obj: Application) => any;
export declare const ConfigurationOverridesFilterSensitiveLog: (
  obj: ConfigurationOverrides
) => any;
export declare const CreateApplicationRequestFilterSensitiveLog: (
  obj: CreateApplicationRequest
) => any;
export declare const UpdateApplicationRequestFilterSensitiveLog: (
  obj: UpdateApplicationRequest
) => any;
export declare const GetApplicationResponseFilterSensitiveLog: (
  obj: GetApplicationResponse
) => any;
export declare const JobRunFilterSensitiveLog: (obj: JobRun) => any;
export declare const StartJobRunRequestFilterSensitiveLog: (
  obj: StartJobRunRequest
) => any;
export declare const UpdateApplicationResponseFilterSensitiveLog: (
  obj: UpdateApplicationResponse
) => any;
export declare const GetJobRunResponseFilterSensitiveLog: (
  obj: GetJobRunResponse
) => any;
