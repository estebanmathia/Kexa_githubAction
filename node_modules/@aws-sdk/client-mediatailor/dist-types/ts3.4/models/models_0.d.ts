import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { MediaTailorServiceException as __BaseException } from "./MediaTailorServiceException";
export interface KeyValuePair {
  Key: string | undefined;
  Value: string | undefined;
}
export declare const MessageType: {
  readonly SPLICE_INSERT: "SPLICE_INSERT";
  readonly TIME_SIGNAL: "TIME_SIGNAL";
};
export type MessageType = (typeof MessageType)[keyof typeof MessageType];
export interface SlateSource {
  SourceLocationName?: string;
  VodSourceName?: string;
}
export interface SpliceInsertMessage {
  AvailNum?: number;
  AvailsExpected?: number;
  SpliceEventId?: number;
  UniqueProgramId?: number;
}
export interface SegmentationDescriptor {
  SegmentationEventId?: number;
  SegmentationUpidType?: number;
  SegmentationUpid?: string;
  SegmentationTypeId?: number;
  SegmentNum?: number;
  SegmentsExpected?: number;
  SubSegmentNum?: number;
  SubSegmentsExpected?: number;
}
export interface TimeSignalMessage {
  SegmentationDescriptors?: SegmentationDescriptor[];
}
export interface AdBreak {
  MessageType?: MessageType;
  OffsetMillis: number | undefined;
  Slate?: SlateSource;
  SpliceInsertMessage?: SpliceInsertMessage;
  TimeSignalMessage?: TimeSignalMessage;
  AdBreakMetadata?: KeyValuePair[];
}
export declare const AlertCategory: {
  readonly INFO: "INFO";
  readonly PLAYBACK_WARNING: "PLAYBACK_WARNING";
  readonly SCHEDULING_ERROR: "SCHEDULING_ERROR";
};
export type AlertCategory = (typeof AlertCategory)[keyof typeof AlertCategory];
export interface Alert {
  AlertCode: string | undefined;
  AlertMessage: string | undefined;
  LastModifiedTime: Date | undefined;
  RelatedResourceArns: string[] | undefined;
  ResourceArn: string | undefined;
  Category?: AlertCategory;
}
export interface ClipRange {
  EndOffsetMillis?: number;
  StartOffsetMillis?: number;
}
export interface AlternateMedia {
  SourceLocationName?: string;
  LiveSourceName?: string;
  VodSourceName?: string;
  ClipRange?: ClipRange;
  ScheduledStartTimeMillis?: number;
  AdBreaks?: AdBreak[];
  DurationMillis?: number;
}
export interface AudienceMedia {
  Audience?: string;
  AlternateMedia?: AlternateMedia[];
}
export declare const Operator: {
  readonly EQUALS: "EQUALS";
};
export type Operator = (typeof Operator)[keyof typeof Operator];
export interface AvailMatchingCriteria {
  DynamicVariable: string | undefined;
  Operator: Operator | undefined;
}
export declare const LogType: {
  readonly AS_RUN: "AS_RUN";
};
export type LogType = (typeof LogType)[keyof typeof LogType];
export interface LogConfigurationForChannel {
  LogTypes?: LogType[];
}
export interface DashPlaylistSettings {
  ManifestWindowSeconds?: number;
  MinBufferTimeSeconds?: number;
  MinUpdatePeriodSeconds?: number;
  SuggestedPresentationDelaySeconds?: number;
}
export declare const AdMarkupType: {
  readonly DATERANGE: "DATERANGE";
  readonly SCTE35_ENHANCED: "SCTE35_ENHANCED";
};
export type AdMarkupType = (typeof AdMarkupType)[keyof typeof AdMarkupType];
export interface HlsPlaylistSettings {
  ManifestWindowSeconds?: number;
  AdMarkupType?: AdMarkupType[];
}
export interface ResponseOutputItem {
  DashPlaylistSettings?: DashPlaylistSettings;
  HlsPlaylistSettings?: HlsPlaylistSettings;
  ManifestName: string | undefined;
  PlaybackUrl: string | undefined;
  SourceGroup: string | undefined;
}
export interface Channel {
  Arn: string | undefined;
  ChannelName: string | undefined;
  ChannelState: string | undefined;
  CreationTime?: Date;
  FillerSlate?: SlateSource;
  LastModifiedTime?: Date;
  Outputs: ResponseOutputItem[] | undefined;
  PlaybackMode: string | undefined;
  Tags?: Record<string, string>;
  Tier: string | undefined;
  LogConfiguration: LogConfigurationForChannel | undefined;
  Audiences?: string[];
}
export declare const Type: {
  readonly DASH: "DASH";
  readonly HLS: "HLS";
};
export type Type = (typeof Type)[keyof typeof Type];
export interface HttpPackageConfiguration {
  Path: string | undefined;
  SourceGroup: string | undefined;
  Type: Type | undefined;
}
export interface LiveSource {
  Arn: string | undefined;
  CreationTime?: Date;
  HttpPackageConfigurations: HttpPackageConfiguration[] | undefined;
  LastModifiedTime?: Date;
  LiveSourceName: string | undefined;
  SourceLocationName: string | undefined;
  Tags?: Record<string, string>;
}
export declare const FillPolicy: {
  readonly FULL_AVAIL_ONLY: "FULL_AVAIL_ONLY";
  readonly PARTIAL_AVAIL: "PARTIAL_AVAIL";
};
export type FillPolicy = (typeof FillPolicy)[keyof typeof FillPolicy];
export declare const Mode: {
  readonly AFTER_LIVE_EDGE: "AFTER_LIVE_EDGE";
  readonly BEHIND_LIVE_EDGE: "BEHIND_LIVE_EDGE";
  readonly OFF: "OFF";
};
export type Mode = (typeof Mode)[keyof typeof Mode];
export interface AvailSuppression {
  Mode?: Mode;
  Value?: string;
  FillPolicy?: FillPolicy;
}
export interface Bumper {
  EndUrl?: string;
  StartUrl?: string;
}
export interface CdnConfiguration {
  AdSegmentUrlPrefix?: string;
  ContentSegmentUrlPrefix?: string;
}
export declare const OriginManifestType: {
  readonly MULTI_PERIOD: "MULTI_PERIOD";
  readonly SINGLE_PERIOD: "SINGLE_PERIOD";
};
export type OriginManifestType =
  (typeof OriginManifestType)[keyof typeof OriginManifestType];
export interface DashConfiguration {
  ManifestEndpointPrefix?: string;
  MpdLocation?: string;
  OriginManifestType?: OriginManifestType;
}
export interface HlsConfiguration {
  ManifestEndpointPrefix?: string;
}
export declare const InsertionMode: {
  readonly PLAYER_SELECT: "PLAYER_SELECT";
  readonly STITCHED_ONLY: "STITCHED_ONLY";
};
export type InsertionMode = (typeof InsertionMode)[keyof typeof InsertionMode];
export interface LivePreRollConfiguration {
  AdDecisionServerUrl?: string;
  MaxDurationSeconds?: number;
}
export interface LogConfiguration {
  PercentEnabled: number | undefined;
}
export interface AdMarkerPassthrough {
  Enabled?: boolean;
}
export interface ManifestProcessingRules {
  AdMarkerPassthrough?: AdMarkerPassthrough;
}
export interface PlaybackConfiguration {
  AdDecisionServerUrl?: string;
  AvailSuppression?: AvailSuppression;
  Bumper?: Bumper;
  CdnConfiguration?: CdnConfiguration;
  ConfigurationAliases?: Record<string, Record<string, string>>;
  DashConfiguration?: DashConfiguration;
  HlsConfiguration?: HlsConfiguration;
  InsertionMode?: InsertionMode;
  LivePreRollConfiguration?: LivePreRollConfiguration;
  LogConfiguration?: LogConfiguration;
  ManifestProcessingRules?: ManifestProcessingRules;
  Name?: string;
  PersonalizationThresholdSeconds?: number;
  PlaybackConfigurationArn?: string;
  PlaybackEndpointPrefix?: string;
  SessionInitializationEndpointPrefix?: string;
  SlateAdUrl?: string;
  Tags?: Record<string, string>;
  TranscodeProfileName?: string;
  VideoContentSourceUrl?: string;
}
export interface PrefetchConsumption {
  AvailMatchingCriteria?: AvailMatchingCriteria[];
  EndTime: Date | undefined;
  StartTime?: Date;
}
export interface PrefetchRetrieval {
  DynamicVariables?: Record<string, string>;
  EndTime: Date | undefined;
  StartTime?: Date;
}
export interface PrefetchSchedule {
  Arn: string | undefined;
  Consumption: PrefetchConsumption | undefined;
  Name: string | undefined;
  PlaybackConfigurationName: string | undefined;
  Retrieval: PrefetchRetrieval | undefined;
  StreamId?: string;
}
export interface ScheduleAdBreak {
  ApproximateDurationSeconds?: number;
  ApproximateStartTime?: Date;
  SourceLocationName?: string;
  VodSourceName?: string;
}
export declare const ScheduleEntryType: {
  readonly ALTERNATE_MEDIA: "ALTERNATE_MEDIA";
  readonly FILLER_SLATE: "FILLER_SLATE";
  readonly PROGRAM: "PROGRAM";
};
export type ScheduleEntryType =
  (typeof ScheduleEntryType)[keyof typeof ScheduleEntryType];
export interface ScheduleEntry {
  ApproximateDurationSeconds?: number;
  ApproximateStartTime?: Date;
  Arn: string | undefined;
  ChannelName: string | undefined;
  LiveSourceName?: string;
  ProgramName: string | undefined;
  ScheduleAdBreaks?: ScheduleAdBreak[];
  ScheduleEntryType?: ScheduleEntryType;
  SourceLocationName: string | undefined;
  VodSourceName?: string;
  Audiences?: string[];
}
export interface SegmentDeliveryConfiguration {
  BaseUrl?: string;
  Name?: string;
}
export declare const AccessType: {
  readonly AUTODETECT_SIGV4: "AUTODETECT_SIGV4";
  readonly S3_SIGV4: "S3_SIGV4";
  readonly SECRETS_MANAGER_ACCESS_TOKEN: "SECRETS_MANAGER_ACCESS_TOKEN";
};
export type AccessType = (typeof AccessType)[keyof typeof AccessType];
export interface SecretsManagerAccessTokenConfiguration {
  HeaderName?: string;
  SecretArn?: string;
  SecretStringKey?: string;
}
export interface AccessConfiguration {
  AccessType?: AccessType;
  SecretsManagerAccessTokenConfiguration?: SecretsManagerAccessTokenConfiguration;
}
export interface DefaultSegmentDeliveryConfiguration {
  BaseUrl?: string;
}
export interface HttpConfiguration {
  BaseUrl: string | undefined;
}
export interface SourceLocation {
  AccessConfiguration?: AccessConfiguration;
  Arn: string | undefined;
  CreationTime?: Date;
  DefaultSegmentDeliveryConfiguration?: DefaultSegmentDeliveryConfiguration;
  HttpConfiguration: HttpConfiguration | undefined;
  LastModifiedTime?: Date;
  SegmentDeliveryConfigurations?: SegmentDeliveryConfiguration[];
  SourceLocationName: string | undefined;
  Tags?: Record<string, string>;
}
export interface VodSource {
  Arn: string | undefined;
  CreationTime?: Date;
  HttpPackageConfigurations: HttpPackageConfiguration[] | undefined;
  LastModifiedTime?: Date;
  SourceLocationName: string | undefined;
  Tags?: Record<string, string>;
  VodSourceName: string | undefined;
}
export interface AdBreakOpportunity {
  OffsetMillis: number | undefined;
}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export interface DeleteChannelPolicyRequest {
  ChannelName: string | undefined;
}
export interface DeleteChannelPolicyResponse {}
export interface GetChannelPolicyRequest {
  ChannelName: string | undefined;
}
export interface GetChannelPolicyResponse {
  Policy?: string;
}
export interface PutChannelPolicyRequest {
  ChannelName: string | undefined;
  Policy: string | undefined;
}
export interface PutChannelPolicyResponse {}
export interface ConfigureLogsForChannelRequest {
  ChannelName: string | undefined;
  LogTypes: LogType[] | undefined;
}
export interface ConfigureLogsForChannelResponse {
  ChannelName?: string;
  LogTypes?: LogType[];
}
export interface RequestOutputItem {
  DashPlaylistSettings?: DashPlaylistSettings;
  HlsPlaylistSettings?: HlsPlaylistSettings;
  ManifestName: string | undefined;
  SourceGroup: string | undefined;
}
export declare const PlaybackMode: {
  readonly LINEAR: "LINEAR";
  readonly LOOP: "LOOP";
};
export type PlaybackMode = (typeof PlaybackMode)[keyof typeof PlaybackMode];
export declare const Tier: {
  readonly BASIC: "BASIC";
  readonly STANDARD: "STANDARD";
};
export type Tier = (typeof Tier)[keyof typeof Tier];
export interface TimeShiftConfiguration {
  MaxTimeDelaySeconds: number | undefined;
}
export interface CreateChannelRequest {
  ChannelName: string | undefined;
  FillerSlate?: SlateSource;
  Outputs: RequestOutputItem[] | undefined;
  PlaybackMode: PlaybackMode | undefined;
  Tags?: Record<string, string>;
  Tier?: Tier;
  TimeShiftConfiguration?: TimeShiftConfiguration;
  Audiences?: string[];
}
export declare const ChannelState: {
  readonly RUNNING: "RUNNING";
  readonly STOPPED: "STOPPED";
};
export type ChannelState = (typeof ChannelState)[keyof typeof ChannelState];
export interface CreateChannelResponse {
  Arn?: string;
  ChannelName?: string;
  ChannelState?: ChannelState;
  CreationTime?: Date;
  FillerSlate?: SlateSource;
  LastModifiedTime?: Date;
  Outputs?: ResponseOutputItem[];
  PlaybackMode?: string;
  Tags?: Record<string, string>;
  Tier?: string;
  TimeShiftConfiguration?: TimeShiftConfiguration;
  Audiences?: string[];
}
export interface DeleteChannelRequest {
  ChannelName: string | undefined;
}
export interface DeleteChannelResponse {}
export interface DescribeChannelRequest {
  ChannelName: string | undefined;
}
export interface DescribeChannelResponse {
  Arn?: string;
  ChannelName?: string;
  ChannelState?: ChannelState;
  CreationTime?: Date;
  FillerSlate?: SlateSource;
  LastModifiedTime?: Date;
  Outputs?: ResponseOutputItem[];
  PlaybackMode?: string;
  Tags?: Record<string, string>;
  Tier?: string;
  LogConfiguration: LogConfigurationForChannel | undefined;
  TimeShiftConfiguration?: TimeShiftConfiguration;
  Audiences?: string[];
}
export interface GetChannelScheduleRequest {
  ChannelName: string | undefined;
  DurationMinutes?: string;
  MaxResults?: number;
  NextToken?: string;
  Audience?: string;
}
export interface GetChannelScheduleResponse {
  Items?: ScheduleEntry[];
  NextToken?: string;
}
export interface ListChannelsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListChannelsResponse {
  Items?: Channel[];
  NextToken?: string;
}
export declare const RelativePosition: {
  readonly AFTER_PROGRAM: "AFTER_PROGRAM";
  readonly BEFORE_PROGRAM: "BEFORE_PROGRAM";
};
export type RelativePosition =
  (typeof RelativePosition)[keyof typeof RelativePosition];
export interface Transition {
  DurationMillis?: number;
  RelativePosition: RelativePosition | undefined;
  RelativeProgram?: string;
  ScheduledStartTimeMillis?: number;
  Type: string | undefined;
}
export interface ScheduleConfiguration {
  Transition: Transition | undefined;
  ClipRange?: ClipRange;
}
export interface CreateProgramRequest {
  AdBreaks?: AdBreak[];
  ChannelName: string | undefined;
  LiveSourceName?: string;
  ProgramName: string | undefined;
  ScheduleConfiguration: ScheduleConfiguration | undefined;
  SourceLocationName: string | undefined;
  VodSourceName?: string;
  AudienceMedia?: AudienceMedia[];
}
export interface CreateProgramResponse {
  AdBreaks?: AdBreak[];
  Arn?: string;
  ChannelName?: string;
  CreationTime?: Date;
  LiveSourceName?: string;
  ProgramName?: string;
  ScheduledStartTime?: Date;
  SourceLocationName?: string;
  VodSourceName?: string;
  ClipRange?: ClipRange;
  DurationMillis?: number;
  AudienceMedia?: AudienceMedia[];
}
export interface DeleteProgramRequest {
  ChannelName: string | undefined;
  ProgramName: string | undefined;
}
export interface DeleteProgramResponse {}
export interface DescribeProgramRequest {
  ChannelName: string | undefined;
  ProgramName: string | undefined;
}
export interface DescribeProgramResponse {
  AdBreaks?: AdBreak[];
  Arn?: string;
  ChannelName?: string;
  CreationTime?: Date;
  LiveSourceName?: string;
  ProgramName?: string;
  ScheduledStartTime?: Date;
  SourceLocationName?: string;
  VodSourceName?: string;
  ClipRange?: ClipRange;
  DurationMillis?: number;
  AudienceMedia?: AudienceMedia[];
}
export interface UpdateProgramTransition {
  ScheduledStartTimeMillis?: number;
  DurationMillis?: number;
}
export interface UpdateProgramScheduleConfiguration {
  Transition?: UpdateProgramTransition;
  ClipRange?: ClipRange;
}
export interface UpdateProgramRequest {
  AdBreaks?: AdBreak[];
  ChannelName: string | undefined;
  ProgramName: string | undefined;
  ScheduleConfiguration: UpdateProgramScheduleConfiguration | undefined;
  AudienceMedia?: AudienceMedia[];
}
export interface UpdateProgramResponse {
  AdBreaks?: AdBreak[];
  Arn?: string;
  ChannelName?: string;
  CreationTime?: Date;
  ProgramName?: string;
  SourceLocationName?: string;
  VodSourceName?: string;
  LiveSourceName?: string;
  ClipRange?: ClipRange;
  DurationMillis?: number;
  ScheduledStartTime?: Date;
  AudienceMedia?: AudienceMedia[];
}
export interface StartChannelRequest {
  ChannelName: string | undefined;
}
export interface StartChannelResponse {}
export interface StopChannelRequest {
  ChannelName: string | undefined;
}
export interface StopChannelResponse {}
export interface UpdateChannelRequest {
  ChannelName: string | undefined;
  FillerSlate?: SlateSource;
  Outputs: RequestOutputItem[] | undefined;
  TimeShiftConfiguration?: TimeShiftConfiguration;
  Audiences?: string[];
}
export interface UpdateChannelResponse {
  Arn?: string;
  ChannelName?: string;
  ChannelState?: ChannelState;
  CreationTime?: Date;
  FillerSlate?: SlateSource;
  LastModifiedTime?: Date;
  Outputs?: ResponseOutputItem[];
  PlaybackMode?: string;
  Tags?: Record<string, string>;
  Tier?: string;
  TimeShiftConfiguration?: TimeShiftConfiguration;
  Audiences?: string[];
}
export interface ConfigureLogsForPlaybackConfigurationRequest {
  PercentEnabled: number | undefined;
  PlaybackConfigurationName: string | undefined;
}
export interface ConfigureLogsForPlaybackConfigurationResponse {
  PercentEnabled: number | undefined;
  PlaybackConfigurationName?: string;
}
export interface CreateLiveSourceRequest {
  HttpPackageConfigurations: HttpPackageConfiguration[] | undefined;
  LiveSourceName: string | undefined;
  SourceLocationName: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreateLiveSourceResponse {
  Arn?: string;
  CreationTime?: Date;
  HttpPackageConfigurations?: HttpPackageConfiguration[];
  LastModifiedTime?: Date;
  LiveSourceName?: string;
  SourceLocationName?: string;
  Tags?: Record<string, string>;
}
export interface CreatePrefetchScheduleRequest {
  Consumption: PrefetchConsumption | undefined;
  Name: string | undefined;
  PlaybackConfigurationName: string | undefined;
  Retrieval: PrefetchRetrieval | undefined;
  StreamId?: string;
}
export interface CreatePrefetchScheduleResponse {
  Arn?: string;
  Consumption?: PrefetchConsumption;
  Name?: string;
  PlaybackConfigurationName?: string;
  Retrieval?: PrefetchRetrieval;
  StreamId?: string;
}
export interface CreateSourceLocationRequest {
  AccessConfiguration?: AccessConfiguration;
  DefaultSegmentDeliveryConfiguration?: DefaultSegmentDeliveryConfiguration;
  HttpConfiguration: HttpConfiguration | undefined;
  SegmentDeliveryConfigurations?: SegmentDeliveryConfiguration[];
  SourceLocationName: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreateSourceLocationResponse {
  AccessConfiguration?: AccessConfiguration;
  Arn?: string;
  CreationTime?: Date;
  DefaultSegmentDeliveryConfiguration?: DefaultSegmentDeliveryConfiguration;
  HttpConfiguration?: HttpConfiguration;
  LastModifiedTime?: Date;
  SegmentDeliveryConfigurations?: SegmentDeliveryConfiguration[];
  SourceLocationName?: string;
  Tags?: Record<string, string>;
}
export interface CreateVodSourceRequest {
  HttpPackageConfigurations: HttpPackageConfiguration[] | undefined;
  SourceLocationName: string | undefined;
  Tags?: Record<string, string>;
  VodSourceName: string | undefined;
}
export interface CreateVodSourceResponse {
  Arn?: string;
  CreationTime?: Date;
  HttpPackageConfigurations?: HttpPackageConfiguration[];
  LastModifiedTime?: Date;
  SourceLocationName?: string;
  Tags?: Record<string, string>;
  VodSourceName?: string;
}
export interface DashConfigurationForPut {
  MpdLocation?: string;
  OriginManifestType?: OriginManifestType;
}
export interface DeleteLiveSourceRequest {
  LiveSourceName: string | undefined;
  SourceLocationName: string | undefined;
}
export interface DeleteLiveSourceResponse {}
export interface DeletePlaybackConfigurationRequest {
  Name: string | undefined;
}
export interface DeletePlaybackConfigurationResponse {}
export interface DeletePrefetchScheduleRequest {
  Name: string | undefined;
  PlaybackConfigurationName: string | undefined;
}
export interface DeletePrefetchScheduleResponse {}
export interface DeleteSourceLocationRequest {
  SourceLocationName: string | undefined;
}
export interface DeleteSourceLocationResponse {}
export interface DeleteVodSourceRequest {
  SourceLocationName: string | undefined;
  VodSourceName: string | undefined;
}
export interface DeleteVodSourceResponse {}
export interface DescribeLiveSourceRequest {
  LiveSourceName: string | undefined;
  SourceLocationName: string | undefined;
}
export interface DescribeLiveSourceResponse {
  Arn?: string;
  CreationTime?: Date;
  HttpPackageConfigurations?: HttpPackageConfiguration[];
  LastModifiedTime?: Date;
  LiveSourceName?: string;
  SourceLocationName?: string;
  Tags?: Record<string, string>;
}
export interface DescribeSourceLocationRequest {
  SourceLocationName: string | undefined;
}
export interface DescribeSourceLocationResponse {
  AccessConfiguration?: AccessConfiguration;
  Arn?: string;
  CreationTime?: Date;
  DefaultSegmentDeliveryConfiguration?: DefaultSegmentDeliveryConfiguration;
  HttpConfiguration?: HttpConfiguration;
  LastModifiedTime?: Date;
  SegmentDeliveryConfigurations?: SegmentDeliveryConfiguration[];
  SourceLocationName?: string;
  Tags?: Record<string, string>;
}
export interface DescribeVodSourceRequest {
  SourceLocationName: string | undefined;
  VodSourceName: string | undefined;
}
export interface DescribeVodSourceResponse {
  AdBreakOpportunities?: AdBreakOpportunity[];
  Arn?: string;
  CreationTime?: Date;
  HttpPackageConfigurations?: HttpPackageConfiguration[];
  LastModifiedTime?: Date;
  SourceLocationName?: string;
  Tags?: Record<string, string>;
  VodSourceName?: string;
}
export interface GetPlaybackConfigurationRequest {
  Name: string | undefined;
}
export interface GetPlaybackConfigurationResponse {
  AdDecisionServerUrl?: string;
  AvailSuppression?: AvailSuppression;
  Bumper?: Bumper;
  CdnConfiguration?: CdnConfiguration;
  ConfigurationAliases?: Record<string, Record<string, string>>;
  DashConfiguration?: DashConfiguration;
  HlsConfiguration?: HlsConfiguration;
  InsertionMode?: InsertionMode;
  LivePreRollConfiguration?: LivePreRollConfiguration;
  LogConfiguration?: LogConfiguration;
  ManifestProcessingRules?: ManifestProcessingRules;
  Name?: string;
  PersonalizationThresholdSeconds?: number;
  PlaybackConfigurationArn?: string;
  PlaybackEndpointPrefix?: string;
  SessionInitializationEndpointPrefix?: string;
  SlateAdUrl?: string;
  Tags?: Record<string, string>;
  TranscodeProfileName?: string;
  VideoContentSourceUrl?: string;
}
export interface GetPrefetchScheduleRequest {
  Name: string | undefined;
  PlaybackConfigurationName: string | undefined;
}
export interface GetPrefetchScheduleResponse {
  Arn?: string;
  Consumption?: PrefetchConsumption;
  Name?: string;
  PlaybackConfigurationName?: string;
  Retrieval?: PrefetchRetrieval;
  StreamId?: string;
}
export interface ListAlertsRequest {
  MaxResults?: number;
  NextToken?: string;
  ResourceArn: string | undefined;
}
export interface ListAlertsResponse {
  Items?: Alert[];
  NextToken?: string;
}
export interface ListLiveSourcesRequest {
  MaxResults?: number;
  NextToken?: string;
  SourceLocationName: string | undefined;
}
export interface ListLiveSourcesResponse {
  Items?: LiveSource[];
  NextToken?: string;
}
export interface ListPlaybackConfigurationsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListPlaybackConfigurationsResponse {
  Items?: PlaybackConfiguration[];
  NextToken?: string;
}
export interface ListPrefetchSchedulesRequest {
  MaxResults?: number;
  NextToken?: string;
  PlaybackConfigurationName: string | undefined;
  StreamId?: string;
}
export interface ListPrefetchSchedulesResponse {
  Items?: PrefetchSchedule[];
  NextToken?: string;
}
export interface ListSourceLocationsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListSourceLocationsResponse {
  Items?: SourceLocation[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export interface ListVodSourcesRequest {
  MaxResults?: number;
  NextToken?: string;
  SourceLocationName: string | undefined;
}
export interface ListVodSourcesResponse {
  Items?: VodSource[];
  NextToken?: string;
}
export interface UpdateLiveSourceRequest {
  HttpPackageConfigurations: HttpPackageConfiguration[] | undefined;
  LiveSourceName: string | undefined;
  SourceLocationName: string | undefined;
}
export interface UpdateLiveSourceResponse {
  Arn?: string;
  CreationTime?: Date;
  HttpPackageConfigurations?: HttpPackageConfiguration[];
  LastModifiedTime?: Date;
  LiveSourceName?: string;
  SourceLocationName?: string;
  Tags?: Record<string, string>;
}
export interface PutPlaybackConfigurationRequest {
  AdDecisionServerUrl?: string;
  AvailSuppression?: AvailSuppression;
  Bumper?: Bumper;
  CdnConfiguration?: CdnConfiguration;
  ConfigurationAliases?: Record<string, Record<string, string>>;
  DashConfiguration?: DashConfigurationForPut;
  InsertionMode?: InsertionMode;
  LivePreRollConfiguration?: LivePreRollConfiguration;
  ManifestProcessingRules?: ManifestProcessingRules;
  Name: string | undefined;
  PersonalizationThresholdSeconds?: number;
  SlateAdUrl?: string;
  Tags?: Record<string, string>;
  TranscodeProfileName?: string;
  VideoContentSourceUrl?: string;
}
export interface PutPlaybackConfigurationResponse {
  AdDecisionServerUrl?: string;
  AvailSuppression?: AvailSuppression;
  Bumper?: Bumper;
  CdnConfiguration?: CdnConfiguration;
  ConfigurationAliases?: Record<string, Record<string, string>>;
  DashConfiguration?: DashConfiguration;
  HlsConfiguration?: HlsConfiguration;
  InsertionMode?: InsertionMode;
  LivePreRollConfiguration?: LivePreRollConfiguration;
  LogConfiguration?: LogConfiguration;
  ManifestProcessingRules?: ManifestProcessingRules;
  Name?: string;
  PersonalizationThresholdSeconds?: number;
  PlaybackConfigurationArn?: string;
  PlaybackEndpointPrefix?: string;
  SessionInitializationEndpointPrefix?: string;
  SlateAdUrl?: string;
  Tags?: Record<string, string>;
  TranscodeProfileName?: string;
  VideoContentSourceUrl?: string;
}
export interface UpdateSourceLocationRequest {
  AccessConfiguration?: AccessConfiguration;
  DefaultSegmentDeliveryConfiguration?: DefaultSegmentDeliveryConfiguration;
  HttpConfiguration: HttpConfiguration | undefined;
  SegmentDeliveryConfigurations?: SegmentDeliveryConfiguration[];
  SourceLocationName: string | undefined;
}
export interface UpdateSourceLocationResponse {
  AccessConfiguration?: AccessConfiguration;
  Arn?: string;
  CreationTime?: Date;
  DefaultSegmentDeliveryConfiguration?: DefaultSegmentDeliveryConfiguration;
  HttpConfiguration?: HttpConfiguration;
  LastModifiedTime?: Date;
  SegmentDeliveryConfigurations?: SegmentDeliveryConfiguration[];
  SourceLocationName?: string;
  Tags?: Record<string, string>;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UpdateVodSourceRequest {
  HttpPackageConfigurations: HttpPackageConfiguration[] | undefined;
  SourceLocationName: string | undefined;
  VodSourceName: string | undefined;
}
export interface UpdateVodSourceResponse {
  Arn?: string;
  CreationTime?: Date;
  HttpPackageConfigurations?: HttpPackageConfiguration[];
  LastModifiedTime?: Date;
  SourceLocationName?: string;
  Tags?: Record<string, string>;
  VodSourceName?: string;
}
