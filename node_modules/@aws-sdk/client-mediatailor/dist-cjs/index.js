"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AccessType: () => AccessType,
  AdMarkupType: () => AdMarkupType,
  AlertCategory: () => AlertCategory,
  BadRequestException: () => BadRequestException,
  ChannelState: () => ChannelState,
  ConfigureLogsForChannelCommand: () => ConfigureLogsForChannelCommand,
  ConfigureLogsForPlaybackConfigurationCommand: () => ConfigureLogsForPlaybackConfigurationCommand,
  CreateChannelCommand: () => CreateChannelCommand,
  CreateLiveSourceCommand: () => CreateLiveSourceCommand,
  CreatePrefetchScheduleCommand: () => CreatePrefetchScheduleCommand,
  CreateProgramCommand: () => CreateProgramCommand,
  CreateSourceLocationCommand: () => CreateSourceLocationCommand,
  CreateVodSourceCommand: () => CreateVodSourceCommand,
  DeleteChannelCommand: () => DeleteChannelCommand,
  DeleteChannelPolicyCommand: () => DeleteChannelPolicyCommand,
  DeleteLiveSourceCommand: () => DeleteLiveSourceCommand,
  DeletePlaybackConfigurationCommand: () => DeletePlaybackConfigurationCommand,
  DeletePrefetchScheduleCommand: () => DeletePrefetchScheduleCommand,
  DeleteProgramCommand: () => DeleteProgramCommand,
  DeleteSourceLocationCommand: () => DeleteSourceLocationCommand,
  DeleteVodSourceCommand: () => DeleteVodSourceCommand,
  DescribeChannelCommand: () => DescribeChannelCommand,
  DescribeLiveSourceCommand: () => DescribeLiveSourceCommand,
  DescribeProgramCommand: () => DescribeProgramCommand,
  DescribeSourceLocationCommand: () => DescribeSourceLocationCommand,
  DescribeVodSourceCommand: () => DescribeVodSourceCommand,
  FillPolicy: () => FillPolicy,
  GetChannelPolicyCommand: () => GetChannelPolicyCommand,
  GetChannelScheduleCommand: () => GetChannelScheduleCommand,
  GetPlaybackConfigurationCommand: () => GetPlaybackConfigurationCommand,
  GetPrefetchScheduleCommand: () => GetPrefetchScheduleCommand,
  InsertionMode: () => InsertionMode,
  ListAlertsCommand: () => ListAlertsCommand,
  ListChannelsCommand: () => ListChannelsCommand,
  ListLiveSourcesCommand: () => ListLiveSourcesCommand,
  ListPlaybackConfigurationsCommand: () => ListPlaybackConfigurationsCommand,
  ListPrefetchSchedulesCommand: () => ListPrefetchSchedulesCommand,
  ListSourceLocationsCommand: () => ListSourceLocationsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  ListVodSourcesCommand: () => ListVodSourcesCommand,
  LogType: () => LogType,
  MediaTailor: () => MediaTailor,
  MediaTailorClient: () => MediaTailorClient,
  MediaTailorServiceException: () => MediaTailorServiceException,
  MessageType: () => MessageType,
  Mode: () => Mode,
  Operator: () => Operator,
  OriginManifestType: () => OriginManifestType,
  PlaybackMode: () => PlaybackMode,
  PutChannelPolicyCommand: () => PutChannelPolicyCommand,
  PutPlaybackConfigurationCommand: () => PutPlaybackConfigurationCommand,
  RelativePosition: () => RelativePosition,
  ScheduleEntryType: () => ScheduleEntryType,
  StartChannelCommand: () => StartChannelCommand,
  StopChannelCommand: () => StopChannelCommand,
  TagResourceCommand: () => TagResourceCommand,
  Tier: () => Tier,
  Type: () => Type,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateChannelCommand: () => UpdateChannelCommand,
  UpdateLiveSourceCommand: () => UpdateLiveSourceCommand,
  UpdateProgramCommand: () => UpdateProgramCommand,
  UpdateSourceLocationCommand: () => UpdateSourceLocationCommand,
  UpdateVodSourceCommand: () => UpdateVodSourceCommand,
  __Client: () => import_smithy_client.Client,
  paginateGetChannelSchedule: () => paginateGetChannelSchedule,
  paginateListAlerts: () => paginateListAlerts,
  paginateListChannels: () => paginateListChannels,
  paginateListLiveSources: () => paginateListLiveSources,
  paginateListPlaybackConfigurations: () => paginateListPlaybackConfigurations,
  paginateListPrefetchSchedules: () => paginateListPrefetchSchedules,
  paginateListSourceLocations: () => paginateListSourceLocations,
  paginateListVodSources: () => paginateListVodSources
});
module.exports = __toCommonJS(src_exports);

// src/MediaTailorClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "mediatailor"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/MediaTailorClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/MediaTailorClient.ts
var _MediaTailorClient = class _MediaTailorClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultMediaTailorHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_MediaTailorClient, "MediaTailorClient");
var MediaTailorClient = _MediaTailorClient;

// src/MediaTailor.ts


// src/commands/ConfigureLogsForChannelCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");



// src/models/MediaTailorServiceException.ts

var _MediaTailorServiceException = class _MediaTailorServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _MediaTailorServiceException.prototype);
  }
};
__name(_MediaTailorServiceException, "MediaTailorServiceException");
var MediaTailorServiceException = _MediaTailorServiceException;

// src/models/models_0.ts
var MessageType = {
  SPLICE_INSERT: "SPLICE_INSERT",
  TIME_SIGNAL: "TIME_SIGNAL"
};
var AlertCategory = {
  INFO: "INFO",
  PLAYBACK_WARNING: "PLAYBACK_WARNING",
  SCHEDULING_ERROR: "SCHEDULING_ERROR"
};
var Operator = {
  EQUALS: "EQUALS"
};
var LogType = {
  AS_RUN: "AS_RUN"
};
var AdMarkupType = {
  DATERANGE: "DATERANGE",
  SCTE35_ENHANCED: "SCTE35_ENHANCED"
};
var Type = {
  DASH: "DASH",
  HLS: "HLS"
};
var FillPolicy = {
  FULL_AVAIL_ONLY: "FULL_AVAIL_ONLY",
  PARTIAL_AVAIL: "PARTIAL_AVAIL"
};
var Mode = {
  AFTER_LIVE_EDGE: "AFTER_LIVE_EDGE",
  BEHIND_LIVE_EDGE: "BEHIND_LIVE_EDGE",
  OFF: "OFF"
};
var OriginManifestType = {
  MULTI_PERIOD: "MULTI_PERIOD",
  SINGLE_PERIOD: "SINGLE_PERIOD"
};
var InsertionMode = {
  PLAYER_SELECT: "PLAYER_SELECT",
  STITCHED_ONLY: "STITCHED_ONLY"
};
var ScheduleEntryType = {
  ALTERNATE_MEDIA: "ALTERNATE_MEDIA",
  FILLER_SLATE: "FILLER_SLATE",
  PROGRAM: "PROGRAM"
};
var AccessType = {
  AUTODETECT_SIGV4: "AUTODETECT_SIGV4",
  S3_SIGV4: "S3_SIGV4",
  SECRETS_MANAGER_ACCESS_TOKEN: "SECRETS_MANAGER_ACCESS_TOKEN"
};
var _BadRequestException = class _BadRequestException extends MediaTailorServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "BadRequestException",
      $fault: "client",
      ...opts
    });
    this.name = "BadRequestException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _BadRequestException.prototype);
    this.Message = opts.Message;
  }
};
__name(_BadRequestException, "BadRequestException");
var BadRequestException = _BadRequestException;
var PlaybackMode = {
  LINEAR: "LINEAR",
  LOOP: "LOOP"
};
var Tier = {
  BASIC: "BASIC",
  STANDARD: "STANDARD"
};
var ChannelState = {
  RUNNING: "RUNNING",
  STOPPED: "STOPPED"
};
var RelativePosition = {
  AFTER_PROGRAM: "AFTER_PROGRAM",
  BEFORE_PROGRAM: "BEFORE_PROGRAM"
};

// src/protocols/Aws_restJson1.ts
var se_ConfigureLogsForChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/configureLogs/channel");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ChannelName: [],
      LogTypes: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_ConfigureLogsForChannelCommand");
var se_ConfigureLogsForPlaybackConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/configureLogs/playbackConfiguration");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      PercentEnabled: [],
      PlaybackConfigurationName: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_ConfigureLogsForPlaybackConfigurationCommand");
var se_CreateChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/channel/{ChannelName}");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Audiences: (_) => (0, import_smithy_client._json)(_),
      FillerSlate: (_) => (0, import_smithy_client._json)(_),
      Outputs: (_) => (0, import_smithy_client._json)(_),
      PlaybackMode: [],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`],
      Tier: [],
      TimeShiftConfiguration: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateChannelCommand");
var se_CreateLiveSourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}");
  b.p("LiveSourceName", () => input.LiveSourceName, "{LiveSourceName}", false);
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      HttpPackageConfigurations: (_) => (0, import_smithy_client._json)(_),
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateLiveSourceCommand");
var se_CreatePrefetchScheduleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prefetchSchedule/{PlaybackConfigurationName}/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  b.p("PlaybackConfigurationName", () => input.PlaybackConfigurationName, "{PlaybackConfigurationName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Consumption: (_) => se_PrefetchConsumption(_, context),
      Retrieval: (_) => se_PrefetchRetrieval(_, context),
      StreamId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreatePrefetchScheduleCommand");
var se_CreateProgramCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/channel/{ChannelName}/program/{ProgramName}");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      AdBreaks: (_) => (0, import_smithy_client._json)(_),
      AudienceMedia: (_) => (0, import_smithy_client._json)(_),
      LiveSourceName: [],
      ScheduleConfiguration: (_) => (0, import_smithy_client._json)(_),
      SourceLocationName: [],
      VodSourceName: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateProgramCommand");
var se_CreateSourceLocationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/sourceLocation/{SourceLocationName}");
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      AccessConfiguration: (_) => (0, import_smithy_client._json)(_),
      DefaultSegmentDeliveryConfiguration: (_) => (0, import_smithy_client._json)(_),
      HttpConfiguration: (_) => (0, import_smithy_client._json)(_),
      SegmentDeliveryConfigurations: (_) => (0, import_smithy_client._json)(_),
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateSourceLocationCommand");
var se_CreateVodSourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}");
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  b.p("VodSourceName", () => input.VodSourceName, "{VodSourceName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      HttpPackageConfigurations: (_) => (0, import_smithy_client._json)(_),
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateVodSourceCommand");
var se_DeleteChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channel/{ChannelName}");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteChannelCommand");
var se_DeleteChannelPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channel/{ChannelName}/policy");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteChannelPolicyCommand");
var se_DeleteLiveSourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}");
  b.p("LiveSourceName", () => input.LiveSourceName, "{LiveSourceName}", false);
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteLiveSourceCommand");
var se_DeletePlaybackConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/playbackConfiguration/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeletePlaybackConfigurationCommand");
var se_DeletePrefetchScheduleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prefetchSchedule/{PlaybackConfigurationName}/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  b.p("PlaybackConfigurationName", () => input.PlaybackConfigurationName, "{PlaybackConfigurationName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeletePrefetchScheduleCommand");
var se_DeleteProgramCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channel/{ChannelName}/program/{ProgramName}");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteProgramCommand");
var se_DeleteSourceLocationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/sourceLocation/{SourceLocationName}");
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteSourceLocationCommand");
var se_DeleteVodSourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}");
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  b.p("VodSourceName", () => input.VodSourceName, "{VodSourceName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteVodSourceCommand");
var se_DescribeChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channel/{ChannelName}");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeChannelCommand");
var se_DescribeLiveSourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}");
  b.p("LiveSourceName", () => input.LiveSourceName, "{LiveSourceName}", false);
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeLiveSourceCommand");
var se_DescribeProgramCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channel/{ChannelName}/program/{ProgramName}");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeProgramCommand");
var se_DescribeSourceLocationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/sourceLocation/{SourceLocationName}");
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeSourceLocationCommand");
var se_DescribeVodSourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}");
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  b.p("VodSourceName", () => input.VodSourceName, "{VodSourceName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeVodSourceCommand");
var se_GetChannelPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channel/{ChannelName}/policy");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetChannelPolicyCommand");
var se_GetChannelScheduleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channel/{ChannelName}/schedule");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  const query = (0, import_smithy_client.map)({
    [_dM]: [, input[_DM]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_a]: [, input[_A]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetChannelScheduleCommand");
var se_GetPlaybackConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/playbackConfiguration/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetPlaybackConfigurationCommand");
var se_GetPrefetchScheduleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prefetchSchedule/{PlaybackConfigurationName}/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  b.p("PlaybackConfigurationName", () => input.PlaybackConfigurationName, "{PlaybackConfigurationName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetPrefetchScheduleCommand");
var se_ListAlertsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/alerts");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_rA]: [, (0, import_smithy_client.expectNonNull)(input[_RA], `ResourceArn`)]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAlertsCommand");
var se_ListChannelsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channels");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListChannelsCommand");
var se_ListLiveSourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/sourceLocation/{SourceLocationName}/liveSources");
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListLiveSourcesCommand");
var se_ListPlaybackConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/playbackConfigurations");
  const query = (0, import_smithy_client.map)({
    [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_NT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListPlaybackConfigurationsCommand");
var se_ListPrefetchSchedulesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prefetchSchedule/{PlaybackConfigurationName}");
  b.p("PlaybackConfigurationName", () => input.PlaybackConfigurationName, "{PlaybackConfigurationName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      MaxResults: [],
      NextToken: [],
      StreamId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListPrefetchSchedulesCommand");
var se_ListSourceLocationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/sourceLocations");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListSourceLocationsCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_ListVodSourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/sourceLocation/{SourceLocationName}/vodSources");
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListVodSourcesCommand");
var se_PutChannelPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/channel/{ChannelName}/policy");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Policy: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutChannelPolicyCommand");
var se_PutPlaybackConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/playbackConfiguration");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      AdDecisionServerUrl: [],
      AvailSuppression: (_) => (0, import_smithy_client._json)(_),
      Bumper: (_) => (0, import_smithy_client._json)(_),
      CdnConfiguration: (_) => (0, import_smithy_client._json)(_),
      ConfigurationAliases: (_) => (0, import_smithy_client._json)(_),
      DashConfiguration: (_) => (0, import_smithy_client._json)(_),
      InsertionMode: [],
      LivePreRollConfiguration: (_) => (0, import_smithy_client._json)(_),
      ManifestProcessingRules: (_) => (0, import_smithy_client._json)(_),
      Name: [],
      PersonalizationThresholdSeconds: [],
      SlateAdUrl: [],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`],
      TranscodeProfileName: [],
      VideoContentSourceUrl: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutPlaybackConfigurationCommand");
var se_StartChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channel/{ChannelName}/start");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  let body;
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_StartChannelCommand");
var se_StopChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channel/{ChannelName}/stop");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  let body;
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_StopChannelCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_tK]: [
      (0, import_smithy_client.expectNonNull)(input.TagKeys, `TagKeys`) != null,
      () => (input[_TK] || []).map((_entry) => _entry)
    ]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/channel/{ChannelName}");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Audiences: (_) => (0, import_smithy_client._json)(_),
      FillerSlate: (_) => (0, import_smithy_client._json)(_),
      Outputs: (_) => (0, import_smithy_client._json)(_),
      TimeShiftConfiguration: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateChannelCommand");
var se_UpdateLiveSourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}");
  b.p("LiveSourceName", () => input.LiveSourceName, "{LiveSourceName}", false);
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      HttpPackageConfigurations: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateLiveSourceCommand");
var se_UpdateProgramCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/channel/{ChannelName}/program/{ProgramName}");
  b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
  b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      AdBreaks: (_) => (0, import_smithy_client._json)(_),
      AudienceMedia: (_) => (0, import_smithy_client._json)(_),
      ScheduleConfiguration: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateProgramCommand");
var se_UpdateSourceLocationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/sourceLocation/{SourceLocationName}");
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      AccessConfiguration: (_) => (0, import_smithy_client._json)(_),
      DefaultSegmentDeliveryConfiguration: (_) => (0, import_smithy_client._json)(_),
      HttpConfiguration: (_) => (0, import_smithy_client._json)(_),
      SegmentDeliveryConfigurations: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateSourceLocationCommand");
var se_UpdateVodSourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}");
  b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
  b.p("VodSourceName", () => input.VodSourceName, "{VodSourceName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      HttpPackageConfigurations: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateVodSourceCommand");
var de_ConfigureLogsForChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ChannelName: import_smithy_client.expectString,
    LogTypes: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ConfigureLogsForChannelCommand");
var de_ConfigureLogsForPlaybackConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    PercentEnabled: import_smithy_client.expectInt32,
    PlaybackConfigurationName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ConfigureLogsForPlaybackConfigurationCommand");
var de_CreateChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: import_smithy_client.expectString,
    Audiences: import_smithy_client._json,
    ChannelName: import_smithy_client.expectString,
    ChannelState: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    FillerSlate: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Outputs: import_smithy_client._json,
    PlaybackMode: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`],
    Tier: import_smithy_client.expectString,
    TimeShiftConfiguration: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateChannelCommand");
var de_CreateLiveSourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    HttpPackageConfigurations: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    LiveSourceName: import_smithy_client.expectString,
    SourceLocationName: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateLiveSourceCommand");
var de_CreatePrefetchScheduleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: import_smithy_client.expectString,
    Consumption: (_) => de_PrefetchConsumption(_, context),
    Name: import_smithy_client.expectString,
    PlaybackConfigurationName: import_smithy_client.expectString,
    Retrieval: (_) => de_PrefetchRetrieval(_, context),
    StreamId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreatePrefetchScheduleCommand");
var de_CreateProgramCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    AdBreaks: import_smithy_client._json,
    Arn: import_smithy_client.expectString,
    AudienceMedia: import_smithy_client._json,
    ChannelName: import_smithy_client.expectString,
    ClipRange: import_smithy_client._json,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    DurationMillis: import_smithy_client.expectLong,
    LiveSourceName: import_smithy_client.expectString,
    ProgramName: import_smithy_client.expectString,
    ScheduledStartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    SourceLocationName: import_smithy_client.expectString,
    VodSourceName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateProgramCommand");
var de_CreateSourceLocationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    AccessConfiguration: import_smithy_client._json,
    Arn: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    DefaultSegmentDeliveryConfiguration: import_smithy_client._json,
    HttpConfiguration: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    SegmentDeliveryConfigurations: import_smithy_client._json,
    SourceLocationName: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateSourceLocationCommand");
var de_CreateVodSourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    HttpPackageConfigurations: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    SourceLocationName: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`],
    VodSourceName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateVodSourceCommand");
var de_DeleteChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteChannelCommand");
var de_DeleteChannelPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteChannelPolicyCommand");
var de_DeleteLiveSourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteLiveSourceCommand");
var de_DeletePlaybackConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeletePlaybackConfigurationCommand");
var de_DeletePrefetchScheduleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeletePrefetchScheduleCommand");
var de_DeleteProgramCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteProgramCommand");
var de_DeleteSourceLocationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteSourceLocationCommand");
var de_DeleteVodSourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteVodSourceCommand");
var de_DescribeChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: import_smithy_client.expectString,
    Audiences: import_smithy_client._json,
    ChannelName: import_smithy_client.expectString,
    ChannelState: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    FillerSlate: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    LogConfiguration: import_smithy_client._json,
    Outputs: import_smithy_client._json,
    PlaybackMode: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`],
    Tier: import_smithy_client.expectString,
    TimeShiftConfiguration: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeChannelCommand");
var de_DescribeLiveSourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    HttpPackageConfigurations: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    LiveSourceName: import_smithy_client.expectString,
    SourceLocationName: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeLiveSourceCommand");
var de_DescribeProgramCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    AdBreaks: import_smithy_client._json,
    Arn: import_smithy_client.expectString,
    AudienceMedia: import_smithy_client._json,
    ChannelName: import_smithy_client.expectString,
    ClipRange: import_smithy_client._json,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    DurationMillis: import_smithy_client.expectLong,
    LiveSourceName: import_smithy_client.expectString,
    ProgramName: import_smithy_client.expectString,
    ScheduledStartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    SourceLocationName: import_smithy_client.expectString,
    VodSourceName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeProgramCommand");
var de_DescribeSourceLocationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    AccessConfiguration: import_smithy_client._json,
    Arn: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    DefaultSegmentDeliveryConfiguration: import_smithy_client._json,
    HttpConfiguration: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    SegmentDeliveryConfigurations: import_smithy_client._json,
    SourceLocationName: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeSourceLocationCommand");
var de_DescribeVodSourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    AdBreakOpportunities: import_smithy_client._json,
    Arn: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    HttpPackageConfigurations: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    SourceLocationName: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`],
    VodSourceName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeVodSourceCommand");
var de_GetChannelPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Policy: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetChannelPolicyCommand");
var de_GetChannelScheduleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Items: (_) => de___listOfScheduleEntry(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetChannelScheduleCommand");
var de_GetPlaybackConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    AdDecisionServerUrl: import_smithy_client.expectString,
    AvailSuppression: import_smithy_client._json,
    Bumper: import_smithy_client._json,
    CdnConfiguration: import_smithy_client._json,
    ConfigurationAliases: import_smithy_client._json,
    DashConfiguration: import_smithy_client._json,
    HlsConfiguration: import_smithy_client._json,
    InsertionMode: import_smithy_client.expectString,
    LivePreRollConfiguration: import_smithy_client._json,
    LogConfiguration: import_smithy_client._json,
    ManifestProcessingRules: import_smithy_client._json,
    Name: import_smithy_client.expectString,
    PersonalizationThresholdSeconds: import_smithy_client.expectInt32,
    PlaybackConfigurationArn: import_smithy_client.expectString,
    PlaybackEndpointPrefix: import_smithy_client.expectString,
    SessionInitializationEndpointPrefix: import_smithy_client.expectString,
    SlateAdUrl: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`],
    TranscodeProfileName: import_smithy_client.expectString,
    VideoContentSourceUrl: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPlaybackConfigurationCommand");
var de_GetPrefetchScheduleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: import_smithy_client.expectString,
    Consumption: (_) => de_PrefetchConsumption(_, context),
    Name: import_smithy_client.expectString,
    PlaybackConfigurationName: import_smithy_client.expectString,
    Retrieval: (_) => de_PrefetchRetrieval(_, context),
    StreamId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPrefetchScheduleCommand");
var de_ListAlertsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Items: (_) => de___listOfAlert(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAlertsCommand");
var de_ListChannelsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Items: (_) => de___listOfChannel(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListChannelsCommand");
var de_ListLiveSourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Items: (_) => de___listOfLiveSource(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListLiveSourcesCommand");
var de_ListPlaybackConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Items: (_) => de___listOfPlaybackConfiguration(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPlaybackConfigurationsCommand");
var de_ListPrefetchSchedulesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Items: (_) => de___listOfPrefetchSchedule(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPrefetchSchedulesCommand");
var de_ListSourceLocationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Items: (_) => de___listOfSourceLocation(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListSourceLocationsCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_ListVodSourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Items: (_) => de___listOfVodSource(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListVodSourcesCommand");
var de_PutChannelPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutChannelPolicyCommand");
var de_PutPlaybackConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    AdDecisionServerUrl: import_smithy_client.expectString,
    AvailSuppression: import_smithy_client._json,
    Bumper: import_smithy_client._json,
    CdnConfiguration: import_smithy_client._json,
    ConfigurationAliases: import_smithy_client._json,
    DashConfiguration: import_smithy_client._json,
    HlsConfiguration: import_smithy_client._json,
    InsertionMode: import_smithy_client.expectString,
    LivePreRollConfiguration: import_smithy_client._json,
    LogConfiguration: import_smithy_client._json,
    ManifestProcessingRules: import_smithy_client._json,
    Name: import_smithy_client.expectString,
    PersonalizationThresholdSeconds: import_smithy_client.expectInt32,
    PlaybackConfigurationArn: import_smithy_client.expectString,
    PlaybackEndpointPrefix: import_smithy_client.expectString,
    SessionInitializationEndpointPrefix: import_smithy_client.expectString,
    SlateAdUrl: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`],
    TranscodeProfileName: import_smithy_client.expectString,
    VideoContentSourceUrl: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_PutPlaybackConfigurationCommand");
var de_StartChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_StartChannelCommand");
var de_StopChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_StopChannelCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UpdateChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: import_smithy_client.expectString,
    Audiences: import_smithy_client._json,
    ChannelName: import_smithy_client.expectString,
    ChannelState: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    FillerSlate: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Outputs: import_smithy_client._json,
    PlaybackMode: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`],
    Tier: import_smithy_client.expectString,
    TimeShiftConfiguration: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateChannelCommand");
var de_UpdateLiveSourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    HttpPackageConfigurations: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    LiveSourceName: import_smithy_client.expectString,
    SourceLocationName: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateLiveSourceCommand");
var de_UpdateProgramCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    AdBreaks: import_smithy_client._json,
    Arn: import_smithy_client.expectString,
    AudienceMedia: import_smithy_client._json,
    ChannelName: import_smithy_client.expectString,
    ClipRange: import_smithy_client._json,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    DurationMillis: import_smithy_client.expectLong,
    LiveSourceName: import_smithy_client.expectString,
    ProgramName: import_smithy_client.expectString,
    ScheduledStartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    SourceLocationName: import_smithy_client.expectString,
    VodSourceName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateProgramCommand");
var de_UpdateSourceLocationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    AccessConfiguration: import_smithy_client._json,
    Arn: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    DefaultSegmentDeliveryConfiguration: import_smithy_client._json,
    HttpConfiguration: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    SegmentDeliveryConfigurations: import_smithy_client._json,
    SourceLocationName: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateSourceLocationCommand");
var de_UpdateVodSourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    HttpPackageConfigurations: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    SourceLocationName: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`],
    VodSourceName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateVodSourceCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "BadRequestException":
    case "com.amazonaws.mediatailor#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(MediaTailorServiceException);
var de_BadRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new BadRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_BadRequestExceptionRes");
var se_PrefetchConsumption = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    AvailMatchingCriteria: import_smithy_client._json,
    EndTime: (_) => Math.round(_.getTime() / 1e3),
    StartTime: (_) => Math.round(_.getTime() / 1e3)
  });
}, "se_PrefetchConsumption");
var se_PrefetchRetrieval = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    DynamicVariables: import_smithy_client._json,
    EndTime: (_) => Math.round(_.getTime() / 1e3),
    StartTime: (_) => Math.round(_.getTime() / 1e3)
  });
}, "se_PrefetchRetrieval");
var de___listOfAlert = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Alert(entry, context);
  });
  return retVal;
}, "de___listOfAlert");
var de___listOfChannel = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Channel(entry, context);
  });
  return retVal;
}, "de___listOfChannel");
var de___listOfLiveSource = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_LiveSource(entry, context);
  });
  return retVal;
}, "de___listOfLiveSource");
var de___listOfPlaybackConfiguration = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PlaybackConfiguration(entry, context);
  });
  return retVal;
}, "de___listOfPlaybackConfiguration");
var de___listOfPrefetchSchedule = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PrefetchSchedule(entry, context);
  });
  return retVal;
}, "de___listOfPrefetchSchedule");
var de___listOfScheduleAdBreak = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ScheduleAdBreak(entry, context);
  });
  return retVal;
}, "de___listOfScheduleAdBreak");
var de___listOfScheduleEntry = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ScheduleEntry(entry, context);
  });
  return retVal;
}, "de___listOfScheduleEntry");
var de___listOfSourceLocation = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_SourceLocation(entry, context);
  });
  return retVal;
}, "de___listOfSourceLocation");
var de___listOfVodSource = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_VodSource(entry, context);
  });
  return retVal;
}, "de___listOfVodSource");
var de_Alert = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AlertCode: import_smithy_client.expectString,
    AlertMessage: import_smithy_client.expectString,
    Category: import_smithy_client.expectString,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    RelatedResourceArns: import_smithy_client._json,
    ResourceArn: import_smithy_client.expectString
  });
}, "de_Alert");
var de_Channel = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: import_smithy_client.expectString,
    Audiences: import_smithy_client._json,
    ChannelName: import_smithy_client.expectString,
    ChannelState: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    FillerSlate: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    LogConfiguration: import_smithy_client._json,
    Outputs: import_smithy_client._json,
    PlaybackMode: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`],
    Tier: import_smithy_client.expectString
  });
}, "de_Channel");
var de_LiveSource = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    HttpPackageConfigurations: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    LiveSourceName: import_smithy_client.expectString,
    SourceLocationName: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`]
  });
}, "de_LiveSource");
var de_PlaybackConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdDecisionServerUrl: import_smithy_client.expectString,
    AvailSuppression: import_smithy_client._json,
    Bumper: import_smithy_client._json,
    CdnConfiguration: import_smithy_client._json,
    ConfigurationAliases: import_smithy_client._json,
    DashConfiguration: import_smithy_client._json,
    HlsConfiguration: import_smithy_client._json,
    InsertionMode: import_smithy_client.expectString,
    LivePreRollConfiguration: import_smithy_client._json,
    LogConfiguration: import_smithy_client._json,
    ManifestProcessingRules: import_smithy_client._json,
    Name: import_smithy_client.expectString,
    PersonalizationThresholdSeconds: import_smithy_client.expectInt32,
    PlaybackConfigurationArn: import_smithy_client.expectString,
    PlaybackEndpointPrefix: import_smithy_client.expectString,
    SessionInitializationEndpointPrefix: import_smithy_client.expectString,
    SlateAdUrl: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`],
    TranscodeProfileName: import_smithy_client.expectString,
    VideoContentSourceUrl: import_smithy_client.expectString
  });
}, "de_PlaybackConfiguration");
var de_PrefetchConsumption = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AvailMatchingCriteria: import_smithy_client._json,
    EndTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    StartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_PrefetchConsumption");
var de_PrefetchRetrieval = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DynamicVariables: import_smithy_client._json,
    EndTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    StartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_PrefetchRetrieval");
var de_PrefetchSchedule = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: import_smithy_client.expectString,
    Consumption: (_) => de_PrefetchConsumption(_, context),
    Name: import_smithy_client.expectString,
    PlaybackConfigurationName: import_smithy_client.expectString,
    Retrieval: (_) => de_PrefetchRetrieval(_, context),
    StreamId: import_smithy_client.expectString
  });
}, "de_PrefetchSchedule");
var de_ScheduleAdBreak = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ApproximateDurationSeconds: import_smithy_client.expectLong,
    ApproximateStartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    SourceLocationName: import_smithy_client.expectString,
    VodSourceName: import_smithy_client.expectString
  });
}, "de_ScheduleAdBreak");
var de_ScheduleEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ApproximateDurationSeconds: import_smithy_client.expectLong,
    ApproximateStartTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Arn: import_smithy_client.expectString,
    Audiences: import_smithy_client._json,
    ChannelName: import_smithy_client.expectString,
    LiveSourceName: import_smithy_client.expectString,
    ProgramName: import_smithy_client.expectString,
    ScheduleAdBreaks: (_) => de___listOfScheduleAdBreak(_, context),
    ScheduleEntryType: import_smithy_client.expectString,
    SourceLocationName: import_smithy_client.expectString,
    VodSourceName: import_smithy_client.expectString
  });
}, "de_ScheduleEntry");
var de_SourceLocation = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AccessConfiguration: import_smithy_client._json,
    Arn: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    DefaultSegmentDeliveryConfiguration: import_smithy_client._json,
    HttpConfiguration: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    SegmentDeliveryConfigurations: import_smithy_client._json,
    SourceLocationName: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`]
  });
}, "de_SourceLocation");
var de_VodSource = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: import_smithy_client.expectString,
    CreationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    HttpPackageConfigurations: import_smithy_client._json,
    LastModifiedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    SourceLocationName: import_smithy_client.expectString,
    Tags: [, import_smithy_client._json, `tags`],
    VodSourceName: import_smithy_client.expectString
  });
}, "de_VodSource");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _A = "Audience";
var _DM = "DurationMinutes";
var _MR = "MaxResults";
var _NT = "NextToken";
var _RA = "ResourceArn";
var _TK = "TagKeys";
var _a = "audience";
var _dM = "durationMinutes";
var _mR = "maxResults";
var _nT = "nextToken";
var _rA = "resourceArn";
var _tK = "tagKeys";

// src/commands/ConfigureLogsForChannelCommand.ts
var _ConfigureLogsForChannelCommand = class _ConfigureLogsForChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "ConfigureLogsForChannel", {}).n("MediaTailorClient", "ConfigureLogsForChannelCommand").f(void 0, void 0).ser(se_ConfigureLogsForChannelCommand).de(de_ConfigureLogsForChannelCommand).build() {
};
__name(_ConfigureLogsForChannelCommand, "ConfigureLogsForChannelCommand");
var ConfigureLogsForChannelCommand = _ConfigureLogsForChannelCommand;

// src/commands/ConfigureLogsForPlaybackConfigurationCommand.ts




var _ConfigureLogsForPlaybackConfigurationCommand = class _ConfigureLogsForPlaybackConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "ConfigureLogsForPlaybackConfiguration", {}).n("MediaTailorClient", "ConfigureLogsForPlaybackConfigurationCommand").f(void 0, void 0).ser(se_ConfigureLogsForPlaybackConfigurationCommand).de(de_ConfigureLogsForPlaybackConfigurationCommand).build() {
};
__name(_ConfigureLogsForPlaybackConfigurationCommand, "ConfigureLogsForPlaybackConfigurationCommand");
var ConfigureLogsForPlaybackConfigurationCommand = _ConfigureLogsForPlaybackConfigurationCommand;

// src/commands/CreateChannelCommand.ts




var _CreateChannelCommand = class _CreateChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "CreateChannel", {}).n("MediaTailorClient", "CreateChannelCommand").f(void 0, void 0).ser(se_CreateChannelCommand).de(de_CreateChannelCommand).build() {
};
__name(_CreateChannelCommand, "CreateChannelCommand");
var CreateChannelCommand = _CreateChannelCommand;

// src/commands/CreateLiveSourceCommand.ts




var _CreateLiveSourceCommand = class _CreateLiveSourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "CreateLiveSource", {}).n("MediaTailorClient", "CreateLiveSourceCommand").f(void 0, void 0).ser(se_CreateLiveSourceCommand).de(de_CreateLiveSourceCommand).build() {
};
__name(_CreateLiveSourceCommand, "CreateLiveSourceCommand");
var CreateLiveSourceCommand = _CreateLiveSourceCommand;

// src/commands/CreatePrefetchScheduleCommand.ts




var _CreatePrefetchScheduleCommand = class _CreatePrefetchScheduleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "CreatePrefetchSchedule", {}).n("MediaTailorClient", "CreatePrefetchScheduleCommand").f(void 0, void 0).ser(se_CreatePrefetchScheduleCommand).de(de_CreatePrefetchScheduleCommand).build() {
};
__name(_CreatePrefetchScheduleCommand, "CreatePrefetchScheduleCommand");
var CreatePrefetchScheduleCommand = _CreatePrefetchScheduleCommand;

// src/commands/CreateProgramCommand.ts




var _CreateProgramCommand = class _CreateProgramCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "CreateProgram", {}).n("MediaTailorClient", "CreateProgramCommand").f(void 0, void 0).ser(se_CreateProgramCommand).de(de_CreateProgramCommand).build() {
};
__name(_CreateProgramCommand, "CreateProgramCommand");
var CreateProgramCommand = _CreateProgramCommand;

// src/commands/CreateSourceLocationCommand.ts




var _CreateSourceLocationCommand = class _CreateSourceLocationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "CreateSourceLocation", {}).n("MediaTailorClient", "CreateSourceLocationCommand").f(void 0, void 0).ser(se_CreateSourceLocationCommand).de(de_CreateSourceLocationCommand).build() {
};
__name(_CreateSourceLocationCommand, "CreateSourceLocationCommand");
var CreateSourceLocationCommand = _CreateSourceLocationCommand;

// src/commands/CreateVodSourceCommand.ts




var _CreateVodSourceCommand = class _CreateVodSourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "CreateVodSource", {}).n("MediaTailorClient", "CreateVodSourceCommand").f(void 0, void 0).ser(se_CreateVodSourceCommand).de(de_CreateVodSourceCommand).build() {
};
__name(_CreateVodSourceCommand, "CreateVodSourceCommand");
var CreateVodSourceCommand = _CreateVodSourceCommand;

// src/commands/DeleteChannelCommand.ts




var _DeleteChannelCommand = class _DeleteChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "DeleteChannel", {}).n("MediaTailorClient", "DeleteChannelCommand").f(void 0, void 0).ser(se_DeleteChannelCommand).de(de_DeleteChannelCommand).build() {
};
__name(_DeleteChannelCommand, "DeleteChannelCommand");
var DeleteChannelCommand = _DeleteChannelCommand;

// src/commands/DeleteChannelPolicyCommand.ts




var _DeleteChannelPolicyCommand = class _DeleteChannelPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "DeleteChannelPolicy", {}).n("MediaTailorClient", "DeleteChannelPolicyCommand").f(void 0, void 0).ser(se_DeleteChannelPolicyCommand).de(de_DeleteChannelPolicyCommand).build() {
};
__name(_DeleteChannelPolicyCommand, "DeleteChannelPolicyCommand");
var DeleteChannelPolicyCommand = _DeleteChannelPolicyCommand;

// src/commands/DeleteLiveSourceCommand.ts




var _DeleteLiveSourceCommand = class _DeleteLiveSourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "DeleteLiveSource", {}).n("MediaTailorClient", "DeleteLiveSourceCommand").f(void 0, void 0).ser(se_DeleteLiveSourceCommand).de(de_DeleteLiveSourceCommand).build() {
};
__name(_DeleteLiveSourceCommand, "DeleteLiveSourceCommand");
var DeleteLiveSourceCommand = _DeleteLiveSourceCommand;

// src/commands/DeletePlaybackConfigurationCommand.ts




var _DeletePlaybackConfigurationCommand = class _DeletePlaybackConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "DeletePlaybackConfiguration", {}).n("MediaTailorClient", "DeletePlaybackConfigurationCommand").f(void 0, void 0).ser(se_DeletePlaybackConfigurationCommand).de(de_DeletePlaybackConfigurationCommand).build() {
};
__name(_DeletePlaybackConfigurationCommand, "DeletePlaybackConfigurationCommand");
var DeletePlaybackConfigurationCommand = _DeletePlaybackConfigurationCommand;

// src/commands/DeletePrefetchScheduleCommand.ts




var _DeletePrefetchScheduleCommand = class _DeletePrefetchScheduleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "DeletePrefetchSchedule", {}).n("MediaTailorClient", "DeletePrefetchScheduleCommand").f(void 0, void 0).ser(se_DeletePrefetchScheduleCommand).de(de_DeletePrefetchScheduleCommand).build() {
};
__name(_DeletePrefetchScheduleCommand, "DeletePrefetchScheduleCommand");
var DeletePrefetchScheduleCommand = _DeletePrefetchScheduleCommand;

// src/commands/DeleteProgramCommand.ts




var _DeleteProgramCommand = class _DeleteProgramCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "DeleteProgram", {}).n("MediaTailorClient", "DeleteProgramCommand").f(void 0, void 0).ser(se_DeleteProgramCommand).de(de_DeleteProgramCommand).build() {
};
__name(_DeleteProgramCommand, "DeleteProgramCommand");
var DeleteProgramCommand = _DeleteProgramCommand;

// src/commands/DeleteSourceLocationCommand.ts




var _DeleteSourceLocationCommand = class _DeleteSourceLocationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "DeleteSourceLocation", {}).n("MediaTailorClient", "DeleteSourceLocationCommand").f(void 0, void 0).ser(se_DeleteSourceLocationCommand).de(de_DeleteSourceLocationCommand).build() {
};
__name(_DeleteSourceLocationCommand, "DeleteSourceLocationCommand");
var DeleteSourceLocationCommand = _DeleteSourceLocationCommand;

// src/commands/DeleteVodSourceCommand.ts




var _DeleteVodSourceCommand = class _DeleteVodSourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "DeleteVodSource", {}).n("MediaTailorClient", "DeleteVodSourceCommand").f(void 0, void 0).ser(se_DeleteVodSourceCommand).de(de_DeleteVodSourceCommand).build() {
};
__name(_DeleteVodSourceCommand, "DeleteVodSourceCommand");
var DeleteVodSourceCommand = _DeleteVodSourceCommand;

// src/commands/DescribeChannelCommand.ts




var _DescribeChannelCommand = class _DescribeChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "DescribeChannel", {}).n("MediaTailorClient", "DescribeChannelCommand").f(void 0, void 0).ser(se_DescribeChannelCommand).de(de_DescribeChannelCommand).build() {
};
__name(_DescribeChannelCommand, "DescribeChannelCommand");
var DescribeChannelCommand = _DescribeChannelCommand;

// src/commands/DescribeLiveSourceCommand.ts




var _DescribeLiveSourceCommand = class _DescribeLiveSourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "DescribeLiveSource", {}).n("MediaTailorClient", "DescribeLiveSourceCommand").f(void 0, void 0).ser(se_DescribeLiveSourceCommand).de(de_DescribeLiveSourceCommand).build() {
};
__name(_DescribeLiveSourceCommand, "DescribeLiveSourceCommand");
var DescribeLiveSourceCommand = _DescribeLiveSourceCommand;

// src/commands/DescribeProgramCommand.ts




var _DescribeProgramCommand = class _DescribeProgramCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "DescribeProgram", {}).n("MediaTailorClient", "DescribeProgramCommand").f(void 0, void 0).ser(se_DescribeProgramCommand).de(de_DescribeProgramCommand).build() {
};
__name(_DescribeProgramCommand, "DescribeProgramCommand");
var DescribeProgramCommand = _DescribeProgramCommand;

// src/commands/DescribeSourceLocationCommand.ts




var _DescribeSourceLocationCommand = class _DescribeSourceLocationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "DescribeSourceLocation", {}).n("MediaTailorClient", "DescribeSourceLocationCommand").f(void 0, void 0).ser(se_DescribeSourceLocationCommand).de(de_DescribeSourceLocationCommand).build() {
};
__name(_DescribeSourceLocationCommand, "DescribeSourceLocationCommand");
var DescribeSourceLocationCommand = _DescribeSourceLocationCommand;

// src/commands/DescribeVodSourceCommand.ts




var _DescribeVodSourceCommand = class _DescribeVodSourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "DescribeVodSource", {}).n("MediaTailorClient", "DescribeVodSourceCommand").f(void 0, void 0).ser(se_DescribeVodSourceCommand).de(de_DescribeVodSourceCommand).build() {
};
__name(_DescribeVodSourceCommand, "DescribeVodSourceCommand");
var DescribeVodSourceCommand = _DescribeVodSourceCommand;

// src/commands/GetChannelPolicyCommand.ts




var _GetChannelPolicyCommand = class _GetChannelPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "GetChannelPolicy", {}).n("MediaTailorClient", "GetChannelPolicyCommand").f(void 0, void 0).ser(se_GetChannelPolicyCommand).de(de_GetChannelPolicyCommand).build() {
};
__name(_GetChannelPolicyCommand, "GetChannelPolicyCommand");
var GetChannelPolicyCommand = _GetChannelPolicyCommand;

// src/commands/GetChannelScheduleCommand.ts




var _GetChannelScheduleCommand = class _GetChannelScheduleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "GetChannelSchedule", {}).n("MediaTailorClient", "GetChannelScheduleCommand").f(void 0, void 0).ser(se_GetChannelScheduleCommand).de(de_GetChannelScheduleCommand).build() {
};
__name(_GetChannelScheduleCommand, "GetChannelScheduleCommand");
var GetChannelScheduleCommand = _GetChannelScheduleCommand;

// src/commands/GetPlaybackConfigurationCommand.ts




var _GetPlaybackConfigurationCommand = class _GetPlaybackConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "GetPlaybackConfiguration", {}).n("MediaTailorClient", "GetPlaybackConfigurationCommand").f(void 0, void 0).ser(se_GetPlaybackConfigurationCommand).de(de_GetPlaybackConfigurationCommand).build() {
};
__name(_GetPlaybackConfigurationCommand, "GetPlaybackConfigurationCommand");
var GetPlaybackConfigurationCommand = _GetPlaybackConfigurationCommand;

// src/commands/GetPrefetchScheduleCommand.ts




var _GetPrefetchScheduleCommand = class _GetPrefetchScheduleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "GetPrefetchSchedule", {}).n("MediaTailorClient", "GetPrefetchScheduleCommand").f(void 0, void 0).ser(se_GetPrefetchScheduleCommand).de(de_GetPrefetchScheduleCommand).build() {
};
__name(_GetPrefetchScheduleCommand, "GetPrefetchScheduleCommand");
var GetPrefetchScheduleCommand = _GetPrefetchScheduleCommand;

// src/commands/ListAlertsCommand.ts




var _ListAlertsCommand = class _ListAlertsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "ListAlerts", {}).n("MediaTailorClient", "ListAlertsCommand").f(void 0, void 0).ser(se_ListAlertsCommand).de(de_ListAlertsCommand).build() {
};
__name(_ListAlertsCommand, "ListAlertsCommand");
var ListAlertsCommand = _ListAlertsCommand;

// src/commands/ListChannelsCommand.ts




var _ListChannelsCommand = class _ListChannelsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "ListChannels", {}).n("MediaTailorClient", "ListChannelsCommand").f(void 0, void 0).ser(se_ListChannelsCommand).de(de_ListChannelsCommand).build() {
};
__name(_ListChannelsCommand, "ListChannelsCommand");
var ListChannelsCommand = _ListChannelsCommand;

// src/commands/ListLiveSourcesCommand.ts




var _ListLiveSourcesCommand = class _ListLiveSourcesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "ListLiveSources", {}).n("MediaTailorClient", "ListLiveSourcesCommand").f(void 0, void 0).ser(se_ListLiveSourcesCommand).de(de_ListLiveSourcesCommand).build() {
};
__name(_ListLiveSourcesCommand, "ListLiveSourcesCommand");
var ListLiveSourcesCommand = _ListLiveSourcesCommand;

// src/commands/ListPlaybackConfigurationsCommand.ts




var _ListPlaybackConfigurationsCommand = class _ListPlaybackConfigurationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "ListPlaybackConfigurations", {}).n("MediaTailorClient", "ListPlaybackConfigurationsCommand").f(void 0, void 0).ser(se_ListPlaybackConfigurationsCommand).de(de_ListPlaybackConfigurationsCommand).build() {
};
__name(_ListPlaybackConfigurationsCommand, "ListPlaybackConfigurationsCommand");
var ListPlaybackConfigurationsCommand = _ListPlaybackConfigurationsCommand;

// src/commands/ListPrefetchSchedulesCommand.ts




var _ListPrefetchSchedulesCommand = class _ListPrefetchSchedulesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "ListPrefetchSchedules", {}).n("MediaTailorClient", "ListPrefetchSchedulesCommand").f(void 0, void 0).ser(se_ListPrefetchSchedulesCommand).de(de_ListPrefetchSchedulesCommand).build() {
};
__name(_ListPrefetchSchedulesCommand, "ListPrefetchSchedulesCommand");
var ListPrefetchSchedulesCommand = _ListPrefetchSchedulesCommand;

// src/commands/ListSourceLocationsCommand.ts




var _ListSourceLocationsCommand = class _ListSourceLocationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "ListSourceLocations", {}).n("MediaTailorClient", "ListSourceLocationsCommand").f(void 0, void 0).ser(se_ListSourceLocationsCommand).de(de_ListSourceLocationsCommand).build() {
};
__name(_ListSourceLocationsCommand, "ListSourceLocationsCommand");
var ListSourceLocationsCommand = _ListSourceLocationsCommand;

// src/commands/ListTagsForResourceCommand.ts




var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "ListTagsForResource", {}).n("MediaTailorClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/ListVodSourcesCommand.ts




var _ListVodSourcesCommand = class _ListVodSourcesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "ListVodSources", {}).n("MediaTailorClient", "ListVodSourcesCommand").f(void 0, void 0).ser(se_ListVodSourcesCommand).de(de_ListVodSourcesCommand).build() {
};
__name(_ListVodSourcesCommand, "ListVodSourcesCommand");
var ListVodSourcesCommand = _ListVodSourcesCommand;

// src/commands/PutChannelPolicyCommand.ts




var _PutChannelPolicyCommand = class _PutChannelPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "PutChannelPolicy", {}).n("MediaTailorClient", "PutChannelPolicyCommand").f(void 0, void 0).ser(se_PutChannelPolicyCommand).de(de_PutChannelPolicyCommand).build() {
};
__name(_PutChannelPolicyCommand, "PutChannelPolicyCommand");
var PutChannelPolicyCommand = _PutChannelPolicyCommand;

// src/commands/PutPlaybackConfigurationCommand.ts




var _PutPlaybackConfigurationCommand = class _PutPlaybackConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "PutPlaybackConfiguration", {}).n("MediaTailorClient", "PutPlaybackConfigurationCommand").f(void 0, void 0).ser(se_PutPlaybackConfigurationCommand).de(de_PutPlaybackConfigurationCommand).build() {
};
__name(_PutPlaybackConfigurationCommand, "PutPlaybackConfigurationCommand");
var PutPlaybackConfigurationCommand = _PutPlaybackConfigurationCommand;

// src/commands/StartChannelCommand.ts




var _StartChannelCommand = class _StartChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "StartChannel", {}).n("MediaTailorClient", "StartChannelCommand").f(void 0, void 0).ser(se_StartChannelCommand).de(de_StartChannelCommand).build() {
};
__name(_StartChannelCommand, "StartChannelCommand");
var StartChannelCommand = _StartChannelCommand;

// src/commands/StopChannelCommand.ts




var _StopChannelCommand = class _StopChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "StopChannel", {}).n("MediaTailorClient", "StopChannelCommand").f(void 0, void 0).ser(se_StopChannelCommand).de(de_StopChannelCommand).build() {
};
__name(_StopChannelCommand, "StopChannelCommand");
var StopChannelCommand = _StopChannelCommand;

// src/commands/TagResourceCommand.ts




var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "TagResource", {}).n("MediaTailorClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/UntagResourceCommand.ts




var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "UntagResource", {}).n("MediaTailorClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/commands/UpdateChannelCommand.ts




var _UpdateChannelCommand = class _UpdateChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "UpdateChannel", {}).n("MediaTailorClient", "UpdateChannelCommand").f(void 0, void 0).ser(se_UpdateChannelCommand).de(de_UpdateChannelCommand).build() {
};
__name(_UpdateChannelCommand, "UpdateChannelCommand");
var UpdateChannelCommand = _UpdateChannelCommand;

// src/commands/UpdateLiveSourceCommand.ts




var _UpdateLiveSourceCommand = class _UpdateLiveSourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "UpdateLiveSource", {}).n("MediaTailorClient", "UpdateLiveSourceCommand").f(void 0, void 0).ser(se_UpdateLiveSourceCommand).de(de_UpdateLiveSourceCommand).build() {
};
__name(_UpdateLiveSourceCommand, "UpdateLiveSourceCommand");
var UpdateLiveSourceCommand = _UpdateLiveSourceCommand;

// src/commands/UpdateProgramCommand.ts




var _UpdateProgramCommand = class _UpdateProgramCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "UpdateProgram", {}).n("MediaTailorClient", "UpdateProgramCommand").f(void 0, void 0).ser(se_UpdateProgramCommand).de(de_UpdateProgramCommand).build() {
};
__name(_UpdateProgramCommand, "UpdateProgramCommand");
var UpdateProgramCommand = _UpdateProgramCommand;

// src/commands/UpdateSourceLocationCommand.ts




var _UpdateSourceLocationCommand = class _UpdateSourceLocationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "UpdateSourceLocation", {}).n("MediaTailorClient", "UpdateSourceLocationCommand").f(void 0, void 0).ser(se_UpdateSourceLocationCommand).de(de_UpdateSourceLocationCommand).build() {
};
__name(_UpdateSourceLocationCommand, "UpdateSourceLocationCommand");
var UpdateSourceLocationCommand = _UpdateSourceLocationCommand;

// src/commands/UpdateVodSourceCommand.ts




var _UpdateVodSourceCommand = class _UpdateVodSourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaTailor", "UpdateVodSource", {}).n("MediaTailorClient", "UpdateVodSourceCommand").f(void 0, void 0).ser(se_UpdateVodSourceCommand).de(de_UpdateVodSourceCommand).build() {
};
__name(_UpdateVodSourceCommand, "UpdateVodSourceCommand");
var UpdateVodSourceCommand = _UpdateVodSourceCommand;

// src/MediaTailor.ts
var commands = {
  ConfigureLogsForChannelCommand,
  ConfigureLogsForPlaybackConfigurationCommand,
  CreateChannelCommand,
  CreateLiveSourceCommand,
  CreatePrefetchScheduleCommand,
  CreateProgramCommand,
  CreateSourceLocationCommand,
  CreateVodSourceCommand,
  DeleteChannelCommand,
  DeleteChannelPolicyCommand,
  DeleteLiveSourceCommand,
  DeletePlaybackConfigurationCommand,
  DeletePrefetchScheduleCommand,
  DeleteProgramCommand,
  DeleteSourceLocationCommand,
  DeleteVodSourceCommand,
  DescribeChannelCommand,
  DescribeLiveSourceCommand,
  DescribeProgramCommand,
  DescribeSourceLocationCommand,
  DescribeVodSourceCommand,
  GetChannelPolicyCommand,
  GetChannelScheduleCommand,
  GetPlaybackConfigurationCommand,
  GetPrefetchScheduleCommand,
  ListAlertsCommand,
  ListChannelsCommand,
  ListLiveSourcesCommand,
  ListPlaybackConfigurationsCommand,
  ListPrefetchSchedulesCommand,
  ListSourceLocationsCommand,
  ListTagsForResourceCommand,
  ListVodSourcesCommand,
  PutChannelPolicyCommand,
  PutPlaybackConfigurationCommand,
  StartChannelCommand,
  StopChannelCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateChannelCommand,
  UpdateLiveSourceCommand,
  UpdateProgramCommand,
  UpdateSourceLocationCommand,
  UpdateVodSourceCommand
};
var _MediaTailor = class _MediaTailor extends MediaTailorClient {
};
__name(_MediaTailor, "MediaTailor");
var MediaTailor = _MediaTailor;
(0, import_smithy_client.createAggregatedClient)(commands, MediaTailor);

// src/pagination/GetChannelSchedulePaginator.ts

var paginateGetChannelSchedule = (0, import_core.createPaginator)(MediaTailorClient, GetChannelScheduleCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListAlertsPaginator.ts

var paginateListAlerts = (0, import_core.createPaginator)(MediaTailorClient, ListAlertsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListChannelsPaginator.ts

var paginateListChannels = (0, import_core.createPaginator)(MediaTailorClient, ListChannelsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListLiveSourcesPaginator.ts

var paginateListLiveSources = (0, import_core.createPaginator)(MediaTailorClient, ListLiveSourcesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListPlaybackConfigurationsPaginator.ts

var paginateListPlaybackConfigurations = (0, import_core.createPaginator)(MediaTailorClient, ListPlaybackConfigurationsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListPrefetchSchedulesPaginator.ts

var paginateListPrefetchSchedules = (0, import_core.createPaginator)(MediaTailorClient, ListPrefetchSchedulesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListSourceLocationsPaginator.ts

var paginateListSourceLocations = (0, import_core.createPaginator)(MediaTailorClient, ListSourceLocationsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListVodSourcesPaginator.ts

var paginateListVodSources = (0, import_core.createPaginator)(MediaTailorClient, ListVodSourcesCommand, "NextToken", "NextToken", "MaxResults");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  MediaTailorServiceException,
  __Client,
  MediaTailorClient,
  MediaTailor,
  $Command,
  ConfigureLogsForChannelCommand,
  ConfigureLogsForPlaybackConfigurationCommand,
  CreateChannelCommand,
  CreateLiveSourceCommand,
  CreatePrefetchScheduleCommand,
  CreateProgramCommand,
  CreateSourceLocationCommand,
  CreateVodSourceCommand,
  DeleteChannelCommand,
  DeleteChannelPolicyCommand,
  DeleteLiveSourceCommand,
  DeletePlaybackConfigurationCommand,
  DeletePrefetchScheduleCommand,
  DeleteProgramCommand,
  DeleteSourceLocationCommand,
  DeleteVodSourceCommand,
  DescribeChannelCommand,
  DescribeLiveSourceCommand,
  DescribeProgramCommand,
  DescribeSourceLocationCommand,
  DescribeVodSourceCommand,
  GetChannelPolicyCommand,
  GetChannelScheduleCommand,
  GetPlaybackConfigurationCommand,
  GetPrefetchScheduleCommand,
  ListAlertsCommand,
  ListChannelsCommand,
  ListLiveSourcesCommand,
  ListPlaybackConfigurationsCommand,
  ListPrefetchSchedulesCommand,
  ListSourceLocationsCommand,
  ListTagsForResourceCommand,
  ListVodSourcesCommand,
  PutChannelPolicyCommand,
  PutPlaybackConfigurationCommand,
  StartChannelCommand,
  StopChannelCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateChannelCommand,
  UpdateLiveSourceCommand,
  UpdateProgramCommand,
  UpdateSourceLocationCommand,
  UpdateVodSourceCommand,
  paginateGetChannelSchedule,
  paginateListAlerts,
  paginateListChannels,
  paginateListLiveSources,
  paginateListPlaybackConfigurations,
  paginateListPrefetchSchedules,
  paginateListSourceLocations,
  paginateListVodSources,
  MessageType,
  AlertCategory,
  Operator,
  LogType,
  AdMarkupType,
  Type,
  FillPolicy,
  Mode,
  OriginManifestType,
  InsertionMode,
  ScheduleEntryType,
  AccessType,
  BadRequestException,
  PlaybackMode,
  Tier,
  ChannelState,
  RelativePosition
});

