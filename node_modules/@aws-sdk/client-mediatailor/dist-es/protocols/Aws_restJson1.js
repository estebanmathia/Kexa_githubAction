import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { MediaTailorServiceException as __BaseException } from "../models/MediaTailorServiceException";
import { BadRequestException, } from "../models/models_0";
export const se_ConfigureLogsForChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configureLogs/channel");
    let body;
    body = JSON.stringify(take(input, {
        ChannelName: [],
        LogTypes: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_ConfigureLogsForPlaybackConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configureLogs/playbackConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        PercentEnabled: [],
        PlaybackConfigurationName: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/channel/{ChannelName}");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    let body;
    body = JSON.stringify(take(input, {
        Audiences: (_) => _json(_),
        FillerSlate: (_) => _json(_),
        Outputs: (_) => _json(_),
        PlaybackMode: [],
        tags: [, (_) => _json(_), `Tags`],
        Tier: [],
        TimeShiftConfiguration: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateLiveSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}");
    b.p("LiveSourceName", () => input.LiveSourceName, "{LiveSourceName}", false);
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    let body;
    body = JSON.stringify(take(input, {
        HttpPackageConfigurations: (_) => _json(_),
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePrefetchScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prefetchSchedule/{PlaybackConfigurationName}/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    b.p("PlaybackConfigurationName", () => input.PlaybackConfigurationName, "{PlaybackConfigurationName}", false);
    let body;
    body = JSON.stringify(take(input, {
        Consumption: (_) => se_PrefetchConsumption(_, context),
        Retrieval: (_) => se_PrefetchRetrieval(_, context),
        StreamId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateProgramCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/channel/{ChannelName}/program/{ProgramName}");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
    let body;
    body = JSON.stringify(take(input, {
        AdBreaks: (_) => _json(_),
        AudienceMedia: (_) => _json(_),
        LiveSourceName: [],
        ScheduleConfiguration: (_) => _json(_),
        SourceLocationName: [],
        VodSourceName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSourceLocationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sourceLocation/{SourceLocationName}");
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    let body;
    body = JSON.stringify(take(input, {
        AccessConfiguration: (_) => _json(_),
        DefaultSegmentDeliveryConfiguration: (_) => _json(_),
        HttpConfiguration: (_) => _json(_),
        SegmentDeliveryConfigurations: (_) => _json(_),
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateVodSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}");
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    b.p("VodSourceName", () => input.VodSourceName, "{VodSourceName}", false);
    let body;
    body = JSON.stringify(take(input, {
        HttpPackageConfigurations: (_) => _json(_),
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channel/{ChannelName}");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteChannelPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channel/{ChannelName}/policy");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteLiveSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}");
    b.p("LiveSourceName", () => input.LiveSourceName, "{LiveSourceName}", false);
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePlaybackConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/playbackConfiguration/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePrefetchScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prefetchSchedule/{PlaybackConfigurationName}/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    b.p("PlaybackConfigurationName", () => input.PlaybackConfigurationName, "{PlaybackConfigurationName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteProgramCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channel/{ChannelName}/program/{ProgramName}");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteSourceLocationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sourceLocation/{SourceLocationName}");
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVodSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}");
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    b.p("VodSourceName", () => input.VodSourceName, "{VodSourceName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channel/{ChannelName}");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeLiveSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}");
    b.p("LiveSourceName", () => input.LiveSourceName, "{LiveSourceName}", false);
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeProgramCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channel/{ChannelName}/program/{ProgramName}");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeSourceLocationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sourceLocation/{SourceLocationName}");
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeVodSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}");
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    b.p("VodSourceName", () => input.VodSourceName, "{VodSourceName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetChannelPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channel/{ChannelName}/policy");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetChannelScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channel/{ChannelName}/schedule");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    const query = map({
        [_dM]: [, input[_DM]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_a]: [, input[_A]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetPlaybackConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/playbackConfiguration/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPrefetchScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prefetchSchedule/{PlaybackConfigurationName}/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    b.p("PlaybackConfigurationName", () => input.PlaybackConfigurationName, "{PlaybackConfigurationName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListAlertsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/alerts");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_rA]: [, __expectNonNull(input[_RA], `ResourceArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListChannelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channels");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListLiveSourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sourceLocation/{SourceLocationName}/liveSources");
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPlaybackConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/playbackConfigurations");
    const query = map({
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPrefetchSchedulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prefetchSchedule/{PlaybackConfigurationName}");
    b.p("PlaybackConfigurationName", () => input.PlaybackConfigurationName, "{PlaybackConfigurationName}", false);
    let body;
    body = JSON.stringify(take(input, {
        MaxResults: [],
        NextToken: [],
        StreamId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListSourceLocationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sourceLocations");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListVodSourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sourceLocation/{SourceLocationName}/vodSources");
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutChannelPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/channel/{ChannelName}/policy");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    let body;
    body = JSON.stringify(take(input, {
        Policy: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutPlaybackConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/playbackConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        AdDecisionServerUrl: [],
        AvailSuppression: (_) => _json(_),
        Bumper: (_) => _json(_),
        CdnConfiguration: (_) => _json(_),
        ConfigurationAliases: (_) => _json(_),
        DashConfiguration: (_) => _json(_),
        InsertionMode: [],
        LivePreRollConfiguration: (_) => _json(_),
        ManifestProcessingRules: (_) => _json(_),
        Name: [],
        PersonalizationThresholdSeconds: [],
        SlateAdUrl: [],
        tags: [, (_) => _json(_), `Tags`],
        TranscodeProfileName: [],
        VideoContentSourceUrl: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channel/{ChannelName}/start");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    let body;
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StopChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channel/{ChannelName}/stop");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    let body;
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/channel/{ChannelName}");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    let body;
    body = JSON.stringify(take(input, {
        Audiences: (_) => _json(_),
        FillerSlate: (_) => _json(_),
        Outputs: (_) => _json(_),
        TimeShiftConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateLiveSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}");
    b.p("LiveSourceName", () => input.LiveSourceName, "{LiveSourceName}", false);
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    let body;
    body = JSON.stringify(take(input, {
        HttpPackageConfigurations: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateProgramCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/channel/{ChannelName}/program/{ProgramName}");
    b.p("ChannelName", () => input.ChannelName, "{ChannelName}", false);
    b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
    let body;
    body = JSON.stringify(take(input, {
        AdBreaks: (_) => _json(_),
        AudienceMedia: (_) => _json(_),
        ScheduleConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateSourceLocationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sourceLocation/{SourceLocationName}");
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    let body;
    body = JSON.stringify(take(input, {
        AccessConfiguration: (_) => _json(_),
        DefaultSegmentDeliveryConfiguration: (_) => _json(_),
        HttpConfiguration: (_) => _json(_),
        SegmentDeliveryConfigurations: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateVodSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}");
    b.p("SourceLocationName", () => input.SourceLocationName, "{SourceLocationName}", false);
    b.p("VodSourceName", () => input.VodSourceName, "{VodSourceName}", false);
    let body;
    body = JSON.stringify(take(input, {
        HttpPackageConfigurations: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_ConfigureLogsForChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelName: __expectString,
        LogTypes: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ConfigureLogsForPlaybackConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PercentEnabled: __expectInt32,
        PlaybackConfigurationName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Audiences: _json,
        ChannelName: __expectString,
        ChannelState: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FillerSlate: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Outputs: _json,
        PlaybackMode: __expectString,
        Tags: [, _json, `tags`],
        Tier: __expectString,
        TimeShiftConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateLiveSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HttpPackageConfigurations: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LiveSourceName: __expectString,
        SourceLocationName: __expectString,
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePrefetchScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Consumption: (_) => de_PrefetchConsumption(_, context),
        Name: __expectString,
        PlaybackConfigurationName: __expectString,
        Retrieval: (_) => de_PrefetchRetrieval(_, context),
        StreamId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateProgramCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AdBreaks: _json,
        Arn: __expectString,
        AudienceMedia: _json,
        ChannelName: __expectString,
        ClipRange: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DurationMillis: __expectLong,
        LiveSourceName: __expectString,
        ProgramName: __expectString,
        ScheduledStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SourceLocationName: __expectString,
        VodSourceName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSourceLocationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccessConfiguration: _json,
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultSegmentDeliveryConfiguration: _json,
        HttpConfiguration: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SegmentDeliveryConfigurations: _json,
        SourceLocationName: __expectString,
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateVodSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HttpPackageConfigurations: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SourceLocationName: __expectString,
        Tags: [, _json, `tags`],
        VodSourceName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteChannelPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteLiveSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeletePlaybackConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeletePrefetchScheduleCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteProgramCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSourceLocationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteVodSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Audiences: _json,
        ChannelName: __expectString,
        ChannelState: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FillerSlate: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogConfiguration: _json,
        Outputs: _json,
        PlaybackMode: __expectString,
        Tags: [, _json, `tags`],
        Tier: __expectString,
        TimeShiftConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeLiveSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HttpPackageConfigurations: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LiveSourceName: __expectString,
        SourceLocationName: __expectString,
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeProgramCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AdBreaks: _json,
        Arn: __expectString,
        AudienceMedia: _json,
        ChannelName: __expectString,
        ClipRange: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DurationMillis: __expectLong,
        LiveSourceName: __expectString,
        ProgramName: __expectString,
        ScheduledStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SourceLocationName: __expectString,
        VodSourceName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeSourceLocationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccessConfiguration: _json,
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultSegmentDeliveryConfiguration: _json,
        HttpConfiguration: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SegmentDeliveryConfigurations: _json,
        SourceLocationName: __expectString,
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeVodSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AdBreakOpportunities: _json,
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HttpPackageConfigurations: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SourceLocationName: __expectString,
        Tags: [, _json, `tags`],
        VodSourceName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetChannelPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Policy: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetChannelScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: (_) => de___listOfScheduleEntry(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPlaybackConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AdDecisionServerUrl: __expectString,
        AvailSuppression: _json,
        Bumper: _json,
        CdnConfiguration: _json,
        ConfigurationAliases: _json,
        DashConfiguration: _json,
        HlsConfiguration: _json,
        InsertionMode: __expectString,
        LivePreRollConfiguration: _json,
        LogConfiguration: _json,
        ManifestProcessingRules: _json,
        Name: __expectString,
        PersonalizationThresholdSeconds: __expectInt32,
        PlaybackConfigurationArn: __expectString,
        PlaybackEndpointPrefix: __expectString,
        SessionInitializationEndpointPrefix: __expectString,
        SlateAdUrl: __expectString,
        Tags: [, _json, `tags`],
        TranscodeProfileName: __expectString,
        VideoContentSourceUrl: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPrefetchScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Consumption: (_) => de_PrefetchConsumption(_, context),
        Name: __expectString,
        PlaybackConfigurationName: __expectString,
        Retrieval: (_) => de_PrefetchRetrieval(_, context),
        StreamId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAlertsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: (_) => de___listOfAlert(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListChannelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: (_) => de___listOfChannel(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLiveSourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: (_) => de___listOfLiveSource(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPlaybackConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: (_) => de___listOfPlaybackConfiguration(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPrefetchSchedulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: (_) => de___listOfPrefetchSchedule(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSourceLocationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: (_) => de___listOfSourceLocation(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListVodSourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: (_) => de___listOfVodSource(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutChannelPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_PutPlaybackConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AdDecisionServerUrl: __expectString,
        AvailSuppression: _json,
        Bumper: _json,
        CdnConfiguration: _json,
        ConfigurationAliases: _json,
        DashConfiguration: _json,
        HlsConfiguration: _json,
        InsertionMode: __expectString,
        LivePreRollConfiguration: _json,
        LogConfiguration: _json,
        ManifestProcessingRules: _json,
        Name: __expectString,
        PersonalizationThresholdSeconds: __expectInt32,
        PlaybackConfigurationArn: __expectString,
        PlaybackEndpointPrefix: __expectString,
        SessionInitializationEndpointPrefix: __expectString,
        SlateAdUrl: __expectString,
        Tags: [, _json, `tags`],
        TranscodeProfileName: __expectString,
        VideoContentSourceUrl: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StopChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Audiences: _json,
        ChannelName: __expectString,
        ChannelState: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FillerSlate: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Outputs: _json,
        PlaybackMode: __expectString,
        Tags: [, _json, `tags`],
        Tier: __expectString,
        TimeShiftConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateLiveSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HttpPackageConfigurations: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LiveSourceName: __expectString,
        SourceLocationName: __expectString,
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateProgramCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AdBreaks: _json,
        Arn: __expectString,
        AudienceMedia: _json,
        ChannelName: __expectString,
        ClipRange: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DurationMillis: __expectLong,
        LiveSourceName: __expectString,
        ProgramName: __expectString,
        ScheduledStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SourceLocationName: __expectString,
        VodSourceName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSourceLocationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccessConfiguration: _json,
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultSegmentDeliveryConfiguration: _json,
        HttpConfiguration: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SegmentDeliveryConfigurations: _json,
        SourceLocationName: __expectString,
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateVodSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HttpPackageConfigurations: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SourceLocationName: __expectString,
        Tags: [, _json, `tags`],
        VodSourceName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.mediatailor#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_PrefetchConsumption = (input, context) => {
    return take(input, {
        AvailMatchingCriteria: _json,
        EndTime: (_) => Math.round(_.getTime() / 1000),
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_PrefetchRetrieval = (input, context) => {
    return take(input, {
        DynamicVariables: _json,
        EndTime: (_) => Math.round(_.getTime() / 1000),
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const de___listOfAlert = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Alert(entry, context);
    });
    return retVal;
};
const de___listOfChannel = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Channel(entry, context);
    });
    return retVal;
};
const de___listOfLiveSource = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LiveSource(entry, context);
    });
    return retVal;
};
const de___listOfPlaybackConfiguration = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlaybackConfiguration(entry, context);
    });
    return retVal;
};
const de___listOfPrefetchSchedule = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrefetchSchedule(entry, context);
    });
    return retVal;
};
const de___listOfScheduleAdBreak = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScheduleAdBreak(entry, context);
    });
    return retVal;
};
const de___listOfScheduleEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScheduleEntry(entry, context);
    });
    return retVal;
};
const de___listOfSourceLocation = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SourceLocation(entry, context);
    });
    return retVal;
};
const de___listOfVodSource = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VodSource(entry, context);
    });
    return retVal;
};
const de_Alert = (output, context) => {
    return take(output, {
        AlertCode: __expectString,
        AlertMessage: __expectString,
        Category: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RelatedResourceArns: _json,
        ResourceArn: __expectString,
    });
};
const de_Channel = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Audiences: _json,
        ChannelName: __expectString,
        ChannelState: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FillerSlate: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogConfiguration: _json,
        Outputs: _json,
        PlaybackMode: __expectString,
        Tags: [, _json, `tags`],
        Tier: __expectString,
    });
};
const de_LiveSource = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HttpPackageConfigurations: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LiveSourceName: __expectString,
        SourceLocationName: __expectString,
        Tags: [, _json, `tags`],
    });
};
const de_PlaybackConfiguration = (output, context) => {
    return take(output, {
        AdDecisionServerUrl: __expectString,
        AvailSuppression: _json,
        Bumper: _json,
        CdnConfiguration: _json,
        ConfigurationAliases: _json,
        DashConfiguration: _json,
        HlsConfiguration: _json,
        InsertionMode: __expectString,
        LivePreRollConfiguration: _json,
        LogConfiguration: _json,
        ManifestProcessingRules: _json,
        Name: __expectString,
        PersonalizationThresholdSeconds: __expectInt32,
        PlaybackConfigurationArn: __expectString,
        PlaybackEndpointPrefix: __expectString,
        SessionInitializationEndpointPrefix: __expectString,
        SlateAdUrl: __expectString,
        Tags: [, _json, `tags`],
        TranscodeProfileName: __expectString,
        VideoContentSourceUrl: __expectString,
    });
};
const de_PrefetchConsumption = (output, context) => {
    return take(output, {
        AvailMatchingCriteria: _json,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_PrefetchRetrieval = (output, context) => {
    return take(output, {
        DynamicVariables: _json,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_PrefetchSchedule = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Consumption: (_) => de_PrefetchConsumption(_, context),
        Name: __expectString,
        PlaybackConfigurationName: __expectString,
        Retrieval: (_) => de_PrefetchRetrieval(_, context),
        StreamId: __expectString,
    });
};
const de_ScheduleAdBreak = (output, context) => {
    return take(output, {
        ApproximateDurationSeconds: __expectLong,
        ApproximateStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SourceLocationName: __expectString,
        VodSourceName: __expectString,
    });
};
const de_ScheduleEntry = (output, context) => {
    return take(output, {
        ApproximateDurationSeconds: __expectLong,
        ApproximateStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Arn: __expectString,
        Audiences: _json,
        ChannelName: __expectString,
        LiveSourceName: __expectString,
        ProgramName: __expectString,
        ScheduleAdBreaks: (_) => de___listOfScheduleAdBreak(_, context),
        ScheduleEntryType: __expectString,
        SourceLocationName: __expectString,
        VodSourceName: __expectString,
    });
};
const de_SourceLocation = (output, context) => {
    return take(output, {
        AccessConfiguration: _json,
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultSegmentDeliveryConfiguration: _json,
        HttpConfiguration: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SegmentDeliveryConfigurations: _json,
        SourceLocationName: __expectString,
        Tags: [, _json, `tags`],
    });
};
const de_VodSource = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HttpPackageConfigurations: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SourceLocationName: __expectString,
        Tags: [, _json, `tags`],
        VodSourceName: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _A = "Audience";
const _DM = "DurationMinutes";
const _MR = "MaxResults";
const _NT = "NextToken";
const _RA = "ResourceArn";
const _TK = "TagKeys";
const _a = "audience";
const _dM = "durationMinutes";
const _mR = "maxResults";
const _nT = "nextToken";
const _rA = "resourceArn";
const _tK = "tagKeys";
