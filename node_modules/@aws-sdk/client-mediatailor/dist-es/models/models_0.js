import { MediaTailorServiceException as __BaseException } from "./MediaTailorServiceException";
export const MessageType = {
    SPLICE_INSERT: "SPLICE_INSERT",
    TIME_SIGNAL: "TIME_SIGNAL",
};
export const AlertCategory = {
    INFO: "INFO",
    PLAYBACK_WARNING: "PLAYBACK_WARNING",
    SCHEDULING_ERROR: "SCHEDULING_ERROR",
};
export const Operator = {
    EQUALS: "EQUALS",
};
export const LogType = {
    AS_RUN: "AS_RUN",
};
export const AdMarkupType = {
    DATERANGE: "DATERANGE",
    SCTE35_ENHANCED: "SCTE35_ENHANCED",
};
export const Type = {
    DASH: "DASH",
    HLS: "HLS",
};
export const FillPolicy = {
    FULL_AVAIL_ONLY: "FULL_AVAIL_ONLY",
    PARTIAL_AVAIL: "PARTIAL_AVAIL",
};
export const Mode = {
    AFTER_LIVE_EDGE: "AFTER_LIVE_EDGE",
    BEHIND_LIVE_EDGE: "BEHIND_LIVE_EDGE",
    OFF: "OFF",
};
export const OriginManifestType = {
    MULTI_PERIOD: "MULTI_PERIOD",
    SINGLE_PERIOD: "SINGLE_PERIOD",
};
export const InsertionMode = {
    PLAYER_SELECT: "PLAYER_SELECT",
    STITCHED_ONLY: "STITCHED_ONLY",
};
export const ScheduleEntryType = {
    ALTERNATE_MEDIA: "ALTERNATE_MEDIA",
    FILLER_SLATE: "FILLER_SLATE",
    PROGRAM: "PROGRAM",
};
export const AccessType = {
    AUTODETECT_SIGV4: "AUTODETECT_SIGV4",
    S3_SIGV4: "S3_SIGV4",
    SECRETS_MANAGER_ACCESS_TOKEN: "SECRETS_MANAGER_ACCESS_TOKEN",
};
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
    }
}
export const PlaybackMode = {
    LINEAR: "LINEAR",
    LOOP: "LOOP",
};
export const Tier = {
    BASIC: "BASIC",
    STANDARD: "STANDARD",
};
export const ChannelState = {
    RUNNING: "RUNNING",
    STOPPED: "STOPPED",
};
export const RelativePosition = {
    AFTER_PROGRAM: "AFTER_PROGRAM",
    BEFORE_PROGRAM: "BEFORE_PROGRAM",
};
