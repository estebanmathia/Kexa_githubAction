import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { AccessDeniedException, ApplicationNotSupportedException, ComputeNotCompatibleException, ConflictException, IncompatibleApplicationsException, InternalServerException, InvalidParameterValuesException, InvalidResourceStateException, OperatingSystemNotCompatibleException, OperationInProgressException, OperationNotSupportedException, ResourceAlreadyExistsException, ResourceAssociatedException, ResourceCreationFailedException, ResourceInUseException, ResourceLimitExceededException, ResourceNotFoundException, ResourceUnavailableException, UnsupportedNetworkConfigurationException, UnsupportedWorkspaceConfigurationException, ValidationException, WorkspacesDefaultRoleNotFoundException, } from "../models/models_0";
import { WorkSpacesServiceException as __BaseException } from "../models/WorkSpacesServiceException";
export const se_AcceptAccountLinkInvitationCommand = async (input, context) => {
    const headers = sharedHeaders("AcceptAccountLinkInvitation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateConnectionAliasCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateConnectionAlias");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateIpGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateIpGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateWorkspaceApplicationCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateWorkspaceApplication");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AuthorizeIpRulesCommand = async (input, context) => {
    const headers = sharedHeaders("AuthorizeIpRules");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CopyWorkspaceImageCommand = async (input, context) => {
    const headers = sharedHeaders("CopyWorkspaceImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAccountLinkInvitationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAccountLinkInvitation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateConnectClientAddInCommand = async (input, context) => {
    const headers = sharedHeaders("CreateConnectClientAddIn");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateConnectionAliasCommand = async (input, context) => {
    const headers = sharedHeaders("CreateConnectionAlias");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateIpGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateIpGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateStandbyWorkspacesCommand = async (input, context) => {
    const headers = sharedHeaders("CreateStandbyWorkspaces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTagsCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateUpdatedWorkspaceImageCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUpdatedWorkspaceImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateWorkspaceBundleCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWorkspaceBundle");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateWorkspaceImageCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWorkspaceImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateWorkspacesCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWorkspaces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAccountLinkInvitationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAccountLinkInvitation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteClientBrandingCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteClientBranding");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteConnectClientAddInCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConnectClientAddIn");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteConnectionAliasCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConnectionAlias");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteIpGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteIpGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTagsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteWorkspaceBundleCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWorkspaceBundle");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteWorkspaceImageCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWorkspaceImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeployWorkspaceApplicationsCommand = async (input, context) => {
    const headers = sharedHeaders("DeployWorkspaceApplications");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeregisterWorkspaceDirectoryCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterWorkspaceDirectory");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAccountCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAccount");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAccountModificationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAccountModifications");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeApplicationAssociationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeApplicationAssociations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeApplicationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeApplications");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBundleAssociationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBundleAssociations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeClientBrandingCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeClientBranding");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeClientPropertiesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeClientProperties");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeConnectClientAddInsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConnectClientAddIns");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeConnectionAliasesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConnectionAliases");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeConnectionAliasPermissionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConnectionAliasPermissions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeImageAssociationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImageAssociations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeIpGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeIpGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTagsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWorkspaceAssociationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkspaceAssociations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWorkspaceBundlesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkspaceBundles");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWorkspaceDirectoriesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkspaceDirectories");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWorkspaceImagePermissionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkspaceImagePermissions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWorkspaceImagesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkspaceImages");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWorkspacesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkspaces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWorkspacesConnectionStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkspacesConnectionStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWorkspaceSnapshotsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkspaceSnapshots");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateConnectionAliasCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateConnectionAlias");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateIpGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateIpGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateWorkspaceApplicationCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateWorkspaceApplication");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAccountLinkCommand = async (input, context) => {
    const headers = sharedHeaders("GetAccountLink");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportClientBrandingCommand = async (input, context) => {
    const headers = sharedHeaders("ImportClientBranding");
    let body;
    body = JSON.stringify(se_ImportClientBrandingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportWorkspaceImageCommand = async (input, context) => {
    const headers = sharedHeaders("ImportWorkspaceImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAccountLinksCommand = async (input, context) => {
    const headers = sharedHeaders("ListAccountLinks");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAvailableManagementCidrRangesCommand = async (input, context) => {
    const headers = sharedHeaders("ListAvailableManagementCidrRanges");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_MigrateWorkspaceCommand = async (input, context) => {
    const headers = sharedHeaders("MigrateWorkspace");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyAccountCommand = async (input, context) => {
    const headers = sharedHeaders("ModifyAccount");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyCertificateBasedAuthPropertiesCommand = async (input, context) => {
    const headers = sharedHeaders("ModifyCertificateBasedAuthProperties");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyClientPropertiesCommand = async (input, context) => {
    const headers = sharedHeaders("ModifyClientProperties");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifySamlPropertiesCommand = async (input, context) => {
    const headers = sharedHeaders("ModifySamlProperties");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifySelfservicePermissionsCommand = async (input, context) => {
    const headers = sharedHeaders("ModifySelfservicePermissions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyWorkspaceAccessPropertiesCommand = async (input, context) => {
    const headers = sharedHeaders("ModifyWorkspaceAccessProperties");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyWorkspaceCreationPropertiesCommand = async (input, context) => {
    const headers = sharedHeaders("ModifyWorkspaceCreationProperties");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyWorkspacePropertiesCommand = async (input, context) => {
    const headers = sharedHeaders("ModifyWorkspaceProperties");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyWorkspaceStateCommand = async (input, context) => {
    const headers = sharedHeaders("ModifyWorkspaceState");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RebootWorkspacesCommand = async (input, context) => {
    const headers = sharedHeaders("RebootWorkspaces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RebuildWorkspacesCommand = async (input, context) => {
    const headers = sharedHeaders("RebuildWorkspaces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterWorkspaceDirectoryCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterWorkspaceDirectory");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RejectAccountLinkInvitationCommand = async (input, context) => {
    const headers = sharedHeaders("RejectAccountLinkInvitation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RestoreWorkspaceCommand = async (input, context) => {
    const headers = sharedHeaders("RestoreWorkspace");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RevokeIpRulesCommand = async (input, context) => {
    const headers = sharedHeaders("RevokeIpRules");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartWorkspacesCommand = async (input, context) => {
    const headers = sharedHeaders("StartWorkspaces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopWorkspacesCommand = async (input, context) => {
    const headers = sharedHeaders("StopWorkspaces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TerminateWorkspacesCommand = async (input, context) => {
    const headers = sharedHeaders("TerminateWorkspaces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateConnectClientAddInCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateConnectClientAddIn");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateConnectionAliasPermissionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateConnectionAliasPermission");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateRulesOfIpGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRulesOfIpGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateWorkspaceBundleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateWorkspaceBundle");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateWorkspaceImagePermissionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateWorkspaceImagePermission");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AcceptAccountLinkInvitationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AssociateConnectionAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AssociateIpGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AssociateWorkspaceApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateWorkspaceApplicationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AuthorizeIpRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CopyWorkspaceImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAccountLinkInvitationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateConnectClientAddInCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateConnectionAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateIpGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateStandbyWorkspacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateUpdatedWorkspaceImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateWorkspaceBundleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateWorkspaceBundleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateWorkspaceImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateWorkspaceImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateWorkspacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateWorkspacesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAccountLinkInvitationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteClientBrandingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteConnectClientAddInCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteConnectionAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteIpGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteWorkspaceBundleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteWorkspaceImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeployWorkspaceApplicationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeployWorkspaceApplicationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeregisterWorkspaceDirectoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAccountModificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAccountModificationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeApplicationAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeApplicationAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeApplicationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeApplicationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeBundleAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBundleAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeClientBrandingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeClientPropertiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeConnectClientAddInsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeConnectionAliasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeConnectionAliasPermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeImageAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeImageAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeIpGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWorkspaceAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeWorkspaceAssociationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWorkspaceBundlesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeWorkspaceBundlesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWorkspaceDirectoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWorkspaceImagePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWorkspaceImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeWorkspaceImagesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWorkspacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeWorkspacesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWorkspacesConnectionStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeWorkspacesConnectionStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWorkspaceSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeWorkspaceSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateConnectionAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateIpGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateWorkspaceApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateWorkspaceApplicationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAccountLinkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ImportClientBrandingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ImportWorkspaceImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAccountLinksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAvailableManagementCidrRangesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_MigrateWorkspaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ModifyAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ModifyCertificateBasedAuthPropertiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ModifyClientPropertiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ModifySamlPropertiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ModifySelfservicePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ModifyWorkspaceAccessPropertiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ModifyWorkspaceCreationPropertiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ModifyWorkspacePropertiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ModifyWorkspaceStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RebootWorkspacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RebuildWorkspacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RegisterWorkspaceDirectoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RejectAccountLinkInvitationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RestoreWorkspaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RevokeIpRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartWorkspacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopWorkspacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TerminateWorkspacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateConnectClientAddInCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateConnectionAliasPermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateRulesOfIpGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateWorkspaceBundleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateWorkspaceImagePermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.workspaces#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.workspaces#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.workspaces#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.workspaces#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.workspaces#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "InvalidParameterValuesException":
        case "com.amazonaws.workspaces#InvalidParameterValuesException":
            throw await de_InvalidParameterValuesExceptionRes(parsedOutput, context);
        case "InvalidResourceStateException":
        case "com.amazonaws.workspaces#InvalidResourceStateException":
            throw await de_InvalidResourceStateExceptionRes(parsedOutput, context);
        case "OperationNotSupportedException":
        case "com.amazonaws.workspaces#OperationNotSupportedException":
            throw await de_OperationNotSupportedExceptionRes(parsedOutput, context);
        case "ResourceAssociatedException":
        case "com.amazonaws.workspaces#ResourceAssociatedException":
            throw await de_ResourceAssociatedExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.workspaces#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ApplicationNotSupportedException":
        case "com.amazonaws.workspaces#ApplicationNotSupportedException":
            throw await de_ApplicationNotSupportedExceptionRes(parsedOutput, context);
        case "ComputeNotCompatibleException":
        case "com.amazonaws.workspaces#ComputeNotCompatibleException":
            throw await de_ComputeNotCompatibleExceptionRes(parsedOutput, context);
        case "IncompatibleApplicationsException":
        case "com.amazonaws.workspaces#IncompatibleApplicationsException":
            throw await de_IncompatibleApplicationsExceptionRes(parsedOutput, context);
        case "OperatingSystemNotCompatibleException":
        case "com.amazonaws.workspaces#OperatingSystemNotCompatibleException":
            throw await de_OperatingSystemNotCompatibleExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.workspaces#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.workspaces#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.workspaces#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
        case "ResourceCreationFailedException":
        case "com.amazonaws.workspaces#ResourceCreationFailedException":
            throw await de_ResourceCreationFailedExceptionRes(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.workspaces#OperationInProgressException":
            throw await de_OperationInProgressExceptionRes(parsedOutput, context);
        case "UnsupportedWorkspaceConfigurationException":
        case "com.amazonaws.workspaces#UnsupportedWorkspaceConfigurationException":
            throw await de_UnsupportedWorkspaceConfigurationExceptionRes(parsedOutput, context);
        case "UnsupportedNetworkConfigurationException":
        case "com.amazonaws.workspaces#UnsupportedNetworkConfigurationException":
            throw await de_UnsupportedNetworkConfigurationExceptionRes(parsedOutput, context);
        case "WorkspacesDefaultRoleNotFoundException":
        case "com.amazonaws.workspaces#WorkspacesDefaultRoleNotFoundException":
            throw await de_WorkspacesDefaultRoleNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ApplicationNotSupportedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ApplicationNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ComputeNotCompatibleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ComputeNotCompatibleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_IncompatibleApplicationsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IncompatibleApplicationsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidParameterValuesExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidParameterValuesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidResourceStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidResourceStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OperatingSystemNotCompatibleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OperatingSystemNotCompatibleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OperationInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OperationInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OperationNotSupportedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OperationNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceAssociatedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceAssociatedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceCreationFailedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceCreationFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnsupportedNetworkConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedNetworkConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnsupportedWorkspaceConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedWorkspaceConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WorkspacesDefaultRoleNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WorkspacesDefaultRoleNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_DefaultImportClientBrandingAttributes = (input, context) => {
    return take(input, {
        ForgotPasswordLink: [],
        LoginMessage: _json,
        Logo: context.base64Encoder,
        SupportEmail: [],
        SupportLink: [],
    });
};
const se_ImportClientBrandingRequest = (input, context) => {
    return take(input, {
        DeviceTypeAndroid: (_) => se_DefaultImportClientBrandingAttributes(_, context),
        DeviceTypeIos: (_) => se_IosImportClientBrandingAttributes(_, context),
        DeviceTypeLinux: (_) => se_DefaultImportClientBrandingAttributes(_, context),
        DeviceTypeOsx: (_) => se_DefaultImportClientBrandingAttributes(_, context),
        DeviceTypeWeb: (_) => se_DefaultImportClientBrandingAttributes(_, context),
        DeviceTypeWindows: (_) => se_DefaultImportClientBrandingAttributes(_, context),
        ResourceId: [],
    });
};
const se_IosImportClientBrandingAttributes = (input, context) => {
    return take(input, {
        ForgotPasswordLink: [],
        LoginMessage: _json,
        Logo: context.base64Encoder,
        Logo2x: context.base64Encoder,
        Logo3x: context.base64Encoder,
        SupportEmail: [],
        SupportLink: [],
    });
};
const de_AccountModification = (output, context) => {
    return take(output, {
        DedicatedTenancyManagementCidrRange: __expectString,
        DedicatedTenancySupport: __expectString,
        ErrorCode: __expectString,
        ErrorMessage: __expectString,
        ModificationState: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AccountModificationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccountModification(entry, context);
    });
    return retVal;
};
const de_ApplicationResourceAssociation = (output, context) => {
    return take(output, {
        ApplicationId: __expectString,
        AssociatedResourceId: __expectString,
        AssociatedResourceType: __expectString,
        Created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
        StateReason: _json,
    });
};
const de_ApplicationResourceAssociationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationResourceAssociation(entry, context);
    });
    return retVal;
};
const de_AssociateWorkspaceApplicationResult = (output, context) => {
    return take(output, {
        Association: (_) => de_WorkspaceResourceAssociation(_, context),
    });
};
const de_BundleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorkspaceBundle(entry, context);
    });
    return retVal;
};
const de_BundleResourceAssociation = (output, context) => {
    return take(output, {
        AssociatedResourceId: __expectString,
        AssociatedResourceType: __expectString,
        BundleId: __expectString,
        Created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
        StateReason: _json,
    });
};
const de_BundleResourceAssociationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BundleResourceAssociation(entry, context);
    });
    return retVal;
};
const de_CreateWorkspaceBundleResult = (output, context) => {
    return take(output, {
        WorkspaceBundle: (_) => de_WorkspaceBundle(_, context),
    });
};
const de_CreateWorkspaceImageResult = (output, context) => {
    return take(output, {
        Created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        ImageId: __expectString,
        Name: __expectString,
        OperatingSystem: _json,
        OwnerAccountId: __expectString,
        RequiredTenancy: __expectString,
        State: __expectString,
    });
};
const de_CreateWorkspacesResult = (output, context) => {
    return take(output, {
        FailedRequests: _json,
        PendingRequests: (_) => de_WorkspaceList(_, context),
    });
};
const de_DataReplicationSettings = (output, context) => {
    return take(output, {
        DataReplication: __expectString,
        RecoverySnapshotTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DeployWorkspaceApplicationsResult = (output, context) => {
    return take(output, {
        Deployment: (_) => de_WorkSpaceApplicationDeployment(_, context),
    });
};
const de_DescribeAccountModificationsResult = (output, context) => {
    return take(output, {
        AccountModifications: (_) => de_AccountModificationList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeApplicationAssociationsResult = (output, context) => {
    return take(output, {
        Associations: (_) => de_ApplicationResourceAssociationList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeApplicationsResult = (output, context) => {
    return take(output, {
        Applications: (_) => de_WorkSpaceApplicationList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeBundleAssociationsResult = (output, context) => {
    return take(output, {
        Associations: (_) => de_BundleResourceAssociationList(_, context),
    });
};
const de_DescribeImageAssociationsResult = (output, context) => {
    return take(output, {
        Associations: (_) => de_ImageResourceAssociationList(_, context),
    });
};
const de_DescribeWorkspaceAssociationsResult = (output, context) => {
    return take(output, {
        Associations: (_) => de_WorkspaceResourceAssociationList(_, context),
    });
};
const de_DescribeWorkspaceBundlesResult = (output, context) => {
    return take(output, {
        Bundles: (_) => de_BundleList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeWorkspaceImagesResult = (output, context) => {
    return take(output, {
        Images: (_) => de_WorkspaceImageList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeWorkspacesConnectionStatusResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        WorkspacesConnectionStatus: (_) => de_WorkspaceConnectionStatusList(_, context),
    });
};
const de_DescribeWorkspaceSnapshotsResult = (output, context) => {
    return take(output, {
        RebuildSnapshots: (_) => de_SnapshotList(_, context),
        RestoreSnapshots: (_) => de_SnapshotList(_, context),
    });
};
const de_DescribeWorkspacesResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Workspaces: (_) => de_WorkspaceList(_, context),
    });
};
const de_DisassociateWorkspaceApplicationResult = (output, context) => {
    return take(output, {
        Association: (_) => de_WorkspaceResourceAssociation(_, context),
    });
};
const de_ImageResourceAssociation = (output, context) => {
    return take(output, {
        AssociatedResourceId: __expectString,
        AssociatedResourceType: __expectString,
        Created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ImageId: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
        StateReason: _json,
    });
};
const de_ImageResourceAssociationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageResourceAssociation(entry, context);
    });
    return retVal;
};
const de_Snapshot = (output, context) => {
    return take(output, {
        SnapshotTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_SnapshotList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Snapshot(entry, context);
    });
    return retVal;
};
const de_StandbyWorkspacesProperties = (output, context) => {
    return take(output, {
        DataReplication: __expectString,
        RecoverySnapshotTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StandbyWorkspaceId: __expectString,
    });
};
const de_StandbyWorkspacesPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StandbyWorkspacesProperties(entry, context);
    });
    return retVal;
};
const de_Workspace = (output, context) => {
    return take(output, {
        BundleId: __expectString,
        ComputerName: __expectString,
        DataReplicationSettings: (_) => de_DataReplicationSettings(_, context),
        DirectoryId: __expectString,
        ErrorCode: __expectString,
        ErrorMessage: __expectString,
        IpAddress: __expectString,
        ModificationStates: _json,
        RelatedWorkspaces: _json,
        RootVolumeEncryptionEnabled: __expectBoolean,
        StandbyWorkspacesProperties: (_) => de_StandbyWorkspacesPropertiesList(_, context),
        State: __expectString,
        SubnetId: __expectString,
        UserName: __expectString,
        UserVolumeEncryptionEnabled: __expectBoolean,
        VolumeEncryptionKey: __expectString,
        WorkspaceId: __expectString,
        WorkspaceName: __expectString,
        WorkspaceProperties: _json,
    });
};
const de_WorkSpaceApplication = (output, context) => {
    return take(output, {
        ApplicationId: __expectString,
        Created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LicenseType: __expectString,
        Name: __expectString,
        Owner: __expectString,
        State: __expectString,
        SupportedComputeTypeNames: _json,
        SupportedOperatingSystemNames: _json,
    });
};
const de_WorkSpaceApplicationDeployment = (output, context) => {
    return take(output, {
        Associations: (_) => de_WorkspaceResourceAssociationList(_, context),
    });
};
const de_WorkSpaceApplicationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorkSpaceApplication(entry, context);
    });
    return retVal;
};
const de_WorkspaceBundle = (output, context) => {
    return take(output, {
        BundleId: __expectString,
        BundleType: __expectString,
        ComputeType: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        ImageId: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Owner: __expectString,
        RootStorage: _json,
        State: __expectString,
        UserStorage: _json,
    });
};
const de_WorkspaceConnectionStatus = (output, context) => {
    return take(output, {
        ConnectionState: __expectString,
        ConnectionStateCheckTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastKnownUserConnectionTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        WorkspaceId: __expectString,
    });
};
const de_WorkspaceConnectionStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorkspaceConnectionStatus(entry, context);
    });
    return retVal;
};
const de_WorkspaceImage = (output, context) => {
    return take(output, {
        Created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        ErrorCode: __expectString,
        ErrorDetails: _json,
        ErrorMessage: __expectString,
        ImageId: __expectString,
        Name: __expectString,
        OperatingSystem: _json,
        OwnerAccountId: __expectString,
        RequiredTenancy: __expectString,
        State: __expectString,
        Updates: _json,
    });
};
const de_WorkspaceImageList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorkspaceImage(entry, context);
    });
    return retVal;
};
const de_WorkspaceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Workspace(entry, context);
    });
    return retVal;
};
const de_WorkspaceResourceAssociation = (output, context) => {
    return take(output, {
        AssociatedResourceId: __expectString,
        AssociatedResourceType: __expectString,
        Created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
        StateReason: _json,
        WorkspaceId: __expectString,
    });
};
const de_WorkspaceResourceAssociationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorkspaceResourceAssociation(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `WorkspacesService.${operation}`,
    };
}
