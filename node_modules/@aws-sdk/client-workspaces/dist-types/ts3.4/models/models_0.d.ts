import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { WorkSpacesServiceException as __BaseException } from "./WorkSpacesServiceException";
export interface AcceptAccountLinkInvitationRequest {
  LinkId: string | undefined;
  ClientToken?: string;
}
export declare const AccountLinkStatusEnum: {
  readonly LINKED: "LINKED";
  readonly LINKING_FAILED: "LINKING_FAILED";
  readonly LINK_NOT_FOUND: "LINK_NOT_FOUND";
  readonly PENDING_ACCEPTANCE_BY_TARGET_ACCOUNT: "PENDING_ACCEPTANCE_BY_TARGET_ACCOUNT";
  readonly REJECTED: "REJECTED";
};
export type AccountLinkStatusEnum =
  (typeof AccountLinkStatusEnum)[keyof typeof AccountLinkStatusEnum];
export interface AccountLink {
  AccountLinkId?: string;
  AccountLinkStatus?: AccountLinkStatusEnum;
  SourceAccountId?: string;
  TargetAccountId?: string;
}
export interface AcceptAccountLinkInvitationResult {
  AccountLink?: AccountLink;
}
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  ResourceId?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const AccessPropertyValue: {
  readonly ALLOW: "ALLOW";
  readonly DENY: "DENY";
};
export type AccessPropertyValue =
  (typeof AccessPropertyValue)[keyof typeof AccessPropertyValue];
export declare const DedicatedTenancySupportResultEnum: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type DedicatedTenancySupportResultEnum =
  (typeof DedicatedTenancySupportResultEnum)[keyof typeof DedicatedTenancySupportResultEnum];
export declare const DedicatedTenancyModificationStateEnum: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
};
export type DedicatedTenancyModificationStateEnum =
  (typeof DedicatedTenancyModificationStateEnum)[keyof typeof DedicatedTenancyModificationStateEnum];
export interface AccountModification {
  ModificationState?: DedicatedTenancyModificationStateEnum;
  DedicatedTenancySupport?: DedicatedTenancySupportResultEnum;
  DedicatedTenancyManagementCidrRange?: string;
  StartTime?: Date;
  ErrorCode?: string;
  ErrorMessage?: string;
}
export declare const Application: {
  readonly Microsoft_Office_2016: "Microsoft_Office_2016";
  readonly Microsoft_Office_2019: "Microsoft_Office_2019";
};
export type Application = (typeof Application)[keyof typeof Application];
export declare const ApplicationAssociatedResourceType: {
  readonly BUNDLE: "BUNDLE";
  readonly IMAGE: "IMAGE";
  readonly WORKSPACE: "WORKSPACE";
};
export type ApplicationAssociatedResourceType =
  (typeof ApplicationAssociatedResourceType)[keyof typeof ApplicationAssociatedResourceType];
export declare class ApplicationNotSupportedException extends __BaseException {
  readonly name: "ApplicationNotSupportedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ApplicationNotSupportedException,
      __BaseException
    >
  );
}
export declare const AssociationState: {
  readonly COMPLETED: "COMPLETED";
  readonly ERROR: "ERROR";
  readonly INSTALLING: "INSTALLING";
  readonly PENDING_INSTALL: "PENDING_INSTALL";
  readonly PENDING_INSTALL_DEPLOYMENT: "PENDING_INSTALL_DEPLOYMENT";
  readonly PENDING_UNINSTALL: "PENDING_UNINSTALL";
  readonly PENDING_UNINSTALL_DEPLOYMENT: "PENDING_UNINSTALL_DEPLOYMENT";
  readonly REMOVED: "REMOVED";
  readonly UNINSTALLING: "UNINSTALLING";
};
export type AssociationState =
  (typeof AssociationState)[keyof typeof AssociationState];
export declare const AssociationErrorCode: {
  readonly INSUFFICIENT_DISKSPACE: "ValidationError.InsufficientDiskSpace";
  readonly INSUFFICIENT_MEMORY: "ValidationError.InsufficientMemory";
  readonly INTERNAL_SERVER_ERROR: "DeploymentError.InternalServerError";
  readonly UNSUPPORTED_OPERATING_SYSTEM: "ValidationError.UnsupportedOperatingSystem";
  readonly WORKSPACE_UNREACHABLE: "DeploymentError.WorkspaceUnreachable";
};
export type AssociationErrorCode =
  (typeof AssociationErrorCode)[keyof typeof AssociationErrorCode];
export interface AssociationStateReason {
  ErrorCode?: AssociationErrorCode;
  ErrorMessage?: string;
}
export interface ApplicationResourceAssociation {
  ApplicationId?: string;
  AssociatedResourceId?: string;
  AssociatedResourceType?: ApplicationAssociatedResourceType;
  Created?: Date;
  LastUpdatedTime?: Date;
  State?: AssociationState;
  StateReason?: AssociationStateReason;
}
export interface AssociateConnectionAliasRequest {
  AliasId: string | undefined;
  ResourceId: string | undefined;
}
export interface AssociateConnectionAliasResult {
  ConnectionIdentifier?: string;
}
export declare class InvalidParameterValuesException extends __BaseException {
  readonly name: "InvalidParameterValuesException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidParameterValuesException,
      __BaseException
    >
  );
}
export declare class InvalidResourceStateException extends __BaseException {
  readonly name: "InvalidResourceStateException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidResourceStateException, __BaseException>
  );
}
export declare class OperationNotSupportedException extends __BaseException {
  readonly name: "OperationNotSupportedException";
  readonly $fault: "client";
  reason?: string;
  constructor(
    opts: __ExceptionOptionType<OperationNotSupportedException, __BaseException>
  );
}
export declare class ResourceAssociatedException extends __BaseException {
  readonly name: "ResourceAssociatedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceAssociatedException, __BaseException>
  );
}
export interface AssociateIpGroupsRequest {
  DirectoryId: string | undefined;
  GroupIds: string[] | undefined;
}
export interface AssociateIpGroupsResult {}
export declare class ResourceLimitExceededException extends __BaseException {
  readonly name: "ResourceLimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceLimitExceededException, __BaseException>
  );
}
export interface AssociateWorkspaceApplicationRequest {
  WorkspaceId: string | undefined;
  ApplicationId: string | undefined;
}
export declare const WorkSpaceAssociatedResourceType: {
  readonly APPLICATION: "APPLICATION";
};
export type WorkSpaceAssociatedResourceType =
  (typeof WorkSpaceAssociatedResourceType)[keyof typeof WorkSpaceAssociatedResourceType];
export interface WorkspaceResourceAssociation {
  AssociatedResourceId?: string;
  AssociatedResourceType?: WorkSpaceAssociatedResourceType;
  Created?: Date;
  LastUpdatedTime?: Date;
  State?: AssociationState;
  StateReason?: AssociationStateReason;
  WorkspaceId?: string;
}
export interface AssociateWorkspaceApplicationResult {
  Association?: WorkspaceResourceAssociation;
}
export declare class ComputeNotCompatibleException extends __BaseException {
  readonly name: "ComputeNotCompatibleException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ComputeNotCompatibleException, __BaseException>
  );
}
export declare class IncompatibleApplicationsException extends __BaseException {
  readonly name: "IncompatibleApplicationsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      IncompatibleApplicationsException,
      __BaseException
    >
  );
}
export declare class OperatingSystemNotCompatibleException extends __BaseException {
  readonly name: "OperatingSystemNotCompatibleException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      OperatingSystemNotCompatibleException,
      __BaseException
    >
  );
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  ResourceId?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export declare const AssociationStatus: {
  readonly ASSOCIATED_WITH_OWNER_ACCOUNT: "ASSOCIATED_WITH_OWNER_ACCOUNT";
  readonly ASSOCIATED_WITH_SHARED_ACCOUNT: "ASSOCIATED_WITH_SHARED_ACCOUNT";
  readonly NOT_ASSOCIATED: "NOT_ASSOCIATED";
  readonly PENDING_ASSOCIATION: "PENDING_ASSOCIATION";
  readonly PENDING_DISASSOCIATION: "PENDING_DISASSOCIATION";
};
export type AssociationStatus =
  (typeof AssociationStatus)[keyof typeof AssociationStatus];
export interface IpRuleItem {
  ipRule?: string;
  ruleDesc?: string;
}
export interface AuthorizeIpRulesRequest {
  GroupId: string | undefined;
  UserRules: IpRuleItem[] | undefined;
}
export interface AuthorizeIpRulesResult {}
export declare const BundleAssociatedResourceType: {
  readonly APPLICATION: "APPLICATION";
};
export type BundleAssociatedResourceType =
  (typeof BundleAssociatedResourceType)[keyof typeof BundleAssociatedResourceType];
export declare const BundleType: {
  readonly REGULAR: "REGULAR";
  readonly STANDBY: "STANDBY";
};
export type BundleType = (typeof BundleType)[keyof typeof BundleType];
export declare const Compute: {
  readonly GRAPHICS: "GRAPHICS";
  readonly GRAPHICSPRO: "GRAPHICSPRO";
  readonly GRAPHICSPRO_G4DN: "GRAPHICSPRO_G4DN";
  readonly GRAPHICS_G4DN: "GRAPHICS_G4DN";
  readonly PERFORMANCE: "PERFORMANCE";
  readonly POWER: "POWER";
  readonly POWERPRO: "POWERPRO";
  readonly STANDARD: "STANDARD";
  readonly VALUE: "VALUE";
};
export type Compute = (typeof Compute)[keyof typeof Compute];
export interface ComputeType {
  Name?: Compute;
}
export interface RootStorage {
  Capacity?: string;
}
export declare const WorkspaceBundleState: {
  readonly AVAILABLE: "AVAILABLE";
  readonly ERROR: "ERROR";
  readonly PENDING: "PENDING";
};
export type WorkspaceBundleState =
  (typeof WorkspaceBundleState)[keyof typeof WorkspaceBundleState];
export interface UserStorage {
  Capacity?: string;
}
export interface WorkspaceBundle {
  BundleId?: string;
  Name?: string;
  Owner?: string;
  Description?: string;
  ImageId?: string;
  RootStorage?: RootStorage;
  UserStorage?: UserStorage;
  ComputeType?: ComputeType;
  LastUpdatedTime?: Date;
  CreationTime?: Date;
  State?: WorkspaceBundleState;
  BundleType?: BundleType;
}
export interface BundleResourceAssociation {
  AssociatedResourceId?: string;
  AssociatedResourceType?: BundleAssociatedResourceType;
  BundleId?: string;
  Created?: Date;
  LastUpdatedTime?: Date;
  State?: AssociationState;
  StateReason?: AssociationStateReason;
}
export declare const CertificateBasedAuthStatusEnum: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type CertificateBasedAuthStatusEnum =
  (typeof CertificateBasedAuthStatusEnum)[keyof typeof CertificateBasedAuthStatusEnum];
export interface CertificateBasedAuthProperties {
  Status?: CertificateBasedAuthStatusEnum;
  CertificateAuthorityArn?: string;
}
export declare const ClientDeviceType: {
  readonly DEVICE_TYPE_ANDROID: "DeviceTypeAndroid";
  readonly DEVICE_TYPE_IOS: "DeviceTypeIos";
  readonly DEVICE_TYPE_LINUX: "DeviceTypeLinux";
  readonly DEVICE_TYPE_OSX: "DeviceTypeOsx";
  readonly DEVICE_TYPE_WEB: "DeviceTypeWeb";
  readonly DEVICE_TYPE_WINDOWS: "DeviceTypeWindows";
};
export type ClientDeviceType =
  (typeof ClientDeviceType)[keyof typeof ClientDeviceType];
export declare const LogUploadEnum: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type LogUploadEnum = (typeof LogUploadEnum)[keyof typeof LogUploadEnum];
export declare const ReconnectEnum: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type ReconnectEnum = (typeof ReconnectEnum)[keyof typeof ReconnectEnum];
export interface ClientProperties {
  ReconnectEnabled?: ReconnectEnum;
  LogUploadEnabled?: LogUploadEnum;
}
export interface ClientPropertiesResult {
  ResourceId?: string;
  ClientProperties?: ClientProperties;
}
export interface ConnectClientAddIn {
  AddInId?: string;
  ResourceId?: string;
  Name?: string;
  URL?: string;
}
export interface ConnectionAliasAssociation {
  AssociationStatus?: AssociationStatus;
  AssociatedAccountId?: string;
  ResourceId?: string;
  ConnectionIdentifier?: string;
}
export declare const ConnectionAliasState: {
  readonly CREATED: "CREATED";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
};
export type ConnectionAliasState =
  (typeof ConnectionAliasState)[keyof typeof ConnectionAliasState];
export interface ConnectionAlias {
  ConnectionString?: string;
  AliasId?: string;
  State?: ConnectionAliasState;
  OwnerAccountId?: string;
  Associations?: ConnectionAliasAssociation[];
}
export interface ConnectionAliasPermission {
  SharedAccountId: string | undefined;
  AllowAssociation: boolean | undefined;
}
export declare const ConnectionState: {
  readonly CONNECTED: "CONNECTED";
  readonly DISCONNECTED: "DISCONNECTED";
  readonly UNKNOWN: "UNKNOWN";
};
export type ConnectionState =
  (typeof ConnectionState)[keyof typeof ConnectionState];
export interface Tag {
  Key: string | undefined;
  Value?: string;
}
export interface CopyWorkspaceImageRequest {
  Name: string | undefined;
  Description?: string;
  SourceImageId: string | undefined;
  SourceRegion: string | undefined;
  Tags?: Tag[];
}
export interface CopyWorkspaceImageResult {
  ImageId?: string;
}
export declare class ResourceUnavailableException extends __BaseException {
  readonly name: "ResourceUnavailableException";
  readonly $fault: "client";
  ResourceId?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceUnavailableException, __BaseException>
  );
}
export interface CreateAccountLinkInvitationRequest {
  TargetAccountId: string | undefined;
  ClientToken?: string;
}
export interface CreateAccountLinkInvitationResult {
  AccountLink?: AccountLink;
}
export interface CreateConnectClientAddInRequest {
  ResourceId: string | undefined;
  Name: string | undefined;
  URL: string | undefined;
}
export interface CreateConnectClientAddInResult {
  AddInId?: string;
}
export declare class ResourceCreationFailedException extends __BaseException {
  readonly name: "ResourceCreationFailedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ResourceCreationFailedException,
      __BaseException
    >
  );
}
export interface CreateConnectionAliasRequest {
  ConnectionString: string | undefined;
  Tags?: Tag[];
}
export interface CreateConnectionAliasResult {
  AliasId?: string;
}
export interface CreateIpGroupRequest {
  GroupName: string | undefined;
  GroupDesc?: string;
  UserRules?: IpRuleItem[];
  Tags?: Tag[];
}
export interface CreateIpGroupResult {
  GroupId?: string;
}
export declare const DataReplication: {
  readonly NO_REPLICATION: "NO_REPLICATION";
  readonly PRIMARY_AS_SOURCE: "PRIMARY_AS_SOURCE";
};
export type DataReplication =
  (typeof DataReplication)[keyof typeof DataReplication];
export interface StandbyWorkspace {
  PrimaryWorkspaceId: string | undefined;
  VolumeEncryptionKey?: string;
  DirectoryId: string | undefined;
  Tags?: Tag[];
  DataReplication?: DataReplication;
}
export interface CreateStandbyWorkspacesRequest {
  PrimaryRegion: string | undefined;
  StandbyWorkspaces: StandbyWorkspace[] | undefined;
}
export interface FailedCreateStandbyWorkspacesRequest {
  StandbyWorkspaceRequest?: StandbyWorkspace;
  ErrorCode?: string;
  ErrorMessage?: string;
}
export declare const WorkspaceState: {
  readonly ADMIN_MAINTENANCE: "ADMIN_MAINTENANCE";
  readonly AVAILABLE: "AVAILABLE";
  readonly ERROR: "ERROR";
  readonly IMPAIRED: "IMPAIRED";
  readonly MAINTENANCE: "MAINTENANCE";
  readonly PENDING: "PENDING";
  readonly REBOOTING: "REBOOTING";
  readonly REBUILDING: "REBUILDING";
  readonly RESTORING: "RESTORING";
  readonly STARTING: "STARTING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
  readonly SUSPENDED: "SUSPENDED";
  readonly TERMINATED: "TERMINATED";
  readonly TERMINATING: "TERMINATING";
  readonly UNHEALTHY: "UNHEALTHY";
  readonly UPDATING: "UPDATING";
};
export type WorkspaceState =
  (typeof WorkspaceState)[keyof typeof WorkspaceState];
export interface PendingCreateStandbyWorkspacesRequest {
  UserName?: string;
  DirectoryId?: string;
  State?: WorkspaceState;
  WorkspaceId?: string;
}
export interface CreateStandbyWorkspacesResult {
  FailedStandbyRequests?: FailedCreateStandbyWorkspacesRequest[];
  PendingStandbyRequests?: PendingCreateStandbyWorkspacesRequest[];
}
export interface CreateTagsRequest {
  ResourceId: string | undefined;
  Tags: Tag[] | undefined;
}
export interface CreateTagsResult {}
export interface CreateUpdatedWorkspaceImageRequest {
  Name: string | undefined;
  Description: string | undefined;
  SourceImageId: string | undefined;
  Tags?: Tag[];
}
export interface CreateUpdatedWorkspaceImageResult {
  ImageId?: string;
}
export interface CreateWorkspaceBundleRequest {
  BundleName: string | undefined;
  BundleDescription: string | undefined;
  ImageId: string | undefined;
  ComputeType: ComputeType | undefined;
  UserStorage: UserStorage | undefined;
  RootStorage?: RootStorage;
  Tags?: Tag[];
}
export interface CreateWorkspaceBundleResult {
  WorkspaceBundle?: WorkspaceBundle;
}
export interface CreateWorkspaceImageRequest {
  Name: string | undefined;
  Description: string | undefined;
  WorkspaceId: string | undefined;
  Tags?: Tag[];
}
export declare const OperatingSystemType: {
  readonly LINUX: "LINUX";
  readonly WINDOWS: "WINDOWS";
};
export type OperatingSystemType =
  (typeof OperatingSystemType)[keyof typeof OperatingSystemType];
export interface OperatingSystem {
  Type?: OperatingSystemType;
}
export declare const WorkspaceImageRequiredTenancy: {
  readonly DEDICATED: "DEDICATED";
  readonly DEFAULT: "DEFAULT";
};
export type WorkspaceImageRequiredTenancy =
  (typeof WorkspaceImageRequiredTenancy)[keyof typeof WorkspaceImageRequiredTenancy];
export declare const WorkspaceImageState: {
  readonly AVAILABLE: "AVAILABLE";
  readonly ERROR: "ERROR";
  readonly PENDING: "PENDING";
};
export type WorkspaceImageState =
  (typeof WorkspaceImageState)[keyof typeof WorkspaceImageState];
export interface CreateWorkspaceImageResult {
  ImageId?: string;
  Name?: string;
  Description?: string;
  OperatingSystem?: OperatingSystem;
  State?: WorkspaceImageState;
  RequiredTenancy?: WorkspaceImageRequiredTenancy;
  Created?: Date;
  OwnerAccountId?: string;
}
export declare const OperatingSystemName: {
  readonly AMAZON_LINUX_2: "AMAZON_LINUX_2";
  readonly UBUNTU_18_04: "UBUNTU_18_04";
  readonly UBUNTU_20_04: "UBUNTU_20_04";
  readonly UBUNTU_22_04: "UBUNTU_22_04";
  readonly UNKNOWN: "UNKNOWN";
  readonly WINDOWS_10: "WINDOWS_10";
  readonly WINDOWS_11: "WINDOWS_11";
  readonly WINDOWS_7: "WINDOWS_7";
  readonly WINDOWS_SERVER_2016: "WINDOWS_SERVER_2016";
  readonly WINDOWS_SERVER_2019: "WINDOWS_SERVER_2019";
  readonly WINDOWS_SERVER_2022: "WINDOWS_SERVER_2022";
};
export type OperatingSystemName =
  (typeof OperatingSystemName)[keyof typeof OperatingSystemName];
export declare const Protocol: {
  readonly PCOIP: "PCOIP";
  readonly WSP: "WSP";
};
export type Protocol = (typeof Protocol)[keyof typeof Protocol];
export declare const RunningMode: {
  readonly ALWAYS_ON: "ALWAYS_ON";
  readonly AUTO_STOP: "AUTO_STOP";
  readonly MANUAL: "MANUAL";
};
export type RunningMode = (typeof RunningMode)[keyof typeof RunningMode];
export interface WorkspaceProperties {
  RunningMode?: RunningMode;
  RunningModeAutoStopTimeoutInMinutes?: number;
  RootVolumeSizeGib?: number;
  UserVolumeSizeGib?: number;
  ComputeTypeName?: Compute;
  Protocols?: Protocol[];
  OperatingSystemName?: OperatingSystemName;
}
export interface WorkspaceRequest {
  DirectoryId: string | undefined;
  UserName: string | undefined;
  BundleId: string | undefined;
  VolumeEncryptionKey?: string;
  UserVolumeEncryptionEnabled?: boolean;
  RootVolumeEncryptionEnabled?: boolean;
  WorkspaceProperties?: WorkspaceProperties;
  Tags?: Tag[];
  WorkspaceName?: string;
}
export interface CreateWorkspacesRequest {
  Workspaces: WorkspaceRequest[] | undefined;
}
export interface FailedCreateWorkspaceRequest {
  WorkspaceRequest?: WorkspaceRequest;
  ErrorCode?: string;
  ErrorMessage?: string;
}
export interface DataReplicationSettings {
  DataReplication?: DataReplication;
  RecoverySnapshotTime?: Date;
}
export declare const ModificationResourceEnum: {
  readonly COMPUTE_TYPE: "COMPUTE_TYPE";
  readonly ROOT_VOLUME: "ROOT_VOLUME";
  readonly USER_VOLUME: "USER_VOLUME";
};
export type ModificationResourceEnum =
  (typeof ModificationResourceEnum)[keyof typeof ModificationResourceEnum];
export declare const ModificationStateEnum: {
  readonly UPDATE_INITIATED: "UPDATE_INITIATED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
};
export type ModificationStateEnum =
  (typeof ModificationStateEnum)[keyof typeof ModificationStateEnum];
export interface ModificationState {
  Resource?: ModificationResourceEnum;
  State?: ModificationStateEnum;
}
export declare const StandbyWorkspaceRelationshipType: {
  readonly PRIMARY: "PRIMARY";
  readonly STANDBY: "STANDBY";
};
export type StandbyWorkspaceRelationshipType =
  (typeof StandbyWorkspaceRelationshipType)[keyof typeof StandbyWorkspaceRelationshipType];
export interface RelatedWorkspaceProperties {
  WorkspaceId?: string;
  Region?: string;
  State?: WorkspaceState;
  Type?: StandbyWorkspaceRelationshipType;
}
export interface StandbyWorkspacesProperties {
  StandbyWorkspaceId?: string;
  DataReplication?: DataReplication;
  RecoverySnapshotTime?: Date;
}
export interface Workspace {
  WorkspaceId?: string;
  DirectoryId?: string;
  UserName?: string;
  IpAddress?: string;
  State?: WorkspaceState;
  BundleId?: string;
  SubnetId?: string;
  ErrorMessage?: string;
  ErrorCode?: string;
  ComputerName?: string;
  VolumeEncryptionKey?: string;
  UserVolumeEncryptionEnabled?: boolean;
  RootVolumeEncryptionEnabled?: boolean;
  WorkspaceName?: string;
  WorkspaceProperties?: WorkspaceProperties;
  ModificationStates?: ModificationState[];
  RelatedWorkspaces?: RelatedWorkspaceProperties[];
  DataReplicationSettings?: DataReplicationSettings;
  StandbyWorkspacesProperties?: StandbyWorkspacesProperties[];
}
export interface CreateWorkspacesResult {
  FailedRequests?: FailedCreateWorkspaceRequest[];
  PendingRequests?: Workspace[];
}
export declare const DedicatedTenancyAccountType: {
  readonly SOURCE_ACCOUNT: "SOURCE_ACCOUNT";
  readonly TARGET_ACCOUNT: "TARGET_ACCOUNT";
};
export type DedicatedTenancyAccountType =
  (typeof DedicatedTenancyAccountType)[keyof typeof DedicatedTenancyAccountType];
export declare const DedicatedTenancySupportEnum: {
  readonly ENABLED: "ENABLED";
};
export type DedicatedTenancySupportEnum =
  (typeof DedicatedTenancySupportEnum)[keyof typeof DedicatedTenancySupportEnum];
export interface DefaultClientBrandingAttributes {
  LogoUrl?: string;
  SupportEmail?: string;
  SupportLink?: string;
  ForgotPasswordLink?: string;
  LoginMessage?: Record<string, string>;
}
export interface DefaultImportClientBrandingAttributes {
  Logo?: Uint8Array;
  SupportEmail?: string;
  SupportLink?: string;
  ForgotPasswordLink?: string;
  LoginMessage?: Record<string, string>;
}
export interface DefaultWorkspaceCreationProperties {
  EnableWorkDocs?: boolean;
  EnableInternetAccess?: boolean;
  DefaultOu?: string;
  CustomSecurityGroupId?: string;
  UserEnabledAsLocalAdministrator?: boolean;
  EnableMaintenanceMode?: boolean;
}
export declare const DeletableCertificateBasedAuthProperty: {
  readonly CERTIFICATE_BASED_AUTH_PROPERTIES_CERTIFICATE_AUTHORITY_ARN: "CERTIFICATE_BASED_AUTH_PROPERTIES_CERTIFICATE_AUTHORITY_ARN";
};
export type DeletableCertificateBasedAuthProperty =
  (typeof DeletableCertificateBasedAuthProperty)[keyof typeof DeletableCertificateBasedAuthProperty];
export declare const DeletableSamlProperty: {
  readonly SAML_PROPERTIES_RELAY_STATE_PARAMETER_NAME: "SAML_PROPERTIES_RELAY_STATE_PARAMETER_NAME";
  readonly SAML_PROPERTIES_USER_ACCESS_URL: "SAML_PROPERTIES_USER_ACCESS_URL";
};
export type DeletableSamlProperty =
  (typeof DeletableSamlProperty)[keyof typeof DeletableSamlProperty];
export interface DeleteAccountLinkInvitationRequest {
  LinkId: string | undefined;
  ClientToken?: string;
}
export interface DeleteAccountLinkInvitationResult {
  AccountLink?: AccountLink;
}
export interface DeleteClientBrandingRequest {
  ResourceId: string | undefined;
  Platforms: ClientDeviceType[] | undefined;
}
export interface DeleteClientBrandingResult {}
export interface DeleteConnectClientAddInRequest {
  AddInId: string | undefined;
  ResourceId: string | undefined;
}
export interface DeleteConnectClientAddInResult {}
export interface DeleteConnectionAliasRequest {
  AliasId: string | undefined;
}
export interface DeleteConnectionAliasResult {}
export interface DeleteIpGroupRequest {
  GroupId: string | undefined;
}
export interface DeleteIpGroupResult {}
export interface DeleteTagsRequest {
  ResourceId: string | undefined;
  TagKeys: string[] | undefined;
}
export interface DeleteTagsResult {}
export interface DeleteWorkspaceBundleRequest {
  BundleId?: string;
}
export interface DeleteWorkspaceBundleResult {}
export interface DeleteWorkspaceImageRequest {
  ImageId: string | undefined;
}
export interface DeleteWorkspaceImageResult {}
export interface DeployWorkspaceApplicationsRequest {
  WorkspaceId: string | undefined;
  Force?: boolean;
}
export interface WorkSpaceApplicationDeployment {
  Associations?: WorkspaceResourceAssociation[];
}
export interface DeployWorkspaceApplicationsResult {
  Deployment?: WorkSpaceApplicationDeployment;
}
export interface DeregisterWorkspaceDirectoryRequest {
  DirectoryId: string | undefined;
}
export interface DeregisterWorkspaceDirectoryResult {}
export interface DescribeAccountRequest {}
export interface DescribeAccountResult {
  DedicatedTenancySupport?: DedicatedTenancySupportResultEnum;
  DedicatedTenancyManagementCidrRange?: string;
  DedicatedTenancyAccountType?: DedicatedTenancyAccountType;
}
export interface DescribeAccountModificationsRequest {
  NextToken?: string;
}
export interface DescribeAccountModificationsResult {
  AccountModifications?: AccountModification[];
  NextToken?: string;
}
export interface DescribeApplicationAssociationsRequest {
  MaxResults?: number;
  NextToken?: string;
  ApplicationId: string | undefined;
  AssociatedResourceTypes: ApplicationAssociatedResourceType[] | undefined;
}
export interface DescribeApplicationAssociationsResult {
  Associations?: ApplicationResourceAssociation[];
  NextToken?: string;
}
export declare const WorkSpaceApplicationLicenseType: {
  readonly LICENSED: "LICENSED";
  readonly UNLICENSED: "UNLICENSED";
};
export type WorkSpaceApplicationLicenseType =
  (typeof WorkSpaceApplicationLicenseType)[keyof typeof WorkSpaceApplicationLicenseType];
export interface DescribeApplicationsRequest {
  ApplicationIds?: string[];
  ComputeTypeNames?: Compute[];
  LicenseType?: WorkSpaceApplicationLicenseType;
  OperatingSystemNames?: OperatingSystemName[];
  Owner?: string;
  MaxResults?: number;
  NextToken?: string;
}
export declare const WorkSpaceApplicationState: {
  readonly AVAILABLE: "AVAILABLE";
  readonly ERROR: "ERROR";
  readonly PENDING: "PENDING";
  readonly UNINSTALL_ONLY: "UNINSTALL_ONLY";
};
export type WorkSpaceApplicationState =
  (typeof WorkSpaceApplicationState)[keyof typeof WorkSpaceApplicationState];
export interface WorkSpaceApplication {
  ApplicationId?: string;
  Created?: Date;
  Description?: string;
  LicenseType?: WorkSpaceApplicationLicenseType;
  Name?: string;
  Owner?: string;
  State?: WorkSpaceApplicationState;
  SupportedComputeTypeNames?: Compute[];
  SupportedOperatingSystemNames?: OperatingSystemName[];
}
export interface DescribeApplicationsResult {
  Applications?: WorkSpaceApplication[];
  NextToken?: string;
}
export interface DescribeBundleAssociationsRequest {
  BundleId: string | undefined;
  AssociatedResourceTypes: BundleAssociatedResourceType[] | undefined;
}
export interface DescribeBundleAssociationsResult {
  Associations?: BundleResourceAssociation[];
}
export interface DescribeClientBrandingRequest {
  ResourceId: string | undefined;
}
export interface IosClientBrandingAttributes {
  LogoUrl?: string;
  Logo2xUrl?: string;
  Logo3xUrl?: string;
  SupportEmail?: string;
  SupportLink?: string;
  ForgotPasswordLink?: string;
  LoginMessage?: Record<string, string>;
}
export interface DescribeClientBrandingResult {
  DeviceTypeWindows?: DefaultClientBrandingAttributes;
  DeviceTypeOsx?: DefaultClientBrandingAttributes;
  DeviceTypeAndroid?: DefaultClientBrandingAttributes;
  DeviceTypeIos?: IosClientBrandingAttributes;
  DeviceTypeLinux?: DefaultClientBrandingAttributes;
  DeviceTypeWeb?: DefaultClientBrandingAttributes;
}
export interface DescribeClientPropertiesRequest {
  ResourceIds: string[] | undefined;
}
export interface DescribeClientPropertiesResult {
  ClientPropertiesList?: ClientPropertiesResult[];
}
export interface DescribeConnectClientAddInsRequest {
  ResourceId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface DescribeConnectClientAddInsResult {
  AddIns?: ConnectClientAddIn[];
  NextToken?: string;
}
export interface DescribeConnectionAliasesRequest {
  AliasIds?: string[];
  ResourceId?: string;
  Limit?: number;
  NextToken?: string;
}
export interface DescribeConnectionAliasesResult {
  ConnectionAliases?: ConnectionAlias[];
  NextToken?: string;
}
export interface DescribeConnectionAliasPermissionsRequest {
  AliasId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface DescribeConnectionAliasPermissionsResult {
  AliasId?: string;
  ConnectionAliasPermissions?: ConnectionAliasPermission[];
  NextToken?: string;
}
export declare const ImageAssociatedResourceType: {
  readonly APPLICATION: "APPLICATION";
};
export type ImageAssociatedResourceType =
  (typeof ImageAssociatedResourceType)[keyof typeof ImageAssociatedResourceType];
export interface DescribeImageAssociationsRequest {
  ImageId: string | undefined;
  AssociatedResourceTypes: ImageAssociatedResourceType[] | undefined;
}
export interface ImageResourceAssociation {
  AssociatedResourceId?: string;
  AssociatedResourceType?: ImageAssociatedResourceType;
  Created?: Date;
  LastUpdatedTime?: Date;
  ImageId?: string;
  State?: AssociationState;
  StateReason?: AssociationStateReason;
}
export interface DescribeImageAssociationsResult {
  Associations?: ImageResourceAssociation[];
}
export interface DescribeIpGroupsRequest {
  GroupIds?: string[];
  NextToken?: string;
  MaxResults?: number;
}
export interface WorkspacesIpGroup {
  groupId?: string;
  groupName?: string;
  groupDesc?: string;
  userRules?: IpRuleItem[];
}
export interface DescribeIpGroupsResult {
  Result?: WorkspacesIpGroup[];
  NextToken?: string;
}
export interface DescribeTagsRequest {
  ResourceId: string | undefined;
}
export interface DescribeTagsResult {
  TagList?: Tag[];
}
export interface DescribeWorkspaceAssociationsRequest {
  WorkspaceId: string | undefined;
  AssociatedResourceTypes: WorkSpaceAssociatedResourceType[] | undefined;
}
export interface DescribeWorkspaceAssociationsResult {
  Associations?: WorkspaceResourceAssociation[];
}
export interface DescribeWorkspaceBundlesRequest {
  BundleIds?: string[];
  Owner?: string;
  NextToken?: string;
}
export interface DescribeWorkspaceBundlesResult {
  Bundles?: WorkspaceBundle[];
  NextToken?: string;
}
export interface DescribeWorkspaceDirectoriesRequest {
  DirectoryIds?: string[];
  Limit?: number;
  NextToken?: string;
}
export declare const WorkspaceDirectoryType: {
  readonly AD_CONNECTOR: "AD_CONNECTOR";
  readonly SIMPLE_AD: "SIMPLE_AD";
};
export type WorkspaceDirectoryType =
  (typeof WorkspaceDirectoryType)[keyof typeof WorkspaceDirectoryType];
export declare const SamlStatusEnum: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
  readonly ENABLED_WITH_DIRECTORY_LOGIN_FALLBACK: "ENABLED_WITH_DIRECTORY_LOGIN_FALLBACK";
};
export type SamlStatusEnum =
  (typeof SamlStatusEnum)[keyof typeof SamlStatusEnum];
export interface SamlProperties {
  Status?: SamlStatusEnum;
  UserAccessUrl?: string;
  RelayStateParameterName?: string;
}
export interface SelfservicePermissions {
  RestartWorkspace?: ReconnectEnum;
  IncreaseVolumeSize?: ReconnectEnum;
  ChangeComputeType?: ReconnectEnum;
  SwitchRunningMode?: ReconnectEnum;
  RebuildWorkspace?: ReconnectEnum;
}
export declare const WorkspaceDirectoryState: {
  readonly DEREGISTERED: "DEREGISTERED";
  readonly DEREGISTERING: "DEREGISTERING";
  readonly ERROR: "ERROR";
  readonly REGISTERED: "REGISTERED";
  readonly REGISTERING: "REGISTERING";
};
export type WorkspaceDirectoryState =
  (typeof WorkspaceDirectoryState)[keyof typeof WorkspaceDirectoryState];
export declare const Tenancy: {
  readonly DEDICATED: "DEDICATED";
  readonly SHARED: "SHARED";
};
export type Tenancy = (typeof Tenancy)[keyof typeof Tenancy];
export interface WorkspaceAccessProperties {
  DeviceTypeWindows?: AccessPropertyValue;
  DeviceTypeOsx?: AccessPropertyValue;
  DeviceTypeWeb?: AccessPropertyValue;
  DeviceTypeIos?: AccessPropertyValue;
  DeviceTypeAndroid?: AccessPropertyValue;
  DeviceTypeChromeOs?: AccessPropertyValue;
  DeviceTypeZeroClient?: AccessPropertyValue;
  DeviceTypeLinux?: AccessPropertyValue;
}
export interface WorkspaceDirectory {
  DirectoryId?: string;
  Alias?: string;
  DirectoryName?: string;
  RegistrationCode?: string;
  SubnetIds?: string[];
  DnsIpAddresses?: string[];
  CustomerUserName?: string;
  IamRoleId?: string;
  DirectoryType?: WorkspaceDirectoryType;
  WorkspaceSecurityGroupId?: string;
  State?: WorkspaceDirectoryState;
  WorkspaceCreationProperties?: DefaultWorkspaceCreationProperties;
  ipGroupIds?: string[];
  WorkspaceAccessProperties?: WorkspaceAccessProperties;
  Tenancy?: Tenancy;
  SelfservicePermissions?: SelfservicePermissions;
  SamlProperties?: SamlProperties;
  CertificateBasedAuthProperties?: CertificateBasedAuthProperties;
}
export interface DescribeWorkspaceDirectoriesResult {
  Directories?: WorkspaceDirectory[];
  NextToken?: string;
}
export interface DescribeWorkspaceImagePermissionsRequest {
  ImageId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ImagePermission {
  SharedAccountId?: string;
}
export interface DescribeWorkspaceImagePermissionsResult {
  ImageId?: string;
  ImagePermissions?: ImagePermission[];
  NextToken?: string;
}
export declare const ImageType: {
  readonly OWNED: "OWNED";
  readonly SHARED: "SHARED";
};
export type ImageType = (typeof ImageType)[keyof typeof ImageType];
export interface DescribeWorkspaceImagesRequest {
  ImageIds?: string[];
  ImageType?: ImageType;
  NextToken?: string;
  MaxResults?: number;
}
export declare const WorkspaceImageErrorDetailCode: {
  readonly ADDITIONAL_DRIVES_ATTACHED: "AdditionalDrivesAttached";
  readonly ANTI_VIRUS_INSTALLED: "AntiVirusInstalled";
  readonly AUTO_LOGON_ENABLED: "AutoLogonEnabled";
  readonly AUTO_MOUNT_DISABLED: "AutoMountDisabled";
  readonly AZURE_DOMAIN_JOINED: "AzureDomainJoined";
  readonly DHCP_DISABLED: "DHCPDisabled";
  readonly DISK_FREE_SPACE: "DiskFreeSpace";
  readonly DISK_SIZE_EXCEEDED: "DiskSizeExceeded";
  readonly DOMAIN_JOINED: "DomainJoined";
  readonly FIREWALL_ENABLED: "FirewallEnabled";
  readonly INCOMPATIBLE_PARTITIONING: "IncompatiblePartitioning";
  readonly IN_PLACE_UPGRADE: "InPlaceUpgrade";
  readonly MULTIPLE_BOOT_PARTITION: "MultipleBootPartition";
  readonly OFFICE_INSTALLED: "OfficeInstalled";
  readonly OS_NOT_SUPPORTED: "OSNotSupported";
  readonly OUTDATED_POWERSHELL_VERSION: "OutdatedPowershellVersion";
  readonly PCOIP_AGENT_INSTALLED: "PCoIPAgentInstalled";
  readonly PENDING_REBOOT: "PendingReboot";
  readonly REALTIME_UNIVERSAL_DISABLED: "RealTimeUniversalDisabled";
  readonly SIXTY_FOUR_BIT_OS: "Requires64BitOS";
  readonly UEFI_NOT_SUPPORTED: "UEFINotSupported";
  readonly VMWARE_TOOLS_INSTALLED: "VMWareToolsInstalled";
  readonly WINDOWS_UPDATES_ENABLED: "WindowsUpdatesEnabled";
  readonly WORKSPACES_BYOL_ACCOUNT_DISABLED: "WorkspacesBYOLAccountDisabled";
  readonly WORKSPACES_BYOL_ACCOUNT_NOT_FOUND: "WorkspacesBYOLAccountNotFound";
  readonly ZERO_REARM_COUNT: "ZeroRearmCount";
};
export type WorkspaceImageErrorDetailCode =
  (typeof WorkspaceImageErrorDetailCode)[keyof typeof WorkspaceImageErrorDetailCode];
export interface ErrorDetails {
  ErrorCode?: WorkspaceImageErrorDetailCode;
  ErrorMessage?: string;
}
export interface UpdateResult {
  UpdateAvailable?: boolean;
  Description?: string;
}
export interface WorkspaceImage {
  ImageId?: string;
  Name?: string;
  Description?: string;
  OperatingSystem?: OperatingSystem;
  State?: WorkspaceImageState;
  RequiredTenancy?: WorkspaceImageRequiredTenancy;
  ErrorCode?: string;
  ErrorMessage?: string;
  Created?: Date;
  OwnerAccountId?: string;
  Updates?: UpdateResult;
  ErrorDetails?: ErrorDetails[];
}
export interface DescribeWorkspaceImagesResult {
  Images?: WorkspaceImage[];
  NextToken?: string;
}
export interface DescribeWorkspacesRequest {
  WorkspaceIds?: string[];
  DirectoryId?: string;
  UserName?: string;
  BundleId?: string;
  Limit?: number;
  NextToken?: string;
  WorkspaceName?: string;
}
export interface DescribeWorkspacesResult {
  Workspaces?: Workspace[];
  NextToken?: string;
}
export interface DescribeWorkspacesConnectionStatusRequest {
  WorkspaceIds?: string[];
  NextToken?: string;
}
export interface WorkspaceConnectionStatus {
  WorkspaceId?: string;
  ConnectionState?: ConnectionState;
  ConnectionStateCheckTimestamp?: Date;
  LastKnownUserConnectionTimestamp?: Date;
}
export interface DescribeWorkspacesConnectionStatusResult {
  WorkspacesConnectionStatus?: WorkspaceConnectionStatus[];
  NextToken?: string;
}
export interface DescribeWorkspaceSnapshotsRequest {
  WorkspaceId: string | undefined;
}
export interface Snapshot {
  SnapshotTime?: Date;
}
export interface DescribeWorkspaceSnapshotsResult {
  RebuildSnapshots?: Snapshot[];
  RestoreSnapshots?: Snapshot[];
}
export interface DisassociateConnectionAliasRequest {
  AliasId: string | undefined;
}
export interface DisassociateConnectionAliasResult {}
export interface DisassociateIpGroupsRequest {
  DirectoryId: string | undefined;
  GroupIds: string[] | undefined;
}
export interface DisassociateIpGroupsResult {}
export interface DisassociateWorkspaceApplicationRequest {
  WorkspaceId: string | undefined;
  ApplicationId: string | undefined;
}
export interface DisassociateWorkspaceApplicationResult {
  Association?: WorkspaceResourceAssociation;
}
export interface FailedWorkspaceChangeRequest {
  WorkspaceId?: string;
  ErrorCode?: string;
  ErrorMessage?: string;
}
export interface GetAccountLinkRequest {
  LinkId?: string;
  LinkedAccountId?: string;
}
export interface GetAccountLinkResult {
  AccountLink?: AccountLink;
}
export interface IosImportClientBrandingAttributes {
  Logo?: Uint8Array;
  Logo2x?: Uint8Array;
  Logo3x?: Uint8Array;
  SupportEmail?: string;
  SupportLink?: string;
  ForgotPasswordLink?: string;
  LoginMessage?: Record<string, string>;
}
export interface ImportClientBrandingRequest {
  ResourceId: string | undefined;
  DeviceTypeWindows?: DefaultImportClientBrandingAttributes;
  DeviceTypeOsx?: DefaultImportClientBrandingAttributes;
  DeviceTypeAndroid?: DefaultImportClientBrandingAttributes;
  DeviceTypeIos?: IosImportClientBrandingAttributes;
  DeviceTypeLinux?: DefaultImportClientBrandingAttributes;
  DeviceTypeWeb?: DefaultImportClientBrandingAttributes;
}
export interface ImportClientBrandingResult {
  DeviceTypeWindows?: DefaultClientBrandingAttributes;
  DeviceTypeOsx?: DefaultClientBrandingAttributes;
  DeviceTypeAndroid?: DefaultClientBrandingAttributes;
  DeviceTypeIos?: IosClientBrandingAttributes;
  DeviceTypeLinux?: DefaultClientBrandingAttributes;
  DeviceTypeWeb?: DefaultClientBrandingAttributes;
}
export declare const WorkspaceImageIngestionProcess: {
  readonly BYOL_GRAPHICS: "BYOL_GRAPHICS";
  readonly BYOL_GRAPHICSPRO: "BYOL_GRAPHICSPRO";
  readonly BYOL_GRAPHICS_G4DN: "BYOL_GRAPHICS_G4DN";
  readonly BYOL_GRAPHICS_G4DN_BYOP: "BYOL_GRAPHICS_G4DN_BYOP";
  readonly BYOL_REGULAR: "BYOL_REGULAR";
  readonly BYOL_REGULAR_BYOP: "BYOL_REGULAR_BYOP";
  readonly BYOL_REGULAR_WSP: "BYOL_REGULAR_WSP";
};
export type WorkspaceImageIngestionProcess =
  (typeof WorkspaceImageIngestionProcess)[keyof typeof WorkspaceImageIngestionProcess];
export interface ImportWorkspaceImageRequest {
  Ec2ImageId: string | undefined;
  IngestionProcess: WorkspaceImageIngestionProcess | undefined;
  ImageName: string | undefined;
  ImageDescription: string | undefined;
  Tags?: Tag[];
  Applications?: Application[];
}
export interface ImportWorkspaceImageResult {
  ImageId?: string;
}
export interface ListAccountLinksRequest {
  LinkStatusFilter?: AccountLinkStatusEnum[];
  NextToken?: string;
  MaxResults?: number;
}
export interface ListAccountLinksResult {
  AccountLinks?: AccountLink[];
  NextToken?: string;
}
export interface ListAvailableManagementCidrRangesRequest {
  ManagementCidrRangeConstraint: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListAvailableManagementCidrRangesResult {
  ManagementCidrRanges?: string[];
  NextToken?: string;
}
export interface MigrateWorkspaceRequest {
  SourceWorkspaceId: string | undefined;
  BundleId: string | undefined;
}
export interface MigrateWorkspaceResult {
  SourceWorkspaceId?: string;
  TargetWorkspaceId?: string;
}
export declare class OperationInProgressException extends __BaseException {
  readonly name: "OperationInProgressException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<OperationInProgressException, __BaseException>
  );
}
export interface ModifyAccountRequest {
  DedicatedTenancySupport?: DedicatedTenancySupportEnum;
  DedicatedTenancyManagementCidrRange?: string;
}
export interface ModifyAccountResult {}
export interface ModifyCertificateBasedAuthPropertiesRequest {
  ResourceId: string | undefined;
  CertificateBasedAuthProperties?: CertificateBasedAuthProperties;
  PropertiesToDelete?: DeletableCertificateBasedAuthProperty[];
}
export interface ModifyCertificateBasedAuthPropertiesResult {}
export interface ModifyClientPropertiesRequest {
  ResourceId: string | undefined;
  ClientProperties: ClientProperties | undefined;
}
export interface ModifyClientPropertiesResult {}
export interface ModifySamlPropertiesRequest {
  ResourceId: string | undefined;
  SamlProperties?: SamlProperties;
  PropertiesToDelete?: DeletableSamlProperty[];
}
export interface ModifySamlPropertiesResult {}
export interface ModifySelfservicePermissionsRequest {
  ResourceId: string | undefined;
  SelfservicePermissions: SelfservicePermissions | undefined;
}
export interface ModifySelfservicePermissionsResult {}
export interface ModifyWorkspaceAccessPropertiesRequest {
  ResourceId: string | undefined;
  WorkspaceAccessProperties: WorkspaceAccessProperties | undefined;
}
export interface ModifyWorkspaceAccessPropertiesResult {}
export interface WorkspaceCreationProperties {
  EnableWorkDocs?: boolean;
  EnableInternetAccess?: boolean;
  DefaultOu?: string;
  CustomSecurityGroupId?: string;
  UserEnabledAsLocalAdministrator?: boolean;
  EnableMaintenanceMode?: boolean;
}
export interface ModifyWorkspaceCreationPropertiesRequest {
  ResourceId: string | undefined;
  WorkspaceCreationProperties: WorkspaceCreationProperties | undefined;
}
export interface ModifyWorkspaceCreationPropertiesResult {}
export interface ModifyWorkspacePropertiesRequest {
  WorkspaceId: string | undefined;
  WorkspaceProperties?: WorkspaceProperties;
  DataReplication?: DataReplication;
}
export interface ModifyWorkspacePropertiesResult {}
export declare class UnsupportedWorkspaceConfigurationException extends __BaseException {
  readonly name: "UnsupportedWorkspaceConfigurationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      UnsupportedWorkspaceConfigurationException,
      __BaseException
    >
  );
}
export declare const TargetWorkspaceState: {
  readonly ADMIN_MAINTENANCE: "ADMIN_MAINTENANCE";
  readonly AVAILABLE: "AVAILABLE";
};
export type TargetWorkspaceState =
  (typeof TargetWorkspaceState)[keyof typeof TargetWorkspaceState];
export interface ModifyWorkspaceStateRequest {
  WorkspaceId: string | undefined;
  WorkspaceState: TargetWorkspaceState | undefined;
}
export interface ModifyWorkspaceStateResult {}
export interface RebootRequest {
  WorkspaceId: string | undefined;
}
export interface RebootWorkspacesRequest {
  RebootWorkspaceRequests: RebootRequest[] | undefined;
}
export interface RebootWorkspacesResult {
  FailedRequests?: FailedWorkspaceChangeRequest[];
}
export interface RebuildRequest {
  WorkspaceId: string | undefined;
}
export interface RebuildWorkspacesRequest {
  RebuildWorkspaceRequests: RebuildRequest[] | undefined;
}
export interface RebuildWorkspacesResult {
  FailedRequests?: FailedWorkspaceChangeRequest[];
}
export interface RegisterWorkspaceDirectoryRequest {
  DirectoryId: string | undefined;
  SubnetIds?: string[];
  EnableWorkDocs: boolean | undefined;
  EnableSelfService?: boolean;
  Tenancy?: Tenancy;
  Tags?: Tag[];
}
export interface RegisterWorkspaceDirectoryResult {}
export declare class UnsupportedNetworkConfigurationException extends __BaseException {
  readonly name: "UnsupportedNetworkConfigurationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      UnsupportedNetworkConfigurationException,
      __BaseException
    >
  );
}
export declare class WorkspacesDefaultRoleNotFoundException extends __BaseException {
  readonly name: "WorkspacesDefaultRoleNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      WorkspacesDefaultRoleNotFoundException,
      __BaseException
    >
  );
}
export interface RejectAccountLinkInvitationRequest {
  LinkId: string | undefined;
  ClientToken?: string;
}
export interface RejectAccountLinkInvitationResult {
  AccountLink?: AccountLink;
}
export interface RestoreWorkspaceRequest {
  WorkspaceId: string | undefined;
}
export interface RestoreWorkspaceResult {}
export interface RevokeIpRulesRequest {
  GroupId: string | undefined;
  UserRules: string[] | undefined;
}
export interface RevokeIpRulesResult {}
export interface StartRequest {
  WorkspaceId?: string;
}
export interface StartWorkspacesRequest {
  StartWorkspaceRequests: StartRequest[] | undefined;
}
export interface StartWorkspacesResult {
  FailedRequests?: FailedWorkspaceChangeRequest[];
}
export interface StopRequest {
  WorkspaceId?: string;
}
export interface StopWorkspacesRequest {
  StopWorkspaceRequests: StopRequest[] | undefined;
}
export interface StopWorkspacesResult {
  FailedRequests?: FailedWorkspaceChangeRequest[];
}
export interface TerminateRequest {
  WorkspaceId: string | undefined;
}
export interface TerminateWorkspacesRequest {
  TerminateWorkspaceRequests: TerminateRequest[] | undefined;
}
export interface TerminateWorkspacesResult {
  FailedRequests?: FailedWorkspaceChangeRequest[];
}
export interface UpdateConnectClientAddInRequest {
  AddInId: string | undefined;
  ResourceId: string | undefined;
  Name?: string;
  URL?: string;
}
export interface UpdateConnectClientAddInResult {}
export interface UpdateConnectionAliasPermissionRequest {
  AliasId: string | undefined;
  ConnectionAliasPermission: ConnectionAliasPermission | undefined;
}
export interface UpdateConnectionAliasPermissionResult {}
export interface UpdateRulesOfIpGroupRequest {
  GroupId: string | undefined;
  UserRules: IpRuleItem[] | undefined;
}
export interface UpdateRulesOfIpGroupResult {}
export interface UpdateWorkspaceBundleRequest {
  BundleId?: string;
  ImageId?: string;
}
export interface UpdateWorkspaceBundleResult {}
export interface UpdateWorkspaceImagePermissionRequest {
  ImageId: string | undefined;
  AllowCopyImage: boolean | undefined;
  SharedAccountId: string | undefined;
}
export interface UpdateWorkspaceImagePermissionResult {}
