import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, parseRfc7231DateTime as __parseRfc7231DateTime, serializeFloat as __serializeFloat, strictParseLong as __strictParseLong, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { MediaLiveServiceException as __BaseException } from "../models/MediaLiveServiceException";
import { BadGatewayException, BadRequestException, ConflictException, ForbiddenException, GatewayTimeoutException, InternalServerErrorException, NotFoundException, TooManyRequestsException, UnprocessableEntityException, } from "../models/models_1";
export const se_AcceptInputDeviceTransferCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputDevices/{InputDeviceId}/accept");
    b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchDeleteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/batch/delete");
    let body;
    body = JSON.stringify(take(input, {
        channelIds: [, (_) => _json(_), `ChannelIds`],
        inputIds: [, (_) => _json(_), `InputIds`],
        inputSecurityGroupIds: [, (_) => _json(_), `InputSecurityGroupIds`],
        multiplexIds: [, (_) => _json(_), `MultiplexIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchStartCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/batch/start");
    let body;
    body = JSON.stringify(take(input, {
        channelIds: [, (_) => _json(_), `ChannelIds`],
        multiplexIds: [, (_) => _json(_), `MultiplexIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchStopCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/batch/stop");
    let body;
    body = JSON.stringify(take(input, {
        channelIds: [, (_) => _json(_), `ChannelIds`],
        multiplexIds: [, (_) => _json(_), `MultiplexIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchUpdateScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/channels/{ChannelId}/schedule");
    b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
    let body;
    body = JSON.stringify(take(input, {
        creates: [, (_) => se_BatchScheduleActionCreateRequest(_, context), `Creates`],
        deletes: [, (_) => se_BatchScheduleActionDeleteRequest(_, context), `Deletes`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CancelInputDeviceTransferCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputDevices/{InputDeviceId}/cancel");
    b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ClaimDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/claimDevice");
    let body;
    body = JSON.stringify(take(input, {
        id: [, , `Id`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/channels");
    let body;
    body = JSON.stringify(take(input, {
        cdiInputSpecification: [, (_) => se_CdiInputSpecification(_, context), `CdiInputSpecification`],
        channelClass: [, , `ChannelClass`],
        destinations: [, (_) => se___listOfOutputDestination(_, context), `Destinations`],
        encoderSettings: [, (_) => se_EncoderSettings(_, context), `EncoderSettings`],
        inputAttachments: [, (_) => se___listOfInputAttachment(_, context), `InputAttachments`],
        inputSpecification: [, (_) => se_InputSpecification(_, context), `InputSpecification`],
        logLevel: [, , `LogLevel`],
        maintenance: [, (_) => se_MaintenanceCreateSettings(_, context), `Maintenance`],
        name: [, , `Name`],
        requestId: [true, (_) => _ ?? generateIdempotencyToken(), `RequestId`],
        reserved: [, , `Reserved`],
        roleArn: [, , `RoleArn`],
        tags: [, (_) => _json(_), `Tags`],
        vpc: [, (_) => se_VpcOutputSettings(_, context), `Vpc`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateCloudWatchAlarmTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/cloudwatch-alarm-templates");
    let body;
    body = JSON.stringify(take(input, {
        comparisonOperator: [, , `ComparisonOperator`],
        datapointsToAlarm: [, , `DatapointsToAlarm`],
        description: [, , `Description`],
        evaluationPeriods: [, , `EvaluationPeriods`],
        groupIdentifier: [, , `GroupIdentifier`],
        metricName: [, , `MetricName`],
        name: [, , `Name`],
        period: [, , `Period`],
        statistic: [, , `Statistic`],
        tags: [, (_) => _json(_), `Tags`],
        targetResourceType: [, , `TargetResourceType`],
        threshold: [, (_) => __serializeFloat(_), `Threshold`],
        treatMissingData: [, , `TreatMissingData`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateCloudWatchAlarmTemplateGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/cloudwatch-alarm-template-groups");
    let body;
    body = JSON.stringify(take(input, {
        description: [, , `Description`],
        name: [, , `Name`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateEventBridgeRuleTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/eventbridge-rule-templates");
    let body;
    body = JSON.stringify(take(input, {
        description: [, , `Description`],
        eventTargets: [, (_) => se___listOfEventBridgeRuleTemplateTarget(_, context), `EventTargets`],
        eventType: [, , `EventType`],
        groupIdentifier: [, , `GroupIdentifier`],
        name: [, , `Name`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateEventBridgeRuleTemplateGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/eventbridge-rule-template-groups");
    let body;
    body = JSON.stringify(take(input, {
        description: [, , `Description`],
        name: [, , `Name`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateInputCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/inputs");
    let body;
    body = JSON.stringify(take(input, {
        destinations: [, (_) => se___listOfInputDestinationRequest(_, context), `Destinations`],
        inputDevices: [, (_) => se___listOfInputDeviceSettings(_, context), `InputDevices`],
        inputSecurityGroups: [, (_) => _json(_), `InputSecurityGroups`],
        mediaConnectFlows: [, (_) => se___listOfMediaConnectFlowRequest(_, context), `MediaConnectFlows`],
        name: [, , `Name`],
        requestId: [true, (_) => _ ?? generateIdempotencyToken(), `RequestId`],
        roleArn: [, , `RoleArn`],
        sources: [, (_) => se___listOfInputSourceRequest(_, context), `Sources`],
        tags: [, (_) => _json(_), `Tags`],
        type: [, , `Type`],
        vpc: [, (_) => se_InputVpcRequest(_, context), `Vpc`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateInputSecurityGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/inputSecurityGroups");
    let body;
    body = JSON.stringify(take(input, {
        tags: [, (_) => _json(_), `Tags`],
        whitelistRules: [, (_) => se___listOfInputWhitelistRuleCidr(_, context), `WhitelistRules`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMultiplexCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/multiplexes");
    let body;
    body = JSON.stringify(take(input, {
        availabilityZones: [, (_) => _json(_), `AvailabilityZones`],
        multiplexSettings: [, (_) => se_MultiplexSettings(_, context), `MultiplexSettings`],
        name: [, , `Name`],
        requestId: [true, (_) => _ ?? generateIdempotencyToken(), `RequestId`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMultiplexProgramCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/multiplexes/{MultiplexId}/programs");
    b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
    let body;
    body = JSON.stringify(take(input, {
        multiplexProgramSettings: [, (_) => se_MultiplexProgramSettings(_, context), `MultiplexProgramSettings`],
        programName: [, , `ProgramName`],
        requestId: [true, (_) => _ ?? generateIdempotencyToken(), `RequestId`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePartnerInputCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/inputs/{InputId}/partners");
    b.p("InputId", () => input.InputId, "{InputId}", false);
    let body;
    body = JSON.stringify(take(input, {
        requestId: [true, (_) => _ ?? generateIdempotencyToken(), `RequestId`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSignalMapCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/signal-maps");
    let body;
    body = JSON.stringify(take(input, {
        cloudWatchAlarmTemplateGroupIdentifiers: [, (_) => _json(_), `CloudWatchAlarmTemplateGroupIdentifiers`],
        description: [, , `Description`],
        discoveryEntryPointArn: [, , `DiscoveryEntryPointArn`],
        eventBridgeRuleTemplateGroupIdentifiers: [, (_) => _json(_), `EventBridgeRuleTemplateGroupIdentifiers`],
        name: [, , `Name`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateTagsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/channels/{ChannelId}");
    b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteCloudWatchAlarmTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/cloudwatch-alarm-templates/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteCloudWatchAlarmTemplateGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/cloudwatch-alarm-template-groups/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteEventBridgeRuleTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/eventbridge-rule-templates/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteEventBridgeRuleTemplateGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/eventbridge-rule-template-groups/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteInputCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputs/{InputId}");
    b.p("InputId", () => input.InputId, "{InputId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteInputSecurityGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputSecurityGroups/{InputSecurityGroupId}");
    b.p("InputSecurityGroupId", () => input.InputSecurityGroupId, "{InputSecurityGroupId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteMultiplexCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/multiplexes/{MultiplexId}");
    b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteMultiplexProgramCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/multiplexes/{MultiplexId}/programs/{ProgramName}");
    b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
    b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteReservationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/reservations/{ReservationId}");
    b.p("ReservationId", () => input.ReservationId, "{ReservationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/channels/{ChannelId}/schedule");
    b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteSignalMapCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/signal-maps/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteTagsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeAccountConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/accountConfiguration");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/channels/{ChannelId}");
    b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeInputCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputs/{InputId}");
    b.p("InputId", () => input.InputId, "{InputId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeInputDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputDevices/{InputDeviceId}");
    b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeInputDeviceThumbnailCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_a]: input[_A],
    });
    b.bp("/prod/inputDevices/{InputDeviceId}/thumbnailData");
    b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeInputSecurityGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputSecurityGroups/{InputSecurityGroupId}");
    b.p("InputSecurityGroupId", () => input.InputSecurityGroupId, "{InputSecurityGroupId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeMultiplexCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/multiplexes/{MultiplexId}");
    b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeMultiplexProgramCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/multiplexes/{MultiplexId}/programs/{ProgramName}");
    b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
    b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeOfferingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/offerings/{OfferingId}");
    b.p("OfferingId", () => input.OfferingId, "{OfferingId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeReservationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/reservations/{ReservationId}");
    b.p("ReservationId", () => input.ReservationId, "{ReservationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/channels/{ChannelId}/schedule");
    b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeThumbnailsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/channels/{ChannelId}/thumbnails");
    b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
    const query = map({
        [_pI]: [, __expectNonNull(input[_PI], `PipelineId`)],
        [_tT]: [, __expectNonNull(input[_TT], `ThumbnailType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetCloudWatchAlarmTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/cloudwatch-alarm-templates/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCloudWatchAlarmTemplateGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/cloudwatch-alarm-template-groups/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetEventBridgeRuleTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/eventbridge-rule-templates/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetEventBridgeRuleTemplateGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/eventbridge-rule-template-groups/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSignalMapCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/signal-maps/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListChannelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/channels");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCloudWatchAlarmTemplateGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/cloudwatch-alarm-template-groups");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_s]: [, input[_S]],
        [_sMI]: [, input[_SMI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCloudWatchAlarmTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/cloudwatch-alarm-templates");
    const query = map({
        [_gI]: [, input[_GI]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_s]: [, input[_S]],
        [_sMI]: [, input[_SMI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListEventBridgeRuleTemplateGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/eventbridge-rule-template-groups");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_sMI]: [, input[_SMI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListEventBridgeRuleTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/eventbridge-rule-templates");
    const query = map({
        [_gI]: [, input[_GI]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_sMI]: [, input[_SMI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListInputDevicesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputDevices");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListInputDeviceTransfersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputDeviceTransfers");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_tTr]: [, __expectNonNull(input[_TTr], `TransferType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListInputsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputs");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListInputSecurityGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputSecurityGroups");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMultiplexesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/multiplexes");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMultiplexProgramsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/multiplexes/{MultiplexId}/programs");
    b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListOfferingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/offerings");
    const query = map({
        [_cC]: [, input[_CC]],
        [_cCh]: [, input[_CCh]],
        [_c]: [, input[_C]],
        [_d]: [, input[_D]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_mB]: [, input[_MB]],
        [_mF]: [, input[_MF]],
        [_nT]: [, input[_NT]],
        [_r]: [, input[_R]],
        [_rT]: [, input[_RT]],
        [_sF]: [, input[_SF]],
        [_vQ]: [, input[_VQ]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListReservationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/reservations");
    const query = map({
        [_cC]: [, input[_CC]],
        [_c]: [, input[_C]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_mB]: [, input[_MB]],
        [_mF]: [, input[_MF]],
        [_nT]: [, input[_NT]],
        [_r]: [, input[_R]],
        [_rT]: [, input[_RT]],
        [_sF]: [, input[_SF]],
        [_vQ]: [, input[_VQ]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSignalMapsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/signal-maps");
    const query = map({
        [_cWATGI]: [, input[_CWATGI]],
        [_eBRTGI]: [, input[_EBRTGI]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PurchaseOfferingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/offerings/{OfferingId}/purchase");
    b.p("OfferingId", () => input.OfferingId, "{OfferingId}", false);
    let body;
    body = JSON.stringify(take(input, {
        count: [, , `Count`],
        name: [, , `Name`],
        renewalSettings: [, (_) => se_RenewalSettings(_, context), `RenewalSettings`],
        requestId: [true, (_) => _ ?? generateIdempotencyToken(), `RequestId`],
        start: [, , `Start`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RebootInputDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/inputDevices/{InputDeviceId}/reboot");
    b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        force: [, , `Force`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RejectInputDeviceTransferCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputDevices/{InputDeviceId}/reject");
    b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RestartChannelPipelinesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/channels/{ChannelId}/restartChannelPipelines");
    b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
    let body;
    body = JSON.stringify(take(input, {
        pipelineIds: [, (_) => _json(_), `PipelineIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/channels/{ChannelId}/start");
    b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartDeleteMonitorDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/signal-maps/{Identifier}/monitor-deployment");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_StartInputDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputDevices/{InputDeviceId}/start");
    b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartInputDeviceMaintenanceWindowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputDevices/{InputDeviceId}/startInputDeviceMaintenanceWindow");
    b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartMonitorDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/signal-maps/{Identifier}/monitor-deployment");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        dryRun: [, , `DryRun`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartMultiplexCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/multiplexes/{MultiplexId}/start");
    b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartUpdateSignalMapCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/signal-maps/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        cloudWatchAlarmTemplateGroupIdentifiers: [, (_) => _json(_), `CloudWatchAlarmTemplateGroupIdentifiers`],
        description: [, , `Description`],
        discoveryEntryPointArn: [, , `DiscoveryEntryPointArn`],
        eventBridgeRuleTemplateGroupIdentifiers: [, (_) => _json(_), `EventBridgeRuleTemplateGroupIdentifiers`],
        forceRediscovery: [, , `ForceRediscovery`],
        name: [, , `Name`],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_StopChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/channels/{ChannelId}/stop");
    b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopInputDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/inputDevices/{InputDeviceId}/stop");
    b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopMultiplexCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prod/multiplexes/{MultiplexId}/stop");
    b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TransferInputDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/inputDevices/{InputDeviceId}/transfer");
    b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        targetCustomerId: [, , `TargetCustomerId`],
        targetRegion: [, , `TargetRegion`],
        transferMessage: [, , `TransferMessage`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateAccountConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/accountConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        accountConfiguration: [, (_) => se_AccountConfiguration(_, context), `AccountConfiguration`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/channels/{ChannelId}");
    b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
    let body;
    body = JSON.stringify(take(input, {
        cdiInputSpecification: [, (_) => se_CdiInputSpecification(_, context), `CdiInputSpecification`],
        destinations: [, (_) => se___listOfOutputDestination(_, context), `Destinations`],
        encoderSettings: [, (_) => se_EncoderSettings(_, context), `EncoderSettings`],
        inputAttachments: [, (_) => se___listOfInputAttachment(_, context), `InputAttachments`],
        inputSpecification: [, (_) => se_InputSpecification(_, context), `InputSpecification`],
        logLevel: [, , `LogLevel`],
        maintenance: [, (_) => se_MaintenanceUpdateSettings(_, context), `Maintenance`],
        name: [, , `Name`],
        roleArn: [, , `RoleArn`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateChannelClassCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/channels/{ChannelId}/channelClass");
    b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
    let body;
    body = JSON.stringify(take(input, {
        channelClass: [, , `ChannelClass`],
        destinations: [, (_) => se___listOfOutputDestination(_, context), `Destinations`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateCloudWatchAlarmTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/cloudwatch-alarm-templates/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        comparisonOperator: [, , `ComparisonOperator`],
        datapointsToAlarm: [, , `DatapointsToAlarm`],
        description: [, , `Description`],
        evaluationPeriods: [, , `EvaluationPeriods`],
        groupIdentifier: [, , `GroupIdentifier`],
        metricName: [, , `MetricName`],
        name: [, , `Name`],
        period: [, , `Period`],
        statistic: [, , `Statistic`],
        targetResourceType: [, , `TargetResourceType`],
        threshold: [, (_) => __serializeFloat(_), `Threshold`],
        treatMissingData: [, , `TreatMissingData`],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateCloudWatchAlarmTemplateGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/cloudwatch-alarm-template-groups/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [, , `Description`],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateEventBridgeRuleTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/eventbridge-rule-templates/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [, , `Description`],
        eventTargets: [, (_) => se___listOfEventBridgeRuleTemplateTarget(_, context), `EventTargets`],
        eventType: [, , `EventType`],
        groupIdentifier: [, , `GroupIdentifier`],
        name: [, , `Name`],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateEventBridgeRuleTemplateGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/eventbridge-rule-template-groups/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [, , `Description`],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateInputCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/inputs/{InputId}");
    b.p("InputId", () => input.InputId, "{InputId}", false);
    let body;
    body = JSON.stringify(take(input, {
        destinations: [, (_) => se___listOfInputDestinationRequest(_, context), `Destinations`],
        inputDevices: [, (_) => se___listOfInputDeviceRequest(_, context), `InputDevices`],
        inputSecurityGroups: [, (_) => _json(_), `InputSecurityGroups`],
        mediaConnectFlows: [, (_) => se___listOfMediaConnectFlowRequest(_, context), `MediaConnectFlows`],
        name: [, , `Name`],
        roleArn: [, , `RoleArn`],
        sources: [, (_) => se___listOfInputSourceRequest(_, context), `Sources`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateInputDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/inputDevices/{InputDeviceId}");
    b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        availabilityZone: [, , `AvailabilityZone`],
        hdDeviceSettings: [, (_) => se_InputDeviceConfigurableSettings(_, context), `HdDeviceSettings`],
        name: [, , `Name`],
        uhdDeviceSettings: [, (_) => se_InputDeviceConfigurableSettings(_, context), `UhdDeviceSettings`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateInputSecurityGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/inputSecurityGroups/{InputSecurityGroupId}");
    b.p("InputSecurityGroupId", () => input.InputSecurityGroupId, "{InputSecurityGroupId}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: [, (_) => _json(_), `Tags`],
        whitelistRules: [, (_) => se___listOfInputWhitelistRuleCidr(_, context), `WhitelistRules`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateMultiplexCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/multiplexes/{MultiplexId}");
    b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
    let body;
    body = JSON.stringify(take(input, {
        multiplexSettings: [, (_) => se_MultiplexSettings(_, context), `MultiplexSettings`],
        name: [, , `Name`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateMultiplexProgramCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/multiplexes/{MultiplexId}/programs/{ProgramName}");
    b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
    b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
    let body;
    body = JSON.stringify(take(input, {
        multiplexProgramSettings: [, (_) => se_MultiplexProgramSettings(_, context), `MultiplexProgramSettings`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateReservationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prod/reservations/{ReservationId}");
    b.p("ReservationId", () => input.ReservationId, "{ReservationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        name: [, , `Name`],
        renewalSettings: [, (_) => se_RenewalSettings(_, context), `RenewalSettings`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_AcceptInputDeviceTransferCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_BatchDeleteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Failed: [, (_) => de___listOfBatchFailedResultModel(_, context), `failed`],
        Successful: [, (_) => de___listOfBatchSuccessfulResultModel(_, context), `successful`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchStartCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Failed: [, (_) => de___listOfBatchFailedResultModel(_, context), `failed`],
        Successful: [, (_) => de___listOfBatchSuccessfulResultModel(_, context), `successful`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchStopCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Failed: [, (_) => de___listOfBatchFailedResultModel(_, context), `failed`],
        Successful: [, (_) => de___listOfBatchSuccessfulResultModel(_, context), `successful`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchUpdateScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Creates: [, (_) => de_BatchScheduleActionCreateResult(_, context), `creates`],
        Deletes: [, (_) => de_BatchScheduleActionDeleteResult(_, context), `deletes`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CancelInputDeviceTransferCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_ClaimDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateChannelCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Channel: [, (_) => de_Channel(_, context), `channel`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateCloudWatchAlarmTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        ComparisonOperator: [, __expectString, `comparisonOperator`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        DatapointsToAlarm: [, __expectInt32, `datapointsToAlarm`],
        Description: [, __expectString, `description`],
        EvaluationPeriods: [, __expectInt32, `evaluationPeriods`],
        GroupId: [, __expectString, `groupId`],
        Id: [, __expectString, `id`],
        MetricName: [, __expectString, `metricName`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Period: [, __expectInt32, `period`],
        Statistic: [, __expectString, `statistic`],
        Tags: [, _json, `tags`],
        TargetResourceType: [, __expectString, `targetResourceType`],
        Threshold: [, __limitedParseDouble, `threshold`],
        TreatMissingData: [, __expectString, `treatMissingData`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateCloudWatchAlarmTemplateGroupCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        Id: [, __expectString, `id`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateEventBridgeRuleTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        EventTargets: [, (_) => de___listOfEventBridgeRuleTemplateTarget(_, context), `eventTargets`],
        EventType: [, __expectString, `eventType`],
        GroupId: [, __expectString, `groupId`],
        Id: [, __expectString, `id`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateEventBridgeRuleTemplateGroupCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        Id: [, __expectString, `id`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateInputCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Input: [, (_) => de_Input(_, context), `input`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateInputSecurityGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SecurityGroup: [, (_) => de_InputSecurityGroup(_, context), `securityGroup`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMultiplexCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Multiplex: [, (_) => de_Multiplex(_, context), `multiplex`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMultiplexProgramCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MultiplexProgram: [, (_) => de_MultiplexProgram(_, context), `multiplexProgram`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePartnerInputCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Input: [, (_) => de_Input(_, context), `input`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSignalMapCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CloudWatchAlarmTemplateGroupIds: [, _json, `cloudWatchAlarmTemplateGroupIds`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        DiscoveryEntryPointArn: [, __expectString, `discoveryEntryPointArn`],
        ErrorMessage: [, __expectString, `errorMessage`],
        EventBridgeRuleTemplateGroupIds: [, _json, `eventBridgeRuleTemplateGroupIds`],
        FailedMediaResourceMap: [, (_) => de_FailedMediaResourceMap(_, context), `failedMediaResourceMap`],
        Id: [, __expectString, `id`],
        LastDiscoveredAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `lastDiscoveredAt`],
        LastSuccessfulMonitorDeployment: [
            ,
            (_) => de_SuccessfulMonitorDeployment(_, context),
            `lastSuccessfulMonitorDeployment`,
        ],
        MediaResourceMap: [, (_) => de_MediaResourceMap(_, context), `mediaResourceMap`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        MonitorChangesPendingDeployment: [, __expectBoolean, `monitorChangesPendingDeployment`],
        MonitorDeployment: [, (_) => de_MonitorDeployment(_, context), `monitorDeployment`],
        Name: [, __expectString, `name`],
        Status: [, __expectString, `status`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateTagsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
        ChannelClass: [, __expectString, `channelClass`],
        Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
        EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
        EncoderSettings: [, (_) => de_EncoderSettings(_, context), `encoderSettings`],
        Id: [, __expectString, `id`],
        InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
        InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
        LogLevel: [, __expectString, `logLevel`],
        Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
        Name: [, __expectString, `name`],
        PipelineDetails: [, (_) => de___listOfPipelineDetail(_, context), `pipelineDetails`],
        PipelinesRunningCount: [, __expectInt32, `pipelinesRunningCount`],
        RoleArn: [, __expectString, `roleArn`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteCloudWatchAlarmTemplateCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteCloudWatchAlarmTemplateGroupCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteEventBridgeRuleTemplateCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteEventBridgeRuleTemplateGroupCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteInputCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteInputSecurityGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteMultiplexCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        AvailabilityZones: [, _json, `availabilityZones`],
        Destinations: [, (_) => de___listOfMultiplexOutputDestination(_, context), `destinations`],
        Id: [, __expectString, `id`],
        MultiplexSettings: [, (_) => de_MultiplexSettings(_, context), `multiplexSettings`],
        Name: [, __expectString, `name`],
        PipelinesRunningCount: [, __expectInt32, `pipelinesRunningCount`],
        ProgramCount: [, __expectInt32, `programCount`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteMultiplexProgramCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelId: [, __expectString, `channelId`],
        MultiplexProgramSettings: [, (_) => de_MultiplexProgramSettings(_, context), `multiplexProgramSettings`],
        PacketIdentifiersMap: [, (_) => de_MultiplexProgramPacketIdentifiersMap(_, context), `packetIdentifiersMap`],
        PipelineDetails: [, (_) => de___listOfMultiplexProgramPipelineDetail(_, context), `pipelineDetails`],
        ProgramName: [, __expectString, `programName`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteReservationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        Count: [, __expectInt32, `count`],
        CurrencyCode: [, __expectString, `currencyCode`],
        Duration: [, __expectInt32, `duration`],
        DurationUnits: [, __expectString, `durationUnits`],
        End: [, __expectString, `end`],
        FixedPrice: [, __limitedParseDouble, `fixedPrice`],
        Name: [, __expectString, `name`],
        OfferingDescription: [, __expectString, `offeringDescription`],
        OfferingId: [, __expectString, `offeringId`],
        OfferingType: [, __expectString, `offeringType`],
        Region: [, __expectString, `region`],
        RenewalSettings: [, (_) => de_RenewalSettings(_, context), `renewalSettings`],
        ReservationId: [, __expectString, `reservationId`],
        ResourceSpecification: [, (_) => de_ReservationResourceSpecification(_, context), `resourceSpecification`],
        Start: [, __expectString, `start`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        UsagePrice: [, __limitedParseDouble, `usagePrice`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSignalMapCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteTagsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeAccountConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccountConfiguration: [, (_) => de_AccountConfiguration(_, context), `accountConfiguration`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
        ChannelClass: [, __expectString, `channelClass`],
        Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
        EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
        EncoderSettings: [, (_) => de_EncoderSettings(_, context), `encoderSettings`],
        Id: [, __expectString, `id`],
        InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
        InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
        LogLevel: [, __expectString, `logLevel`],
        Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
        Name: [, __expectString, `name`],
        PipelineDetails: [, (_) => de___listOfPipelineDetail(_, context), `pipelineDetails`],
        PipelinesRunningCount: [, __expectInt32, `pipelinesRunningCount`],
        RoleArn: [, __expectString, `roleArn`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeInputCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        AttachedChannels: [, _json, `attachedChannels`],
        Destinations: [, (_) => de___listOfInputDestination(_, context), `destinations`],
        Id: [, __expectString, `id`],
        InputClass: [, __expectString, `inputClass`],
        InputDevices: [, (_) => de___listOfInputDeviceSettings(_, context), `inputDevices`],
        InputPartnerIds: [, _json, `inputPartnerIds`],
        InputSourceType: [, __expectString, `inputSourceType`],
        MediaConnectFlows: [, (_) => de___listOfMediaConnectFlow(_, context), `mediaConnectFlows`],
        Name: [, __expectString, `name`],
        RoleArn: [, __expectString, `roleArn`],
        SecurityGroups: [, _json, `securityGroups`],
        Sources: [, (_) => de___listOfInputSource(_, context), `sources`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        Type: [, __expectString, `type`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeInputDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        AvailabilityZone: [, __expectString, `availabilityZone`],
        ConnectionState: [, __expectString, `connectionState`],
        DeviceSettingsSyncState: [, __expectString, `deviceSettingsSyncState`],
        DeviceUpdateStatus: [, __expectString, `deviceUpdateStatus`],
        HdDeviceSettings: [, (_) => de_InputDeviceHdSettings(_, context), `hdDeviceSettings`],
        Id: [, __expectString, `id`],
        MacAddress: [, __expectString, `macAddress`],
        MedialiveInputArns: [, _json, `medialiveInputArns`],
        Name: [, __expectString, `name`],
        NetworkSettings: [, (_) => de_InputDeviceNetworkSettings(_, context), `networkSettings`],
        OutputType: [, __expectString, `outputType`],
        SerialNumber: [, __expectString, `serialNumber`],
        Tags: [, _json, `tags`],
        Type: [, __expectString, `type`],
        UhdDeviceSettings: [, (_) => de_InputDeviceUhdSettings(_, context), `uhdDeviceSettings`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeInputDeviceThumbnailCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_CT]: [, output.headers[_ct]],
        [_CL]: [() => void 0 !== output.headers[_cl], () => __strictParseLong(output.headers[_cl])],
        [_ET]: [, output.headers[_e]],
        [_LM]: [() => void 0 !== output.headers[_lm], () => __expectNonNull(__parseRfc7231DateTime(output.headers[_lm]))],
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.Body = data;
    return contents;
};
export const de_DescribeInputSecurityGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        Id: [, __expectString, `id`],
        Inputs: [, _json, `inputs`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        WhitelistRules: [, (_) => de___listOfInputWhitelistRule(_, context), `whitelistRules`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeMultiplexCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        AvailabilityZones: [, _json, `availabilityZones`],
        Destinations: [, (_) => de___listOfMultiplexOutputDestination(_, context), `destinations`],
        Id: [, __expectString, `id`],
        MultiplexSettings: [, (_) => de_MultiplexSettings(_, context), `multiplexSettings`],
        Name: [, __expectString, `name`],
        PipelinesRunningCount: [, __expectInt32, `pipelinesRunningCount`],
        ProgramCount: [, __expectInt32, `programCount`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeMultiplexProgramCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ChannelId: [, __expectString, `channelId`],
        MultiplexProgramSettings: [, (_) => de_MultiplexProgramSettings(_, context), `multiplexProgramSettings`],
        PacketIdentifiersMap: [, (_) => de_MultiplexProgramPacketIdentifiersMap(_, context), `packetIdentifiersMap`],
        PipelineDetails: [, (_) => de___listOfMultiplexProgramPipelineDetail(_, context), `pipelineDetails`],
        ProgramName: [, __expectString, `programName`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeOfferingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CurrencyCode: [, __expectString, `currencyCode`],
        Duration: [, __expectInt32, `duration`],
        DurationUnits: [, __expectString, `durationUnits`],
        FixedPrice: [, __limitedParseDouble, `fixedPrice`],
        OfferingDescription: [, __expectString, `offeringDescription`],
        OfferingId: [, __expectString, `offeringId`],
        OfferingType: [, __expectString, `offeringType`],
        Region: [, __expectString, `region`],
        ResourceSpecification: [, (_) => de_ReservationResourceSpecification(_, context), `resourceSpecification`],
        UsagePrice: [, __limitedParseDouble, `usagePrice`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeReservationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        Count: [, __expectInt32, `count`],
        CurrencyCode: [, __expectString, `currencyCode`],
        Duration: [, __expectInt32, `duration`],
        DurationUnits: [, __expectString, `durationUnits`],
        End: [, __expectString, `end`],
        FixedPrice: [, __limitedParseDouble, `fixedPrice`],
        Name: [, __expectString, `name`],
        OfferingDescription: [, __expectString, `offeringDescription`],
        OfferingId: [, __expectString, `offeringId`],
        OfferingType: [, __expectString, `offeringType`],
        Region: [, __expectString, `region`],
        RenewalSettings: [, (_) => de_RenewalSettings(_, context), `renewalSettings`],
        ReservationId: [, __expectString, `reservationId`],
        ResourceSpecification: [, (_) => de_ReservationResourceSpecification(_, context), `resourceSpecification`],
        Start: [, __expectString, `start`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        UsagePrice: [, __limitedParseDouble, `usagePrice`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: [, __expectString, `nextToken`],
        ScheduleActions: [, (_) => de___listOfScheduleAction(_, context), `scheduleActions`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeThumbnailsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ThumbnailDetails: [, (_) => de___listOfThumbnailDetail(_, context), `thumbnailDetails`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCloudWatchAlarmTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        ComparisonOperator: [, __expectString, `comparisonOperator`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        DatapointsToAlarm: [, __expectInt32, `datapointsToAlarm`],
        Description: [, __expectString, `description`],
        EvaluationPeriods: [, __expectInt32, `evaluationPeriods`],
        GroupId: [, __expectString, `groupId`],
        Id: [, __expectString, `id`],
        MetricName: [, __expectString, `metricName`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Period: [, __expectInt32, `period`],
        Statistic: [, __expectString, `statistic`],
        Tags: [, _json, `tags`],
        TargetResourceType: [, __expectString, `targetResourceType`],
        Threshold: [, __limitedParseDouble, `threshold`],
        TreatMissingData: [, __expectString, `treatMissingData`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCloudWatchAlarmTemplateGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        Id: [, __expectString, `id`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEventBridgeRuleTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        EventTargets: [, (_) => de___listOfEventBridgeRuleTemplateTarget(_, context), `eventTargets`],
        EventType: [, __expectString, `eventType`],
        GroupId: [, __expectString, `groupId`],
        Id: [, __expectString, `id`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEventBridgeRuleTemplateGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        Id: [, __expectString, `id`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSignalMapCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CloudWatchAlarmTemplateGroupIds: [, _json, `cloudWatchAlarmTemplateGroupIds`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        DiscoveryEntryPointArn: [, __expectString, `discoveryEntryPointArn`],
        ErrorMessage: [, __expectString, `errorMessage`],
        EventBridgeRuleTemplateGroupIds: [, _json, `eventBridgeRuleTemplateGroupIds`],
        FailedMediaResourceMap: [, (_) => de_FailedMediaResourceMap(_, context), `failedMediaResourceMap`],
        Id: [, __expectString, `id`],
        LastDiscoveredAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `lastDiscoveredAt`],
        LastSuccessfulMonitorDeployment: [
            ,
            (_) => de_SuccessfulMonitorDeployment(_, context),
            `lastSuccessfulMonitorDeployment`,
        ],
        MediaResourceMap: [, (_) => de_MediaResourceMap(_, context), `mediaResourceMap`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        MonitorChangesPendingDeployment: [, __expectBoolean, `monitorChangesPendingDeployment`],
        MonitorDeployment: [, (_) => de_MonitorDeployment(_, context), `monitorDeployment`],
        Name: [, __expectString, `name`],
        Status: [, __expectString, `status`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListChannelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Channels: [, (_) => de___listOfChannelSummary(_, context), `channels`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCloudWatchAlarmTemplateGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CloudWatchAlarmTemplateGroups: [
            ,
            (_) => de___listOfCloudWatchAlarmTemplateGroupSummary(_, context),
            `cloudWatchAlarmTemplateGroups`,
        ],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCloudWatchAlarmTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CloudWatchAlarmTemplates: [
            ,
            (_) => de___listOfCloudWatchAlarmTemplateSummary(_, context),
            `cloudWatchAlarmTemplates`,
        ],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEventBridgeRuleTemplateGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EventBridgeRuleTemplateGroups: [
            ,
            (_) => de___listOfEventBridgeRuleTemplateGroupSummary(_, context),
            `eventBridgeRuleTemplateGroups`,
        ],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEventBridgeRuleTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EventBridgeRuleTemplates: [
            ,
            (_) => de___listOfEventBridgeRuleTemplateSummary(_, context),
            `eventBridgeRuleTemplates`,
        ],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInputDevicesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InputDevices: [, (_) => de___listOfInputDeviceSummary(_, context), `inputDevices`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInputDeviceTransfersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InputDeviceTransfers: [, (_) => de___listOfTransferringInputDeviceSummary(_, context), `inputDeviceTransfers`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInputsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Inputs: [, (_) => de___listOfInput(_, context), `inputs`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInputSecurityGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InputSecurityGroups: [, (_) => de___listOfInputSecurityGroup(_, context), `inputSecurityGroups`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMultiplexesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Multiplexes: [, (_) => de___listOfMultiplexSummary(_, context), `multiplexes`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMultiplexProgramsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MultiplexPrograms: [, (_) => de___listOfMultiplexProgramSummary(_, context), `multiplexPrograms`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListOfferingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: [, __expectString, `nextToken`],
        Offerings: [, (_) => de___listOfOffering(_, context), `offerings`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListReservationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: [, __expectString, `nextToken`],
        Reservations: [, (_) => de___listOfReservation(_, context), `reservations`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSignalMapsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: [, __expectString, `nextToken`],
        SignalMaps: [, (_) => de___listOfSignalMapSummary(_, context), `signalMaps`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PurchaseOfferingCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Reservation: [, (_) => de_Reservation(_, context), `reservation`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RebootInputDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_RejectInputDeviceTransferCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_RestartChannelPipelinesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
        ChannelClass: [, __expectString, `channelClass`],
        Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
        EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
        EncoderSettings: [, (_) => de_EncoderSettings(_, context), `encoderSettings`],
        Id: [, __expectString, `id`],
        InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
        InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
        LogLevel: [, __expectString, `logLevel`],
        Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
        MaintenanceStatus: [, __expectString, `maintenanceStatus`],
        Name: [, __expectString, `name`],
        PipelineDetails: [, (_) => de___listOfPipelineDetail(_, context), `pipelineDetails`],
        PipelinesRunningCount: [, __expectInt32, `pipelinesRunningCount`],
        RoleArn: [, __expectString, `roleArn`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
        ChannelClass: [, __expectString, `channelClass`],
        Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
        EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
        EncoderSettings: [, (_) => de_EncoderSettings(_, context), `encoderSettings`],
        Id: [, __expectString, `id`],
        InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
        InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
        LogLevel: [, __expectString, `logLevel`],
        Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
        Name: [, __expectString, `name`],
        PipelineDetails: [, (_) => de___listOfPipelineDetail(_, context), `pipelineDetails`],
        PipelinesRunningCount: [, __expectInt32, `pipelinesRunningCount`],
        RoleArn: [, __expectString, `roleArn`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartDeleteMonitorDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CloudWatchAlarmTemplateGroupIds: [, _json, `cloudWatchAlarmTemplateGroupIds`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        DiscoveryEntryPointArn: [, __expectString, `discoveryEntryPointArn`],
        ErrorMessage: [, __expectString, `errorMessage`],
        EventBridgeRuleTemplateGroupIds: [, _json, `eventBridgeRuleTemplateGroupIds`],
        FailedMediaResourceMap: [, (_) => de_FailedMediaResourceMap(_, context), `failedMediaResourceMap`],
        Id: [, __expectString, `id`],
        LastDiscoveredAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `lastDiscoveredAt`],
        LastSuccessfulMonitorDeployment: [
            ,
            (_) => de_SuccessfulMonitorDeployment(_, context),
            `lastSuccessfulMonitorDeployment`,
        ],
        MediaResourceMap: [, (_) => de_MediaResourceMap(_, context), `mediaResourceMap`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        MonitorChangesPendingDeployment: [, __expectBoolean, `monitorChangesPendingDeployment`],
        MonitorDeployment: [, (_) => de_MonitorDeployment(_, context), `monitorDeployment`],
        Name: [, __expectString, `name`],
        Status: [, __expectString, `status`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartInputDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartInputDeviceMaintenanceWindowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartMonitorDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CloudWatchAlarmTemplateGroupIds: [, _json, `cloudWatchAlarmTemplateGroupIds`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        DiscoveryEntryPointArn: [, __expectString, `discoveryEntryPointArn`],
        ErrorMessage: [, __expectString, `errorMessage`],
        EventBridgeRuleTemplateGroupIds: [, _json, `eventBridgeRuleTemplateGroupIds`],
        FailedMediaResourceMap: [, (_) => de_FailedMediaResourceMap(_, context), `failedMediaResourceMap`],
        Id: [, __expectString, `id`],
        LastDiscoveredAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `lastDiscoveredAt`],
        LastSuccessfulMonitorDeployment: [
            ,
            (_) => de_SuccessfulMonitorDeployment(_, context),
            `lastSuccessfulMonitorDeployment`,
        ],
        MediaResourceMap: [, (_) => de_MediaResourceMap(_, context), `mediaResourceMap`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        MonitorChangesPendingDeployment: [, __expectBoolean, `monitorChangesPendingDeployment`],
        MonitorDeployment: [, (_) => de_MonitorDeployment(_, context), `monitorDeployment`],
        Name: [, __expectString, `name`],
        Status: [, __expectString, `status`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartMultiplexCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        AvailabilityZones: [, _json, `availabilityZones`],
        Destinations: [, (_) => de___listOfMultiplexOutputDestination(_, context), `destinations`],
        Id: [, __expectString, `id`],
        MultiplexSettings: [, (_) => de_MultiplexSettings(_, context), `multiplexSettings`],
        Name: [, __expectString, `name`],
        PipelinesRunningCount: [, __expectInt32, `pipelinesRunningCount`],
        ProgramCount: [, __expectInt32, `programCount`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartUpdateSignalMapCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CloudWatchAlarmTemplateGroupIds: [, _json, `cloudWatchAlarmTemplateGroupIds`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        DiscoveryEntryPointArn: [, __expectString, `discoveryEntryPointArn`],
        ErrorMessage: [, __expectString, `errorMessage`],
        EventBridgeRuleTemplateGroupIds: [, _json, `eventBridgeRuleTemplateGroupIds`],
        FailedMediaResourceMap: [, (_) => de_FailedMediaResourceMap(_, context), `failedMediaResourceMap`],
        Id: [, __expectString, `id`],
        LastDiscoveredAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `lastDiscoveredAt`],
        LastSuccessfulMonitorDeployment: [
            ,
            (_) => de_SuccessfulMonitorDeployment(_, context),
            `lastSuccessfulMonitorDeployment`,
        ],
        MediaResourceMap: [, (_) => de_MediaResourceMap(_, context), `mediaResourceMap`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        MonitorChangesPendingDeployment: [, __expectBoolean, `monitorChangesPendingDeployment`],
        MonitorDeployment: [, (_) => de_MonitorDeployment(_, context), `monitorDeployment`],
        Name: [, __expectString, `name`],
        Status: [, __expectString, `status`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
        ChannelClass: [, __expectString, `channelClass`],
        Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
        EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
        EncoderSettings: [, (_) => de_EncoderSettings(_, context), `encoderSettings`],
        Id: [, __expectString, `id`],
        InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
        InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
        LogLevel: [, __expectString, `logLevel`],
        Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
        Name: [, __expectString, `name`],
        PipelineDetails: [, (_) => de___listOfPipelineDetail(_, context), `pipelineDetails`],
        PipelinesRunningCount: [, __expectInt32, `pipelinesRunningCount`],
        RoleArn: [, __expectString, `roleArn`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopInputDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StopMultiplexCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        AvailabilityZones: [, _json, `availabilityZones`],
        Destinations: [, (_) => de___listOfMultiplexOutputDestination(_, context), `destinations`],
        Id: [, __expectString, `id`],
        MultiplexSettings: [, (_) => de_MultiplexSettings(_, context), `multiplexSettings`],
        Name: [, __expectString, `name`],
        PipelinesRunningCount: [, __expectInt32, `pipelinesRunningCount`],
        ProgramCount: [, __expectInt32, `programCount`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TransferInputDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAccountConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccountConfiguration: [, (_) => de_AccountConfiguration(_, context), `accountConfiguration`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Channel: [, (_) => de_Channel(_, context), `channel`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateChannelClassCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Channel: [, (_) => de_Channel(_, context), `channel`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateCloudWatchAlarmTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        ComparisonOperator: [, __expectString, `comparisonOperator`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        DatapointsToAlarm: [, __expectInt32, `datapointsToAlarm`],
        Description: [, __expectString, `description`],
        EvaluationPeriods: [, __expectInt32, `evaluationPeriods`],
        GroupId: [, __expectString, `groupId`],
        Id: [, __expectString, `id`],
        MetricName: [, __expectString, `metricName`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Period: [, __expectInt32, `period`],
        Statistic: [, __expectString, `statistic`],
        Tags: [, _json, `tags`],
        TargetResourceType: [, __expectString, `targetResourceType`],
        Threshold: [, __limitedParseDouble, `threshold`],
        TreatMissingData: [, __expectString, `treatMissingData`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateCloudWatchAlarmTemplateGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        Id: [, __expectString, `id`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateEventBridgeRuleTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        EventTargets: [, (_) => de___listOfEventBridgeRuleTemplateTarget(_, context), `eventTargets`],
        EventType: [, __expectString, `eventType`],
        GroupId: [, __expectString, `groupId`],
        Id: [, __expectString, `id`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateEventBridgeRuleTemplateGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        Id: [, __expectString, `id`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateInputCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Input: [, (_) => de_Input(_, context), `input`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateInputDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        AvailabilityZone: [, __expectString, `availabilityZone`],
        ConnectionState: [, __expectString, `connectionState`],
        DeviceSettingsSyncState: [, __expectString, `deviceSettingsSyncState`],
        DeviceUpdateStatus: [, __expectString, `deviceUpdateStatus`],
        HdDeviceSettings: [, (_) => de_InputDeviceHdSettings(_, context), `hdDeviceSettings`],
        Id: [, __expectString, `id`],
        MacAddress: [, __expectString, `macAddress`],
        MedialiveInputArns: [, _json, `medialiveInputArns`],
        Name: [, __expectString, `name`],
        NetworkSettings: [, (_) => de_InputDeviceNetworkSettings(_, context), `networkSettings`],
        OutputType: [, __expectString, `outputType`],
        SerialNumber: [, __expectString, `serialNumber`],
        Tags: [, _json, `tags`],
        Type: [, __expectString, `type`],
        UhdDeviceSettings: [, (_) => de_InputDeviceUhdSettings(_, context), `uhdDeviceSettings`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateInputSecurityGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SecurityGroup: [, (_) => de_InputSecurityGroup(_, context), `securityGroup`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateMultiplexCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Multiplex: [, (_) => de_Multiplex(_, context), `multiplex`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateMultiplexProgramCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MultiplexProgram: [, (_) => de_MultiplexProgram(_, context), `multiplexProgram`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateReservationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Reservation: [, (_) => de_Reservation(_, context), `reservation`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadGatewayException":
        case "com.amazonaws.medialive#BadGatewayException":
            throw await de_BadGatewayExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.medialive#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.medialive#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.medialive#ForbiddenException":
            throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "GatewayTimeoutException":
        case "com.amazonaws.medialive#GatewayTimeoutException":
            throw await de_GatewayTimeoutExceptionRes(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.medialive#InternalServerErrorException":
            throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.medialive#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.medialive#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnprocessableEntityException":
        case "com.amazonaws.medialive#UnprocessableEntityException":
            throw await de_UnprocessableEntityExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_BadGatewayExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new BadGatewayException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ForbiddenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_GatewayTimeoutExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new GatewayTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnprocessableEntityExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
        ValidationErrors: [, (_) => de___listOfValidationError(_, context), `validationErrors`],
    });
    Object.assign(contents, doc);
    const exception = new UnprocessableEntityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se___listOfAudioChannelMapping = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AudioChannelMapping(entry, context);
    });
};
const se___listOfAudioDescription = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AudioDescription(entry, context);
    });
};
const se___listOfAudioSelector = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AudioSelector(entry, context);
    });
};
const se___listOfAudioTrack = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AudioTrack(entry, context);
    });
};
const se___listOfCaptionDescription = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CaptionDescription(entry, context);
    });
};
const se___listOfCaptionLanguageMapping = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CaptionLanguageMapping(entry, context);
    });
};
const se___listOfCaptionSelector = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CaptionSelector(entry, context);
    });
};
const se___listOfColorCorrection = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ColorCorrection(entry, context);
    });
};
const se___listOfEventBridgeRuleTemplateTarget = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_EventBridgeRuleTemplateTarget(entry, context);
    });
};
const se___listOfFailoverCondition = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FailoverCondition(entry, context);
    });
};
const se___listOfInputAttachment = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InputAttachment(entry, context);
    });
};
const se___listOfInputChannelLevel = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InputChannelLevel(entry, context);
    });
};
const se___listOfInputDestinationRequest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InputDestinationRequest(entry, context);
    });
};
const se___listOfInputDeviceConfigurableAudioChannelPairConfig = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InputDeviceConfigurableAudioChannelPairConfig(entry, context);
    });
};
const se___listOfInputDeviceRequest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InputDeviceRequest(entry, context);
    });
};
const se___listOfInputDeviceSettings = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InputDeviceSettings(entry, context);
    });
};
const se___listOfInputSourceRequest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InputSourceRequest(entry, context);
    });
};
const se___listOfInputWhitelistRuleCidr = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InputWhitelistRuleCidr(entry, context);
    });
};
const se___listOfMediaConnectFlowRequest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MediaConnectFlowRequest(entry, context);
    });
};
const se___listOfMediaPackageOutputDestinationSettings = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MediaPackageOutputDestinationSettings(entry, context);
    });
};
const se___listOfOutput = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Output(entry, context);
    });
};
const se___listOfOutputDestination = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_OutputDestination(entry, context);
    });
};
const se___listOfOutputDestinationSettings = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_OutputDestinationSettings(entry, context);
    });
};
const se___listOfOutputGroup = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_OutputGroup(entry, context);
    });
};
const se___listOfPipelinePauseStateSettings = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PipelinePauseStateSettings(entry, context);
    });
};
const se___listOfScheduleAction = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ScheduleAction(entry, context);
    });
};
const se___listOfScte35Descriptor = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Scte35Descriptor(entry, context);
    });
};
const se___listOfVideoDescription = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_VideoDescription(entry, context);
    });
};
const se_AacSettings = (input, context) => {
    return take(input, {
        bitrate: [, __serializeFloat, `Bitrate`],
        codingMode: [, , `CodingMode`],
        inputType: [, , `InputType`],
        profile: [, , `Profile`],
        rateControlMode: [, , `RateControlMode`],
        rawFormat: [, , `RawFormat`],
        sampleRate: [, __serializeFloat, `SampleRate`],
        spec: [, , `Spec`],
        vbrQuality: [, , `VbrQuality`],
    });
};
const se_Ac3Settings = (input, context) => {
    return take(input, {
        attenuationControl: [, , `AttenuationControl`],
        bitrate: [, __serializeFloat, `Bitrate`],
        bitstreamMode: [, , `BitstreamMode`],
        codingMode: [, , `CodingMode`],
        dialnorm: [, , `Dialnorm`],
        drcProfile: [, , `DrcProfile`],
        lfeFilter: [, , `LfeFilter`],
        metadataControl: [, , `MetadataControl`],
    });
};
const se_AccountConfiguration = (input, context) => {
    return take(input, {
        kmsKeyId: [, , `KmsKeyId`],
    });
};
const se_AncillarySourceSettings = (input, context) => {
    return take(input, {
        sourceAncillaryChannelNumber: [, , `SourceAncillaryChannelNumber`],
    });
};
const se_ArchiveCdnSettings = (input, context) => {
    return take(input, {
        archiveS3Settings: [, (_) => se_ArchiveS3Settings(_, context), `ArchiveS3Settings`],
    });
};
const se_ArchiveContainerSettings = (input, context) => {
    return take(input, {
        m2tsSettings: [, (_) => se_M2tsSettings(_, context), `M2tsSettings`],
        rawSettings: [, _json, `RawSettings`],
    });
};
const se_ArchiveGroupSettings = (input, context) => {
    return take(input, {
        archiveCdnSettings: [, (_) => se_ArchiveCdnSettings(_, context), `ArchiveCdnSettings`],
        destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
        rolloverInterval: [, , `RolloverInterval`],
    });
};
const se_ArchiveOutputSettings = (input, context) => {
    return take(input, {
        containerSettings: [, (_) => se_ArchiveContainerSettings(_, context), `ContainerSettings`],
        extension: [, , `Extension`],
        nameModifier: [, , `NameModifier`],
    });
};
const se_ArchiveS3Settings = (input, context) => {
    return take(input, {
        cannedAcl: [, , `CannedAcl`],
    });
};
const se_AudioChannelMapping = (input, context) => {
    return take(input, {
        inputChannelLevels: [, (_) => se___listOfInputChannelLevel(_, context), `InputChannelLevels`],
        outputChannel: [, , `OutputChannel`],
    });
};
const se_AudioCodecSettings = (input, context) => {
    return take(input, {
        aacSettings: [, (_) => se_AacSettings(_, context), `AacSettings`],
        ac3Settings: [, (_) => se_Ac3Settings(_, context), `Ac3Settings`],
        eac3AtmosSettings: [, (_) => se_Eac3AtmosSettings(_, context), `Eac3AtmosSettings`],
        eac3Settings: [, (_) => se_Eac3Settings(_, context), `Eac3Settings`],
        mp2Settings: [, (_) => se_Mp2Settings(_, context), `Mp2Settings`],
        passThroughSettings: [, _json, `PassThroughSettings`],
        wavSettings: [, (_) => se_WavSettings(_, context), `WavSettings`],
    });
};
const se_AudioDescription = (input, context) => {
    return take(input, {
        audioDashRoles: [, _json, `AudioDashRoles`],
        audioNormalizationSettings: [, (_) => se_AudioNormalizationSettings(_, context), `AudioNormalizationSettings`],
        audioSelectorName: [, , `AudioSelectorName`],
        audioType: [, , `AudioType`],
        audioTypeControl: [, , `AudioTypeControl`],
        audioWatermarkingSettings: [, (_) => se_AudioWatermarkSettings(_, context), `AudioWatermarkingSettings`],
        codecSettings: [, (_) => se_AudioCodecSettings(_, context), `CodecSettings`],
        dvbDashAccessibility: [, , `DvbDashAccessibility`],
        languageCode: [, , `LanguageCode`],
        languageCodeControl: [, , `LanguageCodeControl`],
        name: [, , `Name`],
        remixSettings: [, (_) => se_RemixSettings(_, context), `RemixSettings`],
        streamName: [, , `StreamName`],
    });
};
const se_AudioDolbyEDecode = (input, context) => {
    return take(input, {
        programSelection: [, , `ProgramSelection`],
    });
};
const se_AudioHlsRenditionSelection = (input, context) => {
    return take(input, {
        groupId: [, , `GroupId`],
        name: [, , `Name`],
    });
};
const se_AudioLanguageSelection = (input, context) => {
    return take(input, {
        languageCode: [, , `LanguageCode`],
        languageSelectionPolicy: [, , `LanguageSelectionPolicy`],
    });
};
const se_AudioNormalizationSettings = (input, context) => {
    return take(input, {
        algorithm: [, , `Algorithm`],
        algorithmControl: [, , `AlgorithmControl`],
        targetLkfs: [, __serializeFloat, `TargetLkfs`],
    });
};
const se_AudioOnlyHlsSettings = (input, context) => {
    return take(input, {
        audioGroupId: [, , `AudioGroupId`],
        audioOnlyImage: [, (_) => se_InputLocation(_, context), `AudioOnlyImage`],
        audioTrackType: [, , `AudioTrackType`],
        segmentType: [, , `SegmentType`],
    });
};
const se_AudioPidSelection = (input, context) => {
    return take(input, {
        pid: [, , `Pid`],
    });
};
const se_AudioSelector = (input, context) => {
    return take(input, {
        name: [, , `Name`],
        selectorSettings: [, (_) => se_AudioSelectorSettings(_, context), `SelectorSettings`],
    });
};
const se_AudioSelectorSettings = (input, context) => {
    return take(input, {
        audioHlsRenditionSelection: [, (_) => se_AudioHlsRenditionSelection(_, context), `AudioHlsRenditionSelection`],
        audioLanguageSelection: [, (_) => se_AudioLanguageSelection(_, context), `AudioLanguageSelection`],
        audioPidSelection: [, (_) => se_AudioPidSelection(_, context), `AudioPidSelection`],
        audioTrackSelection: [, (_) => se_AudioTrackSelection(_, context), `AudioTrackSelection`],
    });
};
const se_AudioSilenceFailoverSettings = (input, context) => {
    return take(input, {
        audioSelectorName: [, , `AudioSelectorName`],
        audioSilenceThresholdMsec: [, , `AudioSilenceThresholdMsec`],
    });
};
const se_AudioTrack = (input, context) => {
    return take(input, {
        track: [, , `Track`],
    });
};
const se_AudioTrackSelection = (input, context) => {
    return take(input, {
        dolbyEDecode: [, (_) => se_AudioDolbyEDecode(_, context), `DolbyEDecode`],
        tracks: [, (_) => se___listOfAudioTrack(_, context), `Tracks`],
    });
};
const se_AudioWatermarkSettings = (input, context) => {
    return take(input, {
        nielsenWatermarksSettings: [, (_) => se_NielsenWatermarksSettings(_, context), `NielsenWatermarksSettings`],
    });
};
const se_AutomaticInputFailoverSettings = (input, context) => {
    return take(input, {
        errorClearTimeMsec: [, , `ErrorClearTimeMsec`],
        failoverConditions: [, (_) => se___listOfFailoverCondition(_, context), `FailoverConditions`],
        inputPreference: [, , `InputPreference`],
        secondaryInputId: [, , `SecondaryInputId`],
    });
};
const se_AvailBlanking = (input, context) => {
    return take(input, {
        availBlankingImage: [, (_) => se_InputLocation(_, context), `AvailBlankingImage`],
        state: [, , `State`],
    });
};
const se_AvailConfiguration = (input, context) => {
    return take(input, {
        availSettings: [, (_) => se_AvailSettings(_, context), `AvailSettings`],
    });
};
const se_AvailSettings = (input, context) => {
    return take(input, {
        esam: [, (_) => se_Esam(_, context), `Esam`],
        scte35SpliceInsert: [, (_) => se_Scte35SpliceInsert(_, context), `Scte35SpliceInsert`],
        scte35TimeSignalApos: [, (_) => se_Scte35TimeSignalApos(_, context), `Scte35TimeSignalApos`],
    });
};
const se_BatchScheduleActionCreateRequest = (input, context) => {
    return take(input, {
        scheduleActions: [, (_) => se___listOfScheduleAction(_, context), `ScheduleActions`],
    });
};
const se_BatchScheduleActionDeleteRequest = (input, context) => {
    return take(input, {
        actionNames: [, _json, `ActionNames`],
    });
};
const se_BlackoutSlate = (input, context) => {
    return take(input, {
        blackoutSlateImage: [, (_) => se_InputLocation(_, context), `BlackoutSlateImage`],
        networkEndBlackout: [, , `NetworkEndBlackout`],
        networkEndBlackoutImage: [, (_) => se_InputLocation(_, context), `NetworkEndBlackoutImage`],
        networkId: [, , `NetworkId`],
        state: [, , `State`],
    });
};
const se_BurnInDestinationSettings = (input, context) => {
    return take(input, {
        alignment: [, , `Alignment`],
        backgroundColor: [, , `BackgroundColor`],
        backgroundOpacity: [, , `BackgroundOpacity`],
        font: [, (_) => se_InputLocation(_, context), `Font`],
        fontColor: [, , `FontColor`],
        fontOpacity: [, , `FontOpacity`],
        fontResolution: [, , `FontResolution`],
        fontSize: [, , `FontSize`],
        outlineColor: [, , `OutlineColor`],
        outlineSize: [, , `OutlineSize`],
        shadowColor: [, , `ShadowColor`],
        shadowOpacity: [, , `ShadowOpacity`],
        shadowXOffset: [, , `ShadowXOffset`],
        shadowYOffset: [, , `ShadowYOffset`],
        teletextGridControl: [, , `TeletextGridControl`],
        xPosition: [, , `XPosition`],
        yPosition: [, , `YPosition`],
    });
};
const se_CaptionDescription = (input, context) => {
    return take(input, {
        accessibility: [, , `Accessibility`],
        captionDashRoles: [, _json, `CaptionDashRoles`],
        captionSelectorName: [, , `CaptionSelectorName`],
        destinationSettings: [, (_) => se_CaptionDestinationSettings(_, context), `DestinationSettings`],
        dvbDashAccessibility: [, , `DvbDashAccessibility`],
        languageCode: [, , `LanguageCode`],
        languageDescription: [, , `LanguageDescription`],
        name: [, , `Name`],
    });
};
const se_CaptionDestinationSettings = (input, context) => {
    return take(input, {
        aribDestinationSettings: [, _json, `AribDestinationSettings`],
        burnInDestinationSettings: [, (_) => se_BurnInDestinationSettings(_, context), `BurnInDestinationSettings`],
        dvbSubDestinationSettings: [, (_) => se_DvbSubDestinationSettings(_, context), `DvbSubDestinationSettings`],
        ebuTtDDestinationSettings: [, (_) => se_EbuTtDDestinationSettings(_, context), `EbuTtDDestinationSettings`],
        embeddedDestinationSettings: [, _json, `EmbeddedDestinationSettings`],
        embeddedPlusScte20DestinationSettings: [, _json, `EmbeddedPlusScte20DestinationSettings`],
        rtmpCaptionInfoDestinationSettings: [, _json, `RtmpCaptionInfoDestinationSettings`],
        scte20PlusEmbeddedDestinationSettings: [, _json, `Scte20PlusEmbeddedDestinationSettings`],
        scte27DestinationSettings: [, _json, `Scte27DestinationSettings`],
        smpteTtDestinationSettings: [, _json, `SmpteTtDestinationSettings`],
        teletextDestinationSettings: [, _json, `TeletextDestinationSettings`],
        ttmlDestinationSettings: [, (_) => se_TtmlDestinationSettings(_, context), `TtmlDestinationSettings`],
        webvttDestinationSettings: [, (_) => se_WebvttDestinationSettings(_, context), `WebvttDestinationSettings`],
    });
};
const se_CaptionLanguageMapping = (input, context) => {
    return take(input, {
        captionChannel: [, , `CaptionChannel`],
        languageCode: [, , `LanguageCode`],
        languageDescription: [, , `LanguageDescription`],
    });
};
const se_CaptionRectangle = (input, context) => {
    return take(input, {
        height: [, __serializeFloat, `Height`],
        leftOffset: [, __serializeFloat, `LeftOffset`],
        topOffset: [, __serializeFloat, `TopOffset`],
        width: [, __serializeFloat, `Width`],
    });
};
const se_CaptionSelector = (input, context) => {
    return take(input, {
        languageCode: [, , `LanguageCode`],
        name: [, , `Name`],
        selectorSettings: [, (_) => se_CaptionSelectorSettings(_, context), `SelectorSettings`],
    });
};
const se_CaptionSelectorSettings = (input, context) => {
    return take(input, {
        ancillarySourceSettings: [, (_) => se_AncillarySourceSettings(_, context), `AncillarySourceSettings`],
        aribSourceSettings: [, _json, `AribSourceSettings`],
        dvbSubSourceSettings: [, (_) => se_DvbSubSourceSettings(_, context), `DvbSubSourceSettings`],
        embeddedSourceSettings: [, (_) => se_EmbeddedSourceSettings(_, context), `EmbeddedSourceSettings`],
        scte20SourceSettings: [, (_) => se_Scte20SourceSettings(_, context), `Scte20SourceSettings`],
        scte27SourceSettings: [, (_) => se_Scte27SourceSettings(_, context), `Scte27SourceSettings`],
        teletextSourceSettings: [, (_) => se_TeletextSourceSettings(_, context), `TeletextSourceSettings`],
    });
};
const se_CdiInputSpecification = (input, context) => {
    return take(input, {
        resolution: [, , `Resolution`],
    });
};
const se_CmafIngestGroupSettings = (input, context) => {
    return take(input, {
        destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
        nielsenId3Behavior: [, , `NielsenId3Behavior`],
        scte35Type: [, , `Scte35Type`],
        segmentLength: [, , `SegmentLength`],
        segmentLengthUnits: [, , `SegmentLengthUnits`],
        sendDelayMs: [, , `SendDelayMs`],
    });
};
const se_CmafIngestOutputSettings = (input, context) => {
    return take(input, {
        nameModifier: [, , `NameModifier`],
    });
};
const se_ColorCorrection = (input, context) => {
    return take(input, {
        inputColorSpace: [, , `InputColorSpace`],
        outputColorSpace: [, , `OutputColorSpace`],
        uri: [, , `Uri`],
    });
};
const se_ColorCorrectionSettings = (input, context) => {
    return take(input, {
        globalColorCorrections: [, (_) => se___listOfColorCorrection(_, context), `GlobalColorCorrections`],
    });
};
const se_DvbNitSettings = (input, context) => {
    return take(input, {
        networkId: [, , `NetworkId`],
        networkName: [, , `NetworkName`],
        repInterval: [, , `RepInterval`],
    });
};
const se_DvbSdtSettings = (input, context) => {
    return take(input, {
        outputSdt: [, , `OutputSdt`],
        repInterval: [, , `RepInterval`],
        serviceName: [, , `ServiceName`],
        serviceProviderName: [, , `ServiceProviderName`],
    });
};
const se_DvbSubDestinationSettings = (input, context) => {
    return take(input, {
        alignment: [, , `Alignment`],
        backgroundColor: [, , `BackgroundColor`],
        backgroundOpacity: [, , `BackgroundOpacity`],
        font: [, (_) => se_InputLocation(_, context), `Font`],
        fontColor: [, , `FontColor`],
        fontOpacity: [, , `FontOpacity`],
        fontResolution: [, , `FontResolution`],
        fontSize: [, , `FontSize`],
        outlineColor: [, , `OutlineColor`],
        outlineSize: [, , `OutlineSize`],
        shadowColor: [, , `ShadowColor`],
        shadowOpacity: [, , `ShadowOpacity`],
        shadowXOffset: [, , `ShadowXOffset`],
        shadowYOffset: [, , `ShadowYOffset`],
        teletextGridControl: [, , `TeletextGridControl`],
        xPosition: [, , `XPosition`],
        yPosition: [, , `YPosition`],
    });
};
const se_DvbSubSourceSettings = (input, context) => {
    return take(input, {
        ocrLanguage: [, , `OcrLanguage`],
        pid: [, , `Pid`],
    });
};
const se_DvbTdtSettings = (input, context) => {
    return take(input, {
        repInterval: [, , `RepInterval`],
    });
};
const se_Eac3AtmosSettings = (input, context) => {
    return take(input, {
        bitrate: [, __serializeFloat, `Bitrate`],
        codingMode: [, , `CodingMode`],
        dialnorm: [, , `Dialnorm`],
        drcLine: [, , `DrcLine`],
        drcRf: [, , `DrcRf`],
        heightTrim: [, __serializeFloat, `HeightTrim`],
        surroundTrim: [, __serializeFloat, `SurroundTrim`],
    });
};
const se_Eac3Settings = (input, context) => {
    return take(input, {
        attenuationControl: [, , `AttenuationControl`],
        bitrate: [, __serializeFloat, `Bitrate`],
        bitstreamMode: [, , `BitstreamMode`],
        codingMode: [, , `CodingMode`],
        dcFilter: [, , `DcFilter`],
        dialnorm: [, , `Dialnorm`],
        drcLine: [, , `DrcLine`],
        drcRf: [, , `DrcRf`],
        lfeControl: [, , `LfeControl`],
        lfeFilter: [, , `LfeFilter`],
        loRoCenterMixLevel: [, __serializeFloat, `LoRoCenterMixLevel`],
        loRoSurroundMixLevel: [, __serializeFloat, `LoRoSurroundMixLevel`],
        ltRtCenterMixLevel: [, __serializeFloat, `LtRtCenterMixLevel`],
        ltRtSurroundMixLevel: [, __serializeFloat, `LtRtSurroundMixLevel`],
        metadataControl: [, , `MetadataControl`],
        passthroughControl: [, , `PassthroughControl`],
        phaseControl: [, , `PhaseControl`],
        stereoDownmix: [, , `StereoDownmix`],
        surroundExMode: [, , `SurroundExMode`],
        surroundMode: [, , `SurroundMode`],
    });
};
const se_EbuTtDDestinationSettings = (input, context) => {
    return take(input, {
        copyrightHolder: [, , `CopyrightHolder`],
        fillLineGap: [, , `FillLineGap`],
        fontFamily: [, , `FontFamily`],
        styleControl: [, , `StyleControl`],
    });
};
const se_EmbeddedSourceSettings = (input, context) => {
    return take(input, {
        convert608To708: [, , `Convert608To708`],
        scte20Detection: [, , `Scte20Detection`],
        source608ChannelNumber: [, , `Source608ChannelNumber`],
        source608TrackNumber: [, , `Source608TrackNumber`],
    });
};
const se_EncoderSettings = (input, context) => {
    return take(input, {
        audioDescriptions: [, (_) => se___listOfAudioDescription(_, context), `AudioDescriptions`],
        availBlanking: [, (_) => se_AvailBlanking(_, context), `AvailBlanking`],
        availConfiguration: [, (_) => se_AvailConfiguration(_, context), `AvailConfiguration`],
        blackoutSlate: [, (_) => se_BlackoutSlate(_, context), `BlackoutSlate`],
        captionDescriptions: [, (_) => se___listOfCaptionDescription(_, context), `CaptionDescriptions`],
        colorCorrectionSettings: [, (_) => se_ColorCorrectionSettings(_, context), `ColorCorrectionSettings`],
        featureActivations: [, (_) => se_FeatureActivations(_, context), `FeatureActivations`],
        globalConfiguration: [, (_) => se_GlobalConfiguration(_, context), `GlobalConfiguration`],
        motionGraphicsConfiguration: [, (_) => se_MotionGraphicsConfiguration(_, context), `MotionGraphicsConfiguration`],
        nielsenConfiguration: [, (_) => se_NielsenConfiguration(_, context), `NielsenConfiguration`],
        outputGroups: [, (_) => se___listOfOutputGroup(_, context), `OutputGroups`],
        thumbnailConfiguration: [, (_) => se_ThumbnailConfiguration(_, context), `ThumbnailConfiguration`],
        timecodeConfig: [, (_) => se_TimecodeConfig(_, context), `TimecodeConfig`],
        videoDescriptions: [, (_) => se___listOfVideoDescription(_, context), `VideoDescriptions`],
    });
};
const se_EpochLockingSettings = (input, context) => {
    return take(input, {
        customEpoch: [, , `CustomEpoch`],
        jamSyncTime: [, , `JamSyncTime`],
    });
};
const se_Esam = (input, context) => {
    return take(input, {
        acquisitionPointId: [, , `AcquisitionPointId`],
        adAvailOffset: [, , `AdAvailOffset`],
        passwordParam: [, , `PasswordParam`],
        poisEndpoint: [, , `PoisEndpoint`],
        username: [, , `Username`],
        zoneIdentity: [, , `ZoneIdentity`],
    });
};
const se_EventBridgeRuleTemplateTarget = (input, context) => {
    return take(input, {
        arn: [, , `Arn`],
    });
};
const se_FailoverCondition = (input, context) => {
    return take(input, {
        failoverConditionSettings: [, (_) => se_FailoverConditionSettings(_, context), `FailoverConditionSettings`],
    });
};
const se_FailoverConditionSettings = (input, context) => {
    return take(input, {
        audioSilenceSettings: [, (_) => se_AudioSilenceFailoverSettings(_, context), `AudioSilenceSettings`],
        inputLossSettings: [, (_) => se_InputLossFailoverSettings(_, context), `InputLossSettings`],
        videoBlackSettings: [, (_) => se_VideoBlackFailoverSettings(_, context), `VideoBlackSettings`],
    });
};
const se_FeatureActivations = (input, context) => {
    return take(input, {
        inputPrepareScheduleActions: [, , `InputPrepareScheduleActions`],
        outputStaticImageOverlayScheduleActions: [, , `OutputStaticImageOverlayScheduleActions`],
    });
};
const se_FecOutputSettings = (input, context) => {
    return take(input, {
        columnDepth: [, , `ColumnDepth`],
        includeFec: [, , `IncludeFec`],
        rowLength: [, , `RowLength`],
    });
};
const se_FixedModeScheduleActionStartSettings = (input, context) => {
    return take(input, {
        time: [, , `Time`],
    });
};
const se_Fmp4HlsSettings = (input, context) => {
    return take(input, {
        audioRenditionSets: [, , `AudioRenditionSets`],
        nielsenId3Behavior: [, , `NielsenId3Behavior`],
        timedMetadataBehavior: [, , `TimedMetadataBehavior`],
    });
};
const se_FollowModeScheduleActionStartSettings = (input, context) => {
    return take(input, {
        followPoint: [, , `FollowPoint`],
        referenceActionName: [, , `ReferenceActionName`],
    });
};
const se_FrameCaptureCdnSettings = (input, context) => {
    return take(input, {
        frameCaptureS3Settings: [, (_) => se_FrameCaptureS3Settings(_, context), `FrameCaptureS3Settings`],
    });
};
const se_FrameCaptureGroupSettings = (input, context) => {
    return take(input, {
        destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
        frameCaptureCdnSettings: [, (_) => se_FrameCaptureCdnSettings(_, context), `FrameCaptureCdnSettings`],
    });
};
const se_FrameCaptureOutputSettings = (input, context) => {
    return take(input, {
        nameModifier: [, , `NameModifier`],
    });
};
const se_FrameCaptureS3Settings = (input, context) => {
    return take(input, {
        cannedAcl: [, , `CannedAcl`],
    });
};
const se_FrameCaptureSettings = (input, context) => {
    return take(input, {
        captureInterval: [, , `CaptureInterval`],
        captureIntervalUnits: [, , `CaptureIntervalUnits`],
        timecodeBurninSettings: [, (_) => se_TimecodeBurninSettings(_, context), `TimecodeBurninSettings`],
    });
};
const se_GlobalConfiguration = (input, context) => {
    return take(input, {
        initialAudioGain: [, , `InitialAudioGain`],
        inputEndAction: [, , `InputEndAction`],
        inputLossBehavior: [, (_) => se_InputLossBehavior(_, context), `InputLossBehavior`],
        outputLockingMode: [, , `OutputLockingMode`],
        outputLockingSettings: [, (_) => se_OutputLockingSettings(_, context), `OutputLockingSettings`],
        outputTimingSource: [, , `OutputTimingSource`],
        supportLowFramerateInputs: [, , `SupportLowFramerateInputs`],
    });
};
const se_H264ColorSpaceSettings = (input, context) => {
    return take(input, {
        colorSpacePassthroughSettings: [, _json, `ColorSpacePassthroughSettings`],
        rec601Settings: [, _json, `Rec601Settings`],
        rec709Settings: [, _json, `Rec709Settings`],
    });
};
const se_H264FilterSettings = (input, context) => {
    return take(input, {
        temporalFilterSettings: [, (_) => se_TemporalFilterSettings(_, context), `TemporalFilterSettings`],
    });
};
const se_H264Settings = (input, context) => {
    return take(input, {
        adaptiveQuantization: [, , `AdaptiveQuantization`],
        afdSignaling: [, , `AfdSignaling`],
        bitrate: [, , `Bitrate`],
        bufFillPct: [, , `BufFillPct`],
        bufSize: [, , `BufSize`],
        colorMetadata: [, , `ColorMetadata`],
        colorSpaceSettings: [, (_) => se_H264ColorSpaceSettings(_, context), `ColorSpaceSettings`],
        entropyEncoding: [, , `EntropyEncoding`],
        filterSettings: [, (_) => se_H264FilterSettings(_, context), `FilterSettings`],
        fixedAfd: [, , `FixedAfd`],
        flickerAq: [, , `FlickerAq`],
        forceFieldPictures: [, , `ForceFieldPictures`],
        framerateControl: [, , `FramerateControl`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopBReference: [, , `GopBReference`],
        gopClosedCadence: [, , `GopClosedCadence`],
        gopNumBFrames: [, , `GopNumBFrames`],
        gopSize: [, __serializeFloat, `GopSize`],
        gopSizeUnits: [, , `GopSizeUnits`],
        level: [, , `Level`],
        lookAheadRateControl: [, , `LookAheadRateControl`],
        maxBitrate: [, , `MaxBitrate`],
        minIInterval: [, , `MinIInterval`],
        numRefFrames: [, , `NumRefFrames`],
        parControl: [, , `ParControl`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        profile: [, , `Profile`],
        qualityLevel: [, , `QualityLevel`],
        qvbrQualityLevel: [, , `QvbrQualityLevel`],
        rateControlMode: [, , `RateControlMode`],
        scanType: [, , `ScanType`],
        sceneChangeDetect: [, , `SceneChangeDetect`],
        slices: [, , `Slices`],
        softness: [, , `Softness`],
        spatialAq: [, , `SpatialAq`],
        subgopLength: [, , `SubgopLength`],
        syntax: [, , `Syntax`],
        temporalAq: [, , `TemporalAq`],
        timecodeBurninSettings: [, (_) => se_TimecodeBurninSettings(_, context), `TimecodeBurninSettings`],
        timecodeInsertion: [, , `TimecodeInsertion`],
    });
};
const se_H265ColorSpaceSettings = (input, context) => {
    return take(input, {
        colorSpacePassthroughSettings: [, _json, `ColorSpacePassthroughSettings`],
        dolbyVision81Settings: [, _json, `DolbyVision81Settings`],
        hdr10Settings: [, (_) => se_Hdr10Settings(_, context), `Hdr10Settings`],
        rec601Settings: [, _json, `Rec601Settings`],
        rec709Settings: [, _json, `Rec709Settings`],
    });
};
const se_H265FilterSettings = (input, context) => {
    return take(input, {
        temporalFilterSettings: [, (_) => se_TemporalFilterSettings(_, context), `TemporalFilterSettings`],
    });
};
const se_H265Settings = (input, context) => {
    return take(input, {
        adaptiveQuantization: [, , `AdaptiveQuantization`],
        afdSignaling: [, , `AfdSignaling`],
        alternativeTransferFunction: [, , `AlternativeTransferFunction`],
        bitrate: [, , `Bitrate`],
        bufSize: [, , `BufSize`],
        colorMetadata: [, , `ColorMetadata`],
        colorSpaceSettings: [, (_) => se_H265ColorSpaceSettings(_, context), `ColorSpaceSettings`],
        filterSettings: [, (_) => se_H265FilterSettings(_, context), `FilterSettings`],
        fixedAfd: [, , `FixedAfd`],
        flickerAq: [, , `FlickerAq`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopClosedCadence: [, , `GopClosedCadence`],
        gopSize: [, __serializeFloat, `GopSize`],
        gopSizeUnits: [, , `GopSizeUnits`],
        level: [, , `Level`],
        lookAheadRateControl: [, , `LookAheadRateControl`],
        maxBitrate: [, , `MaxBitrate`],
        minIInterval: [, , `MinIInterval`],
        mvOverPictureBoundaries: [, , `MvOverPictureBoundaries`],
        mvTemporalPredictor: [, , `MvTemporalPredictor`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        profile: [, , `Profile`],
        qvbrQualityLevel: [, , `QvbrQualityLevel`],
        rateControlMode: [, , `RateControlMode`],
        scanType: [, , `ScanType`],
        sceneChangeDetect: [, , `SceneChangeDetect`],
        slices: [, , `Slices`],
        tier: [, , `Tier`],
        tileHeight: [, , `TileHeight`],
        tilePadding: [, , `TilePadding`],
        tileWidth: [, , `TileWidth`],
        timecodeBurninSettings: [, (_) => se_TimecodeBurninSettings(_, context), `TimecodeBurninSettings`],
        timecodeInsertion: [, , `TimecodeInsertion`],
        treeblockSize: [, , `TreeblockSize`],
    });
};
const se_Hdr10Settings = (input, context) => {
    return take(input, {
        maxCll: [, , `MaxCll`],
        maxFall: [, , `MaxFall`],
    });
};
const se_HlsAkamaiSettings = (input, context) => {
    return take(input, {
        connectionRetryInterval: [, , `ConnectionRetryInterval`],
        filecacheDuration: [, , `FilecacheDuration`],
        httpTransferMode: [, , `HttpTransferMode`],
        numRetries: [, , `NumRetries`],
        restartDelay: [, , `RestartDelay`],
        salt: [, , `Salt`],
        token: [, , `Token`],
    });
};
const se_HlsBasicPutSettings = (input, context) => {
    return take(input, {
        connectionRetryInterval: [, , `ConnectionRetryInterval`],
        filecacheDuration: [, , `FilecacheDuration`],
        numRetries: [, , `NumRetries`],
        restartDelay: [, , `RestartDelay`],
    });
};
const se_HlsCdnSettings = (input, context) => {
    return take(input, {
        hlsAkamaiSettings: [, (_) => se_HlsAkamaiSettings(_, context), `HlsAkamaiSettings`],
        hlsBasicPutSettings: [, (_) => se_HlsBasicPutSettings(_, context), `HlsBasicPutSettings`],
        hlsMediaStoreSettings: [, (_) => se_HlsMediaStoreSettings(_, context), `HlsMediaStoreSettings`],
        hlsS3Settings: [, (_) => se_HlsS3Settings(_, context), `HlsS3Settings`],
        hlsWebdavSettings: [, (_) => se_HlsWebdavSettings(_, context), `HlsWebdavSettings`],
    });
};
const se_HlsGroupSettings = (input, context) => {
    return take(input, {
        adMarkers: [, _json, `AdMarkers`],
        baseUrlContent: [, , `BaseUrlContent`],
        baseUrlContent1: [, , `BaseUrlContent1`],
        baseUrlManifest: [, , `BaseUrlManifest`],
        baseUrlManifest1: [, , `BaseUrlManifest1`],
        captionLanguageMappings: [, (_) => se___listOfCaptionLanguageMapping(_, context), `CaptionLanguageMappings`],
        captionLanguageSetting: [, , `CaptionLanguageSetting`],
        clientCache: [, , `ClientCache`],
        codecSpecification: [, , `CodecSpecification`],
        constantIv: [, , `ConstantIv`],
        destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
        directoryStructure: [, , `DirectoryStructure`],
        discontinuityTags: [, , `DiscontinuityTags`],
        encryptionType: [, , `EncryptionType`],
        hlsCdnSettings: [, (_) => se_HlsCdnSettings(_, context), `HlsCdnSettings`],
        hlsId3SegmentTagging: [, , `HlsId3SegmentTagging`],
        iFrameOnlyPlaylists: [, , `IFrameOnlyPlaylists`],
        incompleteSegmentBehavior: [, , `IncompleteSegmentBehavior`],
        indexNSegments: [, , `IndexNSegments`],
        inputLossAction: [, , `InputLossAction`],
        ivInManifest: [, , `IvInManifest`],
        ivSource: [, , `IvSource`],
        keepSegments: [, , `KeepSegments`],
        keyFormat: [, , `KeyFormat`],
        keyFormatVersions: [, , `KeyFormatVersions`],
        keyProviderSettings: [, (_) => se_KeyProviderSettings(_, context), `KeyProviderSettings`],
        manifestCompression: [, , `ManifestCompression`],
        manifestDurationFormat: [, , `ManifestDurationFormat`],
        minSegmentLength: [, , `MinSegmentLength`],
        mode: [, , `Mode`],
        outputSelection: [, , `OutputSelection`],
        programDateTime: [, , `ProgramDateTime`],
        programDateTimeClock: [, , `ProgramDateTimeClock`],
        programDateTimePeriod: [, , `ProgramDateTimePeriod`],
        redundantManifest: [, , `RedundantManifest`],
        segmentLength: [, , `SegmentLength`],
        segmentationMode: [, , `SegmentationMode`],
        segmentsPerSubdirectory: [, , `SegmentsPerSubdirectory`],
        streamInfResolution: [, , `StreamInfResolution`],
        timedMetadataId3Frame: [, , `TimedMetadataId3Frame`],
        timedMetadataId3Period: [, , `TimedMetadataId3Period`],
        timestampDeltaMilliseconds: [, , `TimestampDeltaMilliseconds`],
        tsFileMode: [, , `TsFileMode`],
    });
};
const se_HlsId3SegmentTaggingScheduleActionSettings = (input, context) => {
    return take(input, {
        id3: [, , `Id3`],
        tag: [, , `Tag`],
    });
};
const se_HlsInputSettings = (input, context) => {
    return take(input, {
        bandwidth: [, , `Bandwidth`],
        bufferSegments: [, , `BufferSegments`],
        retries: [, , `Retries`],
        retryInterval: [, , `RetryInterval`],
        scte35Source: [, , `Scte35Source`],
    });
};
const se_HlsMediaStoreSettings = (input, context) => {
    return take(input, {
        connectionRetryInterval: [, , `ConnectionRetryInterval`],
        filecacheDuration: [, , `FilecacheDuration`],
        mediaStoreStorageClass: [, , `MediaStoreStorageClass`],
        numRetries: [, , `NumRetries`],
        restartDelay: [, , `RestartDelay`],
    });
};
const se_HlsOutputSettings = (input, context) => {
    return take(input, {
        h265PackagingType: [, , `H265PackagingType`],
        hlsSettings: [, (_) => se_HlsSettings(_, context), `HlsSettings`],
        nameModifier: [, , `NameModifier`],
        segmentModifier: [, , `SegmentModifier`],
    });
};
const se_HlsS3Settings = (input, context) => {
    return take(input, {
        cannedAcl: [, , `CannedAcl`],
    });
};
const se_HlsSettings = (input, context) => {
    return take(input, {
        audioOnlyHlsSettings: [, (_) => se_AudioOnlyHlsSettings(_, context), `AudioOnlyHlsSettings`],
        fmp4HlsSettings: [, (_) => se_Fmp4HlsSettings(_, context), `Fmp4HlsSettings`],
        frameCaptureHlsSettings: [, _json, `FrameCaptureHlsSettings`],
        standardHlsSettings: [, (_) => se_StandardHlsSettings(_, context), `StandardHlsSettings`],
    });
};
const se_HlsTimedMetadataScheduleActionSettings = (input, context) => {
    return take(input, {
        id3: [, , `Id3`],
    });
};
const se_HlsWebdavSettings = (input, context) => {
    return take(input, {
        connectionRetryInterval: [, , `ConnectionRetryInterval`],
        filecacheDuration: [, , `FilecacheDuration`],
        httpTransferMode: [, , `HttpTransferMode`],
        numRetries: [, , `NumRetries`],
        restartDelay: [, , `RestartDelay`],
    });
};
const se_InputAttachment = (input, context) => {
    return take(input, {
        automaticInputFailoverSettings: [
            ,
            (_) => se_AutomaticInputFailoverSettings(_, context),
            `AutomaticInputFailoverSettings`,
        ],
        inputAttachmentName: [, , `InputAttachmentName`],
        inputId: [, , `InputId`],
        inputSettings: [, (_) => se_InputSettings(_, context), `InputSettings`],
    });
};
const se_InputChannelLevel = (input, context) => {
    return take(input, {
        gain: [, , `Gain`],
        inputChannel: [, , `InputChannel`],
    });
};
const se_InputClippingSettings = (input, context) => {
    return take(input, {
        inputTimecodeSource: [, , `InputTimecodeSource`],
        startTimecode: [, (_) => se_StartTimecode(_, context), `StartTimecode`],
        stopTimecode: [, (_) => se_StopTimecode(_, context), `StopTimecode`],
    });
};
const se_InputDestinationRequest = (input, context) => {
    return take(input, {
        streamName: [, , `StreamName`],
    });
};
const se_InputDeviceConfigurableAudioChannelPairConfig = (input, context) => {
    return take(input, {
        id: [, , `Id`],
        profile: [, , `Profile`],
    });
};
const se_InputDeviceConfigurableSettings = (input, context) => {
    return take(input, {
        audioChannelPairs: [
            ,
            (_) => se___listOfInputDeviceConfigurableAudioChannelPairConfig(_, context),
            `AudioChannelPairs`,
        ],
        codec: [, , `Codec`],
        configuredInput: [, , `ConfiguredInput`],
        latencyMs: [, , `LatencyMs`],
        maxBitrate: [, , `MaxBitrate`],
        mediaconnectSettings: [, (_) => se_InputDeviceMediaConnectConfigurableSettings(_, context), `MediaconnectSettings`],
    });
};
const se_InputDeviceMediaConnectConfigurableSettings = (input, context) => {
    return take(input, {
        flowArn: [, , `FlowArn`],
        roleArn: [, , `RoleArn`],
        secretArn: [, , `SecretArn`],
        sourceName: [, , `SourceName`],
    });
};
const se_InputDeviceRequest = (input, context) => {
    return take(input, {
        id: [, , `Id`],
    });
};
const se_InputDeviceSettings = (input, context) => {
    return take(input, {
        id: [, , `Id`],
    });
};
const se_InputLocation = (input, context) => {
    return take(input, {
        passwordParam: [, , `PasswordParam`],
        uri: [, , `Uri`],
        username: [, , `Username`],
    });
};
const se_InputLossBehavior = (input, context) => {
    return take(input, {
        blackFrameMsec: [, , `BlackFrameMsec`],
        inputLossImageColor: [, , `InputLossImageColor`],
        inputLossImageSlate: [, (_) => se_InputLocation(_, context), `InputLossImageSlate`],
        inputLossImageType: [, , `InputLossImageType`],
        repeatFrameMsec: [, , `RepeatFrameMsec`],
    });
};
const se_InputLossFailoverSettings = (input, context) => {
    return take(input, {
        inputLossThresholdMsec: [, , `InputLossThresholdMsec`],
    });
};
const se_InputPrepareScheduleActionSettings = (input, context) => {
    return take(input, {
        inputAttachmentNameReference: [, , `InputAttachmentNameReference`],
        inputClippingSettings: [, (_) => se_InputClippingSettings(_, context), `InputClippingSettings`],
        urlPath: [, _json, `UrlPath`],
    });
};
const se_InputSettings = (input, context) => {
    return take(input, {
        audioSelectors: [, (_) => se___listOfAudioSelector(_, context), `AudioSelectors`],
        captionSelectors: [, (_) => se___listOfCaptionSelector(_, context), `CaptionSelectors`],
        deblockFilter: [, , `DeblockFilter`],
        denoiseFilter: [, , `DenoiseFilter`],
        filterStrength: [, , `FilterStrength`],
        inputFilter: [, , `InputFilter`],
        networkInputSettings: [, (_) => se_NetworkInputSettings(_, context), `NetworkInputSettings`],
        scte35Pid: [, , `Scte35Pid`],
        smpte2038DataPreference: [, , `Smpte2038DataPreference`],
        sourceEndBehavior: [, , `SourceEndBehavior`],
        videoSelector: [, (_) => se_VideoSelector(_, context), `VideoSelector`],
    });
};
const se_InputSourceRequest = (input, context) => {
    return take(input, {
        passwordParam: [, , `PasswordParam`],
        url: [, , `Url`],
        username: [, , `Username`],
    });
};
const se_InputSpecification = (input, context) => {
    return take(input, {
        codec: [, , `Codec`],
        maximumBitrate: [, , `MaximumBitrate`],
        resolution: [, , `Resolution`],
    });
};
const se_InputSwitchScheduleActionSettings = (input, context) => {
    return take(input, {
        inputAttachmentNameReference: [, , `InputAttachmentNameReference`],
        inputClippingSettings: [, (_) => se_InputClippingSettings(_, context), `InputClippingSettings`],
        urlPath: [, _json, `UrlPath`],
    });
};
const se_InputVpcRequest = (input, context) => {
    return take(input, {
        securityGroupIds: [, _json, `SecurityGroupIds`],
        subnetIds: [, _json, `SubnetIds`],
    });
};
const se_InputWhitelistRuleCidr = (input, context) => {
    return take(input, {
        cidr: [, , `Cidr`],
    });
};
const se_KeyProviderSettings = (input, context) => {
    return take(input, {
        staticKeySettings: [, (_) => se_StaticKeySettings(_, context), `StaticKeySettings`],
    });
};
const se_M2tsSettings = (input, context) => {
    return take(input, {
        absentInputAudioBehavior: [, , `AbsentInputAudioBehavior`],
        arib: [, , `Arib`],
        aribCaptionsPid: [, , `AribCaptionsPid`],
        aribCaptionsPidControl: [, , `AribCaptionsPidControl`],
        audioBufferModel: [, , `AudioBufferModel`],
        audioFramesPerPes: [, , `AudioFramesPerPes`],
        audioPids: [, , `AudioPids`],
        audioStreamType: [, , `AudioStreamType`],
        bitrate: [, , `Bitrate`],
        bufferModel: [, , `BufferModel`],
        ccDescriptor: [, , `CcDescriptor`],
        dvbNitSettings: [, (_) => se_DvbNitSettings(_, context), `DvbNitSettings`],
        dvbSdtSettings: [, (_) => se_DvbSdtSettings(_, context), `DvbSdtSettings`],
        dvbSubPids: [, , `DvbSubPids`],
        dvbTdtSettings: [, (_) => se_DvbTdtSettings(_, context), `DvbTdtSettings`],
        dvbTeletextPid: [, , `DvbTeletextPid`],
        ebif: [, , `Ebif`],
        ebpAudioInterval: [, , `EbpAudioInterval`],
        ebpLookaheadMs: [, , `EbpLookaheadMs`],
        ebpPlacement: [, , `EbpPlacement`],
        ecmPid: [, , `EcmPid`],
        esRateInPes: [, , `EsRateInPes`],
        etvPlatformPid: [, , `EtvPlatformPid`],
        etvSignalPid: [, , `EtvSignalPid`],
        fragmentTime: [, __serializeFloat, `FragmentTime`],
        klv: [, , `Klv`],
        klvDataPids: [, , `KlvDataPids`],
        nielsenId3Behavior: [, , `NielsenId3Behavior`],
        nullPacketBitrate: [, __serializeFloat, `NullPacketBitrate`],
        patInterval: [, , `PatInterval`],
        pcrControl: [, , `PcrControl`],
        pcrPeriod: [, , `PcrPeriod`],
        pcrPid: [, , `PcrPid`],
        pmtInterval: [, , `PmtInterval`],
        pmtPid: [, , `PmtPid`],
        programNum: [, , `ProgramNum`],
        rateMode: [, , `RateMode`],
        scte27Pids: [, , `Scte27Pids`],
        scte35Control: [, , `Scte35Control`],
        scte35Pid: [, , `Scte35Pid`],
        scte35PrerollPullupMilliseconds: [, __serializeFloat, `Scte35PrerollPullupMilliseconds`],
        segmentationMarkers: [, , `SegmentationMarkers`],
        segmentationStyle: [, , `SegmentationStyle`],
        segmentationTime: [, __serializeFloat, `SegmentationTime`],
        timedMetadataBehavior: [, , `TimedMetadataBehavior`],
        timedMetadataPid: [, , `TimedMetadataPid`],
        transportStreamId: [, , `TransportStreamId`],
        videoPid: [, , `VideoPid`],
    });
};
const se_M3u8Settings = (input, context) => {
    return take(input, {
        audioFramesPerPes: [, , `AudioFramesPerPes`],
        audioPids: [, , `AudioPids`],
        ecmPid: [, , `EcmPid`],
        klvBehavior: [, , `KlvBehavior`],
        klvDataPids: [, , `KlvDataPids`],
        nielsenId3Behavior: [, , `NielsenId3Behavior`],
        patInterval: [, , `PatInterval`],
        pcrControl: [, , `PcrControl`],
        pcrPeriod: [, , `PcrPeriod`],
        pcrPid: [, , `PcrPid`],
        pmtInterval: [, , `PmtInterval`],
        pmtPid: [, , `PmtPid`],
        programNum: [, , `ProgramNum`],
        scte35Behavior: [, , `Scte35Behavior`],
        scte35Pid: [, , `Scte35Pid`],
        timedMetadataBehavior: [, , `TimedMetadataBehavior`],
        timedMetadataPid: [, , `TimedMetadataPid`],
        transportStreamId: [, , `TransportStreamId`],
        videoPid: [, , `VideoPid`],
    });
};
const se_MaintenanceCreateSettings = (input, context) => {
    return take(input, {
        maintenanceDay: [, , `MaintenanceDay`],
        maintenanceStartTime: [, , `MaintenanceStartTime`],
    });
};
const se_MaintenanceUpdateSettings = (input, context) => {
    return take(input, {
        maintenanceDay: [, , `MaintenanceDay`],
        maintenanceScheduledDate: [, , `MaintenanceScheduledDate`],
        maintenanceStartTime: [, , `MaintenanceStartTime`],
    });
};
const se_MediaConnectFlowRequest = (input, context) => {
    return take(input, {
        flowArn: [, , `FlowArn`],
    });
};
const se_MediaPackageGroupSettings = (input, context) => {
    return take(input, {
        destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
    });
};
const se_MediaPackageOutputDestinationSettings = (input, context) => {
    return take(input, {
        channelId: [, , `ChannelId`],
    });
};
const se_MotionGraphicsActivateScheduleActionSettings = (input, context) => {
    return take(input, {
        duration: [, , `Duration`],
        passwordParam: [, , `PasswordParam`],
        url: [, , `Url`],
        username: [, , `Username`],
    });
};
const se_MotionGraphicsConfiguration = (input, context) => {
    return take(input, {
        motionGraphicsInsertion: [, , `MotionGraphicsInsertion`],
        motionGraphicsSettings: [, (_) => se_MotionGraphicsSettings(_, context), `MotionGraphicsSettings`],
    });
};
const se_MotionGraphicsSettings = (input, context) => {
    return take(input, {
        htmlMotionGraphicsSettings: [, _json, `HtmlMotionGraphicsSettings`],
    });
};
const se_Mp2Settings = (input, context) => {
    return take(input, {
        bitrate: [, __serializeFloat, `Bitrate`],
        codingMode: [, , `CodingMode`],
        sampleRate: [, __serializeFloat, `SampleRate`],
    });
};
const se_Mpeg2FilterSettings = (input, context) => {
    return take(input, {
        temporalFilterSettings: [, (_) => se_TemporalFilterSettings(_, context), `TemporalFilterSettings`],
    });
};
const se_Mpeg2Settings = (input, context) => {
    return take(input, {
        adaptiveQuantization: [, , `AdaptiveQuantization`],
        afdSignaling: [, , `AfdSignaling`],
        colorMetadata: [, , `ColorMetadata`],
        colorSpace: [, , `ColorSpace`],
        displayAspectRatio: [, , `DisplayAspectRatio`],
        filterSettings: [, (_) => se_Mpeg2FilterSettings(_, context), `FilterSettings`],
        fixedAfd: [, , `FixedAfd`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopClosedCadence: [, , `GopClosedCadence`],
        gopNumBFrames: [, , `GopNumBFrames`],
        gopSize: [, __serializeFloat, `GopSize`],
        gopSizeUnits: [, , `GopSizeUnits`],
        scanType: [, , `ScanType`],
        subgopLength: [, , `SubgopLength`],
        timecodeBurninSettings: [, (_) => se_TimecodeBurninSettings(_, context), `TimecodeBurninSettings`],
        timecodeInsertion: [, , `TimecodeInsertion`],
    });
};
const se_MsSmoothGroupSettings = (input, context) => {
    return take(input, {
        acquisitionPointId: [, , `AcquisitionPointId`],
        audioOnlyTimecodeControl: [, , `AudioOnlyTimecodeControl`],
        certificateMode: [, , `CertificateMode`],
        connectionRetryInterval: [, , `ConnectionRetryInterval`],
        destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
        eventId: [, , `EventId`],
        eventIdMode: [, , `EventIdMode`],
        eventStopBehavior: [, , `EventStopBehavior`],
        filecacheDuration: [, , `FilecacheDuration`],
        fragmentLength: [, , `FragmentLength`],
        inputLossAction: [, , `InputLossAction`],
        numRetries: [, , `NumRetries`],
        restartDelay: [, , `RestartDelay`],
        segmentationMode: [, , `SegmentationMode`],
        sendDelayMs: [, , `SendDelayMs`],
        sparseTrackType: [, , `SparseTrackType`],
        streamManifestBehavior: [, , `StreamManifestBehavior`],
        timestampOffset: [, , `TimestampOffset`],
        timestampOffsetMode: [, , `TimestampOffsetMode`],
    });
};
const se_MsSmoothOutputSettings = (input, context) => {
    return take(input, {
        h265PackagingType: [, , `H265PackagingType`],
        nameModifier: [, , `NameModifier`],
    });
};
const se_MultiplexOutputSettings = (input, context) => {
    return take(input, {
        destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
    });
};
const se_MultiplexProgramChannelDestinationSettings = (input, context) => {
    return take(input, {
        multiplexId: [, , `MultiplexId`],
        programName: [, , `ProgramName`],
    });
};
const se_MultiplexProgramServiceDescriptor = (input, context) => {
    return take(input, {
        providerName: [, , `ProviderName`],
        serviceName: [, , `ServiceName`],
    });
};
const se_MultiplexProgramSettings = (input, context) => {
    return take(input, {
        preferredChannelPipeline: [, , `PreferredChannelPipeline`],
        programNumber: [, , `ProgramNumber`],
        serviceDescriptor: [, (_) => se_MultiplexProgramServiceDescriptor(_, context), `ServiceDescriptor`],
        videoSettings: [, (_) => se_MultiplexVideoSettings(_, context), `VideoSettings`],
    });
};
const se_MultiplexSettings = (input, context) => {
    return take(input, {
        maximumVideoBufferDelayMilliseconds: [, , `MaximumVideoBufferDelayMilliseconds`],
        transportStreamBitrate: [, , `TransportStreamBitrate`],
        transportStreamId: [, , `TransportStreamId`],
        transportStreamReservedBitrate: [, , `TransportStreamReservedBitrate`],
    });
};
const se_MultiplexStatmuxVideoSettings = (input, context) => {
    return take(input, {
        maximumBitrate: [, , `MaximumBitrate`],
        minimumBitrate: [, , `MinimumBitrate`],
        priority: [, , `Priority`],
    });
};
const se_MultiplexVideoSettings = (input, context) => {
    return take(input, {
        constantBitrate: [, , `ConstantBitrate`],
        statmuxSettings: [, (_) => se_MultiplexStatmuxVideoSettings(_, context), `StatmuxSettings`],
    });
};
const se_NetworkInputSettings = (input, context) => {
    return take(input, {
        hlsInputSettings: [, (_) => se_HlsInputSettings(_, context), `HlsInputSettings`],
        serverValidation: [, , `ServerValidation`],
    });
};
const se_NielsenCBET = (input, context) => {
    return take(input, {
        cbetCheckDigitString: [, , `CbetCheckDigitString`],
        cbetStepaside: [, , `CbetStepaside`],
        csid: [, , `Csid`],
    });
};
const se_NielsenConfiguration = (input, context) => {
    return take(input, {
        distributorId: [, , `DistributorId`],
        nielsenPcmToId3Tagging: [, , `NielsenPcmToId3Tagging`],
    });
};
const se_NielsenNaesIiNw = (input, context) => {
    return take(input, {
        checkDigitString: [, , `CheckDigitString`],
        sid: [, __serializeFloat, `Sid`],
        timezone: [, , `Timezone`],
    });
};
const se_NielsenWatermarksSettings = (input, context) => {
    return take(input, {
        nielsenCbetSettings: [, (_) => se_NielsenCBET(_, context), `NielsenCbetSettings`],
        nielsenDistributionType: [, , `NielsenDistributionType`],
        nielsenNaesIiNwSettings: [, (_) => se_NielsenNaesIiNw(_, context), `NielsenNaesIiNwSettings`],
    });
};
const se_Output = (input, context) => {
    return take(input, {
        audioDescriptionNames: [, _json, `AudioDescriptionNames`],
        captionDescriptionNames: [, _json, `CaptionDescriptionNames`],
        outputName: [, , `OutputName`],
        outputSettings: [, (_) => se_OutputSettings(_, context), `OutputSettings`],
        videoDescriptionName: [, , `VideoDescriptionName`],
    });
};
const se_OutputDestination = (input, context) => {
    return take(input, {
        id: [, , `Id`],
        mediaPackageSettings: [
            ,
            (_) => se___listOfMediaPackageOutputDestinationSettings(_, context),
            `MediaPackageSettings`,
        ],
        multiplexSettings: [, (_) => se_MultiplexProgramChannelDestinationSettings(_, context), `MultiplexSettings`],
        settings: [, (_) => se___listOfOutputDestinationSettings(_, context), `Settings`],
    });
};
const se_OutputDestinationSettings = (input, context) => {
    return take(input, {
        passwordParam: [, , `PasswordParam`],
        streamName: [, , `StreamName`],
        url: [, , `Url`],
        username: [, , `Username`],
    });
};
const se_OutputGroup = (input, context) => {
    return take(input, {
        name: [, , `Name`],
        outputGroupSettings: [, (_) => se_OutputGroupSettings(_, context), `OutputGroupSettings`],
        outputs: [, (_) => se___listOfOutput(_, context), `Outputs`],
    });
};
const se_OutputGroupSettings = (input, context) => {
    return take(input, {
        archiveGroupSettings: [, (_) => se_ArchiveGroupSettings(_, context), `ArchiveGroupSettings`],
        cmafIngestGroupSettings: [, (_) => se_CmafIngestGroupSettings(_, context), `CmafIngestGroupSettings`],
        frameCaptureGroupSettings: [, (_) => se_FrameCaptureGroupSettings(_, context), `FrameCaptureGroupSettings`],
        hlsGroupSettings: [, (_) => se_HlsGroupSettings(_, context), `HlsGroupSettings`],
        mediaPackageGroupSettings: [, (_) => se_MediaPackageGroupSettings(_, context), `MediaPackageGroupSettings`],
        msSmoothGroupSettings: [, (_) => se_MsSmoothGroupSettings(_, context), `MsSmoothGroupSettings`],
        multiplexGroupSettings: [, _json, `MultiplexGroupSettings`],
        rtmpGroupSettings: [, (_) => se_RtmpGroupSettings(_, context), `RtmpGroupSettings`],
        udpGroupSettings: [, (_) => se_UdpGroupSettings(_, context), `UdpGroupSettings`],
    });
};
const se_OutputLocationRef = (input, context) => {
    return take(input, {
        destinationRefId: [, , `DestinationRefId`],
    });
};
const se_OutputLockingSettings = (input, context) => {
    return take(input, {
        epochLockingSettings: [, (_) => se_EpochLockingSettings(_, context), `EpochLockingSettings`],
        pipelineLockingSettings: [, _json, `PipelineLockingSettings`],
    });
};
const se_OutputSettings = (input, context) => {
    return take(input, {
        archiveOutputSettings: [, (_) => se_ArchiveOutputSettings(_, context), `ArchiveOutputSettings`],
        cmafIngestOutputSettings: [, (_) => se_CmafIngestOutputSettings(_, context), `CmafIngestOutputSettings`],
        frameCaptureOutputSettings: [, (_) => se_FrameCaptureOutputSettings(_, context), `FrameCaptureOutputSettings`],
        hlsOutputSettings: [, (_) => se_HlsOutputSettings(_, context), `HlsOutputSettings`],
        mediaPackageOutputSettings: [, _json, `MediaPackageOutputSettings`],
        msSmoothOutputSettings: [, (_) => se_MsSmoothOutputSettings(_, context), `MsSmoothOutputSettings`],
        multiplexOutputSettings: [, (_) => se_MultiplexOutputSettings(_, context), `MultiplexOutputSettings`],
        rtmpOutputSettings: [, (_) => se_RtmpOutputSettings(_, context), `RtmpOutputSettings`],
        udpOutputSettings: [, (_) => se_UdpOutputSettings(_, context), `UdpOutputSettings`],
    });
};
const se_PauseStateScheduleActionSettings = (input, context) => {
    return take(input, {
        pipelines: [, (_) => se___listOfPipelinePauseStateSettings(_, context), `Pipelines`],
    });
};
const se_PipelinePauseStateSettings = (input, context) => {
    return take(input, {
        pipelineId: [, , `PipelineId`],
    });
};
const se_RemixSettings = (input, context) => {
    return take(input, {
        channelMappings: [, (_) => se___listOfAudioChannelMapping(_, context), `ChannelMappings`],
        channelsIn: [, , `ChannelsIn`],
        channelsOut: [, , `ChannelsOut`],
    });
};
const se_RenewalSettings = (input, context) => {
    return take(input, {
        automaticRenewal: [, , `AutomaticRenewal`],
        renewalCount: [, , `RenewalCount`],
    });
};
const se_RtmpGroupSettings = (input, context) => {
    return take(input, {
        adMarkers: [, _json, `AdMarkers`],
        authenticationScheme: [, , `AuthenticationScheme`],
        cacheFullBehavior: [, , `CacheFullBehavior`],
        cacheLength: [, , `CacheLength`],
        captionData: [, , `CaptionData`],
        includeFillerNalUnits: [, , `IncludeFillerNalUnits`],
        inputLossAction: [, , `InputLossAction`],
        restartDelay: [, , `RestartDelay`],
    });
};
const se_RtmpOutputSettings = (input, context) => {
    return take(input, {
        certificateMode: [, , `CertificateMode`],
        connectionRetryInterval: [, , `ConnectionRetryInterval`],
        destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
        numRetries: [, , `NumRetries`],
    });
};
const se_ScheduleAction = (input, context) => {
    return take(input, {
        actionName: [, , `ActionName`],
        scheduleActionSettings: [, (_) => se_ScheduleActionSettings(_, context), `ScheduleActionSettings`],
        scheduleActionStartSettings: [, (_) => se_ScheduleActionStartSettings(_, context), `ScheduleActionStartSettings`],
    });
};
const se_ScheduleActionSettings = (input, context) => {
    return take(input, {
        hlsId3SegmentTaggingSettings: [
            ,
            (_) => se_HlsId3SegmentTaggingScheduleActionSettings(_, context),
            `HlsId3SegmentTaggingSettings`,
        ],
        hlsTimedMetadataSettings: [
            ,
            (_) => se_HlsTimedMetadataScheduleActionSettings(_, context),
            `HlsTimedMetadataSettings`,
        ],
        inputPrepareSettings: [, (_) => se_InputPrepareScheduleActionSettings(_, context), `InputPrepareSettings`],
        inputSwitchSettings: [, (_) => se_InputSwitchScheduleActionSettings(_, context), `InputSwitchSettings`],
        motionGraphicsImageActivateSettings: [
            ,
            (_) => se_MotionGraphicsActivateScheduleActionSettings(_, context),
            `MotionGraphicsImageActivateSettings`,
        ],
        motionGraphicsImageDeactivateSettings: [, _json, `MotionGraphicsImageDeactivateSettings`],
        pauseStateSettings: [, (_) => se_PauseStateScheduleActionSettings(_, context), `PauseStateSettings`],
        scte35InputSettings: [, (_) => se_Scte35InputScheduleActionSettings(_, context), `Scte35InputSettings`],
        scte35ReturnToNetworkSettings: [
            ,
            (_) => se_Scte35ReturnToNetworkScheduleActionSettings(_, context),
            `Scte35ReturnToNetworkSettings`,
        ],
        scte35SpliceInsertSettings: [
            ,
            (_) => se_Scte35SpliceInsertScheduleActionSettings(_, context),
            `Scte35SpliceInsertSettings`,
        ],
        scte35TimeSignalSettings: [
            ,
            (_) => se_Scte35TimeSignalScheduleActionSettings(_, context),
            `Scte35TimeSignalSettings`,
        ],
        staticImageActivateSettings: [
            ,
            (_) => se_StaticImageActivateScheduleActionSettings(_, context),
            `StaticImageActivateSettings`,
        ],
        staticImageDeactivateSettings: [
            ,
            (_) => se_StaticImageDeactivateScheduleActionSettings(_, context),
            `StaticImageDeactivateSettings`,
        ],
        staticImageOutputActivateSettings: [
            ,
            (_) => se_StaticImageOutputActivateScheduleActionSettings(_, context),
            `StaticImageOutputActivateSettings`,
        ],
        staticImageOutputDeactivateSettings: [
            ,
            (_) => se_StaticImageOutputDeactivateScheduleActionSettings(_, context),
            `StaticImageOutputDeactivateSettings`,
        ],
    });
};
const se_ScheduleActionStartSettings = (input, context) => {
    return take(input, {
        fixedModeScheduleActionStartSettings: [
            ,
            (_) => se_FixedModeScheduleActionStartSettings(_, context),
            `FixedModeScheduleActionStartSettings`,
        ],
        followModeScheduleActionStartSettings: [
            ,
            (_) => se_FollowModeScheduleActionStartSettings(_, context),
            `FollowModeScheduleActionStartSettings`,
        ],
        immediateModeScheduleActionStartSettings: [, _json, `ImmediateModeScheduleActionStartSettings`],
    });
};
const se_Scte20SourceSettings = (input, context) => {
    return take(input, {
        convert608To708: [, , `Convert608To708`],
        source608ChannelNumber: [, , `Source608ChannelNumber`],
    });
};
const se_Scte27SourceSettings = (input, context) => {
    return take(input, {
        ocrLanguage: [, , `OcrLanguage`],
        pid: [, , `Pid`],
    });
};
const se_Scte35DeliveryRestrictions = (input, context) => {
    return take(input, {
        archiveAllowedFlag: [, , `ArchiveAllowedFlag`],
        deviceRestrictions: [, , `DeviceRestrictions`],
        noRegionalBlackoutFlag: [, , `NoRegionalBlackoutFlag`],
        webDeliveryAllowedFlag: [, , `WebDeliveryAllowedFlag`],
    });
};
const se_Scte35Descriptor = (input, context) => {
    return take(input, {
        scte35DescriptorSettings: [, (_) => se_Scte35DescriptorSettings(_, context), `Scte35DescriptorSettings`],
    });
};
const se_Scte35DescriptorSettings = (input, context) => {
    return take(input, {
        segmentationDescriptorScte35DescriptorSettings: [
            ,
            (_) => se_Scte35SegmentationDescriptor(_, context),
            `SegmentationDescriptorScte35DescriptorSettings`,
        ],
    });
};
const se_Scte35InputScheduleActionSettings = (input, context) => {
    return take(input, {
        inputAttachmentNameReference: [, , `InputAttachmentNameReference`],
        mode: [, , `Mode`],
    });
};
const se_Scte35ReturnToNetworkScheduleActionSettings = (input, context) => {
    return take(input, {
        spliceEventId: [, , `SpliceEventId`],
    });
};
const se_Scte35SegmentationDescriptor = (input, context) => {
    return take(input, {
        deliveryRestrictions: [, (_) => se_Scte35DeliveryRestrictions(_, context), `DeliveryRestrictions`],
        segmentNum: [, , `SegmentNum`],
        segmentationCancelIndicator: [, , `SegmentationCancelIndicator`],
        segmentationDuration: [, , `SegmentationDuration`],
        segmentationEventId: [, , `SegmentationEventId`],
        segmentationTypeId: [, , `SegmentationTypeId`],
        segmentationUpid: [, , `SegmentationUpid`],
        segmentationUpidType: [, , `SegmentationUpidType`],
        segmentsExpected: [, , `SegmentsExpected`],
        subSegmentNum: [, , `SubSegmentNum`],
        subSegmentsExpected: [, , `SubSegmentsExpected`],
    });
};
const se_Scte35SpliceInsert = (input, context) => {
    return take(input, {
        adAvailOffset: [, , `AdAvailOffset`],
        noRegionalBlackoutFlag: [, , `NoRegionalBlackoutFlag`],
        webDeliveryAllowedFlag: [, , `WebDeliveryAllowedFlag`],
    });
};
const se_Scte35SpliceInsertScheduleActionSettings = (input, context) => {
    return take(input, {
        duration: [, , `Duration`],
        spliceEventId: [, , `SpliceEventId`],
    });
};
const se_Scte35TimeSignalApos = (input, context) => {
    return take(input, {
        adAvailOffset: [, , `AdAvailOffset`],
        noRegionalBlackoutFlag: [, , `NoRegionalBlackoutFlag`],
        webDeliveryAllowedFlag: [, , `WebDeliveryAllowedFlag`],
    });
};
const se_Scte35TimeSignalScheduleActionSettings = (input, context) => {
    return take(input, {
        scte35Descriptors: [, (_) => se___listOfScte35Descriptor(_, context), `Scte35Descriptors`],
    });
};
const se_StandardHlsSettings = (input, context) => {
    return take(input, {
        audioRenditionSets: [, , `AudioRenditionSets`],
        m3u8Settings: [, (_) => se_M3u8Settings(_, context), `M3u8Settings`],
    });
};
const se_StartTimecode = (input, context) => {
    return take(input, {
        timecode: [, , `Timecode`],
    });
};
const se_StaticImageActivateScheduleActionSettings = (input, context) => {
    return take(input, {
        duration: [, , `Duration`],
        fadeIn: [, , `FadeIn`],
        fadeOut: [, , `FadeOut`],
        height: [, , `Height`],
        image: [, (_) => se_InputLocation(_, context), `Image`],
        imageX: [, , `ImageX`],
        imageY: [, , `ImageY`],
        layer: [, , `Layer`],
        opacity: [, , `Opacity`],
        width: [, , `Width`],
    });
};
const se_StaticImageDeactivateScheduleActionSettings = (input, context) => {
    return take(input, {
        fadeOut: [, , `FadeOut`],
        layer: [, , `Layer`],
    });
};
const se_StaticImageOutputActivateScheduleActionSettings = (input, context) => {
    return take(input, {
        duration: [, , `Duration`],
        fadeIn: [, , `FadeIn`],
        fadeOut: [, , `FadeOut`],
        height: [, , `Height`],
        image: [, (_) => se_InputLocation(_, context), `Image`],
        imageX: [, , `ImageX`],
        imageY: [, , `ImageY`],
        layer: [, , `Layer`],
        opacity: [, , `Opacity`],
        outputNames: [, _json, `OutputNames`],
        width: [, , `Width`],
    });
};
const se_StaticImageOutputDeactivateScheduleActionSettings = (input, context) => {
    return take(input, {
        fadeOut: [, , `FadeOut`],
        layer: [, , `Layer`],
        outputNames: [, _json, `OutputNames`],
    });
};
const se_StaticKeySettings = (input, context) => {
    return take(input, {
        keyProviderServer: [, (_) => se_InputLocation(_, context), `KeyProviderServer`],
        staticKeyValue: [, , `StaticKeyValue`],
    });
};
const se_StopTimecode = (input, context) => {
    return take(input, {
        lastFrameClippingBehavior: [, , `LastFrameClippingBehavior`],
        timecode: [, , `Timecode`],
    });
};
const se_TeletextSourceSettings = (input, context) => {
    return take(input, {
        outputRectangle: [, (_) => se_CaptionRectangle(_, context), `OutputRectangle`],
        pageNumber: [, , `PageNumber`],
    });
};
const se_TemporalFilterSettings = (input, context) => {
    return take(input, {
        postFilterSharpening: [, , `PostFilterSharpening`],
        strength: [, , `Strength`],
    });
};
const se_ThumbnailConfiguration = (input, context) => {
    return take(input, {
        state: [, , `State`],
    });
};
const se_TimecodeBurninSettings = (input, context) => {
    return take(input, {
        fontSize: [, , `FontSize`],
        position: [, , `Position`],
        prefix: [, , `Prefix`],
    });
};
const se_TimecodeConfig = (input, context) => {
    return take(input, {
        source: [, , `Source`],
        syncThreshold: [, , `SyncThreshold`],
    });
};
const se_TtmlDestinationSettings = (input, context) => {
    return take(input, {
        styleControl: [, , `StyleControl`],
    });
};
const se_UdpContainerSettings = (input, context) => {
    return take(input, {
        m2tsSettings: [, (_) => se_M2tsSettings(_, context), `M2tsSettings`],
    });
};
const se_UdpGroupSettings = (input, context) => {
    return take(input, {
        inputLossAction: [, , `InputLossAction`],
        timedMetadataId3Frame: [, , `TimedMetadataId3Frame`],
        timedMetadataId3Period: [, , `TimedMetadataId3Period`],
    });
};
const se_UdpOutputSettings = (input, context) => {
    return take(input, {
        bufferMsec: [, , `BufferMsec`],
        containerSettings: [, (_) => se_UdpContainerSettings(_, context), `ContainerSettings`],
        destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
        fecOutputSettings: [, (_) => se_FecOutputSettings(_, context), `FecOutputSettings`],
    });
};
const se_VideoBlackFailoverSettings = (input, context) => {
    return take(input, {
        blackDetectThreshold: [, __serializeFloat, `BlackDetectThreshold`],
        videoBlackThresholdMsec: [, , `VideoBlackThresholdMsec`],
    });
};
const se_VideoCodecSettings = (input, context) => {
    return take(input, {
        frameCaptureSettings: [, (_) => se_FrameCaptureSettings(_, context), `FrameCaptureSettings`],
        h264Settings: [, (_) => se_H264Settings(_, context), `H264Settings`],
        h265Settings: [, (_) => se_H265Settings(_, context), `H265Settings`],
        mpeg2Settings: [, (_) => se_Mpeg2Settings(_, context), `Mpeg2Settings`],
    });
};
const se_VideoDescription = (input, context) => {
    return take(input, {
        codecSettings: [, (_) => se_VideoCodecSettings(_, context), `CodecSettings`],
        height: [, , `Height`],
        name: [, , `Name`],
        respondToAfd: [, , `RespondToAfd`],
        scalingBehavior: [, , `ScalingBehavior`],
        sharpness: [, , `Sharpness`],
        width: [, , `Width`],
    });
};
const se_VideoSelector = (input, context) => {
    return take(input, {
        colorSpace: [, , `ColorSpace`],
        colorSpaceSettings: [, (_) => se_VideoSelectorColorSpaceSettings(_, context), `ColorSpaceSettings`],
        colorSpaceUsage: [, , `ColorSpaceUsage`],
        selectorSettings: [, (_) => se_VideoSelectorSettings(_, context), `SelectorSettings`],
    });
};
const se_VideoSelectorColorSpaceSettings = (input, context) => {
    return take(input, {
        hdr10Settings: [, (_) => se_Hdr10Settings(_, context), `Hdr10Settings`],
    });
};
const se_VideoSelectorPid = (input, context) => {
    return take(input, {
        pid: [, , `Pid`],
    });
};
const se_VideoSelectorProgramId = (input, context) => {
    return take(input, {
        programId: [, , `ProgramId`],
    });
};
const se_VideoSelectorSettings = (input, context) => {
    return take(input, {
        videoSelectorPid: [, (_) => se_VideoSelectorPid(_, context), `VideoSelectorPid`],
        videoSelectorProgramId: [, (_) => se_VideoSelectorProgramId(_, context), `VideoSelectorProgramId`],
    });
};
const se_VpcOutputSettings = (input, context) => {
    return take(input, {
        publicAddressAllocationIds: [, _json, `PublicAddressAllocationIds`],
        securityGroupIds: [, _json, `SecurityGroupIds`],
        subnetIds: [, _json, `SubnetIds`],
    });
};
const se_WavSettings = (input, context) => {
    return take(input, {
        bitDepth: [, __serializeFloat, `BitDepth`],
        codingMode: [, , `CodingMode`],
        sampleRate: [, __serializeFloat, `SampleRate`],
    });
};
const se_WebvttDestinationSettings = (input, context) => {
    return take(input, {
        styleControl: [, , `StyleControl`],
    });
};
const de___listOfAudioChannelMapping = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AudioChannelMapping(entry, context);
    });
    return retVal;
};
const de___listOfAudioDescription = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AudioDescription(entry, context);
    });
    return retVal;
};
const de___listOfAudioSelector = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AudioSelector(entry, context);
    });
    return retVal;
};
const de___listOfAudioTrack = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AudioTrack(entry, context);
    });
    return retVal;
};
const de___listOfBatchFailedResultModel = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchFailedResultModel(entry, context);
    });
    return retVal;
};
const de___listOfBatchSuccessfulResultModel = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchSuccessfulResultModel(entry, context);
    });
    return retVal;
};
const de___listOfCaptionDescription = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CaptionDescription(entry, context);
    });
    return retVal;
};
const de___listOfCaptionLanguageMapping = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CaptionLanguageMapping(entry, context);
    });
    return retVal;
};
const de___listOfCaptionSelector = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CaptionSelector(entry, context);
    });
    return retVal;
};
const de___listOfChannelEgressEndpoint = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ChannelEgressEndpoint(entry, context);
    });
    return retVal;
};
const de___listOfChannelSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ChannelSummary(entry, context);
    });
    return retVal;
};
const de___listOfCloudWatchAlarmTemplateGroupSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CloudWatchAlarmTemplateGroupSummary(entry, context);
    });
    return retVal;
};
const de___listOfCloudWatchAlarmTemplateSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CloudWatchAlarmTemplateSummary(entry, context);
    });
    return retVal;
};
const de___listOfColorCorrection = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ColorCorrection(entry, context);
    });
    return retVal;
};
const de___listOfEventBridgeRuleTemplateGroupSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventBridgeRuleTemplateGroupSummary(entry, context);
    });
    return retVal;
};
const de___listOfEventBridgeRuleTemplateSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventBridgeRuleTemplateSummary(entry, context);
    });
    return retVal;
};
const de___listOfEventBridgeRuleTemplateTarget = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventBridgeRuleTemplateTarget(entry, context);
    });
    return retVal;
};
const de___listOfFailoverCondition = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FailoverCondition(entry, context);
    });
    return retVal;
};
const de___listOfInput = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Input(entry, context);
    });
    return retVal;
};
const de___listOfInputAttachment = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InputAttachment(entry, context);
    });
    return retVal;
};
const de___listOfInputChannelLevel = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InputChannelLevel(entry, context);
    });
    return retVal;
};
const de___listOfInputDestination = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InputDestination(entry, context);
    });
    return retVal;
};
const de___listOfInputDeviceSettings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InputDeviceSettings(entry, context);
    });
    return retVal;
};
const de___listOfInputDeviceSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InputDeviceSummary(entry, context);
    });
    return retVal;
};
const de___listOfInputDeviceUhdAudioChannelPairConfig = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InputDeviceUhdAudioChannelPairConfig(entry, context);
    });
    return retVal;
};
const de___listOfInputSecurityGroup = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InputSecurityGroup(entry, context);
    });
    return retVal;
};
const de___listOfInputSource = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InputSource(entry, context);
    });
    return retVal;
};
const de___listOfInputWhitelistRule = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InputWhitelistRule(entry, context);
    });
    return retVal;
};
const de___listOfMediaConnectFlow = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MediaConnectFlow(entry, context);
    });
    return retVal;
};
const de___listOfMediaPackageOutputDestinationSettings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MediaPackageOutputDestinationSettings(entry, context);
    });
    return retVal;
};
const de___listOfMediaResourceNeighbor = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MediaResourceNeighbor(entry, context);
    });
    return retVal;
};
const de___listOfMultiplexOutputDestination = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MultiplexOutputDestination(entry, context);
    });
    return retVal;
};
const de___listOfMultiplexProgramPipelineDetail = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MultiplexProgramPipelineDetail(entry, context);
    });
    return retVal;
};
const de___listOfMultiplexProgramSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MultiplexProgramSummary(entry, context);
    });
    return retVal;
};
const de___listOfMultiplexSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MultiplexSummary(entry, context);
    });
    return retVal;
};
const de___listOfOffering = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Offering(entry, context);
    });
    return retVal;
};
const de___listOfOutput = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Output(entry, context);
    });
    return retVal;
};
const de___listOfOutputDestination = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutputDestination(entry, context);
    });
    return retVal;
};
const de___listOfOutputDestinationSettings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutputDestinationSettings(entry, context);
    });
    return retVal;
};
const de___listOfOutputGroup = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutputGroup(entry, context);
    });
    return retVal;
};
const de___listOfPipelineDetail = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PipelineDetail(entry, context);
    });
    return retVal;
};
const de___listOfPipelinePauseStateSettings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PipelinePauseStateSettings(entry, context);
    });
    return retVal;
};
const de___listOfReservation = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Reservation(entry, context);
    });
    return retVal;
};
const de___listOfScheduleAction = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScheduleAction(entry, context);
    });
    return retVal;
};
const de___listOfScte35Descriptor = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Scte35Descriptor(entry, context);
    });
    return retVal;
};
const de___listOfSignalMapSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SignalMapSummary(entry, context);
    });
    return retVal;
};
const de___listOfThumbnail = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Thumbnail(entry, context);
    });
    return retVal;
};
const de___listOfThumbnailDetail = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ThumbnailDetail(entry, context);
    });
    return retVal;
};
const de___listOfTransferringInputDeviceSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransferringInputDeviceSummary(entry, context);
    });
    return retVal;
};
const de___listOfValidationError = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValidationError(entry, context);
    });
    return retVal;
};
const de___listOfVideoDescription = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VideoDescription(entry, context);
    });
    return retVal;
};
const de_AacSettings = (output, context) => {
    return take(output, {
        Bitrate: [, __limitedParseDouble, `bitrate`],
        CodingMode: [, __expectString, `codingMode`],
        InputType: [, __expectString, `inputType`],
        Profile: [, __expectString, `profile`],
        RateControlMode: [, __expectString, `rateControlMode`],
        RawFormat: [, __expectString, `rawFormat`],
        SampleRate: [, __limitedParseDouble, `sampleRate`],
        Spec: [, __expectString, `spec`],
        VbrQuality: [, __expectString, `vbrQuality`],
    });
};
const de_Ac3Settings = (output, context) => {
    return take(output, {
        AttenuationControl: [, __expectString, `attenuationControl`],
        Bitrate: [, __limitedParseDouble, `bitrate`],
        BitstreamMode: [, __expectString, `bitstreamMode`],
        CodingMode: [, __expectString, `codingMode`],
        Dialnorm: [, __expectInt32, `dialnorm`],
        DrcProfile: [, __expectString, `drcProfile`],
        LfeFilter: [, __expectString, `lfeFilter`],
        MetadataControl: [, __expectString, `metadataControl`],
    });
};
const de_AccountConfiguration = (output, context) => {
    return take(output, {
        KmsKeyId: [, __expectString, `kmsKeyId`],
    });
};
const de_AncillarySourceSettings = (output, context) => {
    return take(output, {
        SourceAncillaryChannelNumber: [, __expectInt32, `sourceAncillaryChannelNumber`],
    });
};
const de_ArchiveCdnSettings = (output, context) => {
    return take(output, {
        ArchiveS3Settings: [, (_) => de_ArchiveS3Settings(_, context), `archiveS3Settings`],
    });
};
const de_ArchiveContainerSettings = (output, context) => {
    return take(output, {
        M2tsSettings: [, (_) => de_M2tsSettings(_, context), `m2tsSettings`],
        RawSettings: [, _json, `rawSettings`],
    });
};
const de_ArchiveGroupSettings = (output, context) => {
    return take(output, {
        ArchiveCdnSettings: [, (_) => de_ArchiveCdnSettings(_, context), `archiveCdnSettings`],
        Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
        RolloverInterval: [, __expectInt32, `rolloverInterval`],
    });
};
const de_ArchiveOutputSettings = (output, context) => {
    return take(output, {
        ContainerSettings: [, (_) => de_ArchiveContainerSettings(_, context), `containerSettings`],
        Extension: [, __expectString, `extension`],
        NameModifier: [, __expectString, `nameModifier`],
    });
};
const de_ArchiveS3Settings = (output, context) => {
    return take(output, {
        CannedAcl: [, __expectString, `cannedAcl`],
    });
};
const de_AudioChannelMapping = (output, context) => {
    return take(output, {
        InputChannelLevels: [, (_) => de___listOfInputChannelLevel(_, context), `inputChannelLevels`],
        OutputChannel: [, __expectInt32, `outputChannel`],
    });
};
const de_AudioCodecSettings = (output, context) => {
    return take(output, {
        AacSettings: [, (_) => de_AacSettings(_, context), `aacSettings`],
        Ac3Settings: [, (_) => de_Ac3Settings(_, context), `ac3Settings`],
        Eac3AtmosSettings: [, (_) => de_Eac3AtmosSettings(_, context), `eac3AtmosSettings`],
        Eac3Settings: [, (_) => de_Eac3Settings(_, context), `eac3Settings`],
        Mp2Settings: [, (_) => de_Mp2Settings(_, context), `mp2Settings`],
        PassThroughSettings: [, _json, `passThroughSettings`],
        WavSettings: [, (_) => de_WavSettings(_, context), `wavSettings`],
    });
};
const de_AudioDescription = (output, context) => {
    return take(output, {
        AudioDashRoles: [, _json, `audioDashRoles`],
        AudioNormalizationSettings: [, (_) => de_AudioNormalizationSettings(_, context), `audioNormalizationSettings`],
        AudioSelectorName: [, __expectString, `audioSelectorName`],
        AudioType: [, __expectString, `audioType`],
        AudioTypeControl: [, __expectString, `audioTypeControl`],
        AudioWatermarkingSettings: [, (_) => de_AudioWatermarkSettings(_, context), `audioWatermarkingSettings`],
        CodecSettings: [, (_) => de_AudioCodecSettings(_, context), `codecSettings`],
        DvbDashAccessibility: [, __expectString, `dvbDashAccessibility`],
        LanguageCode: [, __expectString, `languageCode`],
        LanguageCodeControl: [, __expectString, `languageCodeControl`],
        Name: [, __expectString, `name`],
        RemixSettings: [, (_) => de_RemixSettings(_, context), `remixSettings`],
        StreamName: [, __expectString, `streamName`],
    });
};
const de_AudioDolbyEDecode = (output, context) => {
    return take(output, {
        ProgramSelection: [, __expectString, `programSelection`],
    });
};
const de_AudioHlsRenditionSelection = (output, context) => {
    return take(output, {
        GroupId: [, __expectString, `groupId`],
        Name: [, __expectString, `name`],
    });
};
const de_AudioLanguageSelection = (output, context) => {
    return take(output, {
        LanguageCode: [, __expectString, `languageCode`],
        LanguageSelectionPolicy: [, __expectString, `languageSelectionPolicy`],
    });
};
const de_AudioNormalizationSettings = (output, context) => {
    return take(output, {
        Algorithm: [, __expectString, `algorithm`],
        AlgorithmControl: [, __expectString, `algorithmControl`],
        TargetLkfs: [, __limitedParseDouble, `targetLkfs`],
    });
};
const de_AudioOnlyHlsSettings = (output, context) => {
    return take(output, {
        AudioGroupId: [, __expectString, `audioGroupId`],
        AudioOnlyImage: [, (_) => de_InputLocation(_, context), `audioOnlyImage`],
        AudioTrackType: [, __expectString, `audioTrackType`],
        SegmentType: [, __expectString, `segmentType`],
    });
};
const de_AudioPidSelection = (output, context) => {
    return take(output, {
        Pid: [, __expectInt32, `pid`],
    });
};
const de_AudioSelector = (output, context) => {
    return take(output, {
        Name: [, __expectString, `name`],
        SelectorSettings: [, (_) => de_AudioSelectorSettings(_, context), `selectorSettings`],
    });
};
const de_AudioSelectorSettings = (output, context) => {
    return take(output, {
        AudioHlsRenditionSelection: [, (_) => de_AudioHlsRenditionSelection(_, context), `audioHlsRenditionSelection`],
        AudioLanguageSelection: [, (_) => de_AudioLanguageSelection(_, context), `audioLanguageSelection`],
        AudioPidSelection: [, (_) => de_AudioPidSelection(_, context), `audioPidSelection`],
        AudioTrackSelection: [, (_) => de_AudioTrackSelection(_, context), `audioTrackSelection`],
    });
};
const de_AudioSilenceFailoverSettings = (output, context) => {
    return take(output, {
        AudioSelectorName: [, __expectString, `audioSelectorName`],
        AudioSilenceThresholdMsec: [, __expectInt32, `audioSilenceThresholdMsec`],
    });
};
const de_AudioTrack = (output, context) => {
    return take(output, {
        Track: [, __expectInt32, `track`],
    });
};
const de_AudioTrackSelection = (output, context) => {
    return take(output, {
        DolbyEDecode: [, (_) => de_AudioDolbyEDecode(_, context), `dolbyEDecode`],
        Tracks: [, (_) => de___listOfAudioTrack(_, context), `tracks`],
    });
};
const de_AudioWatermarkSettings = (output, context) => {
    return take(output, {
        NielsenWatermarksSettings: [, (_) => de_NielsenWatermarksSettings(_, context), `nielsenWatermarksSettings`],
    });
};
const de_AutomaticInputFailoverSettings = (output, context) => {
    return take(output, {
        ErrorClearTimeMsec: [, __expectInt32, `errorClearTimeMsec`],
        FailoverConditions: [, (_) => de___listOfFailoverCondition(_, context), `failoverConditions`],
        InputPreference: [, __expectString, `inputPreference`],
        SecondaryInputId: [, __expectString, `secondaryInputId`],
    });
};
const de_AvailBlanking = (output, context) => {
    return take(output, {
        AvailBlankingImage: [, (_) => de_InputLocation(_, context), `availBlankingImage`],
        State: [, __expectString, `state`],
    });
};
const de_AvailConfiguration = (output, context) => {
    return take(output, {
        AvailSettings: [, (_) => de_AvailSettings(_, context), `availSettings`],
    });
};
const de_AvailSettings = (output, context) => {
    return take(output, {
        Esam: [, (_) => de_Esam(_, context), `esam`],
        Scte35SpliceInsert: [, (_) => de_Scte35SpliceInsert(_, context), `scte35SpliceInsert`],
        Scte35TimeSignalApos: [, (_) => de_Scte35TimeSignalApos(_, context), `scte35TimeSignalApos`],
    });
};
const de_BatchFailedResultModel = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        Code: [, __expectString, `code`],
        Id: [, __expectString, `id`],
        Message: [, __expectString, `message`],
    });
};
const de_BatchScheduleActionCreateResult = (output, context) => {
    return take(output, {
        ScheduleActions: [, (_) => de___listOfScheduleAction(_, context), `scheduleActions`],
    });
};
const de_BatchScheduleActionDeleteResult = (output, context) => {
    return take(output, {
        ScheduleActions: [, (_) => de___listOfScheduleAction(_, context), `scheduleActions`],
    });
};
const de_BatchSuccessfulResultModel = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        Id: [, __expectString, `id`],
        State: [, __expectString, `state`],
    });
};
const de_BlackoutSlate = (output, context) => {
    return take(output, {
        BlackoutSlateImage: [, (_) => de_InputLocation(_, context), `blackoutSlateImage`],
        NetworkEndBlackout: [, __expectString, `networkEndBlackout`],
        NetworkEndBlackoutImage: [, (_) => de_InputLocation(_, context), `networkEndBlackoutImage`],
        NetworkId: [, __expectString, `networkId`],
        State: [, __expectString, `state`],
    });
};
const de_BurnInDestinationSettings = (output, context) => {
    return take(output, {
        Alignment: [, __expectString, `alignment`],
        BackgroundColor: [, __expectString, `backgroundColor`],
        BackgroundOpacity: [, __expectInt32, `backgroundOpacity`],
        Font: [, (_) => de_InputLocation(_, context), `font`],
        FontColor: [, __expectString, `fontColor`],
        FontOpacity: [, __expectInt32, `fontOpacity`],
        FontResolution: [, __expectInt32, `fontResolution`],
        FontSize: [, __expectString, `fontSize`],
        OutlineColor: [, __expectString, `outlineColor`],
        OutlineSize: [, __expectInt32, `outlineSize`],
        ShadowColor: [, __expectString, `shadowColor`],
        ShadowOpacity: [, __expectInt32, `shadowOpacity`],
        ShadowXOffset: [, __expectInt32, `shadowXOffset`],
        ShadowYOffset: [, __expectInt32, `shadowYOffset`],
        TeletextGridControl: [, __expectString, `teletextGridControl`],
        XPosition: [, __expectInt32, `xPosition`],
        YPosition: [, __expectInt32, `yPosition`],
    });
};
const de_CaptionDescription = (output, context) => {
    return take(output, {
        Accessibility: [, __expectString, `accessibility`],
        CaptionDashRoles: [, _json, `captionDashRoles`],
        CaptionSelectorName: [, __expectString, `captionSelectorName`],
        DestinationSettings: [, (_) => de_CaptionDestinationSettings(_, context), `destinationSettings`],
        DvbDashAccessibility: [, __expectString, `dvbDashAccessibility`],
        LanguageCode: [, __expectString, `languageCode`],
        LanguageDescription: [, __expectString, `languageDescription`],
        Name: [, __expectString, `name`],
    });
};
const de_CaptionDestinationSettings = (output, context) => {
    return take(output, {
        AribDestinationSettings: [, _json, `aribDestinationSettings`],
        BurnInDestinationSettings: [, (_) => de_BurnInDestinationSettings(_, context), `burnInDestinationSettings`],
        DvbSubDestinationSettings: [, (_) => de_DvbSubDestinationSettings(_, context), `dvbSubDestinationSettings`],
        EbuTtDDestinationSettings: [, (_) => de_EbuTtDDestinationSettings(_, context), `ebuTtDDestinationSettings`],
        EmbeddedDestinationSettings: [, _json, `embeddedDestinationSettings`],
        EmbeddedPlusScte20DestinationSettings: [, _json, `embeddedPlusScte20DestinationSettings`],
        RtmpCaptionInfoDestinationSettings: [, _json, `rtmpCaptionInfoDestinationSettings`],
        Scte20PlusEmbeddedDestinationSettings: [, _json, `scte20PlusEmbeddedDestinationSettings`],
        Scte27DestinationSettings: [, _json, `scte27DestinationSettings`],
        SmpteTtDestinationSettings: [, _json, `smpteTtDestinationSettings`],
        TeletextDestinationSettings: [, _json, `teletextDestinationSettings`],
        TtmlDestinationSettings: [, (_) => de_TtmlDestinationSettings(_, context), `ttmlDestinationSettings`],
        WebvttDestinationSettings: [, (_) => de_WebvttDestinationSettings(_, context), `webvttDestinationSettings`],
    });
};
const de_CaptionLanguageMapping = (output, context) => {
    return take(output, {
        CaptionChannel: [, __expectInt32, `captionChannel`],
        LanguageCode: [, __expectString, `languageCode`],
        LanguageDescription: [, __expectString, `languageDescription`],
    });
};
const de_CaptionRectangle = (output, context) => {
    return take(output, {
        Height: [, __limitedParseDouble, `height`],
        LeftOffset: [, __limitedParseDouble, `leftOffset`],
        TopOffset: [, __limitedParseDouble, `topOffset`],
        Width: [, __limitedParseDouble, `width`],
    });
};
const de_CaptionSelector = (output, context) => {
    return take(output, {
        LanguageCode: [, __expectString, `languageCode`],
        Name: [, __expectString, `name`],
        SelectorSettings: [, (_) => de_CaptionSelectorSettings(_, context), `selectorSettings`],
    });
};
const de_CaptionSelectorSettings = (output, context) => {
    return take(output, {
        AncillarySourceSettings: [, (_) => de_AncillarySourceSettings(_, context), `ancillarySourceSettings`],
        AribSourceSettings: [, _json, `aribSourceSettings`],
        DvbSubSourceSettings: [, (_) => de_DvbSubSourceSettings(_, context), `dvbSubSourceSettings`],
        EmbeddedSourceSettings: [, (_) => de_EmbeddedSourceSettings(_, context), `embeddedSourceSettings`],
        Scte20SourceSettings: [, (_) => de_Scte20SourceSettings(_, context), `scte20SourceSettings`],
        Scte27SourceSettings: [, (_) => de_Scte27SourceSettings(_, context), `scte27SourceSettings`],
        TeletextSourceSettings: [, (_) => de_TeletextSourceSettings(_, context), `teletextSourceSettings`],
    });
};
const de_CdiInputSpecification = (output, context) => {
    return take(output, {
        Resolution: [, __expectString, `resolution`],
    });
};
const de_Channel = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
        ChannelClass: [, __expectString, `channelClass`],
        Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
        EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
        EncoderSettings: [, (_) => de_EncoderSettings(_, context), `encoderSettings`],
        Id: [, __expectString, `id`],
        InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
        InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
        LogLevel: [, __expectString, `logLevel`],
        Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
        Name: [, __expectString, `name`],
        PipelineDetails: [, (_) => de___listOfPipelineDetail(_, context), `pipelineDetails`],
        PipelinesRunningCount: [, __expectInt32, `pipelinesRunningCount`],
        RoleArn: [, __expectString, `roleArn`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`],
    });
};
const de_ChannelEgressEndpoint = (output, context) => {
    return take(output, {
        SourceIp: [, __expectString, `sourceIp`],
    });
};
const de_ChannelSummary = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
        ChannelClass: [, __expectString, `channelClass`],
        Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
        EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
        Id: [, __expectString, `id`],
        InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
        InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
        LogLevel: [, __expectString, `logLevel`],
        Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
        Name: [, __expectString, `name`],
        PipelinesRunningCount: [, __expectInt32, `pipelinesRunningCount`],
        RoleArn: [, __expectString, `roleArn`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`],
    });
};
const de_CloudWatchAlarmTemplateGroupSummary = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        Id: [, __expectString, `id`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
        TemplateCount: [, __expectInt32, `templateCount`],
    });
};
const de_CloudWatchAlarmTemplateSummary = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        ComparisonOperator: [, __expectString, `comparisonOperator`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        DatapointsToAlarm: [, __expectInt32, `datapointsToAlarm`],
        Description: [, __expectString, `description`],
        EvaluationPeriods: [, __expectInt32, `evaluationPeriods`],
        GroupId: [, __expectString, `groupId`],
        Id: [, __expectString, `id`],
        MetricName: [, __expectString, `metricName`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Period: [, __expectInt32, `period`],
        Statistic: [, __expectString, `statistic`],
        Tags: [, _json, `tags`],
        TargetResourceType: [, __expectString, `targetResourceType`],
        Threshold: [, __limitedParseDouble, `threshold`],
        TreatMissingData: [, __expectString, `treatMissingData`],
    });
};
const de_CmafIngestGroupSettings = (output, context) => {
    return take(output, {
        Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
        NielsenId3Behavior: [, __expectString, `nielsenId3Behavior`],
        Scte35Type: [, __expectString, `scte35Type`],
        SegmentLength: [, __expectInt32, `segmentLength`],
        SegmentLengthUnits: [, __expectString, `segmentLengthUnits`],
        SendDelayMs: [, __expectInt32, `sendDelayMs`],
    });
};
const de_CmafIngestOutputSettings = (output, context) => {
    return take(output, {
        NameModifier: [, __expectString, `nameModifier`],
    });
};
const de_ColorCorrection = (output, context) => {
    return take(output, {
        InputColorSpace: [, __expectString, `inputColorSpace`],
        OutputColorSpace: [, __expectString, `outputColorSpace`],
        Uri: [, __expectString, `uri`],
    });
};
const de_ColorCorrectionSettings = (output, context) => {
    return take(output, {
        GlobalColorCorrections: [, (_) => de___listOfColorCorrection(_, context), `globalColorCorrections`],
    });
};
const de_DvbNitSettings = (output, context) => {
    return take(output, {
        NetworkId: [, __expectInt32, `networkId`],
        NetworkName: [, __expectString, `networkName`],
        RepInterval: [, __expectInt32, `repInterval`],
    });
};
const de_DvbSdtSettings = (output, context) => {
    return take(output, {
        OutputSdt: [, __expectString, `outputSdt`],
        RepInterval: [, __expectInt32, `repInterval`],
        ServiceName: [, __expectString, `serviceName`],
        ServiceProviderName: [, __expectString, `serviceProviderName`],
    });
};
const de_DvbSubDestinationSettings = (output, context) => {
    return take(output, {
        Alignment: [, __expectString, `alignment`],
        BackgroundColor: [, __expectString, `backgroundColor`],
        BackgroundOpacity: [, __expectInt32, `backgroundOpacity`],
        Font: [, (_) => de_InputLocation(_, context), `font`],
        FontColor: [, __expectString, `fontColor`],
        FontOpacity: [, __expectInt32, `fontOpacity`],
        FontResolution: [, __expectInt32, `fontResolution`],
        FontSize: [, __expectString, `fontSize`],
        OutlineColor: [, __expectString, `outlineColor`],
        OutlineSize: [, __expectInt32, `outlineSize`],
        ShadowColor: [, __expectString, `shadowColor`],
        ShadowOpacity: [, __expectInt32, `shadowOpacity`],
        ShadowXOffset: [, __expectInt32, `shadowXOffset`],
        ShadowYOffset: [, __expectInt32, `shadowYOffset`],
        TeletextGridControl: [, __expectString, `teletextGridControl`],
        XPosition: [, __expectInt32, `xPosition`],
        YPosition: [, __expectInt32, `yPosition`],
    });
};
const de_DvbSubSourceSettings = (output, context) => {
    return take(output, {
        OcrLanguage: [, __expectString, `ocrLanguage`],
        Pid: [, __expectInt32, `pid`],
    });
};
const de_DvbTdtSettings = (output, context) => {
    return take(output, {
        RepInterval: [, __expectInt32, `repInterval`],
    });
};
const de_Eac3AtmosSettings = (output, context) => {
    return take(output, {
        Bitrate: [, __limitedParseDouble, `bitrate`],
        CodingMode: [, __expectString, `codingMode`],
        Dialnorm: [, __expectInt32, `dialnorm`],
        DrcLine: [, __expectString, `drcLine`],
        DrcRf: [, __expectString, `drcRf`],
        HeightTrim: [, __limitedParseDouble, `heightTrim`],
        SurroundTrim: [, __limitedParseDouble, `surroundTrim`],
    });
};
const de_Eac3Settings = (output, context) => {
    return take(output, {
        AttenuationControl: [, __expectString, `attenuationControl`],
        Bitrate: [, __limitedParseDouble, `bitrate`],
        BitstreamMode: [, __expectString, `bitstreamMode`],
        CodingMode: [, __expectString, `codingMode`],
        DcFilter: [, __expectString, `dcFilter`],
        Dialnorm: [, __expectInt32, `dialnorm`],
        DrcLine: [, __expectString, `drcLine`],
        DrcRf: [, __expectString, `drcRf`],
        LfeControl: [, __expectString, `lfeControl`],
        LfeFilter: [, __expectString, `lfeFilter`],
        LoRoCenterMixLevel: [, __limitedParseDouble, `loRoCenterMixLevel`],
        LoRoSurroundMixLevel: [, __limitedParseDouble, `loRoSurroundMixLevel`],
        LtRtCenterMixLevel: [, __limitedParseDouble, `ltRtCenterMixLevel`],
        LtRtSurroundMixLevel: [, __limitedParseDouble, `ltRtSurroundMixLevel`],
        MetadataControl: [, __expectString, `metadataControl`],
        PassthroughControl: [, __expectString, `passthroughControl`],
        PhaseControl: [, __expectString, `phaseControl`],
        StereoDownmix: [, __expectString, `stereoDownmix`],
        SurroundExMode: [, __expectString, `surroundExMode`],
        SurroundMode: [, __expectString, `surroundMode`],
    });
};
const de_EbuTtDDestinationSettings = (output, context) => {
    return take(output, {
        CopyrightHolder: [, __expectString, `copyrightHolder`],
        FillLineGap: [, __expectString, `fillLineGap`],
        FontFamily: [, __expectString, `fontFamily`],
        StyleControl: [, __expectString, `styleControl`],
    });
};
const de_EmbeddedSourceSettings = (output, context) => {
    return take(output, {
        Convert608To708: [, __expectString, `convert608To708`],
        Scte20Detection: [, __expectString, `scte20Detection`],
        Source608ChannelNumber: [, __expectInt32, `source608ChannelNumber`],
        Source608TrackNumber: [, __expectInt32, `source608TrackNumber`],
    });
};
const de_EncoderSettings = (output, context) => {
    return take(output, {
        AudioDescriptions: [, (_) => de___listOfAudioDescription(_, context), `audioDescriptions`],
        AvailBlanking: [, (_) => de_AvailBlanking(_, context), `availBlanking`],
        AvailConfiguration: [, (_) => de_AvailConfiguration(_, context), `availConfiguration`],
        BlackoutSlate: [, (_) => de_BlackoutSlate(_, context), `blackoutSlate`],
        CaptionDescriptions: [, (_) => de___listOfCaptionDescription(_, context), `captionDescriptions`],
        ColorCorrectionSettings: [, (_) => de_ColorCorrectionSettings(_, context), `colorCorrectionSettings`],
        FeatureActivations: [, (_) => de_FeatureActivations(_, context), `featureActivations`],
        GlobalConfiguration: [, (_) => de_GlobalConfiguration(_, context), `globalConfiguration`],
        MotionGraphicsConfiguration: [
            ,
            (_) => de_MotionGraphicsConfiguration(_, context),
            `motionGraphicsConfiguration`,
        ],
        NielsenConfiguration: [, (_) => de_NielsenConfiguration(_, context), `nielsenConfiguration`],
        OutputGroups: [, (_) => de___listOfOutputGroup(_, context), `outputGroups`],
        ThumbnailConfiguration: [, (_) => de_ThumbnailConfiguration(_, context), `thumbnailConfiguration`],
        TimecodeConfig: [, (_) => de_TimecodeConfig(_, context), `timecodeConfig`],
        VideoDescriptions: [, (_) => de___listOfVideoDescription(_, context), `videoDescriptions`],
    });
};
const de_EpochLockingSettings = (output, context) => {
    return take(output, {
        CustomEpoch: [, __expectString, `customEpoch`],
        JamSyncTime: [, __expectString, `jamSyncTime`],
    });
};
const de_Esam = (output, context) => {
    return take(output, {
        AcquisitionPointId: [, __expectString, `acquisitionPointId`],
        AdAvailOffset: [, __expectInt32, `adAvailOffset`],
        PasswordParam: [, __expectString, `passwordParam`],
        PoisEndpoint: [, __expectString, `poisEndpoint`],
        Username: [, __expectString, `username`],
        ZoneIdentity: [, __expectString, `zoneIdentity`],
    });
};
const de_EventBridgeRuleTemplateGroupSummary = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        Id: [, __expectString, `id`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
        TemplateCount: [, __expectInt32, `templateCount`],
    });
};
const de_EventBridgeRuleTemplateSummary = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        EventTargetCount: [, __expectInt32, `eventTargetCount`],
        EventType: [, __expectString, `eventType`],
        GroupId: [, __expectString, `groupId`],
        Id: [, __expectString, `id`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
    });
};
const de_EventBridgeRuleTemplateTarget = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
    });
};
const de_FailedMediaResourceMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_MediaResource(value, context);
        return acc;
    }, {});
};
const de_FailoverCondition = (output, context) => {
    return take(output, {
        FailoverConditionSettings: [, (_) => de_FailoverConditionSettings(_, context), `failoverConditionSettings`],
    });
};
const de_FailoverConditionSettings = (output, context) => {
    return take(output, {
        AudioSilenceSettings: [, (_) => de_AudioSilenceFailoverSettings(_, context), `audioSilenceSettings`],
        InputLossSettings: [, (_) => de_InputLossFailoverSettings(_, context), `inputLossSettings`],
        VideoBlackSettings: [, (_) => de_VideoBlackFailoverSettings(_, context), `videoBlackSettings`],
    });
};
const de_FeatureActivations = (output, context) => {
    return take(output, {
        InputPrepareScheduleActions: [, __expectString, `inputPrepareScheduleActions`],
        OutputStaticImageOverlayScheduleActions: [, __expectString, `outputStaticImageOverlayScheduleActions`],
    });
};
const de_FecOutputSettings = (output, context) => {
    return take(output, {
        ColumnDepth: [, __expectInt32, `columnDepth`],
        IncludeFec: [, __expectString, `includeFec`],
        RowLength: [, __expectInt32, `rowLength`],
    });
};
const de_FixedModeScheduleActionStartSettings = (output, context) => {
    return take(output, {
        Time: [, __expectString, `time`],
    });
};
const de_Fmp4HlsSettings = (output, context) => {
    return take(output, {
        AudioRenditionSets: [, __expectString, `audioRenditionSets`],
        NielsenId3Behavior: [, __expectString, `nielsenId3Behavior`],
        TimedMetadataBehavior: [, __expectString, `timedMetadataBehavior`],
    });
};
const de_FollowModeScheduleActionStartSettings = (output, context) => {
    return take(output, {
        FollowPoint: [, __expectString, `followPoint`],
        ReferenceActionName: [, __expectString, `referenceActionName`],
    });
};
const de_FrameCaptureCdnSettings = (output, context) => {
    return take(output, {
        FrameCaptureS3Settings: [, (_) => de_FrameCaptureS3Settings(_, context), `frameCaptureS3Settings`],
    });
};
const de_FrameCaptureGroupSettings = (output, context) => {
    return take(output, {
        Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
        FrameCaptureCdnSettings: [, (_) => de_FrameCaptureCdnSettings(_, context), `frameCaptureCdnSettings`],
    });
};
const de_FrameCaptureOutputSettings = (output, context) => {
    return take(output, {
        NameModifier: [, __expectString, `nameModifier`],
    });
};
const de_FrameCaptureS3Settings = (output, context) => {
    return take(output, {
        CannedAcl: [, __expectString, `cannedAcl`],
    });
};
const de_FrameCaptureSettings = (output, context) => {
    return take(output, {
        CaptureInterval: [, __expectInt32, `captureInterval`],
        CaptureIntervalUnits: [, __expectString, `captureIntervalUnits`],
        TimecodeBurninSettings: [, (_) => de_TimecodeBurninSettings(_, context), `timecodeBurninSettings`],
    });
};
const de_GlobalConfiguration = (output, context) => {
    return take(output, {
        InitialAudioGain: [, __expectInt32, `initialAudioGain`],
        InputEndAction: [, __expectString, `inputEndAction`],
        InputLossBehavior: [, (_) => de_InputLossBehavior(_, context), `inputLossBehavior`],
        OutputLockingMode: [, __expectString, `outputLockingMode`],
        OutputLockingSettings: [, (_) => de_OutputLockingSettings(_, context), `outputLockingSettings`],
        OutputTimingSource: [, __expectString, `outputTimingSource`],
        SupportLowFramerateInputs: [, __expectString, `supportLowFramerateInputs`],
    });
};
const de_H264ColorSpaceSettings = (output, context) => {
    return take(output, {
        ColorSpacePassthroughSettings: [, _json, `colorSpacePassthroughSettings`],
        Rec601Settings: [, _json, `rec601Settings`],
        Rec709Settings: [, _json, `rec709Settings`],
    });
};
const de_H264FilterSettings = (output, context) => {
    return take(output, {
        TemporalFilterSettings: [, (_) => de_TemporalFilterSettings(_, context), `temporalFilterSettings`],
    });
};
const de_H264Settings = (output, context) => {
    return take(output, {
        AdaptiveQuantization: [, __expectString, `adaptiveQuantization`],
        AfdSignaling: [, __expectString, `afdSignaling`],
        Bitrate: [, __expectInt32, `bitrate`],
        BufFillPct: [, __expectInt32, `bufFillPct`],
        BufSize: [, __expectInt32, `bufSize`],
        ColorMetadata: [, __expectString, `colorMetadata`],
        ColorSpaceSettings: [, (_) => de_H264ColorSpaceSettings(_, context), `colorSpaceSettings`],
        EntropyEncoding: [, __expectString, `entropyEncoding`],
        FilterSettings: [, (_) => de_H264FilterSettings(_, context), `filterSettings`],
        FixedAfd: [, __expectString, `fixedAfd`],
        FlickerAq: [, __expectString, `flickerAq`],
        ForceFieldPictures: [, __expectString, `forceFieldPictures`],
        FramerateControl: [, __expectString, `framerateControl`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        GopBReference: [, __expectString, `gopBReference`],
        GopClosedCadence: [, __expectInt32, `gopClosedCadence`],
        GopNumBFrames: [, __expectInt32, `gopNumBFrames`],
        GopSize: [, __limitedParseDouble, `gopSize`],
        GopSizeUnits: [, __expectString, `gopSizeUnits`],
        Level: [, __expectString, `level`],
        LookAheadRateControl: [, __expectString, `lookAheadRateControl`],
        MaxBitrate: [, __expectInt32, `maxBitrate`],
        MinIInterval: [, __expectInt32, `minIInterval`],
        NumRefFrames: [, __expectInt32, `numRefFrames`],
        ParControl: [, __expectString, `parControl`],
        ParDenominator: [, __expectInt32, `parDenominator`],
        ParNumerator: [, __expectInt32, `parNumerator`],
        Profile: [, __expectString, `profile`],
        QualityLevel: [, __expectString, `qualityLevel`],
        QvbrQualityLevel: [, __expectInt32, `qvbrQualityLevel`],
        RateControlMode: [, __expectString, `rateControlMode`],
        ScanType: [, __expectString, `scanType`],
        SceneChangeDetect: [, __expectString, `sceneChangeDetect`],
        Slices: [, __expectInt32, `slices`],
        Softness: [, __expectInt32, `softness`],
        SpatialAq: [, __expectString, `spatialAq`],
        SubgopLength: [, __expectString, `subgopLength`],
        Syntax: [, __expectString, `syntax`],
        TemporalAq: [, __expectString, `temporalAq`],
        TimecodeBurninSettings: [, (_) => de_TimecodeBurninSettings(_, context), `timecodeBurninSettings`],
        TimecodeInsertion: [, __expectString, `timecodeInsertion`],
    });
};
const de_H265ColorSpaceSettings = (output, context) => {
    return take(output, {
        ColorSpacePassthroughSettings: [, _json, `colorSpacePassthroughSettings`],
        DolbyVision81Settings: [, _json, `dolbyVision81Settings`],
        Hdr10Settings: [, (_) => de_Hdr10Settings(_, context), `hdr10Settings`],
        Rec601Settings: [, _json, `rec601Settings`],
        Rec709Settings: [, _json, `rec709Settings`],
    });
};
const de_H265FilterSettings = (output, context) => {
    return take(output, {
        TemporalFilterSettings: [, (_) => de_TemporalFilterSettings(_, context), `temporalFilterSettings`],
    });
};
const de_H265Settings = (output, context) => {
    return take(output, {
        AdaptiveQuantization: [, __expectString, `adaptiveQuantization`],
        AfdSignaling: [, __expectString, `afdSignaling`],
        AlternativeTransferFunction: [, __expectString, `alternativeTransferFunction`],
        Bitrate: [, __expectInt32, `bitrate`],
        BufSize: [, __expectInt32, `bufSize`],
        ColorMetadata: [, __expectString, `colorMetadata`],
        ColorSpaceSettings: [, (_) => de_H265ColorSpaceSettings(_, context), `colorSpaceSettings`],
        FilterSettings: [, (_) => de_H265FilterSettings(_, context), `filterSettings`],
        FixedAfd: [, __expectString, `fixedAfd`],
        FlickerAq: [, __expectString, `flickerAq`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        GopClosedCadence: [, __expectInt32, `gopClosedCadence`],
        GopSize: [, __limitedParseDouble, `gopSize`],
        GopSizeUnits: [, __expectString, `gopSizeUnits`],
        Level: [, __expectString, `level`],
        LookAheadRateControl: [, __expectString, `lookAheadRateControl`],
        MaxBitrate: [, __expectInt32, `maxBitrate`],
        MinIInterval: [, __expectInt32, `minIInterval`],
        MvOverPictureBoundaries: [, __expectString, `mvOverPictureBoundaries`],
        MvTemporalPredictor: [, __expectString, `mvTemporalPredictor`],
        ParDenominator: [, __expectInt32, `parDenominator`],
        ParNumerator: [, __expectInt32, `parNumerator`],
        Profile: [, __expectString, `profile`],
        QvbrQualityLevel: [, __expectInt32, `qvbrQualityLevel`],
        RateControlMode: [, __expectString, `rateControlMode`],
        ScanType: [, __expectString, `scanType`],
        SceneChangeDetect: [, __expectString, `sceneChangeDetect`],
        Slices: [, __expectInt32, `slices`],
        Tier: [, __expectString, `tier`],
        TileHeight: [, __expectInt32, `tileHeight`],
        TilePadding: [, __expectString, `tilePadding`],
        TileWidth: [, __expectInt32, `tileWidth`],
        TimecodeBurninSettings: [, (_) => de_TimecodeBurninSettings(_, context), `timecodeBurninSettings`],
        TimecodeInsertion: [, __expectString, `timecodeInsertion`],
        TreeblockSize: [, __expectString, `treeblockSize`],
    });
};
const de_Hdr10Settings = (output, context) => {
    return take(output, {
        MaxCll: [, __expectInt32, `maxCll`],
        MaxFall: [, __expectInt32, `maxFall`],
    });
};
const de_HlsAkamaiSettings = (output, context) => {
    return take(output, {
        ConnectionRetryInterval: [, __expectInt32, `connectionRetryInterval`],
        FilecacheDuration: [, __expectInt32, `filecacheDuration`],
        HttpTransferMode: [, __expectString, `httpTransferMode`],
        NumRetries: [, __expectInt32, `numRetries`],
        RestartDelay: [, __expectInt32, `restartDelay`],
        Salt: [, __expectString, `salt`],
        Token: [, __expectString, `token`],
    });
};
const de_HlsBasicPutSettings = (output, context) => {
    return take(output, {
        ConnectionRetryInterval: [, __expectInt32, `connectionRetryInterval`],
        FilecacheDuration: [, __expectInt32, `filecacheDuration`],
        NumRetries: [, __expectInt32, `numRetries`],
        RestartDelay: [, __expectInt32, `restartDelay`],
    });
};
const de_HlsCdnSettings = (output, context) => {
    return take(output, {
        HlsAkamaiSettings: [, (_) => de_HlsAkamaiSettings(_, context), `hlsAkamaiSettings`],
        HlsBasicPutSettings: [, (_) => de_HlsBasicPutSettings(_, context), `hlsBasicPutSettings`],
        HlsMediaStoreSettings: [, (_) => de_HlsMediaStoreSettings(_, context), `hlsMediaStoreSettings`],
        HlsS3Settings: [, (_) => de_HlsS3Settings(_, context), `hlsS3Settings`],
        HlsWebdavSettings: [, (_) => de_HlsWebdavSettings(_, context), `hlsWebdavSettings`],
    });
};
const de_HlsGroupSettings = (output, context) => {
    return take(output, {
        AdMarkers: [, _json, `adMarkers`],
        BaseUrlContent: [, __expectString, `baseUrlContent`],
        BaseUrlContent1: [, __expectString, `baseUrlContent1`],
        BaseUrlManifest: [, __expectString, `baseUrlManifest`],
        BaseUrlManifest1: [, __expectString, `baseUrlManifest1`],
        CaptionLanguageMappings: [, (_) => de___listOfCaptionLanguageMapping(_, context), `captionLanguageMappings`],
        CaptionLanguageSetting: [, __expectString, `captionLanguageSetting`],
        ClientCache: [, __expectString, `clientCache`],
        CodecSpecification: [, __expectString, `codecSpecification`],
        ConstantIv: [, __expectString, `constantIv`],
        Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
        DirectoryStructure: [, __expectString, `directoryStructure`],
        DiscontinuityTags: [, __expectString, `discontinuityTags`],
        EncryptionType: [, __expectString, `encryptionType`],
        HlsCdnSettings: [, (_) => de_HlsCdnSettings(_, context), `hlsCdnSettings`],
        HlsId3SegmentTagging: [, __expectString, `hlsId3SegmentTagging`],
        IFrameOnlyPlaylists: [, __expectString, `iFrameOnlyPlaylists`],
        IncompleteSegmentBehavior: [, __expectString, `incompleteSegmentBehavior`],
        IndexNSegments: [, __expectInt32, `indexNSegments`],
        InputLossAction: [, __expectString, `inputLossAction`],
        IvInManifest: [, __expectString, `ivInManifest`],
        IvSource: [, __expectString, `ivSource`],
        KeepSegments: [, __expectInt32, `keepSegments`],
        KeyFormat: [, __expectString, `keyFormat`],
        KeyFormatVersions: [, __expectString, `keyFormatVersions`],
        KeyProviderSettings: [, (_) => de_KeyProviderSettings(_, context), `keyProviderSettings`],
        ManifestCompression: [, __expectString, `manifestCompression`],
        ManifestDurationFormat: [, __expectString, `manifestDurationFormat`],
        MinSegmentLength: [, __expectInt32, `minSegmentLength`],
        Mode: [, __expectString, `mode`],
        OutputSelection: [, __expectString, `outputSelection`],
        ProgramDateTime: [, __expectString, `programDateTime`],
        ProgramDateTimeClock: [, __expectString, `programDateTimeClock`],
        ProgramDateTimePeriod: [, __expectInt32, `programDateTimePeriod`],
        RedundantManifest: [, __expectString, `redundantManifest`],
        SegmentLength: [, __expectInt32, `segmentLength`],
        SegmentationMode: [, __expectString, `segmentationMode`],
        SegmentsPerSubdirectory: [, __expectInt32, `segmentsPerSubdirectory`],
        StreamInfResolution: [, __expectString, `streamInfResolution`],
        TimedMetadataId3Frame: [, __expectString, `timedMetadataId3Frame`],
        TimedMetadataId3Period: [, __expectInt32, `timedMetadataId3Period`],
        TimestampDeltaMilliseconds: [, __expectInt32, `timestampDeltaMilliseconds`],
        TsFileMode: [, __expectString, `tsFileMode`],
    });
};
const de_HlsId3SegmentTaggingScheduleActionSettings = (output, context) => {
    return take(output, {
        Id3: [, __expectString, `id3`],
        Tag: [, __expectString, `tag`],
    });
};
const de_HlsInputSettings = (output, context) => {
    return take(output, {
        Bandwidth: [, __expectInt32, `bandwidth`],
        BufferSegments: [, __expectInt32, `bufferSegments`],
        Retries: [, __expectInt32, `retries`],
        RetryInterval: [, __expectInt32, `retryInterval`],
        Scte35Source: [, __expectString, `scte35Source`],
    });
};
const de_HlsMediaStoreSettings = (output, context) => {
    return take(output, {
        ConnectionRetryInterval: [, __expectInt32, `connectionRetryInterval`],
        FilecacheDuration: [, __expectInt32, `filecacheDuration`],
        MediaStoreStorageClass: [, __expectString, `mediaStoreStorageClass`],
        NumRetries: [, __expectInt32, `numRetries`],
        RestartDelay: [, __expectInt32, `restartDelay`],
    });
};
const de_HlsOutputSettings = (output, context) => {
    return take(output, {
        H265PackagingType: [, __expectString, `h265PackagingType`],
        HlsSettings: [, (_) => de_HlsSettings(_, context), `hlsSettings`],
        NameModifier: [, __expectString, `nameModifier`],
        SegmentModifier: [, __expectString, `segmentModifier`],
    });
};
const de_HlsS3Settings = (output, context) => {
    return take(output, {
        CannedAcl: [, __expectString, `cannedAcl`],
    });
};
const de_HlsSettings = (output, context) => {
    return take(output, {
        AudioOnlyHlsSettings: [, (_) => de_AudioOnlyHlsSettings(_, context), `audioOnlyHlsSettings`],
        Fmp4HlsSettings: [, (_) => de_Fmp4HlsSettings(_, context), `fmp4HlsSettings`],
        FrameCaptureHlsSettings: [, _json, `frameCaptureHlsSettings`],
        StandardHlsSettings: [, (_) => de_StandardHlsSettings(_, context), `standardHlsSettings`],
    });
};
const de_HlsTimedMetadataScheduleActionSettings = (output, context) => {
    return take(output, {
        Id3: [, __expectString, `id3`],
    });
};
const de_HlsWebdavSettings = (output, context) => {
    return take(output, {
        ConnectionRetryInterval: [, __expectInt32, `connectionRetryInterval`],
        FilecacheDuration: [, __expectInt32, `filecacheDuration`],
        HttpTransferMode: [, __expectString, `httpTransferMode`],
        NumRetries: [, __expectInt32, `numRetries`],
        RestartDelay: [, __expectInt32, `restartDelay`],
    });
};
const de_Input = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        AttachedChannels: [, _json, `attachedChannels`],
        Destinations: [, (_) => de___listOfInputDestination(_, context), `destinations`],
        Id: [, __expectString, `id`],
        InputClass: [, __expectString, `inputClass`],
        InputDevices: [, (_) => de___listOfInputDeviceSettings(_, context), `inputDevices`],
        InputPartnerIds: [, _json, `inputPartnerIds`],
        InputSourceType: [, __expectString, `inputSourceType`],
        MediaConnectFlows: [, (_) => de___listOfMediaConnectFlow(_, context), `mediaConnectFlows`],
        Name: [, __expectString, `name`],
        RoleArn: [, __expectString, `roleArn`],
        SecurityGroups: [, _json, `securityGroups`],
        Sources: [, (_) => de___listOfInputSource(_, context), `sources`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        Type: [, __expectString, `type`],
    });
};
const de_InputAttachment = (output, context) => {
    return take(output, {
        AutomaticInputFailoverSettings: [
            ,
            (_) => de_AutomaticInputFailoverSettings(_, context),
            `automaticInputFailoverSettings`,
        ],
        InputAttachmentName: [, __expectString, `inputAttachmentName`],
        InputId: [, __expectString, `inputId`],
        InputSettings: [, (_) => de_InputSettings(_, context), `inputSettings`],
    });
};
const de_InputChannelLevel = (output, context) => {
    return take(output, {
        Gain: [, __expectInt32, `gain`],
        InputChannel: [, __expectInt32, `inputChannel`],
    });
};
const de_InputClippingSettings = (output, context) => {
    return take(output, {
        InputTimecodeSource: [, __expectString, `inputTimecodeSource`],
        StartTimecode: [, (_) => de_StartTimecode(_, context), `startTimecode`],
        StopTimecode: [, (_) => de_StopTimecode(_, context), `stopTimecode`],
    });
};
const de_InputDestination = (output, context) => {
    return take(output, {
        Ip: [, __expectString, `ip`],
        Port: [, __expectString, `port`],
        Url: [, __expectString, `url`],
        Vpc: [, (_) => de_InputDestinationVpc(_, context), `vpc`],
    });
};
const de_InputDestinationVpc = (output, context) => {
    return take(output, {
        AvailabilityZone: [, __expectString, `availabilityZone`],
        NetworkInterfaceId: [, __expectString, `networkInterfaceId`],
    });
};
const de_InputDeviceHdSettings = (output, context) => {
    return take(output, {
        ActiveInput: [, __expectString, `activeInput`],
        ConfiguredInput: [, __expectString, `configuredInput`],
        DeviceState: [, __expectString, `deviceState`],
        Framerate: [, __limitedParseDouble, `framerate`],
        Height: [, __expectInt32, `height`],
        LatencyMs: [, __expectInt32, `latencyMs`],
        MaxBitrate: [, __expectInt32, `maxBitrate`],
        ScanType: [, __expectString, `scanType`],
        Width: [, __expectInt32, `width`],
    });
};
const de_InputDeviceMediaConnectSettings = (output, context) => {
    return take(output, {
        FlowArn: [, __expectString, `flowArn`],
        RoleArn: [, __expectString, `roleArn`],
        SecretArn: [, __expectString, `secretArn`],
        SourceName: [, __expectString, `sourceName`],
    });
};
const de_InputDeviceNetworkSettings = (output, context) => {
    return take(output, {
        DnsAddresses: [, _json, `dnsAddresses`],
        Gateway: [, __expectString, `gateway`],
        IpAddress: [, __expectString, `ipAddress`],
        IpScheme: [, __expectString, `ipScheme`],
        SubnetMask: [, __expectString, `subnetMask`],
    });
};
const de_InputDeviceSettings = (output, context) => {
    return take(output, {
        Id: [, __expectString, `id`],
    });
};
const de_InputDeviceSummary = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        AvailabilityZone: [, __expectString, `availabilityZone`],
        ConnectionState: [, __expectString, `connectionState`],
        DeviceSettingsSyncState: [, __expectString, `deviceSettingsSyncState`],
        DeviceUpdateStatus: [, __expectString, `deviceUpdateStatus`],
        HdDeviceSettings: [, (_) => de_InputDeviceHdSettings(_, context), `hdDeviceSettings`],
        Id: [, __expectString, `id`],
        MacAddress: [, __expectString, `macAddress`],
        MedialiveInputArns: [, _json, `medialiveInputArns`],
        Name: [, __expectString, `name`],
        NetworkSettings: [, (_) => de_InputDeviceNetworkSettings(_, context), `networkSettings`],
        OutputType: [, __expectString, `outputType`],
        SerialNumber: [, __expectString, `serialNumber`],
        Tags: [, _json, `tags`],
        Type: [, __expectString, `type`],
        UhdDeviceSettings: [, (_) => de_InputDeviceUhdSettings(_, context), `uhdDeviceSettings`],
    });
};
const de_InputDeviceUhdAudioChannelPairConfig = (output, context) => {
    return take(output, {
        Id: [, __expectInt32, `id`],
        Profile: [, __expectString, `profile`],
    });
};
const de_InputDeviceUhdSettings = (output, context) => {
    return take(output, {
        ActiveInput: [, __expectString, `activeInput`],
        AudioChannelPairs: [, (_) => de___listOfInputDeviceUhdAudioChannelPairConfig(_, context), `audioChannelPairs`],
        Codec: [, __expectString, `codec`],
        ConfiguredInput: [, __expectString, `configuredInput`],
        DeviceState: [, __expectString, `deviceState`],
        Framerate: [, __limitedParseDouble, `framerate`],
        Height: [, __expectInt32, `height`],
        LatencyMs: [, __expectInt32, `latencyMs`],
        MaxBitrate: [, __expectInt32, `maxBitrate`],
        MediaconnectSettings: [, (_) => de_InputDeviceMediaConnectSettings(_, context), `mediaconnectSettings`],
        ScanType: [, __expectString, `scanType`],
        Width: [, __expectInt32, `width`],
    });
};
const de_InputLocation = (output, context) => {
    return take(output, {
        PasswordParam: [, __expectString, `passwordParam`],
        Uri: [, __expectString, `uri`],
        Username: [, __expectString, `username`],
    });
};
const de_InputLossBehavior = (output, context) => {
    return take(output, {
        BlackFrameMsec: [, __expectInt32, `blackFrameMsec`],
        InputLossImageColor: [, __expectString, `inputLossImageColor`],
        InputLossImageSlate: [, (_) => de_InputLocation(_, context), `inputLossImageSlate`],
        InputLossImageType: [, __expectString, `inputLossImageType`],
        RepeatFrameMsec: [, __expectInt32, `repeatFrameMsec`],
    });
};
const de_InputLossFailoverSettings = (output, context) => {
    return take(output, {
        InputLossThresholdMsec: [, __expectInt32, `inputLossThresholdMsec`],
    });
};
const de_InputPrepareScheduleActionSettings = (output, context) => {
    return take(output, {
        InputAttachmentNameReference: [, __expectString, `inputAttachmentNameReference`],
        InputClippingSettings: [, (_) => de_InputClippingSettings(_, context), `inputClippingSettings`],
        UrlPath: [, _json, `urlPath`],
    });
};
const de_InputSecurityGroup = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        Id: [, __expectString, `id`],
        Inputs: [, _json, `inputs`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        WhitelistRules: [, (_) => de___listOfInputWhitelistRule(_, context), `whitelistRules`],
    });
};
const de_InputSettings = (output, context) => {
    return take(output, {
        AudioSelectors: [, (_) => de___listOfAudioSelector(_, context), `audioSelectors`],
        CaptionSelectors: [, (_) => de___listOfCaptionSelector(_, context), `captionSelectors`],
        DeblockFilter: [, __expectString, `deblockFilter`],
        DenoiseFilter: [, __expectString, `denoiseFilter`],
        FilterStrength: [, __expectInt32, `filterStrength`],
        InputFilter: [, __expectString, `inputFilter`],
        NetworkInputSettings: [, (_) => de_NetworkInputSettings(_, context), `networkInputSettings`],
        Scte35Pid: [, __expectInt32, `scte35Pid`],
        Smpte2038DataPreference: [, __expectString, `smpte2038DataPreference`],
        SourceEndBehavior: [, __expectString, `sourceEndBehavior`],
        VideoSelector: [, (_) => de_VideoSelector(_, context), `videoSelector`],
    });
};
const de_InputSource = (output, context) => {
    return take(output, {
        PasswordParam: [, __expectString, `passwordParam`],
        Url: [, __expectString, `url`],
        Username: [, __expectString, `username`],
    });
};
const de_InputSpecification = (output, context) => {
    return take(output, {
        Codec: [, __expectString, `codec`],
        MaximumBitrate: [, __expectString, `maximumBitrate`],
        Resolution: [, __expectString, `resolution`],
    });
};
const de_InputSwitchScheduleActionSettings = (output, context) => {
    return take(output, {
        InputAttachmentNameReference: [, __expectString, `inputAttachmentNameReference`],
        InputClippingSettings: [, (_) => de_InputClippingSettings(_, context), `inputClippingSettings`],
        UrlPath: [, _json, `urlPath`],
    });
};
const de_InputWhitelistRule = (output, context) => {
    return take(output, {
        Cidr: [, __expectString, `cidr`],
    });
};
const de_KeyProviderSettings = (output, context) => {
    return take(output, {
        StaticKeySettings: [, (_) => de_StaticKeySettings(_, context), `staticKeySettings`],
    });
};
const de_M2tsSettings = (output, context) => {
    return take(output, {
        AbsentInputAudioBehavior: [, __expectString, `absentInputAudioBehavior`],
        Arib: [, __expectString, `arib`],
        AribCaptionsPid: [, __expectString, `aribCaptionsPid`],
        AribCaptionsPidControl: [, __expectString, `aribCaptionsPidControl`],
        AudioBufferModel: [, __expectString, `audioBufferModel`],
        AudioFramesPerPes: [, __expectInt32, `audioFramesPerPes`],
        AudioPids: [, __expectString, `audioPids`],
        AudioStreamType: [, __expectString, `audioStreamType`],
        Bitrate: [, __expectInt32, `bitrate`],
        BufferModel: [, __expectString, `bufferModel`],
        CcDescriptor: [, __expectString, `ccDescriptor`],
        DvbNitSettings: [, (_) => de_DvbNitSettings(_, context), `dvbNitSettings`],
        DvbSdtSettings: [, (_) => de_DvbSdtSettings(_, context), `dvbSdtSettings`],
        DvbSubPids: [, __expectString, `dvbSubPids`],
        DvbTdtSettings: [, (_) => de_DvbTdtSettings(_, context), `dvbTdtSettings`],
        DvbTeletextPid: [, __expectString, `dvbTeletextPid`],
        Ebif: [, __expectString, `ebif`],
        EbpAudioInterval: [, __expectString, `ebpAudioInterval`],
        EbpLookaheadMs: [, __expectInt32, `ebpLookaheadMs`],
        EbpPlacement: [, __expectString, `ebpPlacement`],
        EcmPid: [, __expectString, `ecmPid`],
        EsRateInPes: [, __expectString, `esRateInPes`],
        EtvPlatformPid: [, __expectString, `etvPlatformPid`],
        EtvSignalPid: [, __expectString, `etvSignalPid`],
        FragmentTime: [, __limitedParseDouble, `fragmentTime`],
        Klv: [, __expectString, `klv`],
        KlvDataPids: [, __expectString, `klvDataPids`],
        NielsenId3Behavior: [, __expectString, `nielsenId3Behavior`],
        NullPacketBitrate: [, __limitedParseDouble, `nullPacketBitrate`],
        PatInterval: [, __expectInt32, `patInterval`],
        PcrControl: [, __expectString, `pcrControl`],
        PcrPeriod: [, __expectInt32, `pcrPeriod`],
        PcrPid: [, __expectString, `pcrPid`],
        PmtInterval: [, __expectInt32, `pmtInterval`],
        PmtPid: [, __expectString, `pmtPid`],
        ProgramNum: [, __expectInt32, `programNum`],
        RateMode: [, __expectString, `rateMode`],
        Scte27Pids: [, __expectString, `scte27Pids`],
        Scte35Control: [, __expectString, `scte35Control`],
        Scte35Pid: [, __expectString, `scte35Pid`],
        Scte35PrerollPullupMilliseconds: [, __limitedParseDouble, `scte35PrerollPullupMilliseconds`],
        SegmentationMarkers: [, __expectString, `segmentationMarkers`],
        SegmentationStyle: [, __expectString, `segmentationStyle`],
        SegmentationTime: [, __limitedParseDouble, `segmentationTime`],
        TimedMetadataBehavior: [, __expectString, `timedMetadataBehavior`],
        TimedMetadataPid: [, __expectString, `timedMetadataPid`],
        TransportStreamId: [, __expectInt32, `transportStreamId`],
        VideoPid: [, __expectString, `videoPid`],
    });
};
const de_M3u8Settings = (output, context) => {
    return take(output, {
        AudioFramesPerPes: [, __expectInt32, `audioFramesPerPes`],
        AudioPids: [, __expectString, `audioPids`],
        EcmPid: [, __expectString, `ecmPid`],
        KlvBehavior: [, __expectString, `klvBehavior`],
        KlvDataPids: [, __expectString, `klvDataPids`],
        NielsenId3Behavior: [, __expectString, `nielsenId3Behavior`],
        PatInterval: [, __expectInt32, `patInterval`],
        PcrControl: [, __expectString, `pcrControl`],
        PcrPeriod: [, __expectInt32, `pcrPeriod`],
        PcrPid: [, __expectString, `pcrPid`],
        PmtInterval: [, __expectInt32, `pmtInterval`],
        PmtPid: [, __expectString, `pmtPid`],
        ProgramNum: [, __expectInt32, `programNum`],
        Scte35Behavior: [, __expectString, `scte35Behavior`],
        Scte35Pid: [, __expectString, `scte35Pid`],
        TimedMetadataBehavior: [, __expectString, `timedMetadataBehavior`],
        TimedMetadataPid: [, __expectString, `timedMetadataPid`],
        TransportStreamId: [, __expectInt32, `transportStreamId`],
        VideoPid: [, __expectString, `videoPid`],
    });
};
const de_MaintenanceStatus = (output, context) => {
    return take(output, {
        MaintenanceDay: [, __expectString, `maintenanceDay`],
        MaintenanceDeadline: [, __expectString, `maintenanceDeadline`],
        MaintenanceScheduledDate: [, __expectString, `maintenanceScheduledDate`],
        MaintenanceStartTime: [, __expectString, `maintenanceStartTime`],
    });
};
const de_MediaConnectFlow = (output, context) => {
    return take(output, {
        FlowArn: [, __expectString, `flowArn`],
    });
};
const de_MediaPackageGroupSettings = (output, context) => {
    return take(output, {
        Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
    });
};
const de_MediaPackageOutputDestinationSettings = (output, context) => {
    return take(output, {
        ChannelId: [, __expectString, `channelId`],
    });
};
const de_MediaResource = (output, context) => {
    return take(output, {
        Destinations: [, (_) => de___listOfMediaResourceNeighbor(_, context), `destinations`],
        Name: [, __expectString, `name`],
        Sources: [, (_) => de___listOfMediaResourceNeighbor(_, context), `sources`],
    });
};
const de_MediaResourceMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_MediaResource(value, context);
        return acc;
    }, {});
};
const de_MediaResourceNeighbor = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        Name: [, __expectString, `name`],
    });
};
const de_MonitorDeployment = (output, context) => {
    return take(output, {
        DetailsUri: [, __expectString, `detailsUri`],
        ErrorMessage: [, __expectString, `errorMessage`],
        Status: [, __expectString, `status`],
    });
};
const de_MotionGraphicsActivateScheduleActionSettings = (output, context) => {
    return take(output, {
        Duration: [, __expectLong, `duration`],
        PasswordParam: [, __expectString, `passwordParam`],
        Url: [, __expectString, `url`],
        Username: [, __expectString, `username`],
    });
};
const de_MotionGraphicsConfiguration = (output, context) => {
    return take(output, {
        MotionGraphicsInsertion: [, __expectString, `motionGraphicsInsertion`],
        MotionGraphicsSettings: [, (_) => de_MotionGraphicsSettings(_, context), `motionGraphicsSettings`],
    });
};
const de_MotionGraphicsSettings = (output, context) => {
    return take(output, {
        HtmlMotionGraphicsSettings: [, _json, `htmlMotionGraphicsSettings`],
    });
};
const de_Mp2Settings = (output, context) => {
    return take(output, {
        Bitrate: [, __limitedParseDouble, `bitrate`],
        CodingMode: [, __expectString, `codingMode`],
        SampleRate: [, __limitedParseDouble, `sampleRate`],
    });
};
const de_Mpeg2FilterSettings = (output, context) => {
    return take(output, {
        TemporalFilterSettings: [, (_) => de_TemporalFilterSettings(_, context), `temporalFilterSettings`],
    });
};
const de_Mpeg2Settings = (output, context) => {
    return take(output, {
        AdaptiveQuantization: [, __expectString, `adaptiveQuantization`],
        AfdSignaling: [, __expectString, `afdSignaling`],
        ColorMetadata: [, __expectString, `colorMetadata`],
        ColorSpace: [, __expectString, `colorSpace`],
        DisplayAspectRatio: [, __expectString, `displayAspectRatio`],
        FilterSettings: [, (_) => de_Mpeg2FilterSettings(_, context), `filterSettings`],
        FixedAfd: [, __expectString, `fixedAfd`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        GopClosedCadence: [, __expectInt32, `gopClosedCadence`],
        GopNumBFrames: [, __expectInt32, `gopNumBFrames`],
        GopSize: [, __limitedParseDouble, `gopSize`],
        GopSizeUnits: [, __expectString, `gopSizeUnits`],
        ScanType: [, __expectString, `scanType`],
        SubgopLength: [, __expectString, `subgopLength`],
        TimecodeBurninSettings: [, (_) => de_TimecodeBurninSettings(_, context), `timecodeBurninSettings`],
        TimecodeInsertion: [, __expectString, `timecodeInsertion`],
    });
};
const de_MsSmoothGroupSettings = (output, context) => {
    return take(output, {
        AcquisitionPointId: [, __expectString, `acquisitionPointId`],
        AudioOnlyTimecodeControl: [, __expectString, `audioOnlyTimecodeControl`],
        CertificateMode: [, __expectString, `certificateMode`],
        ConnectionRetryInterval: [, __expectInt32, `connectionRetryInterval`],
        Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
        EventId: [, __expectString, `eventId`],
        EventIdMode: [, __expectString, `eventIdMode`],
        EventStopBehavior: [, __expectString, `eventStopBehavior`],
        FilecacheDuration: [, __expectInt32, `filecacheDuration`],
        FragmentLength: [, __expectInt32, `fragmentLength`],
        InputLossAction: [, __expectString, `inputLossAction`],
        NumRetries: [, __expectInt32, `numRetries`],
        RestartDelay: [, __expectInt32, `restartDelay`],
        SegmentationMode: [, __expectString, `segmentationMode`],
        SendDelayMs: [, __expectInt32, `sendDelayMs`],
        SparseTrackType: [, __expectString, `sparseTrackType`],
        StreamManifestBehavior: [, __expectString, `streamManifestBehavior`],
        TimestampOffset: [, __expectString, `timestampOffset`],
        TimestampOffsetMode: [, __expectString, `timestampOffsetMode`],
    });
};
const de_MsSmoothOutputSettings = (output, context) => {
    return take(output, {
        H265PackagingType: [, __expectString, `h265PackagingType`],
        NameModifier: [, __expectString, `nameModifier`],
    });
};
const de_Multiplex = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        AvailabilityZones: [, _json, `availabilityZones`],
        Destinations: [, (_) => de___listOfMultiplexOutputDestination(_, context), `destinations`],
        Id: [, __expectString, `id`],
        MultiplexSettings: [, (_) => de_MultiplexSettings(_, context), `multiplexSettings`],
        Name: [, __expectString, `name`],
        PipelinesRunningCount: [, __expectInt32, `pipelinesRunningCount`],
        ProgramCount: [, __expectInt32, `programCount`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
    });
};
const de_MultiplexMediaConnectOutputDestinationSettings = (output, context) => {
    return take(output, {
        EntitlementArn: [, __expectString, `entitlementArn`],
    });
};
const de_MultiplexOutputDestination = (output, context) => {
    return take(output, {
        MediaConnectSettings: [
            ,
            (_) => de_MultiplexMediaConnectOutputDestinationSettings(_, context),
            `mediaConnectSettings`,
        ],
    });
};
const de_MultiplexOutputSettings = (output, context) => {
    return take(output, {
        Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
    });
};
const de_MultiplexProgram = (output, context) => {
    return take(output, {
        ChannelId: [, __expectString, `channelId`],
        MultiplexProgramSettings: [, (_) => de_MultiplexProgramSettings(_, context), `multiplexProgramSettings`],
        PacketIdentifiersMap: [, (_) => de_MultiplexProgramPacketIdentifiersMap(_, context), `packetIdentifiersMap`],
        PipelineDetails: [, (_) => de___listOfMultiplexProgramPipelineDetail(_, context), `pipelineDetails`],
        ProgramName: [, __expectString, `programName`],
    });
};
const de_MultiplexProgramChannelDestinationSettings = (output, context) => {
    return take(output, {
        MultiplexId: [, __expectString, `multiplexId`],
        ProgramName: [, __expectString, `programName`],
    });
};
const de_MultiplexProgramPacketIdentifiersMap = (output, context) => {
    return take(output, {
        AudioPids: [, _json, `audioPids`],
        DvbSubPids: [, _json, `dvbSubPids`],
        DvbTeletextPid: [, __expectInt32, `dvbTeletextPid`],
        EtvPlatformPid: [, __expectInt32, `etvPlatformPid`],
        EtvSignalPid: [, __expectInt32, `etvSignalPid`],
        KlvDataPids: [, _json, `klvDataPids`],
        PcrPid: [, __expectInt32, `pcrPid`],
        PmtPid: [, __expectInt32, `pmtPid`],
        PrivateMetadataPid: [, __expectInt32, `privateMetadataPid`],
        Scte27Pids: [, _json, `scte27Pids`],
        Scte35Pid: [, __expectInt32, `scte35Pid`],
        TimedMetadataPid: [, __expectInt32, `timedMetadataPid`],
        VideoPid: [, __expectInt32, `videoPid`],
    });
};
const de_MultiplexProgramPipelineDetail = (output, context) => {
    return take(output, {
        ActiveChannelPipeline: [, __expectString, `activeChannelPipeline`],
        PipelineId: [, __expectString, `pipelineId`],
    });
};
const de_MultiplexProgramServiceDescriptor = (output, context) => {
    return take(output, {
        ProviderName: [, __expectString, `providerName`],
        ServiceName: [, __expectString, `serviceName`],
    });
};
const de_MultiplexProgramSettings = (output, context) => {
    return take(output, {
        PreferredChannelPipeline: [, __expectString, `preferredChannelPipeline`],
        ProgramNumber: [, __expectInt32, `programNumber`],
        ServiceDescriptor: [, (_) => de_MultiplexProgramServiceDescriptor(_, context), `serviceDescriptor`],
        VideoSettings: [, (_) => de_MultiplexVideoSettings(_, context), `videoSettings`],
    });
};
const de_MultiplexProgramSummary = (output, context) => {
    return take(output, {
        ChannelId: [, __expectString, `channelId`],
        ProgramName: [, __expectString, `programName`],
    });
};
const de_MultiplexSettings = (output, context) => {
    return take(output, {
        MaximumVideoBufferDelayMilliseconds: [, __expectInt32, `maximumVideoBufferDelayMilliseconds`],
        TransportStreamBitrate: [, __expectInt32, `transportStreamBitrate`],
        TransportStreamId: [, __expectInt32, `transportStreamId`],
        TransportStreamReservedBitrate: [, __expectInt32, `transportStreamReservedBitrate`],
    });
};
const de_MultiplexSettingsSummary = (output, context) => {
    return take(output, {
        TransportStreamBitrate: [, __expectInt32, `transportStreamBitrate`],
    });
};
const de_MultiplexStatmuxVideoSettings = (output, context) => {
    return take(output, {
        MaximumBitrate: [, __expectInt32, `maximumBitrate`],
        MinimumBitrate: [, __expectInt32, `minimumBitrate`],
        Priority: [, __expectInt32, `priority`],
    });
};
const de_MultiplexSummary = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        AvailabilityZones: [, _json, `availabilityZones`],
        Id: [, __expectString, `id`],
        MultiplexSettings: [, (_) => de_MultiplexSettingsSummary(_, context), `multiplexSettings`],
        Name: [, __expectString, `name`],
        PipelinesRunningCount: [, __expectInt32, `pipelinesRunningCount`],
        ProgramCount: [, __expectInt32, `programCount`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
    });
};
const de_MultiplexVideoSettings = (output, context) => {
    return take(output, {
        ConstantBitrate: [, __expectInt32, `constantBitrate`],
        StatmuxSettings: [, (_) => de_MultiplexStatmuxVideoSettings(_, context), `statmuxSettings`],
    });
};
const de_NetworkInputSettings = (output, context) => {
    return take(output, {
        HlsInputSettings: [, (_) => de_HlsInputSettings(_, context), `hlsInputSettings`],
        ServerValidation: [, __expectString, `serverValidation`],
    });
};
const de_NielsenCBET = (output, context) => {
    return take(output, {
        CbetCheckDigitString: [, __expectString, `cbetCheckDigitString`],
        CbetStepaside: [, __expectString, `cbetStepaside`],
        Csid: [, __expectString, `csid`],
    });
};
const de_NielsenConfiguration = (output, context) => {
    return take(output, {
        DistributorId: [, __expectString, `distributorId`],
        NielsenPcmToId3Tagging: [, __expectString, `nielsenPcmToId3Tagging`],
    });
};
const de_NielsenNaesIiNw = (output, context) => {
    return take(output, {
        CheckDigitString: [, __expectString, `checkDigitString`],
        Sid: [, __limitedParseDouble, `sid`],
        Timezone: [, __expectString, `timezone`],
    });
};
const de_NielsenWatermarksSettings = (output, context) => {
    return take(output, {
        NielsenCbetSettings: [, (_) => de_NielsenCBET(_, context), `nielsenCbetSettings`],
        NielsenDistributionType: [, __expectString, `nielsenDistributionType`],
        NielsenNaesIiNwSettings: [, (_) => de_NielsenNaesIiNw(_, context), `nielsenNaesIiNwSettings`],
    });
};
const de_Offering = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        CurrencyCode: [, __expectString, `currencyCode`],
        Duration: [, __expectInt32, `duration`],
        DurationUnits: [, __expectString, `durationUnits`],
        FixedPrice: [, __limitedParseDouble, `fixedPrice`],
        OfferingDescription: [, __expectString, `offeringDescription`],
        OfferingId: [, __expectString, `offeringId`],
        OfferingType: [, __expectString, `offeringType`],
        Region: [, __expectString, `region`],
        ResourceSpecification: [, (_) => de_ReservationResourceSpecification(_, context), `resourceSpecification`],
        UsagePrice: [, __limitedParseDouble, `usagePrice`],
    });
};
const de_Output = (output, context) => {
    return take(output, {
        AudioDescriptionNames: [, _json, `audioDescriptionNames`],
        CaptionDescriptionNames: [, _json, `captionDescriptionNames`],
        OutputName: [, __expectString, `outputName`],
        OutputSettings: [, (_) => de_OutputSettings(_, context), `outputSettings`],
        VideoDescriptionName: [, __expectString, `videoDescriptionName`],
    });
};
const de_OutputDestination = (output, context) => {
    return take(output, {
        Id: [, __expectString, `id`],
        MediaPackageSettings: [
            ,
            (_) => de___listOfMediaPackageOutputDestinationSettings(_, context),
            `mediaPackageSettings`,
        ],
        MultiplexSettings: [, (_) => de_MultiplexProgramChannelDestinationSettings(_, context), `multiplexSettings`],
        Settings: [, (_) => de___listOfOutputDestinationSettings(_, context), `settings`],
    });
};
const de_OutputDestinationSettings = (output, context) => {
    return take(output, {
        PasswordParam: [, __expectString, `passwordParam`],
        StreamName: [, __expectString, `streamName`],
        Url: [, __expectString, `url`],
        Username: [, __expectString, `username`],
    });
};
const de_OutputGroup = (output, context) => {
    return take(output, {
        Name: [, __expectString, `name`],
        OutputGroupSettings: [, (_) => de_OutputGroupSettings(_, context), `outputGroupSettings`],
        Outputs: [, (_) => de___listOfOutput(_, context), `outputs`],
    });
};
const de_OutputGroupSettings = (output, context) => {
    return take(output, {
        ArchiveGroupSettings: [, (_) => de_ArchiveGroupSettings(_, context), `archiveGroupSettings`],
        CmafIngestGroupSettings: [, (_) => de_CmafIngestGroupSettings(_, context), `cmafIngestGroupSettings`],
        FrameCaptureGroupSettings: [, (_) => de_FrameCaptureGroupSettings(_, context), `frameCaptureGroupSettings`],
        HlsGroupSettings: [, (_) => de_HlsGroupSettings(_, context), `hlsGroupSettings`],
        MediaPackageGroupSettings: [, (_) => de_MediaPackageGroupSettings(_, context), `mediaPackageGroupSettings`],
        MsSmoothGroupSettings: [, (_) => de_MsSmoothGroupSettings(_, context), `msSmoothGroupSettings`],
        MultiplexGroupSettings: [, _json, `multiplexGroupSettings`],
        RtmpGroupSettings: [, (_) => de_RtmpGroupSettings(_, context), `rtmpGroupSettings`],
        UdpGroupSettings: [, (_) => de_UdpGroupSettings(_, context), `udpGroupSettings`],
    });
};
const de_OutputLocationRef = (output, context) => {
    return take(output, {
        DestinationRefId: [, __expectString, `destinationRefId`],
    });
};
const de_OutputLockingSettings = (output, context) => {
    return take(output, {
        EpochLockingSettings: [, (_) => de_EpochLockingSettings(_, context), `epochLockingSettings`],
        PipelineLockingSettings: [, _json, `pipelineLockingSettings`],
    });
};
const de_OutputSettings = (output, context) => {
    return take(output, {
        ArchiveOutputSettings: [, (_) => de_ArchiveOutputSettings(_, context), `archiveOutputSettings`],
        CmafIngestOutputSettings: [, (_) => de_CmafIngestOutputSettings(_, context), `cmafIngestOutputSettings`],
        FrameCaptureOutputSettings: [, (_) => de_FrameCaptureOutputSettings(_, context), `frameCaptureOutputSettings`],
        HlsOutputSettings: [, (_) => de_HlsOutputSettings(_, context), `hlsOutputSettings`],
        MediaPackageOutputSettings: [, _json, `mediaPackageOutputSettings`],
        MsSmoothOutputSettings: [, (_) => de_MsSmoothOutputSettings(_, context), `msSmoothOutputSettings`],
        MultiplexOutputSettings: [, (_) => de_MultiplexOutputSettings(_, context), `multiplexOutputSettings`],
        RtmpOutputSettings: [, (_) => de_RtmpOutputSettings(_, context), `rtmpOutputSettings`],
        UdpOutputSettings: [, (_) => de_UdpOutputSettings(_, context), `udpOutputSettings`],
    });
};
const de_PauseStateScheduleActionSettings = (output, context) => {
    return take(output, {
        Pipelines: [, (_) => de___listOfPipelinePauseStateSettings(_, context), `pipelines`],
    });
};
const de_PipelineDetail = (output, context) => {
    return take(output, {
        ActiveInputAttachmentName: [, __expectString, `activeInputAttachmentName`],
        ActiveInputSwitchActionName: [, __expectString, `activeInputSwitchActionName`],
        ActiveMotionGraphicsActionName: [, __expectString, `activeMotionGraphicsActionName`],
        ActiveMotionGraphicsUri: [, __expectString, `activeMotionGraphicsUri`],
        PipelineId: [, __expectString, `pipelineId`],
    });
};
const de_PipelinePauseStateSettings = (output, context) => {
    return take(output, {
        PipelineId: [, __expectString, `pipelineId`],
    });
};
const de_RemixSettings = (output, context) => {
    return take(output, {
        ChannelMappings: [, (_) => de___listOfAudioChannelMapping(_, context), `channelMappings`],
        ChannelsIn: [, __expectInt32, `channelsIn`],
        ChannelsOut: [, __expectInt32, `channelsOut`],
    });
};
const de_RenewalSettings = (output, context) => {
    return take(output, {
        AutomaticRenewal: [, __expectString, `automaticRenewal`],
        RenewalCount: [, __expectInt32, `renewalCount`],
    });
};
const de_Reservation = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        Count: [, __expectInt32, `count`],
        CurrencyCode: [, __expectString, `currencyCode`],
        Duration: [, __expectInt32, `duration`],
        DurationUnits: [, __expectString, `durationUnits`],
        End: [, __expectString, `end`],
        FixedPrice: [, __limitedParseDouble, `fixedPrice`],
        Name: [, __expectString, `name`],
        OfferingDescription: [, __expectString, `offeringDescription`],
        OfferingId: [, __expectString, `offeringId`],
        OfferingType: [, __expectString, `offeringType`],
        Region: [, __expectString, `region`],
        RenewalSettings: [, (_) => de_RenewalSettings(_, context), `renewalSettings`],
        ReservationId: [, __expectString, `reservationId`],
        ResourceSpecification: [, (_) => de_ReservationResourceSpecification(_, context), `resourceSpecification`],
        Start: [, __expectString, `start`],
        State: [, __expectString, `state`],
        Tags: [, _json, `tags`],
        UsagePrice: [, __limitedParseDouble, `usagePrice`],
    });
};
const de_ReservationResourceSpecification = (output, context) => {
    return take(output, {
        ChannelClass: [, __expectString, `channelClass`],
        Codec: [, __expectString, `codec`],
        MaximumBitrate: [, __expectString, `maximumBitrate`],
        MaximumFramerate: [, __expectString, `maximumFramerate`],
        Resolution: [, __expectString, `resolution`],
        ResourceType: [, __expectString, `resourceType`],
        SpecialFeature: [, __expectString, `specialFeature`],
        VideoQuality: [, __expectString, `videoQuality`],
    });
};
const de_RtmpGroupSettings = (output, context) => {
    return take(output, {
        AdMarkers: [, _json, `adMarkers`],
        AuthenticationScheme: [, __expectString, `authenticationScheme`],
        CacheFullBehavior: [, __expectString, `cacheFullBehavior`],
        CacheLength: [, __expectInt32, `cacheLength`],
        CaptionData: [, __expectString, `captionData`],
        IncludeFillerNalUnits: [, __expectString, `includeFillerNalUnits`],
        InputLossAction: [, __expectString, `inputLossAction`],
        RestartDelay: [, __expectInt32, `restartDelay`],
    });
};
const de_RtmpOutputSettings = (output, context) => {
    return take(output, {
        CertificateMode: [, __expectString, `certificateMode`],
        ConnectionRetryInterval: [, __expectInt32, `connectionRetryInterval`],
        Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
        NumRetries: [, __expectInt32, `numRetries`],
    });
};
const de_ScheduleAction = (output, context) => {
    return take(output, {
        ActionName: [, __expectString, `actionName`],
        ScheduleActionSettings: [, (_) => de_ScheduleActionSettings(_, context), `scheduleActionSettings`],
        ScheduleActionStartSettings: [
            ,
            (_) => de_ScheduleActionStartSettings(_, context),
            `scheduleActionStartSettings`,
        ],
    });
};
const de_ScheduleActionSettings = (output, context) => {
    return take(output, {
        HlsId3SegmentTaggingSettings: [
            ,
            (_) => de_HlsId3SegmentTaggingScheduleActionSettings(_, context),
            `hlsId3SegmentTaggingSettings`,
        ],
        HlsTimedMetadataSettings: [
            ,
            (_) => de_HlsTimedMetadataScheduleActionSettings(_, context),
            `hlsTimedMetadataSettings`,
        ],
        InputPrepareSettings: [, (_) => de_InputPrepareScheduleActionSettings(_, context), `inputPrepareSettings`],
        InputSwitchSettings: [, (_) => de_InputSwitchScheduleActionSettings(_, context), `inputSwitchSettings`],
        MotionGraphicsImageActivateSettings: [
            ,
            (_) => de_MotionGraphicsActivateScheduleActionSettings(_, context),
            `motionGraphicsImageActivateSettings`,
        ],
        MotionGraphicsImageDeactivateSettings: [, _json, `motionGraphicsImageDeactivateSettings`],
        PauseStateSettings: [, (_) => de_PauseStateScheduleActionSettings(_, context), `pauseStateSettings`],
        Scte35InputSettings: [, (_) => de_Scte35InputScheduleActionSettings(_, context), `scte35InputSettings`],
        Scte35ReturnToNetworkSettings: [
            ,
            (_) => de_Scte35ReturnToNetworkScheduleActionSettings(_, context),
            `scte35ReturnToNetworkSettings`,
        ],
        Scte35SpliceInsertSettings: [
            ,
            (_) => de_Scte35SpliceInsertScheduleActionSettings(_, context),
            `scte35SpliceInsertSettings`,
        ],
        Scte35TimeSignalSettings: [
            ,
            (_) => de_Scte35TimeSignalScheduleActionSettings(_, context),
            `scte35TimeSignalSettings`,
        ],
        StaticImageActivateSettings: [
            ,
            (_) => de_StaticImageActivateScheduleActionSettings(_, context),
            `staticImageActivateSettings`,
        ],
        StaticImageDeactivateSettings: [
            ,
            (_) => de_StaticImageDeactivateScheduleActionSettings(_, context),
            `staticImageDeactivateSettings`,
        ],
        StaticImageOutputActivateSettings: [
            ,
            (_) => de_StaticImageOutputActivateScheduleActionSettings(_, context),
            `staticImageOutputActivateSettings`,
        ],
        StaticImageOutputDeactivateSettings: [
            ,
            (_) => de_StaticImageOutputDeactivateScheduleActionSettings(_, context),
            `staticImageOutputDeactivateSettings`,
        ],
    });
};
const de_ScheduleActionStartSettings = (output, context) => {
    return take(output, {
        FixedModeScheduleActionStartSettings: [
            ,
            (_) => de_FixedModeScheduleActionStartSettings(_, context),
            `fixedModeScheduleActionStartSettings`,
        ],
        FollowModeScheduleActionStartSettings: [
            ,
            (_) => de_FollowModeScheduleActionStartSettings(_, context),
            `followModeScheduleActionStartSettings`,
        ],
        ImmediateModeScheduleActionStartSettings: [, _json, `immediateModeScheduleActionStartSettings`],
    });
};
const de_Scte20SourceSettings = (output, context) => {
    return take(output, {
        Convert608To708: [, __expectString, `convert608To708`],
        Source608ChannelNumber: [, __expectInt32, `source608ChannelNumber`],
    });
};
const de_Scte27SourceSettings = (output, context) => {
    return take(output, {
        OcrLanguage: [, __expectString, `ocrLanguage`],
        Pid: [, __expectInt32, `pid`],
    });
};
const de_Scte35DeliveryRestrictions = (output, context) => {
    return take(output, {
        ArchiveAllowedFlag: [, __expectString, `archiveAllowedFlag`],
        DeviceRestrictions: [, __expectString, `deviceRestrictions`],
        NoRegionalBlackoutFlag: [, __expectString, `noRegionalBlackoutFlag`],
        WebDeliveryAllowedFlag: [, __expectString, `webDeliveryAllowedFlag`],
    });
};
const de_Scte35Descriptor = (output, context) => {
    return take(output, {
        Scte35DescriptorSettings: [, (_) => de_Scte35DescriptorSettings(_, context), `scte35DescriptorSettings`],
    });
};
const de_Scte35DescriptorSettings = (output, context) => {
    return take(output, {
        SegmentationDescriptorScte35DescriptorSettings: [
            ,
            (_) => de_Scte35SegmentationDescriptor(_, context),
            `segmentationDescriptorScte35DescriptorSettings`,
        ],
    });
};
const de_Scte35InputScheduleActionSettings = (output, context) => {
    return take(output, {
        InputAttachmentNameReference: [, __expectString, `inputAttachmentNameReference`],
        Mode: [, __expectString, `mode`],
    });
};
const de_Scte35ReturnToNetworkScheduleActionSettings = (output, context) => {
    return take(output, {
        SpliceEventId: [, __expectLong, `spliceEventId`],
    });
};
const de_Scte35SegmentationDescriptor = (output, context) => {
    return take(output, {
        DeliveryRestrictions: [, (_) => de_Scte35DeliveryRestrictions(_, context), `deliveryRestrictions`],
        SegmentNum: [, __expectInt32, `segmentNum`],
        SegmentationCancelIndicator: [, __expectString, `segmentationCancelIndicator`],
        SegmentationDuration: [, __expectLong, `segmentationDuration`],
        SegmentationEventId: [, __expectLong, `segmentationEventId`],
        SegmentationTypeId: [, __expectInt32, `segmentationTypeId`],
        SegmentationUpid: [, __expectString, `segmentationUpid`],
        SegmentationUpidType: [, __expectInt32, `segmentationUpidType`],
        SegmentsExpected: [, __expectInt32, `segmentsExpected`],
        SubSegmentNum: [, __expectInt32, `subSegmentNum`],
        SubSegmentsExpected: [, __expectInt32, `subSegmentsExpected`],
    });
};
const de_Scte35SpliceInsert = (output, context) => {
    return take(output, {
        AdAvailOffset: [, __expectInt32, `adAvailOffset`],
        NoRegionalBlackoutFlag: [, __expectString, `noRegionalBlackoutFlag`],
        WebDeliveryAllowedFlag: [, __expectString, `webDeliveryAllowedFlag`],
    });
};
const de_Scte35SpliceInsertScheduleActionSettings = (output, context) => {
    return take(output, {
        Duration: [, __expectLong, `duration`],
        SpliceEventId: [, __expectLong, `spliceEventId`],
    });
};
const de_Scte35TimeSignalApos = (output, context) => {
    return take(output, {
        AdAvailOffset: [, __expectInt32, `adAvailOffset`],
        NoRegionalBlackoutFlag: [, __expectString, `noRegionalBlackoutFlag`],
        WebDeliveryAllowedFlag: [, __expectString, `webDeliveryAllowedFlag`],
    });
};
const de_Scte35TimeSignalScheduleActionSettings = (output, context) => {
    return take(output, {
        Scte35Descriptors: [, (_) => de___listOfScte35Descriptor(_, context), `scte35Descriptors`],
    });
};
const de_SignalMapSummary = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        Description: [, __expectString, `description`],
        Id: [, __expectString, `id`],
        ModifiedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `modifiedAt`],
        MonitorDeploymentStatus: [, __expectString, `monitorDeploymentStatus`],
        Name: [, __expectString, `name`],
        Status: [, __expectString, `status`],
        Tags: [, _json, `tags`],
    });
};
const de_StandardHlsSettings = (output, context) => {
    return take(output, {
        AudioRenditionSets: [, __expectString, `audioRenditionSets`],
        M3u8Settings: [, (_) => de_M3u8Settings(_, context), `m3u8Settings`],
    });
};
const de_StartTimecode = (output, context) => {
    return take(output, {
        Timecode: [, __expectString, `timecode`],
    });
};
const de_StaticImageActivateScheduleActionSettings = (output, context) => {
    return take(output, {
        Duration: [, __expectInt32, `duration`],
        FadeIn: [, __expectInt32, `fadeIn`],
        FadeOut: [, __expectInt32, `fadeOut`],
        Height: [, __expectInt32, `height`],
        Image: [, (_) => de_InputLocation(_, context), `image`],
        ImageX: [, __expectInt32, `imageX`],
        ImageY: [, __expectInt32, `imageY`],
        Layer: [, __expectInt32, `layer`],
        Opacity: [, __expectInt32, `opacity`],
        Width: [, __expectInt32, `width`],
    });
};
const de_StaticImageDeactivateScheduleActionSettings = (output, context) => {
    return take(output, {
        FadeOut: [, __expectInt32, `fadeOut`],
        Layer: [, __expectInt32, `layer`],
    });
};
const de_StaticImageOutputActivateScheduleActionSettings = (output, context) => {
    return take(output, {
        Duration: [, __expectInt32, `duration`],
        FadeIn: [, __expectInt32, `fadeIn`],
        FadeOut: [, __expectInt32, `fadeOut`],
        Height: [, __expectInt32, `height`],
        Image: [, (_) => de_InputLocation(_, context), `image`],
        ImageX: [, __expectInt32, `imageX`],
        ImageY: [, __expectInt32, `imageY`],
        Layer: [, __expectInt32, `layer`],
        Opacity: [, __expectInt32, `opacity`],
        OutputNames: [, _json, `outputNames`],
        Width: [, __expectInt32, `width`],
    });
};
const de_StaticImageOutputDeactivateScheduleActionSettings = (output, context) => {
    return take(output, {
        FadeOut: [, __expectInt32, `fadeOut`],
        Layer: [, __expectInt32, `layer`],
        OutputNames: [, _json, `outputNames`],
    });
};
const de_StaticKeySettings = (output, context) => {
    return take(output, {
        KeyProviderServer: [, (_) => de_InputLocation(_, context), `keyProviderServer`],
        StaticKeyValue: [, __expectString, `staticKeyValue`],
    });
};
const de_StopTimecode = (output, context) => {
    return take(output, {
        LastFrameClippingBehavior: [, __expectString, `lastFrameClippingBehavior`],
        Timecode: [, __expectString, `timecode`],
    });
};
const de_SuccessfulMonitorDeployment = (output, context) => {
    return take(output, {
        DetailsUri: [, __expectString, `detailsUri`],
        Status: [, __expectString, `status`],
    });
};
const de_TeletextSourceSettings = (output, context) => {
    return take(output, {
        OutputRectangle: [, (_) => de_CaptionRectangle(_, context), `outputRectangle`],
        PageNumber: [, __expectString, `pageNumber`],
    });
};
const de_TemporalFilterSettings = (output, context) => {
    return take(output, {
        PostFilterSharpening: [, __expectString, `postFilterSharpening`],
        Strength: [, __expectString, `strength`],
    });
};
const de_Thumbnail = (output, context) => {
    return take(output, {
        Body: [, __expectString, `body`],
        ContentType: [, __expectString, `contentType`],
        ThumbnailType: [, __expectString, `thumbnailType`],
        TimeStamp: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `timeStamp`],
    });
};
const de_ThumbnailConfiguration = (output, context) => {
    return take(output, {
        State: [, __expectString, `state`],
    });
};
const de_ThumbnailDetail = (output, context) => {
    return take(output, {
        PipelineId: [, __expectString, `pipelineId`],
        Thumbnails: [, (_) => de___listOfThumbnail(_, context), `thumbnails`],
    });
};
const de_TimecodeBurninSettings = (output, context) => {
    return take(output, {
        FontSize: [, __expectString, `fontSize`],
        Position: [, __expectString, `position`],
        Prefix: [, __expectString, `prefix`],
    });
};
const de_TimecodeConfig = (output, context) => {
    return take(output, {
        Source: [, __expectString, `source`],
        SyncThreshold: [, __expectInt32, `syncThreshold`],
    });
};
const de_TransferringInputDeviceSummary = (output, context) => {
    return take(output, {
        Id: [, __expectString, `id`],
        Message: [, __expectString, `message`],
        TargetCustomerId: [, __expectString, `targetCustomerId`],
        TransferType: [, __expectString, `transferType`],
    });
};
const de_TtmlDestinationSettings = (output, context) => {
    return take(output, {
        StyleControl: [, __expectString, `styleControl`],
    });
};
const de_UdpContainerSettings = (output, context) => {
    return take(output, {
        M2tsSettings: [, (_) => de_M2tsSettings(_, context), `m2tsSettings`],
    });
};
const de_UdpGroupSettings = (output, context) => {
    return take(output, {
        InputLossAction: [, __expectString, `inputLossAction`],
        TimedMetadataId3Frame: [, __expectString, `timedMetadataId3Frame`],
        TimedMetadataId3Period: [, __expectInt32, `timedMetadataId3Period`],
    });
};
const de_UdpOutputSettings = (output, context) => {
    return take(output, {
        BufferMsec: [, __expectInt32, `bufferMsec`],
        ContainerSettings: [, (_) => de_UdpContainerSettings(_, context), `containerSettings`],
        Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
        FecOutputSettings: [, (_) => de_FecOutputSettings(_, context), `fecOutputSettings`],
    });
};
const de_ValidationError = (output, context) => {
    return take(output, {
        ElementPath: [, __expectString, `elementPath`],
        ErrorMessage: [, __expectString, `errorMessage`],
    });
};
const de_VideoBlackFailoverSettings = (output, context) => {
    return take(output, {
        BlackDetectThreshold: [, __limitedParseDouble, `blackDetectThreshold`],
        VideoBlackThresholdMsec: [, __expectInt32, `videoBlackThresholdMsec`],
    });
};
const de_VideoCodecSettings = (output, context) => {
    return take(output, {
        FrameCaptureSettings: [, (_) => de_FrameCaptureSettings(_, context), `frameCaptureSettings`],
        H264Settings: [, (_) => de_H264Settings(_, context), `h264Settings`],
        H265Settings: [, (_) => de_H265Settings(_, context), `h265Settings`],
        Mpeg2Settings: [, (_) => de_Mpeg2Settings(_, context), `mpeg2Settings`],
    });
};
const de_VideoDescription = (output, context) => {
    return take(output, {
        CodecSettings: [, (_) => de_VideoCodecSettings(_, context), `codecSettings`],
        Height: [, __expectInt32, `height`],
        Name: [, __expectString, `name`],
        RespondToAfd: [, __expectString, `respondToAfd`],
        ScalingBehavior: [, __expectString, `scalingBehavior`],
        Sharpness: [, __expectInt32, `sharpness`],
        Width: [, __expectInt32, `width`],
    });
};
const de_VideoSelector = (output, context) => {
    return take(output, {
        ColorSpace: [, __expectString, `colorSpace`],
        ColorSpaceSettings: [, (_) => de_VideoSelectorColorSpaceSettings(_, context), `colorSpaceSettings`],
        ColorSpaceUsage: [, __expectString, `colorSpaceUsage`],
        SelectorSettings: [, (_) => de_VideoSelectorSettings(_, context), `selectorSettings`],
    });
};
const de_VideoSelectorColorSpaceSettings = (output, context) => {
    return take(output, {
        Hdr10Settings: [, (_) => de_Hdr10Settings(_, context), `hdr10Settings`],
    });
};
const de_VideoSelectorPid = (output, context) => {
    return take(output, {
        Pid: [, __expectInt32, `pid`],
    });
};
const de_VideoSelectorProgramId = (output, context) => {
    return take(output, {
        ProgramId: [, __expectInt32, `programId`],
    });
};
const de_VideoSelectorSettings = (output, context) => {
    return take(output, {
        VideoSelectorPid: [, (_) => de_VideoSelectorPid(_, context), `videoSelectorPid`],
        VideoSelectorProgramId: [, (_) => de_VideoSelectorProgramId(_, context), `videoSelectorProgramId`],
    });
};
const de_VpcOutputSettingsDescription = (output, context) => {
    return take(output, {
        AvailabilityZones: [, _json, `availabilityZones`],
        NetworkInterfaceIds: [, _json, `networkInterfaceIds`],
        SecurityGroupIds: [, _json, `securityGroupIds`],
        SubnetIds: [, _json, `subnetIds`],
    });
};
const de_WavSettings = (output, context) => {
    return take(output, {
        BitDepth: [, __limitedParseDouble, `bitDepth`],
        CodingMode: [, __expectString, `codingMode`],
        SampleRate: [, __limitedParseDouble, `sampleRate`],
    });
};
const de_WebvttDestinationSettings = (output, context) => {
    return take(output, {
        StyleControl: [, __expectString, `styleControl`],
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _A = "Accept";
const _C = "Codec";
const _CC = "ChannelClass";
const _CCh = "ChannelConfiguration";
const _CL = "ContentLength";
const _CT = "ContentType";
const _CWATGI = "CloudWatchAlarmTemplateGroupIdentifier";
const _D = "Duration";
const _EBRTGI = "EventBridgeRuleTemplateGroupIdentifier";
const _ET = "ETag";
const _GI = "GroupIdentifier";
const _LM = "LastModified";
const _MB = "MaximumBitrate";
const _MF = "MaximumFramerate";
const _MR = "MaxResults";
const _NT = "NextToken";
const _PI = "PipelineId";
const _R = "Resolution";
const _RT = "ResourceType";
const _S = "Scope";
const _SF = "SpecialFeature";
const _SMI = "SignalMapIdentifier";
const _TK = "TagKeys";
const _TT = "ThumbnailType";
const _TTr = "TransferType";
const _VQ = "VideoQuality";
const _a = "accept";
const _c = "codec";
const _cC = "channelClass";
const _cCh = "channelConfiguration";
const _cWATGI = "cloudWatchAlarmTemplateGroupIdentifier";
const _cl = "content-length";
const _ct = "content-type";
const _d = "duration";
const _e = "etag";
const _eBRTGI = "eventBridgeRuleTemplateGroupIdentifier";
const _gI = "groupIdentifier";
const _lm = "last-modified";
const _mB = "maximumBitrate";
const _mF = "maximumFramerate";
const _mR = "maxResults";
const _nT = "nextToken";
const _pI = "pipelineId";
const _r = "resolution";
const _rT = "resourceType";
const _s = "scope";
const _sF = "specialFeature";
const _sMI = "signalMapIdentifier";
const _tK = "tagKeys";
const _tT = "thumbnailType";
const _tTr = "transferType";
const _vQ = "videoQuality";
