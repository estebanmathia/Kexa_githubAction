import { MediaLiveServiceException as __BaseException } from "./MediaLiveServiceException";
export const Scte35Type = {
    NONE: "NONE",
    SCTE_35_WITHOUT_SEGMENTATION: "SCTE_35_WITHOUT_SEGMENTATION",
};
export const CmafIngestSegmentLengthUnits = {
    MILLISECONDS: "MILLISECONDS",
    SECONDS: "SECONDS",
};
export const HlsCaptionLanguageSetting = {
    INSERT: "INSERT",
    NONE: "NONE",
    OMIT: "OMIT",
};
export const HlsClientCache = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const HlsCodecSpecification = {
    RFC_4281: "RFC_4281",
    RFC_6381: "RFC_6381",
};
export const HlsDirectoryStructure = {
    SINGLE_DIRECTORY: "SINGLE_DIRECTORY",
    SUBDIRECTORY_PER_STREAM: "SUBDIRECTORY_PER_STREAM",
};
export const HlsDiscontinuityTags = {
    INSERT: "INSERT",
    NEVER_INSERT: "NEVER_INSERT",
};
export const HlsEncryptionType = {
    AES128: "AES128",
    SAMPLE_AES: "SAMPLE_AES",
};
export const HlsAkamaiHttpTransferMode = {
    CHUNKED: "CHUNKED",
    NON_CHUNKED: "NON_CHUNKED",
};
export const HlsMediaStoreStorageClass = {
    TEMPORAL: "TEMPORAL",
};
export const HlsWebdavHttpTransferMode = {
    CHUNKED: "CHUNKED",
    NON_CHUNKED: "NON_CHUNKED",
};
export const HlsId3SegmentTaggingState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const IFrameOnlyPlaylistType = {
    DISABLED: "DISABLED",
    STANDARD: "STANDARD",
};
export const HlsIncompleteSegmentBehavior = {
    AUTO: "AUTO",
    SUPPRESS: "SUPPRESS",
};
export const InputLossActionForHlsOut = {
    EMIT_OUTPUT: "EMIT_OUTPUT",
    PAUSE_OUTPUT: "PAUSE_OUTPUT",
};
export const HlsIvInManifest = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
export const HlsIvSource = {
    EXPLICIT: "EXPLICIT",
    FOLLOWS_SEGMENT_NUMBER: "FOLLOWS_SEGMENT_NUMBER",
};
export const HlsManifestCompression = {
    GZIP: "GZIP",
    NONE: "NONE",
};
export const HlsManifestDurationFormat = {
    FLOATING_POINT: "FLOATING_POINT",
    INTEGER: "INTEGER",
};
export const HlsMode = {
    LIVE: "LIVE",
    VOD: "VOD",
};
export const HlsOutputSelection = {
    MANIFESTS_AND_SEGMENTS: "MANIFESTS_AND_SEGMENTS",
    SEGMENTS_ONLY: "SEGMENTS_ONLY",
    VARIANT_MANIFESTS_AND_SEGMENTS: "VARIANT_MANIFESTS_AND_SEGMENTS",
};
export const HlsProgramDateTime = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
export const HlsProgramDateTimeClock = {
    INITIALIZE_FROM_OUTPUT_TIMECODE: "INITIALIZE_FROM_OUTPUT_TIMECODE",
    SYSTEM_CLOCK: "SYSTEM_CLOCK",
};
export const HlsRedundantManifest = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const HlsSegmentationMode = {
    USE_INPUT_SEGMENTATION: "USE_INPUT_SEGMENTATION",
    USE_SEGMENT_DURATION: "USE_SEGMENT_DURATION",
};
export const HlsStreamInfResolution = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
export const HlsTimedMetadataId3Frame = {
    NONE: "NONE",
    PRIV: "PRIV",
    TDRL: "TDRL",
};
export const HlsTsFileMode = {
    SEGMENTED_FILES: "SEGMENTED_FILES",
    SINGLE_FILE: "SINGLE_FILE",
};
export const SmoothGroupAudioOnlyTimecodeControl = {
    PASSTHROUGH: "PASSTHROUGH",
    USE_CONFIGURED_CLOCK: "USE_CONFIGURED_CLOCK",
};
export const SmoothGroupCertificateMode = {
    SELF_SIGNED: "SELF_SIGNED",
    VERIFY_AUTHENTICITY: "VERIFY_AUTHENTICITY",
};
export const SmoothGroupEventIdMode = {
    NO_EVENT_ID: "NO_EVENT_ID",
    USE_CONFIGURED: "USE_CONFIGURED",
    USE_TIMESTAMP: "USE_TIMESTAMP",
};
export const SmoothGroupEventStopBehavior = {
    NONE: "NONE",
    SEND_EOS: "SEND_EOS",
};
export const InputLossActionForMsSmoothOut = {
    EMIT_OUTPUT: "EMIT_OUTPUT",
    PAUSE_OUTPUT: "PAUSE_OUTPUT",
};
export const SmoothGroupSegmentationMode = {
    USE_INPUT_SEGMENTATION: "USE_INPUT_SEGMENTATION",
    USE_SEGMENT_DURATION: "USE_SEGMENT_DURATION",
};
export const SmoothGroupSparseTrackType = {
    NONE: "NONE",
    SCTE_35: "SCTE_35",
    SCTE_35_WITHOUT_SEGMENTATION: "SCTE_35_WITHOUT_SEGMENTATION",
};
export const SmoothGroupStreamManifestBehavior = {
    DO_NOT_SEND: "DO_NOT_SEND",
    SEND: "SEND",
};
export const SmoothGroupTimestampOffsetMode = {
    USE_CONFIGURED_OFFSET: "USE_CONFIGURED_OFFSET",
    USE_EVENT_START_DATE: "USE_EVENT_START_DATE",
};
export const RtmpAdMarkers = {
    ON_CUE_POINT_SCTE35: "ON_CUE_POINT_SCTE35",
};
export const AuthenticationScheme = {
    AKAMAI: "AKAMAI",
    COMMON: "COMMON",
};
export const RtmpCacheFullBehavior = {
    DISCONNECT_IMMEDIATELY: "DISCONNECT_IMMEDIATELY",
    WAIT_FOR_SERVER: "WAIT_FOR_SERVER",
};
export const RtmpCaptionData = {
    ALL: "ALL",
    FIELD1_608: "FIELD1_608",
    FIELD1_AND_FIELD2_608: "FIELD1_AND_FIELD2_608",
};
export const IncludeFillerNalUnits = {
    AUTO: "AUTO",
    DROP: "DROP",
    INCLUDE: "INCLUDE",
};
export const InputLossActionForRtmpOut = {
    EMIT_OUTPUT: "EMIT_OUTPUT",
    PAUSE_OUTPUT: "PAUSE_OUTPUT",
};
export const InputLossActionForUdpOut = {
    DROP_PROGRAM: "DROP_PROGRAM",
    DROP_TS: "DROP_TS",
    EMIT_PROGRAM: "EMIT_PROGRAM",
};
export const UdpTimedMetadataId3Frame = {
    NONE: "NONE",
    PRIV: "PRIV",
    TDRL: "TDRL",
};
export const PipelineId = {
    PIPELINE_0: "PIPELINE_0",
    PIPELINE_1: "PIPELINE_1",
};
export const ReservationAutomaticRenewal = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    UNAVAILABLE: "UNAVAILABLE",
};
export const ReservationState = {
    ACTIVE: "ACTIVE",
    CANCELED: "CANCELED",
    DELETED: "DELETED",
    EXPIRED: "EXPIRED",
};
export const InputTimecodeSource = {
    EMBEDDED: "EMBEDDED",
    ZEROBASED: "ZEROBASED",
};
export const LastFrameClippingBehavior = {
    EXCLUDE_LAST_FRAME: "EXCLUDE_LAST_FRAME",
    INCLUDE_LAST_FRAME: "INCLUDE_LAST_FRAME",
};
export const Scte35InputMode = {
    FIXED: "FIXED",
    FOLLOW_ACTIVE: "FOLLOW_ACTIVE",
};
export const Scte35ArchiveAllowedFlag = {
    ARCHIVE_ALLOWED: "ARCHIVE_ALLOWED",
    ARCHIVE_NOT_ALLOWED: "ARCHIVE_NOT_ALLOWED",
};
export const Scte35DeviceRestrictions = {
    NONE: "NONE",
    RESTRICT_GROUP0: "RESTRICT_GROUP0",
    RESTRICT_GROUP1: "RESTRICT_GROUP1",
    RESTRICT_GROUP2: "RESTRICT_GROUP2",
};
export const Scte35NoRegionalBlackoutFlag = {
    NO_REGIONAL_BLACKOUT: "NO_REGIONAL_BLACKOUT",
    REGIONAL_BLACKOUT: "REGIONAL_BLACKOUT",
};
export const Scte35WebDeliveryAllowedFlag = {
    WEB_DELIVERY_ALLOWED: "WEB_DELIVERY_ALLOWED",
    WEB_DELIVERY_NOT_ALLOWED: "WEB_DELIVERY_NOT_ALLOWED",
};
export const Scte35SegmentationCancelIndicator = {
    SEGMENTATION_EVENT_CANCELED: "SEGMENTATION_EVENT_CANCELED",
    SEGMENTATION_EVENT_NOT_CANCELED: "SEGMENTATION_EVENT_NOT_CANCELED",
};
export const FollowPoint = {
    END: "END",
    START: "START",
};
export const SignalMapMonitorDeploymentStatus = {
    DELETE_COMPLETE: "DELETE_COMPLETE",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    DEPLOYMENT_COMPLETE: "DEPLOYMENT_COMPLETE",
    DEPLOYMENT_FAILED: "DEPLOYMENT_FAILED",
    DEPLOYMENT_IN_PROGRESS: "DEPLOYMENT_IN_PROGRESS",
    DRY_RUN_DEPLOYMENT_COMPLETE: "DRY_RUN_DEPLOYMENT_COMPLETE",
    DRY_RUN_DEPLOYMENT_FAILED: "DRY_RUN_DEPLOYMENT_FAILED",
    DRY_RUN_DEPLOYMENT_IN_PROGRESS: "DRY_RUN_DEPLOYMENT_IN_PROGRESS",
    NOT_DEPLOYED: "NOT_DEPLOYED",
};
export const SignalMapStatus = {
    CREATE_COMPLETE: "CREATE_COMPLETE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    NOT_READY: "NOT_READY",
    READY: "READY",
    UPDATE_COMPLETE: "UPDATE_COMPLETE",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
    UPDATE_REVERTED: "UPDATE_REVERTED",
};
export const ThumbnailType = {
    CURRENT_ACTIVE: "CURRENT_ACTIVE",
    UNSPECIFIED: "UNSPECIFIED",
};
export const InputDeviceTransferType = {
    INCOMING: "INCOMING",
    OUTGOING: "OUTGOING",
};
export const FrameCaptureIntervalUnit = {
    MILLISECONDS: "MILLISECONDS",
    SECONDS: "SECONDS",
};
export const TimecodeBurninFontSize = {
    EXTRA_SMALL_10: "EXTRA_SMALL_10",
    LARGE_48: "LARGE_48",
    MEDIUM_32: "MEDIUM_32",
    SMALL_16: "SMALL_16",
};
export const TimecodeBurninPosition = {
    BOTTOM_CENTER: "BOTTOM_CENTER",
    BOTTOM_LEFT: "BOTTOM_LEFT",
    BOTTOM_RIGHT: "BOTTOM_RIGHT",
    MIDDLE_CENTER: "MIDDLE_CENTER",
    MIDDLE_LEFT: "MIDDLE_LEFT",
    MIDDLE_RIGHT: "MIDDLE_RIGHT",
    TOP_CENTER: "TOP_CENTER",
    TOP_LEFT: "TOP_LEFT",
    TOP_RIGHT: "TOP_RIGHT",
};
export const H264AdaptiveQuantization = {
    AUTO: "AUTO",
    HIGH: "HIGH",
    HIGHER: "HIGHER",
    LOW: "LOW",
    MAX: "MAX",
    MEDIUM: "MEDIUM",
    OFF: "OFF",
};
export const AfdSignaling = {
    AUTO: "AUTO",
    FIXED: "FIXED",
    NONE: "NONE",
};
export const H264ColorMetadata = {
    IGNORE: "IGNORE",
    INSERT: "INSERT",
};
export const H264EntropyEncoding = {
    CABAC: "CABAC",
    CAVLC: "CAVLC",
};
export const TemporalFilterPostFilterSharpening = {
    AUTO: "AUTO",
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const TemporalFilterStrength = {
    AUTO: "AUTO",
    STRENGTH_1: "STRENGTH_1",
    STRENGTH_10: "STRENGTH_10",
    STRENGTH_11: "STRENGTH_11",
    STRENGTH_12: "STRENGTH_12",
    STRENGTH_13: "STRENGTH_13",
    STRENGTH_14: "STRENGTH_14",
    STRENGTH_15: "STRENGTH_15",
    STRENGTH_16: "STRENGTH_16",
    STRENGTH_2: "STRENGTH_2",
    STRENGTH_3: "STRENGTH_3",
    STRENGTH_4: "STRENGTH_4",
    STRENGTH_5: "STRENGTH_5",
    STRENGTH_6: "STRENGTH_6",
    STRENGTH_7: "STRENGTH_7",
    STRENGTH_8: "STRENGTH_8",
    STRENGTH_9: "STRENGTH_9",
};
export const FixedAfd = {
    AFD_0000: "AFD_0000",
    AFD_0010: "AFD_0010",
    AFD_0011: "AFD_0011",
    AFD_0100: "AFD_0100",
    AFD_1000: "AFD_1000",
    AFD_1001: "AFD_1001",
    AFD_1010: "AFD_1010",
    AFD_1011: "AFD_1011",
    AFD_1101: "AFD_1101",
    AFD_1110: "AFD_1110",
    AFD_1111: "AFD_1111",
};
export const H264FlickerAq = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const H264ForceFieldPictures = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const H264FramerateControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
export const H264GopBReference = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const H264GopSizeUnits = {
    FRAMES: "FRAMES",
    SECONDS: "SECONDS",
};
export const H264Level = {
    H264_LEVEL_1: "H264_LEVEL_1",
    H264_LEVEL_1_1: "H264_LEVEL_1_1",
    H264_LEVEL_1_2: "H264_LEVEL_1_2",
    H264_LEVEL_1_3: "H264_LEVEL_1_3",
    H264_LEVEL_2: "H264_LEVEL_2",
    H264_LEVEL_2_1: "H264_LEVEL_2_1",
    H264_LEVEL_2_2: "H264_LEVEL_2_2",
    H264_LEVEL_3: "H264_LEVEL_3",
    H264_LEVEL_3_1: "H264_LEVEL_3_1",
    H264_LEVEL_3_2: "H264_LEVEL_3_2",
    H264_LEVEL_4: "H264_LEVEL_4",
    H264_LEVEL_4_1: "H264_LEVEL_4_1",
    H264_LEVEL_4_2: "H264_LEVEL_4_2",
    H264_LEVEL_5: "H264_LEVEL_5",
    H264_LEVEL_5_1: "H264_LEVEL_5_1",
    H264_LEVEL_5_2: "H264_LEVEL_5_2",
    H264_LEVEL_AUTO: "H264_LEVEL_AUTO",
};
export const H264LookAheadRateControl = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
};
export const H264ParControl = {
    INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
    SPECIFIED: "SPECIFIED",
};
export const H264Profile = {
    BASELINE: "BASELINE",
    HIGH: "HIGH",
    HIGH_10BIT: "HIGH_10BIT",
    HIGH_422: "HIGH_422",
    HIGH_422_10BIT: "HIGH_422_10BIT",
    MAIN: "MAIN",
};
export const H264QualityLevel = {
    ENHANCED_QUALITY: "ENHANCED_QUALITY",
    STANDARD_QUALITY: "STANDARD_QUALITY",
};
export const H264RateControlMode = {
    CBR: "CBR",
    MULTIPLEX: "MULTIPLEX",
    QVBR: "QVBR",
    VBR: "VBR",
};
export const H264ScanType = {
    INTERLACED: "INTERLACED",
    PROGRESSIVE: "PROGRESSIVE",
};
export const H264SceneChangeDetect = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const H264SpatialAq = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const H264SubGopLength = {
    DYNAMIC: "DYNAMIC",
    FIXED: "FIXED",
};
export const H264Syntax = {
    DEFAULT: "DEFAULT",
    RP2027: "RP2027",
};
export const H264TemporalAq = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const H264TimecodeInsertionBehavior = {
    DISABLED: "DISABLED",
    PIC_TIMING_SEI: "PIC_TIMING_SEI",
};
export const H265AdaptiveQuantization = {
    AUTO: "AUTO",
    HIGH: "HIGH",
    HIGHER: "HIGHER",
    LOW: "LOW",
    MAX: "MAX",
    MEDIUM: "MEDIUM",
    OFF: "OFF",
};
export const H265AlternativeTransferFunction = {
    INSERT: "INSERT",
    OMIT: "OMIT",
};
export const H265ColorMetadata = {
    IGNORE: "IGNORE",
    INSERT: "INSERT",
};
export const H265FlickerAq = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const H265GopSizeUnits = {
    FRAMES: "FRAMES",
    SECONDS: "SECONDS",
};
export const H265Level = {
    H265_LEVEL_1: "H265_LEVEL_1",
    H265_LEVEL_2: "H265_LEVEL_2",
    H265_LEVEL_2_1: "H265_LEVEL_2_1",
    H265_LEVEL_3: "H265_LEVEL_3",
    H265_LEVEL_3_1: "H265_LEVEL_3_1",
    H265_LEVEL_4: "H265_LEVEL_4",
    H265_LEVEL_4_1: "H265_LEVEL_4_1",
    H265_LEVEL_5: "H265_LEVEL_5",
    H265_LEVEL_5_1: "H265_LEVEL_5_1",
    H265_LEVEL_5_2: "H265_LEVEL_5_2",
    H265_LEVEL_6: "H265_LEVEL_6",
    H265_LEVEL_6_1: "H265_LEVEL_6_1",
    H265_LEVEL_6_2: "H265_LEVEL_6_2",
    H265_LEVEL_AUTO: "H265_LEVEL_AUTO",
};
export const H265LookAheadRateControl = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
};
export const H265MvOverPictureBoundaries = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const H265MvTemporalPredictor = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const H265Profile = {
    MAIN: "MAIN",
    MAIN_10BIT: "MAIN_10BIT",
};
export const H265RateControlMode = {
    CBR: "CBR",
    MULTIPLEX: "MULTIPLEX",
    QVBR: "QVBR",
};
export const H265ScanType = {
    INTERLACED: "INTERLACED",
    PROGRESSIVE: "PROGRESSIVE",
};
export const H265SceneChangeDetect = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const H265Tier = {
    HIGH: "HIGH",
    MAIN: "MAIN",
};
export const H265TilePadding = {
    NONE: "NONE",
    PADDED: "PADDED",
};
export const H265TimecodeInsertionBehavior = {
    DISABLED: "DISABLED",
    PIC_TIMING_SEI: "PIC_TIMING_SEI",
};
export const H265TreeblockSize = {
    AUTO: "AUTO",
    TREE_SIZE_32X32: "TREE_SIZE_32X32",
};
export const Mpeg2AdaptiveQuantization = {
    AUTO: "AUTO",
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
    OFF: "OFF",
};
export const Mpeg2ColorMetadata = {
    IGNORE: "IGNORE",
    INSERT: "INSERT",
};
export const Mpeg2ColorSpace = {
    AUTO: "AUTO",
    PASSTHROUGH: "PASSTHROUGH",
};
export const Mpeg2DisplayRatio = {
    DISPLAYRATIO16X9: "DISPLAYRATIO16X9",
    DISPLAYRATIO4X3: "DISPLAYRATIO4X3",
};
export const Mpeg2GopSizeUnits = {
    FRAMES: "FRAMES",
    SECONDS: "SECONDS",
};
export const Mpeg2ScanType = {
    INTERLACED: "INTERLACED",
    PROGRESSIVE: "PROGRESSIVE",
};
export const Mpeg2SubGopLength = {
    DYNAMIC: "DYNAMIC",
    FIXED: "FIXED",
};
export const Mpeg2TimecodeInsertionBehavior = {
    DISABLED: "DISABLED",
    GOP_TIMECODE: "GOP_TIMECODE",
};
export const VideoDescriptionRespondToAfd = {
    NONE: "NONE",
    PASSTHROUGH: "PASSTHROUGH",
    RESPOND: "RESPOND",
};
export const VideoDescriptionScalingBehavior = {
    DEFAULT: "DEFAULT",
    STRETCH_TO_OUTPUT: "STRETCH_TO_OUTPUT",
};
export const AcceptHeader = {
    image_jpeg: "image/jpeg",
};
export class BadGatewayException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadGatewayException",
            $fault: "server",
            ...opts,
        });
        this.name = "BadGatewayException";
        this.$fault = "server";
        Object.setPrototypeOf(this, BadGatewayException.prototype);
        this.Message = opts.Message;
    }
}
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class ForbiddenException extends __BaseException {
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ForbiddenException.prototype);
        this.Message = opts.Message;
    }
}
export class GatewayTimeoutException extends __BaseException {
    constructor(opts) {
        super({
            name: "GatewayTimeoutException",
            $fault: "server",
            ...opts,
        });
        this.name = "GatewayTimeoutException";
        this.$fault = "server";
        Object.setPrototypeOf(this, GatewayTimeoutException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerErrorException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
        this.Message = opts.Message;
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyRequestsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
export class UnprocessableEntityException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnprocessableEntityException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnprocessableEntityException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnprocessableEntityException.prototype);
        this.Message = opts.Message;
        this.ValidationErrors = opts.ValidationErrors;
    }
}
export const AvailBlankingState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const Scte35SpliceInsertNoRegionalBlackoutBehavior = {
    FOLLOW: "FOLLOW",
    IGNORE: "IGNORE",
};
export const Scte35SpliceInsertWebDeliveryAllowedBehavior = {
    FOLLOW: "FOLLOW",
    IGNORE: "IGNORE",
};
export const Scte35AposNoRegionalBlackoutBehavior = {
    FOLLOW: "FOLLOW",
    IGNORE: "IGNORE",
};
export const Scte35AposWebDeliveryAllowedBehavior = {
    FOLLOW: "FOLLOW",
    IGNORE: "IGNORE",
};
export const BlackoutSlateNetworkEndBlackout = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const BlackoutSlateState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const FeatureActivationsInputPrepareScheduleActions = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const FeatureActivationsOutputStaticImageOverlayScheduleActions = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const GlobalConfigurationInputEndAction = {
    NONE: "NONE",
    SWITCH_AND_LOOP_INPUTS: "SWITCH_AND_LOOP_INPUTS",
};
export const InputLossImageType = {
    COLOR: "COLOR",
    SLATE: "SLATE",
};
export const GlobalConfigurationOutputLockingMode = {
    EPOCH_LOCKING: "EPOCH_LOCKING",
    PIPELINE_LOCKING: "PIPELINE_LOCKING",
};
export const GlobalConfigurationOutputTimingSource = {
    INPUT_CLOCK: "INPUT_CLOCK",
    SYSTEM_CLOCK: "SYSTEM_CLOCK",
};
export const GlobalConfigurationLowFramerateInputs = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const MotionGraphicsInsertion = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const NielsenPcmToId3TaggingState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const ThumbnailState = {
    AUTO: "AUTO",
    DISABLED: "DISABLED",
};
export const TimecodeConfigSource = {
    EMBEDDED: "EMBEDDED",
    SYSTEMCLOCK: "SYSTEMCLOCK",
    ZEROBASED: "ZEROBASED",
};
export const ContentType = {
    image_jpeg: "image/jpeg",
};
export const PreferredChannelPipeline = {
    CURRENTLY_ACTIVE: "CURRENTLY_ACTIVE",
    PIPELINE_0: "PIPELINE_0",
    PIPELINE_1: "PIPELINE_1",
};
