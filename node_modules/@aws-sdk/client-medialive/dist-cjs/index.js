"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AacCodingMode: () => AacCodingMode,
  AacInputType: () => AacInputType,
  AacProfile: () => AacProfile,
  AacRateControlMode: () => AacRateControlMode,
  AacRawFormat: () => AacRawFormat,
  AacSpec: () => AacSpec,
  AacVbrQuality: () => AacVbrQuality,
  Ac3AttenuationControl: () => Ac3AttenuationControl,
  Ac3BitstreamMode: () => Ac3BitstreamMode,
  Ac3CodingMode: () => Ac3CodingMode,
  Ac3DrcProfile: () => Ac3DrcProfile,
  Ac3LfeFilter: () => Ac3LfeFilter,
  Ac3MetadataControl: () => Ac3MetadataControl,
  AcceptHeader: () => AcceptHeader,
  AcceptInputDeviceTransferCommand: () => AcceptInputDeviceTransferCommand,
  AccessibilityType: () => AccessibilityType,
  AfdSignaling: () => AfdSignaling,
  AudioDescriptionAudioTypeControl: () => AudioDescriptionAudioTypeControl,
  AudioDescriptionLanguageCodeControl: () => AudioDescriptionLanguageCodeControl,
  AudioLanguageSelectionPolicy: () => AudioLanguageSelectionPolicy,
  AudioNormalizationAlgorithm: () => AudioNormalizationAlgorithm,
  AudioNormalizationAlgorithmControl: () => AudioNormalizationAlgorithmControl,
  AudioOnlyHlsSegmentType: () => AudioOnlyHlsSegmentType,
  AudioOnlyHlsTrackType: () => AudioOnlyHlsTrackType,
  AudioType: () => AudioType,
  AuthenticationScheme: () => AuthenticationScheme,
  AvailBlankingState: () => AvailBlankingState,
  BadGatewayException: () => BadGatewayException,
  BadRequestException: () => BadRequestException,
  BatchDeleteCommand: () => BatchDeleteCommand,
  BatchStartCommand: () => BatchStartCommand,
  BatchStopCommand: () => BatchStopCommand,
  BatchUpdateScheduleCommand: () => BatchUpdateScheduleCommand,
  BlackoutSlateNetworkEndBlackout: () => BlackoutSlateNetworkEndBlackout,
  BlackoutSlateState: () => BlackoutSlateState,
  BurnInAlignment: () => BurnInAlignment,
  BurnInBackgroundColor: () => BurnInBackgroundColor,
  BurnInFontColor: () => BurnInFontColor,
  BurnInOutlineColor: () => BurnInOutlineColor,
  BurnInShadowColor: () => BurnInShadowColor,
  BurnInTeletextGridControl: () => BurnInTeletextGridControl,
  CancelInputDeviceTransferCommand: () => CancelInputDeviceTransferCommand,
  CdiInputResolution: () => CdiInputResolution,
  ChannelClass: () => ChannelClass,
  ChannelPipelineIdToRestart: () => ChannelPipelineIdToRestart,
  ChannelState: () => ChannelState,
  ClaimDeviceCommand: () => ClaimDeviceCommand,
  CloudWatchAlarmTemplateComparisonOperator: () => CloudWatchAlarmTemplateComparisonOperator,
  CloudWatchAlarmTemplateStatistic: () => CloudWatchAlarmTemplateStatistic,
  CloudWatchAlarmTemplateTargetResourceType: () => CloudWatchAlarmTemplateTargetResourceType,
  CloudWatchAlarmTemplateTreatMissingData: () => CloudWatchAlarmTemplateTreatMissingData,
  CmafIngestSegmentLengthUnits: () => CmafIngestSegmentLengthUnits,
  CmafNielsenId3Behavior: () => CmafNielsenId3Behavior,
  ColorSpace: () => ColorSpace,
  ConflictException: () => ConflictException,
  ContentType: () => ContentType,
  CreateChannelCommand: () => CreateChannelCommand,
  CreateCloudWatchAlarmTemplateCommand: () => CreateCloudWatchAlarmTemplateCommand,
  CreateCloudWatchAlarmTemplateGroupCommand: () => CreateCloudWatchAlarmTemplateGroupCommand,
  CreateEventBridgeRuleTemplateCommand: () => CreateEventBridgeRuleTemplateCommand,
  CreateEventBridgeRuleTemplateGroupCommand: () => CreateEventBridgeRuleTemplateGroupCommand,
  CreateInputCommand: () => CreateInputCommand,
  CreateInputSecurityGroupCommand: () => CreateInputSecurityGroupCommand,
  CreateMultiplexCommand: () => CreateMultiplexCommand,
  CreateMultiplexProgramCommand: () => CreateMultiplexProgramCommand,
  CreatePartnerInputCommand: () => CreatePartnerInputCommand,
  CreateSignalMapCommand: () => CreateSignalMapCommand,
  CreateTagsCommand: () => CreateTagsCommand,
  DashRoleAudio: () => DashRoleAudio,
  DashRoleCaption: () => DashRoleCaption,
  DeleteChannelCommand: () => DeleteChannelCommand,
  DeleteCloudWatchAlarmTemplateCommand: () => DeleteCloudWatchAlarmTemplateCommand,
  DeleteCloudWatchAlarmTemplateGroupCommand: () => DeleteCloudWatchAlarmTemplateGroupCommand,
  DeleteEventBridgeRuleTemplateCommand: () => DeleteEventBridgeRuleTemplateCommand,
  DeleteEventBridgeRuleTemplateGroupCommand: () => DeleteEventBridgeRuleTemplateGroupCommand,
  DeleteInputCommand: () => DeleteInputCommand,
  DeleteInputSecurityGroupCommand: () => DeleteInputSecurityGroupCommand,
  DeleteMultiplexCommand: () => DeleteMultiplexCommand,
  DeleteMultiplexProgramCommand: () => DeleteMultiplexProgramCommand,
  DeleteReservationCommand: () => DeleteReservationCommand,
  DeleteScheduleCommand: () => DeleteScheduleCommand,
  DeleteSignalMapCommand: () => DeleteSignalMapCommand,
  DeleteTagsCommand: () => DeleteTagsCommand,
  DescribeAccountConfigurationCommand: () => DescribeAccountConfigurationCommand,
  DescribeChannelCommand: () => DescribeChannelCommand,
  DescribeInputCommand: () => DescribeInputCommand,
  DescribeInputDeviceCommand: () => DescribeInputDeviceCommand,
  DescribeInputDeviceThumbnailCommand: () => DescribeInputDeviceThumbnailCommand,
  DescribeInputDeviceThumbnailResponseFilterSensitiveLog: () => DescribeInputDeviceThumbnailResponseFilterSensitiveLog,
  DescribeInputSecurityGroupCommand: () => DescribeInputSecurityGroupCommand,
  DescribeMultiplexCommand: () => DescribeMultiplexCommand,
  DescribeMultiplexProgramCommand: () => DescribeMultiplexProgramCommand,
  DescribeOfferingCommand: () => DescribeOfferingCommand,
  DescribeReservationCommand: () => DescribeReservationCommand,
  DescribeScheduleCommand: () => DescribeScheduleCommand,
  DescribeThumbnailsCommand: () => DescribeThumbnailsCommand,
  DeviceSettingsSyncState: () => DeviceSettingsSyncState,
  DeviceUpdateStatus: () => DeviceUpdateStatus,
  DolbyEProgramSelection: () => DolbyEProgramSelection,
  DvbDashAccessibility: () => DvbDashAccessibility,
  DvbSdtOutputSdt: () => DvbSdtOutputSdt,
  DvbSubDestinationAlignment: () => DvbSubDestinationAlignment,
  DvbSubDestinationBackgroundColor: () => DvbSubDestinationBackgroundColor,
  DvbSubDestinationFontColor: () => DvbSubDestinationFontColor,
  DvbSubDestinationOutlineColor: () => DvbSubDestinationOutlineColor,
  DvbSubDestinationShadowColor: () => DvbSubDestinationShadowColor,
  DvbSubDestinationTeletextGridControl: () => DvbSubDestinationTeletextGridControl,
  DvbSubOcrLanguage: () => DvbSubOcrLanguage,
  Eac3AtmosCodingMode: () => Eac3AtmosCodingMode,
  Eac3AtmosDrcLine: () => Eac3AtmosDrcLine,
  Eac3AtmosDrcRf: () => Eac3AtmosDrcRf,
  Eac3AttenuationControl: () => Eac3AttenuationControl,
  Eac3BitstreamMode: () => Eac3BitstreamMode,
  Eac3CodingMode: () => Eac3CodingMode,
  Eac3DcFilter: () => Eac3DcFilter,
  Eac3DrcLine: () => Eac3DrcLine,
  Eac3DrcRf: () => Eac3DrcRf,
  Eac3LfeControl: () => Eac3LfeControl,
  Eac3LfeFilter: () => Eac3LfeFilter,
  Eac3MetadataControl: () => Eac3MetadataControl,
  Eac3PassthroughControl: () => Eac3PassthroughControl,
  Eac3PhaseControl: () => Eac3PhaseControl,
  Eac3StereoDownmix: () => Eac3StereoDownmix,
  Eac3SurroundExMode: () => Eac3SurroundExMode,
  Eac3SurroundMode: () => Eac3SurroundMode,
  EbuTtDDestinationStyleControl: () => EbuTtDDestinationStyleControl,
  EbuTtDFillLineGapControl: () => EbuTtDFillLineGapControl,
  EmbeddedConvert608To708: () => EmbeddedConvert608To708,
  EmbeddedScte20Detection: () => EmbeddedScte20Detection,
  EventBridgeRuleTemplateEventType: () => EventBridgeRuleTemplateEventType,
  FeatureActivationsInputPrepareScheduleActions: () => FeatureActivationsInputPrepareScheduleActions,
  FeatureActivationsOutputStaticImageOverlayScheduleActions: () => FeatureActivationsOutputStaticImageOverlayScheduleActions,
  FecOutputIncludeFec: () => FecOutputIncludeFec,
  FixedAfd: () => FixedAfd,
  Fmp4NielsenId3Behavior: () => Fmp4NielsenId3Behavior,
  Fmp4TimedMetadataBehavior: () => Fmp4TimedMetadataBehavior,
  FollowPoint: () => FollowPoint,
  ForbiddenException: () => ForbiddenException,
  FrameCaptureIntervalUnit: () => FrameCaptureIntervalUnit,
  GatewayTimeoutException: () => GatewayTimeoutException,
  GetCloudWatchAlarmTemplateCommand: () => GetCloudWatchAlarmTemplateCommand,
  GetCloudWatchAlarmTemplateGroupCommand: () => GetCloudWatchAlarmTemplateGroupCommand,
  GetEventBridgeRuleTemplateCommand: () => GetEventBridgeRuleTemplateCommand,
  GetEventBridgeRuleTemplateGroupCommand: () => GetEventBridgeRuleTemplateGroupCommand,
  GetSignalMapCommand: () => GetSignalMapCommand,
  GlobalConfigurationInputEndAction: () => GlobalConfigurationInputEndAction,
  GlobalConfigurationLowFramerateInputs: () => GlobalConfigurationLowFramerateInputs,
  GlobalConfigurationOutputLockingMode: () => GlobalConfigurationOutputLockingMode,
  GlobalConfigurationOutputTimingSource: () => GlobalConfigurationOutputTimingSource,
  H264AdaptiveQuantization: () => H264AdaptiveQuantization,
  H264ColorMetadata: () => H264ColorMetadata,
  H264EntropyEncoding: () => H264EntropyEncoding,
  H264FlickerAq: () => H264FlickerAq,
  H264ForceFieldPictures: () => H264ForceFieldPictures,
  H264FramerateControl: () => H264FramerateControl,
  H264GopBReference: () => H264GopBReference,
  H264GopSizeUnits: () => H264GopSizeUnits,
  H264Level: () => H264Level,
  H264LookAheadRateControl: () => H264LookAheadRateControl,
  H264ParControl: () => H264ParControl,
  H264Profile: () => H264Profile,
  H264QualityLevel: () => H264QualityLevel,
  H264RateControlMode: () => H264RateControlMode,
  H264ScanType: () => H264ScanType,
  H264SceneChangeDetect: () => H264SceneChangeDetect,
  H264SpatialAq: () => H264SpatialAq,
  H264SubGopLength: () => H264SubGopLength,
  H264Syntax: () => H264Syntax,
  H264TemporalAq: () => H264TemporalAq,
  H264TimecodeInsertionBehavior: () => H264TimecodeInsertionBehavior,
  H265AdaptiveQuantization: () => H265AdaptiveQuantization,
  H265AlternativeTransferFunction: () => H265AlternativeTransferFunction,
  H265ColorMetadata: () => H265ColorMetadata,
  H265FlickerAq: () => H265FlickerAq,
  H265GopSizeUnits: () => H265GopSizeUnits,
  H265Level: () => H265Level,
  H265LookAheadRateControl: () => H265LookAheadRateControl,
  H265MvOverPictureBoundaries: () => H265MvOverPictureBoundaries,
  H265MvTemporalPredictor: () => H265MvTemporalPredictor,
  H265Profile: () => H265Profile,
  H265RateControlMode: () => H265RateControlMode,
  H265ScanType: () => H265ScanType,
  H265SceneChangeDetect: () => H265SceneChangeDetect,
  H265Tier: () => H265Tier,
  H265TilePadding: () => H265TilePadding,
  H265TimecodeInsertionBehavior: () => H265TimecodeInsertionBehavior,
  H265TreeblockSize: () => H265TreeblockSize,
  HlsAdMarkers: () => HlsAdMarkers,
  HlsAkamaiHttpTransferMode: () => HlsAkamaiHttpTransferMode,
  HlsCaptionLanguageSetting: () => HlsCaptionLanguageSetting,
  HlsClientCache: () => HlsClientCache,
  HlsCodecSpecification: () => HlsCodecSpecification,
  HlsDirectoryStructure: () => HlsDirectoryStructure,
  HlsDiscontinuityTags: () => HlsDiscontinuityTags,
  HlsEncryptionType: () => HlsEncryptionType,
  HlsH265PackagingType: () => HlsH265PackagingType,
  HlsId3SegmentTaggingState: () => HlsId3SegmentTaggingState,
  HlsIncompleteSegmentBehavior: () => HlsIncompleteSegmentBehavior,
  HlsIvInManifest: () => HlsIvInManifest,
  HlsIvSource: () => HlsIvSource,
  HlsManifestCompression: () => HlsManifestCompression,
  HlsManifestDurationFormat: () => HlsManifestDurationFormat,
  HlsMediaStoreStorageClass: () => HlsMediaStoreStorageClass,
  HlsMode: () => HlsMode,
  HlsOutputSelection: () => HlsOutputSelection,
  HlsProgramDateTime: () => HlsProgramDateTime,
  HlsProgramDateTimeClock: () => HlsProgramDateTimeClock,
  HlsRedundantManifest: () => HlsRedundantManifest,
  HlsScte35SourceType: () => HlsScte35SourceType,
  HlsSegmentationMode: () => HlsSegmentationMode,
  HlsStreamInfResolution: () => HlsStreamInfResolution,
  HlsTimedMetadataId3Frame: () => HlsTimedMetadataId3Frame,
  HlsTsFileMode: () => HlsTsFileMode,
  HlsWebdavHttpTransferMode: () => HlsWebdavHttpTransferMode,
  IFrameOnlyPlaylistType: () => IFrameOnlyPlaylistType,
  IncludeFillerNalUnits: () => IncludeFillerNalUnits,
  InputClass: () => InputClass,
  InputCodec: () => InputCodec,
  InputDeblockFilter: () => InputDeblockFilter,
  InputDenoiseFilter: () => InputDenoiseFilter,
  InputDeviceActiveInput: () => InputDeviceActiveInput,
  InputDeviceCodec: () => InputDeviceCodec,
  InputDeviceConfigurableAudioChannelPairProfile: () => InputDeviceConfigurableAudioChannelPairProfile,
  InputDeviceConfiguredInput: () => InputDeviceConfiguredInput,
  InputDeviceConnectionState: () => InputDeviceConnectionState,
  InputDeviceIpScheme: () => InputDeviceIpScheme,
  InputDeviceOutputType: () => InputDeviceOutputType,
  InputDeviceScanType: () => InputDeviceScanType,
  InputDeviceState: () => InputDeviceState,
  InputDeviceTransferType: () => InputDeviceTransferType,
  InputDeviceType: () => InputDeviceType,
  InputDeviceUhdAudioChannelPairProfile: () => InputDeviceUhdAudioChannelPairProfile,
  InputFilter: () => InputFilter,
  InputLossActionForHlsOut: () => InputLossActionForHlsOut,
  InputLossActionForMsSmoothOut: () => InputLossActionForMsSmoothOut,
  InputLossActionForRtmpOut: () => InputLossActionForRtmpOut,
  InputLossActionForUdpOut: () => InputLossActionForUdpOut,
  InputLossImageType: () => InputLossImageType,
  InputMaximumBitrate: () => InputMaximumBitrate,
  InputPreference: () => InputPreference,
  InputResolution: () => InputResolution,
  InputSecurityGroupState: () => InputSecurityGroupState,
  InputSourceEndBehavior: () => InputSourceEndBehavior,
  InputSourceType: () => InputSourceType,
  InputState: () => InputState,
  InputTimecodeSource: () => InputTimecodeSource,
  InputType: () => InputType,
  InternalServerErrorException: () => InternalServerErrorException,
  LastFrameClippingBehavior: () => LastFrameClippingBehavior,
  ListChannelsCommand: () => ListChannelsCommand,
  ListCloudWatchAlarmTemplateGroupsCommand: () => ListCloudWatchAlarmTemplateGroupsCommand,
  ListCloudWatchAlarmTemplatesCommand: () => ListCloudWatchAlarmTemplatesCommand,
  ListEventBridgeRuleTemplateGroupsCommand: () => ListEventBridgeRuleTemplateGroupsCommand,
  ListEventBridgeRuleTemplatesCommand: () => ListEventBridgeRuleTemplatesCommand,
  ListInputDeviceTransfersCommand: () => ListInputDeviceTransfersCommand,
  ListInputDevicesCommand: () => ListInputDevicesCommand,
  ListInputSecurityGroupsCommand: () => ListInputSecurityGroupsCommand,
  ListInputsCommand: () => ListInputsCommand,
  ListMultiplexProgramsCommand: () => ListMultiplexProgramsCommand,
  ListMultiplexesCommand: () => ListMultiplexesCommand,
  ListOfferingsCommand: () => ListOfferingsCommand,
  ListReservationsCommand: () => ListReservationsCommand,
  ListSignalMapsCommand: () => ListSignalMapsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  LogLevel: () => LogLevel,
  M2tsAbsentInputAudioBehavior: () => M2tsAbsentInputAudioBehavior,
  M2tsArib: () => M2tsArib,
  M2tsAribCaptionsPidControl: () => M2tsAribCaptionsPidControl,
  M2tsAudioBufferModel: () => M2tsAudioBufferModel,
  M2tsAudioInterval: () => M2tsAudioInterval,
  M2tsAudioStreamType: () => M2tsAudioStreamType,
  M2tsBufferModel: () => M2tsBufferModel,
  M2tsCcDescriptor: () => M2tsCcDescriptor,
  M2tsEbifControl: () => M2tsEbifControl,
  M2tsEbpPlacement: () => M2tsEbpPlacement,
  M2tsEsRateInPes: () => M2tsEsRateInPes,
  M2tsKlv: () => M2tsKlv,
  M2tsNielsenId3Behavior: () => M2tsNielsenId3Behavior,
  M2tsPcrControl: () => M2tsPcrControl,
  M2tsRateMode: () => M2tsRateMode,
  M2tsScte35Control: () => M2tsScte35Control,
  M2tsSegmentationMarkers: () => M2tsSegmentationMarkers,
  M2tsSegmentationStyle: () => M2tsSegmentationStyle,
  M2tsTimedMetadataBehavior: () => M2tsTimedMetadataBehavior,
  M3u8KlvBehavior: () => M3u8KlvBehavior,
  M3u8NielsenId3Behavior: () => M3u8NielsenId3Behavior,
  M3u8PcrControl: () => M3u8PcrControl,
  M3u8Scte35Behavior: () => M3u8Scte35Behavior,
  M3u8TimedMetadataBehavior: () => M3u8TimedMetadataBehavior,
  MaintenanceDay: () => MaintenanceDay,
  MediaLive: () => MediaLive,
  MediaLiveClient: () => MediaLiveClient,
  MediaLiveServiceException: () => MediaLiveServiceException,
  MotionGraphicsInsertion: () => MotionGraphicsInsertion,
  Mp2CodingMode: () => Mp2CodingMode,
  Mpeg2AdaptiveQuantization: () => Mpeg2AdaptiveQuantization,
  Mpeg2ColorMetadata: () => Mpeg2ColorMetadata,
  Mpeg2ColorSpace: () => Mpeg2ColorSpace,
  Mpeg2DisplayRatio: () => Mpeg2DisplayRatio,
  Mpeg2GopSizeUnits: () => Mpeg2GopSizeUnits,
  Mpeg2ScanType: () => Mpeg2ScanType,
  Mpeg2SubGopLength: () => Mpeg2SubGopLength,
  Mpeg2TimecodeInsertionBehavior: () => Mpeg2TimecodeInsertionBehavior,
  MsSmoothH265PackagingType: () => MsSmoothH265PackagingType,
  MultiplexState: () => MultiplexState,
  NetworkInputServerValidation: () => NetworkInputServerValidation,
  NielsenPcmToId3TaggingState: () => NielsenPcmToId3TaggingState,
  NielsenWatermarkTimezones: () => NielsenWatermarkTimezones,
  NielsenWatermarksCbetStepaside: () => NielsenWatermarksCbetStepaside,
  NielsenWatermarksDistributionTypes: () => NielsenWatermarksDistributionTypes,
  NotFoundException: () => NotFoundException,
  OfferingDurationUnits: () => OfferingDurationUnits,
  OfferingType: () => OfferingType,
  PipelineId: () => PipelineId,
  PreferredChannelPipeline: () => PreferredChannelPipeline,
  PurchaseOfferingCommand: () => PurchaseOfferingCommand,
  RebootInputDeviceCommand: () => RebootInputDeviceCommand,
  RebootInputDeviceForce: () => RebootInputDeviceForce,
  RejectInputDeviceTransferCommand: () => RejectInputDeviceTransferCommand,
  ReservationAutomaticRenewal: () => ReservationAutomaticRenewal,
  ReservationCodec: () => ReservationCodec,
  ReservationMaximumBitrate: () => ReservationMaximumBitrate,
  ReservationMaximumFramerate: () => ReservationMaximumFramerate,
  ReservationResolution: () => ReservationResolution,
  ReservationResourceType: () => ReservationResourceType,
  ReservationSpecialFeature: () => ReservationSpecialFeature,
  ReservationState: () => ReservationState,
  ReservationVideoQuality: () => ReservationVideoQuality,
  RestartChannelPipelinesCommand: () => RestartChannelPipelinesCommand,
  RtmpAdMarkers: () => RtmpAdMarkers,
  RtmpCacheFullBehavior: () => RtmpCacheFullBehavior,
  RtmpCaptionData: () => RtmpCaptionData,
  RtmpOutputCertificateMode: () => RtmpOutputCertificateMode,
  S3CannedAcl: () => S3CannedAcl,
  Scte20Convert608To708: () => Scte20Convert608To708,
  Scte27OcrLanguage: () => Scte27OcrLanguage,
  Scte35AposNoRegionalBlackoutBehavior: () => Scte35AposNoRegionalBlackoutBehavior,
  Scte35AposWebDeliveryAllowedBehavior: () => Scte35AposWebDeliveryAllowedBehavior,
  Scte35ArchiveAllowedFlag: () => Scte35ArchiveAllowedFlag,
  Scte35DeviceRestrictions: () => Scte35DeviceRestrictions,
  Scte35InputMode: () => Scte35InputMode,
  Scte35NoRegionalBlackoutFlag: () => Scte35NoRegionalBlackoutFlag,
  Scte35SegmentationCancelIndicator: () => Scte35SegmentationCancelIndicator,
  Scte35SpliceInsertNoRegionalBlackoutBehavior: () => Scte35SpliceInsertNoRegionalBlackoutBehavior,
  Scte35SpliceInsertWebDeliveryAllowedBehavior: () => Scte35SpliceInsertWebDeliveryAllowedBehavior,
  Scte35Type: () => Scte35Type,
  Scte35WebDeliveryAllowedFlag: () => Scte35WebDeliveryAllowedFlag,
  SignalMapMonitorDeploymentStatus: () => SignalMapMonitorDeploymentStatus,
  SignalMapStatus: () => SignalMapStatus,
  SmoothGroupAudioOnlyTimecodeControl: () => SmoothGroupAudioOnlyTimecodeControl,
  SmoothGroupCertificateMode: () => SmoothGroupCertificateMode,
  SmoothGroupEventIdMode: () => SmoothGroupEventIdMode,
  SmoothGroupEventStopBehavior: () => SmoothGroupEventStopBehavior,
  SmoothGroupSegmentationMode: () => SmoothGroupSegmentationMode,
  SmoothGroupSparseTrackType: () => SmoothGroupSparseTrackType,
  SmoothGroupStreamManifestBehavior: () => SmoothGroupStreamManifestBehavior,
  SmoothGroupTimestampOffsetMode: () => SmoothGroupTimestampOffsetMode,
  Smpte2038DataPreference: () => Smpte2038DataPreference,
  StartChannelCommand: () => StartChannelCommand,
  StartDeleteMonitorDeploymentCommand: () => StartDeleteMonitorDeploymentCommand,
  StartInputDeviceCommand: () => StartInputDeviceCommand,
  StartInputDeviceMaintenanceWindowCommand: () => StartInputDeviceMaintenanceWindowCommand,
  StartMonitorDeploymentCommand: () => StartMonitorDeploymentCommand,
  StartMultiplexCommand: () => StartMultiplexCommand,
  StartUpdateSignalMapCommand: () => StartUpdateSignalMapCommand,
  StopChannelCommand: () => StopChannelCommand,
  StopInputDeviceCommand: () => StopInputDeviceCommand,
  StopMultiplexCommand: () => StopMultiplexCommand,
  TemporalFilterPostFilterSharpening: () => TemporalFilterPostFilterSharpening,
  TemporalFilterStrength: () => TemporalFilterStrength,
  ThumbnailState: () => ThumbnailState,
  ThumbnailType: () => ThumbnailType,
  TimecodeBurninFontSize: () => TimecodeBurninFontSize,
  TimecodeBurninPosition: () => TimecodeBurninPosition,
  TimecodeConfigSource: () => TimecodeConfigSource,
  TooManyRequestsException: () => TooManyRequestsException,
  TransferInputDeviceCommand: () => TransferInputDeviceCommand,
  TtmlDestinationStyleControl: () => TtmlDestinationStyleControl,
  UdpTimedMetadataId3Frame: () => UdpTimedMetadataId3Frame,
  UnprocessableEntityException: () => UnprocessableEntityException,
  UpdateAccountConfigurationCommand: () => UpdateAccountConfigurationCommand,
  UpdateChannelClassCommand: () => UpdateChannelClassCommand,
  UpdateChannelCommand: () => UpdateChannelCommand,
  UpdateCloudWatchAlarmTemplateCommand: () => UpdateCloudWatchAlarmTemplateCommand,
  UpdateCloudWatchAlarmTemplateGroupCommand: () => UpdateCloudWatchAlarmTemplateGroupCommand,
  UpdateEventBridgeRuleTemplateCommand: () => UpdateEventBridgeRuleTemplateCommand,
  UpdateEventBridgeRuleTemplateGroupCommand: () => UpdateEventBridgeRuleTemplateGroupCommand,
  UpdateInputCommand: () => UpdateInputCommand,
  UpdateInputDeviceCommand: () => UpdateInputDeviceCommand,
  UpdateInputSecurityGroupCommand: () => UpdateInputSecurityGroupCommand,
  UpdateMultiplexCommand: () => UpdateMultiplexCommand,
  UpdateMultiplexProgramCommand: () => UpdateMultiplexProgramCommand,
  UpdateReservationCommand: () => UpdateReservationCommand,
  VideoDescriptionRespondToAfd: () => VideoDescriptionRespondToAfd,
  VideoDescriptionScalingBehavior: () => VideoDescriptionScalingBehavior,
  VideoSelectorColorSpace: () => VideoSelectorColorSpace,
  VideoSelectorColorSpaceUsage: () => VideoSelectorColorSpaceUsage,
  WavCodingMode: () => WavCodingMode,
  WebvttDestinationStyleControl: () => WebvttDestinationStyleControl,
  __Client: () => import_smithy_client.Client,
  paginateDescribeSchedule: () => paginateDescribeSchedule,
  paginateListChannels: () => paginateListChannels,
  paginateListCloudWatchAlarmTemplateGroups: () => paginateListCloudWatchAlarmTemplateGroups,
  paginateListCloudWatchAlarmTemplates: () => paginateListCloudWatchAlarmTemplates,
  paginateListEventBridgeRuleTemplateGroups: () => paginateListEventBridgeRuleTemplateGroups,
  paginateListEventBridgeRuleTemplates: () => paginateListEventBridgeRuleTemplates,
  paginateListInputDeviceTransfers: () => paginateListInputDeviceTransfers,
  paginateListInputDevices: () => paginateListInputDevices,
  paginateListInputSecurityGroups: () => paginateListInputSecurityGroups,
  paginateListInputs: () => paginateListInputs,
  paginateListMultiplexPrograms: () => paginateListMultiplexPrograms,
  paginateListMultiplexes: () => paginateListMultiplexes,
  paginateListOfferings: () => paginateListOfferings,
  paginateListReservations: () => paginateListReservations,
  paginateListSignalMaps: () => paginateListSignalMaps,
  waitForChannelCreated: () => waitForChannelCreated,
  waitForChannelDeleted: () => waitForChannelDeleted,
  waitForChannelRunning: () => waitForChannelRunning,
  waitForChannelStopped: () => waitForChannelStopped,
  waitForInputAttached: () => waitForInputAttached,
  waitForInputDeleted: () => waitForInputDeleted,
  waitForInputDetached: () => waitForInputDetached,
  waitForMultiplexCreated: () => waitForMultiplexCreated,
  waitForMultiplexDeleted: () => waitForMultiplexDeleted,
  waitForMultiplexRunning: () => waitForMultiplexRunning,
  waitForMultiplexStopped: () => waitForMultiplexStopped,
  waitForSignalMapCreated: () => waitForSignalMapCreated,
  waitForSignalMapMonitorDeleted: () => waitForSignalMapMonitorDeleted,
  waitForSignalMapMonitorDeployed: () => waitForSignalMapMonitorDeployed,
  waitForSignalMapUpdated: () => waitForSignalMapUpdated,
  waitUntilChannelCreated: () => waitUntilChannelCreated,
  waitUntilChannelDeleted: () => waitUntilChannelDeleted,
  waitUntilChannelRunning: () => waitUntilChannelRunning,
  waitUntilChannelStopped: () => waitUntilChannelStopped,
  waitUntilInputAttached: () => waitUntilInputAttached,
  waitUntilInputDeleted: () => waitUntilInputDeleted,
  waitUntilInputDetached: () => waitUntilInputDetached,
  waitUntilMultiplexCreated: () => waitUntilMultiplexCreated,
  waitUntilMultiplexDeleted: () => waitUntilMultiplexDeleted,
  waitUntilMultiplexRunning: () => waitUntilMultiplexRunning,
  waitUntilMultiplexStopped: () => waitUntilMultiplexStopped,
  waitUntilSignalMapCreated: () => waitUntilSignalMapCreated,
  waitUntilSignalMapMonitorDeleted: () => waitUntilSignalMapMonitorDeleted,
  waitUntilSignalMapMonitorDeployed: () => waitUntilSignalMapMonitorDeployed,
  waitUntilSignalMapUpdated: () => waitUntilSignalMapUpdated
});
module.exports = __toCommonJS(src_exports);

// src/MediaLiveClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "medialive"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/MediaLiveClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/MediaLiveClient.ts
var _MediaLiveClient = class _MediaLiveClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultMediaLiveHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_MediaLiveClient, "MediaLiveClient");
var MediaLiveClient = _MediaLiveClient;

// src/MediaLive.ts


// src/commands/AcceptInputDeviceTransferCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");


var import_uuid = require("uuid");

// src/models/MediaLiveServiceException.ts

var _MediaLiveServiceException = class _MediaLiveServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _MediaLiveServiceException.prototype);
  }
};
__name(_MediaLiveServiceException, "MediaLiveServiceException");
var MediaLiveServiceException = _MediaLiveServiceException;

// src/models/models_1.ts
var Scte35Type = {
  NONE: "NONE",
  SCTE_35_WITHOUT_SEGMENTATION: "SCTE_35_WITHOUT_SEGMENTATION"
};
var CmafIngestSegmentLengthUnits = {
  MILLISECONDS: "MILLISECONDS",
  SECONDS: "SECONDS"
};
var HlsCaptionLanguageSetting = {
  INSERT: "INSERT",
  NONE: "NONE",
  OMIT: "OMIT"
};
var HlsClientCache = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var HlsCodecSpecification = {
  RFC_4281: "RFC_4281",
  RFC_6381: "RFC_6381"
};
var HlsDirectoryStructure = {
  SINGLE_DIRECTORY: "SINGLE_DIRECTORY",
  SUBDIRECTORY_PER_STREAM: "SUBDIRECTORY_PER_STREAM"
};
var HlsDiscontinuityTags = {
  INSERT: "INSERT",
  NEVER_INSERT: "NEVER_INSERT"
};
var HlsEncryptionType = {
  AES128: "AES128",
  SAMPLE_AES: "SAMPLE_AES"
};
var HlsAkamaiHttpTransferMode = {
  CHUNKED: "CHUNKED",
  NON_CHUNKED: "NON_CHUNKED"
};
var HlsMediaStoreStorageClass = {
  TEMPORAL: "TEMPORAL"
};
var HlsWebdavHttpTransferMode = {
  CHUNKED: "CHUNKED",
  NON_CHUNKED: "NON_CHUNKED"
};
var HlsId3SegmentTaggingState = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var IFrameOnlyPlaylistType = {
  DISABLED: "DISABLED",
  STANDARD: "STANDARD"
};
var HlsIncompleteSegmentBehavior = {
  AUTO: "AUTO",
  SUPPRESS: "SUPPRESS"
};
var InputLossActionForHlsOut = {
  EMIT_OUTPUT: "EMIT_OUTPUT",
  PAUSE_OUTPUT: "PAUSE_OUTPUT"
};
var HlsIvInManifest = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var HlsIvSource = {
  EXPLICIT: "EXPLICIT",
  FOLLOWS_SEGMENT_NUMBER: "FOLLOWS_SEGMENT_NUMBER"
};
var HlsManifestCompression = {
  GZIP: "GZIP",
  NONE: "NONE"
};
var HlsManifestDurationFormat = {
  FLOATING_POINT: "FLOATING_POINT",
  INTEGER: "INTEGER"
};
var HlsMode = {
  LIVE: "LIVE",
  VOD: "VOD"
};
var HlsOutputSelection = {
  MANIFESTS_AND_SEGMENTS: "MANIFESTS_AND_SEGMENTS",
  SEGMENTS_ONLY: "SEGMENTS_ONLY",
  VARIANT_MANIFESTS_AND_SEGMENTS: "VARIANT_MANIFESTS_AND_SEGMENTS"
};
var HlsProgramDateTime = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var HlsProgramDateTimeClock = {
  INITIALIZE_FROM_OUTPUT_TIMECODE: "INITIALIZE_FROM_OUTPUT_TIMECODE",
  SYSTEM_CLOCK: "SYSTEM_CLOCK"
};
var HlsRedundantManifest = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var HlsSegmentationMode = {
  USE_INPUT_SEGMENTATION: "USE_INPUT_SEGMENTATION",
  USE_SEGMENT_DURATION: "USE_SEGMENT_DURATION"
};
var HlsStreamInfResolution = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var HlsTimedMetadataId3Frame = {
  NONE: "NONE",
  PRIV: "PRIV",
  TDRL: "TDRL"
};
var HlsTsFileMode = {
  SEGMENTED_FILES: "SEGMENTED_FILES",
  SINGLE_FILE: "SINGLE_FILE"
};
var SmoothGroupAudioOnlyTimecodeControl = {
  PASSTHROUGH: "PASSTHROUGH",
  USE_CONFIGURED_CLOCK: "USE_CONFIGURED_CLOCK"
};
var SmoothGroupCertificateMode = {
  SELF_SIGNED: "SELF_SIGNED",
  VERIFY_AUTHENTICITY: "VERIFY_AUTHENTICITY"
};
var SmoothGroupEventIdMode = {
  NO_EVENT_ID: "NO_EVENT_ID",
  USE_CONFIGURED: "USE_CONFIGURED",
  USE_TIMESTAMP: "USE_TIMESTAMP"
};
var SmoothGroupEventStopBehavior = {
  NONE: "NONE",
  SEND_EOS: "SEND_EOS"
};
var InputLossActionForMsSmoothOut = {
  EMIT_OUTPUT: "EMIT_OUTPUT",
  PAUSE_OUTPUT: "PAUSE_OUTPUT"
};
var SmoothGroupSegmentationMode = {
  USE_INPUT_SEGMENTATION: "USE_INPUT_SEGMENTATION",
  USE_SEGMENT_DURATION: "USE_SEGMENT_DURATION"
};
var SmoothGroupSparseTrackType = {
  NONE: "NONE",
  SCTE_35: "SCTE_35",
  SCTE_35_WITHOUT_SEGMENTATION: "SCTE_35_WITHOUT_SEGMENTATION"
};
var SmoothGroupStreamManifestBehavior = {
  DO_NOT_SEND: "DO_NOT_SEND",
  SEND: "SEND"
};
var SmoothGroupTimestampOffsetMode = {
  USE_CONFIGURED_OFFSET: "USE_CONFIGURED_OFFSET",
  USE_EVENT_START_DATE: "USE_EVENT_START_DATE"
};
var RtmpAdMarkers = {
  ON_CUE_POINT_SCTE35: "ON_CUE_POINT_SCTE35"
};
var AuthenticationScheme = {
  AKAMAI: "AKAMAI",
  COMMON: "COMMON"
};
var RtmpCacheFullBehavior = {
  DISCONNECT_IMMEDIATELY: "DISCONNECT_IMMEDIATELY",
  WAIT_FOR_SERVER: "WAIT_FOR_SERVER"
};
var RtmpCaptionData = {
  ALL: "ALL",
  FIELD1_608: "FIELD1_608",
  FIELD1_AND_FIELD2_608: "FIELD1_AND_FIELD2_608"
};
var IncludeFillerNalUnits = {
  AUTO: "AUTO",
  DROP: "DROP",
  INCLUDE: "INCLUDE"
};
var InputLossActionForRtmpOut = {
  EMIT_OUTPUT: "EMIT_OUTPUT",
  PAUSE_OUTPUT: "PAUSE_OUTPUT"
};
var InputLossActionForUdpOut = {
  DROP_PROGRAM: "DROP_PROGRAM",
  DROP_TS: "DROP_TS",
  EMIT_PROGRAM: "EMIT_PROGRAM"
};
var UdpTimedMetadataId3Frame = {
  NONE: "NONE",
  PRIV: "PRIV",
  TDRL: "TDRL"
};
var PipelineId = {
  PIPELINE_0: "PIPELINE_0",
  PIPELINE_1: "PIPELINE_1"
};
var ReservationAutomaticRenewal = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED",
  UNAVAILABLE: "UNAVAILABLE"
};
var ReservationState = {
  ACTIVE: "ACTIVE",
  CANCELED: "CANCELED",
  DELETED: "DELETED",
  EXPIRED: "EXPIRED"
};
var InputTimecodeSource = {
  EMBEDDED: "EMBEDDED",
  ZEROBASED: "ZEROBASED"
};
var LastFrameClippingBehavior = {
  EXCLUDE_LAST_FRAME: "EXCLUDE_LAST_FRAME",
  INCLUDE_LAST_FRAME: "INCLUDE_LAST_FRAME"
};
var Scte35InputMode = {
  FIXED: "FIXED",
  FOLLOW_ACTIVE: "FOLLOW_ACTIVE"
};
var Scte35ArchiveAllowedFlag = {
  ARCHIVE_ALLOWED: "ARCHIVE_ALLOWED",
  ARCHIVE_NOT_ALLOWED: "ARCHIVE_NOT_ALLOWED"
};
var Scte35DeviceRestrictions = {
  NONE: "NONE",
  RESTRICT_GROUP0: "RESTRICT_GROUP0",
  RESTRICT_GROUP1: "RESTRICT_GROUP1",
  RESTRICT_GROUP2: "RESTRICT_GROUP2"
};
var Scte35NoRegionalBlackoutFlag = {
  NO_REGIONAL_BLACKOUT: "NO_REGIONAL_BLACKOUT",
  REGIONAL_BLACKOUT: "REGIONAL_BLACKOUT"
};
var Scte35WebDeliveryAllowedFlag = {
  WEB_DELIVERY_ALLOWED: "WEB_DELIVERY_ALLOWED",
  WEB_DELIVERY_NOT_ALLOWED: "WEB_DELIVERY_NOT_ALLOWED"
};
var Scte35SegmentationCancelIndicator = {
  SEGMENTATION_EVENT_CANCELED: "SEGMENTATION_EVENT_CANCELED",
  SEGMENTATION_EVENT_NOT_CANCELED: "SEGMENTATION_EVENT_NOT_CANCELED"
};
var FollowPoint = {
  END: "END",
  START: "START"
};
var SignalMapMonitorDeploymentStatus = {
  DELETE_COMPLETE: "DELETE_COMPLETE",
  DELETE_FAILED: "DELETE_FAILED",
  DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
  DEPLOYMENT_COMPLETE: "DEPLOYMENT_COMPLETE",
  DEPLOYMENT_FAILED: "DEPLOYMENT_FAILED",
  DEPLOYMENT_IN_PROGRESS: "DEPLOYMENT_IN_PROGRESS",
  DRY_RUN_DEPLOYMENT_COMPLETE: "DRY_RUN_DEPLOYMENT_COMPLETE",
  DRY_RUN_DEPLOYMENT_FAILED: "DRY_RUN_DEPLOYMENT_FAILED",
  DRY_RUN_DEPLOYMENT_IN_PROGRESS: "DRY_RUN_DEPLOYMENT_IN_PROGRESS",
  NOT_DEPLOYED: "NOT_DEPLOYED"
};
var SignalMapStatus = {
  CREATE_COMPLETE: "CREATE_COMPLETE",
  CREATE_FAILED: "CREATE_FAILED",
  CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
  NOT_READY: "NOT_READY",
  READY: "READY",
  UPDATE_COMPLETE: "UPDATE_COMPLETE",
  UPDATE_FAILED: "UPDATE_FAILED",
  UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
  UPDATE_REVERTED: "UPDATE_REVERTED"
};
var ThumbnailType = {
  CURRENT_ACTIVE: "CURRENT_ACTIVE",
  UNSPECIFIED: "UNSPECIFIED"
};
var InputDeviceTransferType = {
  INCOMING: "INCOMING",
  OUTGOING: "OUTGOING"
};
var FrameCaptureIntervalUnit = {
  MILLISECONDS: "MILLISECONDS",
  SECONDS: "SECONDS"
};
var TimecodeBurninFontSize = {
  EXTRA_SMALL_10: "EXTRA_SMALL_10",
  LARGE_48: "LARGE_48",
  MEDIUM_32: "MEDIUM_32",
  SMALL_16: "SMALL_16"
};
var TimecodeBurninPosition = {
  BOTTOM_CENTER: "BOTTOM_CENTER",
  BOTTOM_LEFT: "BOTTOM_LEFT",
  BOTTOM_RIGHT: "BOTTOM_RIGHT",
  MIDDLE_CENTER: "MIDDLE_CENTER",
  MIDDLE_LEFT: "MIDDLE_LEFT",
  MIDDLE_RIGHT: "MIDDLE_RIGHT",
  TOP_CENTER: "TOP_CENTER",
  TOP_LEFT: "TOP_LEFT",
  TOP_RIGHT: "TOP_RIGHT"
};
var H264AdaptiveQuantization = {
  AUTO: "AUTO",
  HIGH: "HIGH",
  HIGHER: "HIGHER",
  LOW: "LOW",
  MAX: "MAX",
  MEDIUM: "MEDIUM",
  OFF: "OFF"
};
var AfdSignaling = {
  AUTO: "AUTO",
  FIXED: "FIXED",
  NONE: "NONE"
};
var H264ColorMetadata = {
  IGNORE: "IGNORE",
  INSERT: "INSERT"
};
var H264EntropyEncoding = {
  CABAC: "CABAC",
  CAVLC: "CAVLC"
};
var TemporalFilterPostFilterSharpening = {
  AUTO: "AUTO",
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var TemporalFilterStrength = {
  AUTO: "AUTO",
  STRENGTH_1: "STRENGTH_1",
  STRENGTH_10: "STRENGTH_10",
  STRENGTH_11: "STRENGTH_11",
  STRENGTH_12: "STRENGTH_12",
  STRENGTH_13: "STRENGTH_13",
  STRENGTH_14: "STRENGTH_14",
  STRENGTH_15: "STRENGTH_15",
  STRENGTH_16: "STRENGTH_16",
  STRENGTH_2: "STRENGTH_2",
  STRENGTH_3: "STRENGTH_3",
  STRENGTH_4: "STRENGTH_4",
  STRENGTH_5: "STRENGTH_5",
  STRENGTH_6: "STRENGTH_6",
  STRENGTH_7: "STRENGTH_7",
  STRENGTH_8: "STRENGTH_8",
  STRENGTH_9: "STRENGTH_9"
};
var FixedAfd = {
  AFD_0000: "AFD_0000",
  AFD_0010: "AFD_0010",
  AFD_0011: "AFD_0011",
  AFD_0100: "AFD_0100",
  AFD_1000: "AFD_1000",
  AFD_1001: "AFD_1001",
  AFD_1010: "AFD_1010",
  AFD_1011: "AFD_1011",
  AFD_1101: "AFD_1101",
  AFD_1110: "AFD_1110",
  AFD_1111: "AFD_1111"
};
var H264FlickerAq = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H264ForceFieldPictures = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H264FramerateControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var H264GopBReference = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H264GopSizeUnits = {
  FRAMES: "FRAMES",
  SECONDS: "SECONDS"
};
var H264Level = {
  H264_LEVEL_1: "H264_LEVEL_1",
  H264_LEVEL_1_1: "H264_LEVEL_1_1",
  H264_LEVEL_1_2: "H264_LEVEL_1_2",
  H264_LEVEL_1_3: "H264_LEVEL_1_3",
  H264_LEVEL_2: "H264_LEVEL_2",
  H264_LEVEL_2_1: "H264_LEVEL_2_1",
  H264_LEVEL_2_2: "H264_LEVEL_2_2",
  H264_LEVEL_3: "H264_LEVEL_3",
  H264_LEVEL_3_1: "H264_LEVEL_3_1",
  H264_LEVEL_3_2: "H264_LEVEL_3_2",
  H264_LEVEL_4: "H264_LEVEL_4",
  H264_LEVEL_4_1: "H264_LEVEL_4_1",
  H264_LEVEL_4_2: "H264_LEVEL_4_2",
  H264_LEVEL_5: "H264_LEVEL_5",
  H264_LEVEL_5_1: "H264_LEVEL_5_1",
  H264_LEVEL_5_2: "H264_LEVEL_5_2",
  H264_LEVEL_AUTO: "H264_LEVEL_AUTO"
};
var H264LookAheadRateControl = {
  HIGH: "HIGH",
  LOW: "LOW",
  MEDIUM: "MEDIUM"
};
var H264ParControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var H264Profile = {
  BASELINE: "BASELINE",
  HIGH: "HIGH",
  HIGH_10BIT: "HIGH_10BIT",
  HIGH_422: "HIGH_422",
  HIGH_422_10BIT: "HIGH_422_10BIT",
  MAIN: "MAIN"
};
var H264QualityLevel = {
  ENHANCED_QUALITY: "ENHANCED_QUALITY",
  STANDARD_QUALITY: "STANDARD_QUALITY"
};
var H264RateControlMode = {
  CBR: "CBR",
  MULTIPLEX: "MULTIPLEX",
  QVBR: "QVBR",
  VBR: "VBR"
};
var H264ScanType = {
  INTERLACED: "INTERLACED",
  PROGRESSIVE: "PROGRESSIVE"
};
var H264SceneChangeDetect = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H264SpatialAq = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H264SubGopLength = {
  DYNAMIC: "DYNAMIC",
  FIXED: "FIXED"
};
var H264Syntax = {
  DEFAULT: "DEFAULT",
  RP2027: "RP2027"
};
var H264TemporalAq = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H264TimecodeInsertionBehavior = {
  DISABLED: "DISABLED",
  PIC_TIMING_SEI: "PIC_TIMING_SEI"
};
var H265AdaptiveQuantization = {
  AUTO: "AUTO",
  HIGH: "HIGH",
  HIGHER: "HIGHER",
  LOW: "LOW",
  MAX: "MAX",
  MEDIUM: "MEDIUM",
  OFF: "OFF"
};
var H265AlternativeTransferFunction = {
  INSERT: "INSERT",
  OMIT: "OMIT"
};
var H265ColorMetadata = {
  IGNORE: "IGNORE",
  INSERT: "INSERT"
};
var H265FlickerAq = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265GopSizeUnits = {
  FRAMES: "FRAMES",
  SECONDS: "SECONDS"
};
var H265Level = {
  H265_LEVEL_1: "H265_LEVEL_1",
  H265_LEVEL_2: "H265_LEVEL_2",
  H265_LEVEL_2_1: "H265_LEVEL_2_1",
  H265_LEVEL_3: "H265_LEVEL_3",
  H265_LEVEL_3_1: "H265_LEVEL_3_1",
  H265_LEVEL_4: "H265_LEVEL_4",
  H265_LEVEL_4_1: "H265_LEVEL_4_1",
  H265_LEVEL_5: "H265_LEVEL_5",
  H265_LEVEL_5_1: "H265_LEVEL_5_1",
  H265_LEVEL_5_2: "H265_LEVEL_5_2",
  H265_LEVEL_6: "H265_LEVEL_6",
  H265_LEVEL_6_1: "H265_LEVEL_6_1",
  H265_LEVEL_6_2: "H265_LEVEL_6_2",
  H265_LEVEL_AUTO: "H265_LEVEL_AUTO"
};
var H265LookAheadRateControl = {
  HIGH: "HIGH",
  LOW: "LOW",
  MEDIUM: "MEDIUM"
};
var H265MvOverPictureBoundaries = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265MvTemporalPredictor = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265Profile = {
  MAIN: "MAIN",
  MAIN_10BIT: "MAIN_10BIT"
};
var H265RateControlMode = {
  CBR: "CBR",
  MULTIPLEX: "MULTIPLEX",
  QVBR: "QVBR"
};
var H265ScanType = {
  INTERLACED: "INTERLACED",
  PROGRESSIVE: "PROGRESSIVE"
};
var H265SceneChangeDetect = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265Tier = {
  HIGH: "HIGH",
  MAIN: "MAIN"
};
var H265TilePadding = {
  NONE: "NONE",
  PADDED: "PADDED"
};
var H265TimecodeInsertionBehavior = {
  DISABLED: "DISABLED",
  PIC_TIMING_SEI: "PIC_TIMING_SEI"
};
var H265TreeblockSize = {
  AUTO: "AUTO",
  TREE_SIZE_32X32: "TREE_SIZE_32X32"
};
var Mpeg2AdaptiveQuantization = {
  AUTO: "AUTO",
  HIGH: "HIGH",
  LOW: "LOW",
  MEDIUM: "MEDIUM",
  OFF: "OFF"
};
var Mpeg2ColorMetadata = {
  IGNORE: "IGNORE",
  INSERT: "INSERT"
};
var Mpeg2ColorSpace = {
  AUTO: "AUTO",
  PASSTHROUGH: "PASSTHROUGH"
};
var Mpeg2DisplayRatio = {
  DISPLAYRATIO16X9: "DISPLAYRATIO16X9",
  DISPLAYRATIO4X3: "DISPLAYRATIO4X3"
};
var Mpeg2GopSizeUnits = {
  FRAMES: "FRAMES",
  SECONDS: "SECONDS"
};
var Mpeg2ScanType = {
  INTERLACED: "INTERLACED",
  PROGRESSIVE: "PROGRESSIVE"
};
var Mpeg2SubGopLength = {
  DYNAMIC: "DYNAMIC",
  FIXED: "FIXED"
};
var Mpeg2TimecodeInsertionBehavior = {
  DISABLED: "DISABLED",
  GOP_TIMECODE: "GOP_TIMECODE"
};
var VideoDescriptionRespondToAfd = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH",
  RESPOND: "RESPOND"
};
var VideoDescriptionScalingBehavior = {
  DEFAULT: "DEFAULT",
  STRETCH_TO_OUTPUT: "STRETCH_TO_OUTPUT"
};
var AcceptHeader = {
  image_jpeg: "image/jpeg"
};
var _BadGatewayException = class _BadGatewayException extends MediaLiveServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "BadGatewayException",
      $fault: "server",
      ...opts
    });
    this.name = "BadGatewayException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _BadGatewayException.prototype);
    this.Message = opts.Message;
  }
};
__name(_BadGatewayException, "BadGatewayException");
var BadGatewayException = _BadGatewayException;
var _BadRequestException = class _BadRequestException extends MediaLiveServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "BadRequestException",
      $fault: "client",
      ...opts
    });
    this.name = "BadRequestException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _BadRequestException.prototype);
    this.Message = opts.Message;
  }
};
__name(_BadRequestException, "BadRequestException");
var BadRequestException = _BadRequestException;
var _ConflictException = class _ConflictException extends MediaLiveServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "ConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConflictException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ConflictException, "ConflictException");
var ConflictException = _ConflictException;
var _ForbiddenException = class _ForbiddenException extends MediaLiveServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ForbiddenException",
      $fault: "client",
      ...opts
    });
    this.name = "ForbiddenException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ForbiddenException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ForbiddenException, "ForbiddenException");
var ForbiddenException = _ForbiddenException;
var _GatewayTimeoutException = class _GatewayTimeoutException extends MediaLiveServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "GatewayTimeoutException",
      $fault: "server",
      ...opts
    });
    this.name = "GatewayTimeoutException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _GatewayTimeoutException.prototype);
    this.Message = opts.Message;
  }
};
__name(_GatewayTimeoutException, "GatewayTimeoutException");
var GatewayTimeoutException = _GatewayTimeoutException;
var _InternalServerErrorException = class _InternalServerErrorException extends MediaLiveServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerErrorException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerErrorException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerErrorException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InternalServerErrorException, "InternalServerErrorException");
var InternalServerErrorException = _InternalServerErrorException;
var _NotFoundException = class _NotFoundException extends MediaLiveServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "NotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _NotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_NotFoundException, "NotFoundException");
var NotFoundException = _NotFoundException;
var _TooManyRequestsException = class _TooManyRequestsException extends MediaLiveServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyRequestsException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyRequestsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyRequestsException, "TooManyRequestsException");
var TooManyRequestsException = _TooManyRequestsException;
var _UnprocessableEntityException = class _UnprocessableEntityException extends MediaLiveServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UnprocessableEntityException",
      $fault: "client",
      ...opts
    });
    this.name = "UnprocessableEntityException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _UnprocessableEntityException.prototype);
    this.Message = opts.Message;
    this.ValidationErrors = opts.ValidationErrors;
  }
};
__name(_UnprocessableEntityException, "UnprocessableEntityException");
var UnprocessableEntityException = _UnprocessableEntityException;
var AvailBlankingState = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Scte35SpliceInsertNoRegionalBlackoutBehavior = {
  FOLLOW: "FOLLOW",
  IGNORE: "IGNORE"
};
var Scte35SpliceInsertWebDeliveryAllowedBehavior = {
  FOLLOW: "FOLLOW",
  IGNORE: "IGNORE"
};
var Scte35AposNoRegionalBlackoutBehavior = {
  FOLLOW: "FOLLOW",
  IGNORE: "IGNORE"
};
var Scte35AposWebDeliveryAllowedBehavior = {
  FOLLOW: "FOLLOW",
  IGNORE: "IGNORE"
};
var BlackoutSlateNetworkEndBlackout = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var BlackoutSlateState = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var FeatureActivationsInputPrepareScheduleActions = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var FeatureActivationsOutputStaticImageOverlayScheduleActions = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var GlobalConfigurationInputEndAction = {
  NONE: "NONE",
  SWITCH_AND_LOOP_INPUTS: "SWITCH_AND_LOOP_INPUTS"
};
var InputLossImageType = {
  COLOR: "COLOR",
  SLATE: "SLATE"
};
var GlobalConfigurationOutputLockingMode = {
  EPOCH_LOCKING: "EPOCH_LOCKING",
  PIPELINE_LOCKING: "PIPELINE_LOCKING"
};
var GlobalConfigurationOutputTimingSource = {
  INPUT_CLOCK: "INPUT_CLOCK",
  SYSTEM_CLOCK: "SYSTEM_CLOCK"
};
var GlobalConfigurationLowFramerateInputs = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var MotionGraphicsInsertion = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var NielsenPcmToId3TaggingState = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var ThumbnailState = {
  AUTO: "AUTO",
  DISABLED: "DISABLED"
};
var TimecodeConfigSource = {
  EMBEDDED: "EMBEDDED",
  SYSTEMCLOCK: "SYSTEMCLOCK",
  ZEROBASED: "ZEROBASED"
};
var ContentType = {
  image_jpeg: "image/jpeg"
};
var PreferredChannelPipeline = {
  CURRENTLY_ACTIVE: "CURRENTLY_ACTIVE",
  PIPELINE_0: "PIPELINE_0",
  PIPELINE_1: "PIPELINE_1"
};

// src/protocols/Aws_restJson1.ts
var se_AcceptInputDeviceTransferCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputDevices/{InputDeviceId}/accept");
  b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AcceptInputDeviceTransferCommand");
var se_BatchDeleteCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/batch/delete");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelIds: [, (_) => (0, import_smithy_client._json)(_), `ChannelIds`],
      inputIds: [, (_) => (0, import_smithy_client._json)(_), `InputIds`],
      inputSecurityGroupIds: [, (_) => (0, import_smithy_client._json)(_), `InputSecurityGroupIds`],
      multiplexIds: [, (_) => (0, import_smithy_client._json)(_), `MultiplexIds`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchDeleteCommand");
var se_BatchStartCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/batch/start");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelIds: [, (_) => (0, import_smithy_client._json)(_), `ChannelIds`],
      multiplexIds: [, (_) => (0, import_smithy_client._json)(_), `MultiplexIds`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchStartCommand");
var se_BatchStopCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/batch/stop");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelIds: [, (_) => (0, import_smithy_client._json)(_), `ChannelIds`],
      multiplexIds: [, (_) => (0, import_smithy_client._json)(_), `MultiplexIds`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchStopCommand");
var se_BatchUpdateScheduleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/channels/{ChannelId}/schedule");
  b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      creates: [, (_) => se_BatchScheduleActionCreateRequest(_, context), `Creates`],
      deletes: [, (_) => se_BatchScheduleActionDeleteRequest(_, context), `Deletes`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_BatchUpdateScheduleCommand");
var se_CancelInputDeviceTransferCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputDevices/{InputDeviceId}/cancel");
  b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CancelInputDeviceTransferCommand");
var se_ClaimDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/claimDevice");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      id: [, , `Id`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ClaimDeviceCommand");
var se_CreateChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/channels");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      cdiInputSpecification: [, (_) => se_CdiInputSpecification(_, context), `CdiInputSpecification`],
      channelClass: [, , `ChannelClass`],
      destinations: [, (_) => se___listOfOutputDestination(_, context), `Destinations`],
      encoderSettings: [, (_) => se_EncoderSettings(_, context), `EncoderSettings`],
      inputAttachments: [, (_) => se___listOfInputAttachment(_, context), `InputAttachments`],
      inputSpecification: [, (_) => se_InputSpecification(_, context), `InputSpecification`],
      logLevel: [, , `LogLevel`],
      maintenance: [, (_) => se_MaintenanceCreateSettings(_, context), `Maintenance`],
      name: [, , `Name`],
      requestId: [true, (_) => _ ?? (0, import_uuid.v4)(), `RequestId`],
      reserved: [, , `Reserved`],
      roleArn: [, , `RoleArn`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`],
      vpc: [, (_) => se_VpcOutputSettings(_, context), `Vpc`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateChannelCommand");
var se_CreateCloudWatchAlarmTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/cloudwatch-alarm-templates");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      comparisonOperator: [, , `ComparisonOperator`],
      datapointsToAlarm: [, , `DatapointsToAlarm`],
      description: [, , `Description`],
      evaluationPeriods: [, , `EvaluationPeriods`],
      groupIdentifier: [, , `GroupIdentifier`],
      metricName: [, , `MetricName`],
      name: [, , `Name`],
      period: [, , `Period`],
      statistic: [, , `Statistic`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`],
      targetResourceType: [, , `TargetResourceType`],
      threshold: [, (_) => (0, import_smithy_client.serializeFloat)(_), `Threshold`],
      treatMissingData: [, , `TreatMissingData`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateCloudWatchAlarmTemplateCommand");
var se_CreateCloudWatchAlarmTemplateGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/cloudwatch-alarm-template-groups");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [, , `Description`],
      name: [, , `Name`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateCloudWatchAlarmTemplateGroupCommand");
var se_CreateEventBridgeRuleTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/eventbridge-rule-templates");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [, , `Description`],
      eventTargets: [, (_) => se___listOfEventBridgeRuleTemplateTarget(_, context), `EventTargets`],
      eventType: [, , `EventType`],
      groupIdentifier: [, , `GroupIdentifier`],
      name: [, , `Name`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateEventBridgeRuleTemplateCommand");
var se_CreateEventBridgeRuleTemplateGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/eventbridge-rule-template-groups");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [, , `Description`],
      name: [, , `Name`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateEventBridgeRuleTemplateGroupCommand");
var se_CreateInputCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/inputs");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      destinations: [, (_) => se___listOfInputDestinationRequest(_, context), `Destinations`],
      inputDevices: [, (_) => se___listOfInputDeviceSettings(_, context), `InputDevices`],
      inputSecurityGroups: [, (_) => (0, import_smithy_client._json)(_), `InputSecurityGroups`],
      mediaConnectFlows: [, (_) => se___listOfMediaConnectFlowRequest(_, context), `MediaConnectFlows`],
      name: [, , `Name`],
      requestId: [true, (_) => _ ?? (0, import_uuid.v4)(), `RequestId`],
      roleArn: [, , `RoleArn`],
      sources: [, (_) => se___listOfInputSourceRequest(_, context), `Sources`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`],
      type: [, , `Type`],
      vpc: [, (_) => se_InputVpcRequest(_, context), `Vpc`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateInputCommand");
var se_CreateInputSecurityGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/inputSecurityGroups");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`],
      whitelistRules: [, (_) => se___listOfInputWhitelistRuleCidr(_, context), `WhitelistRules`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateInputSecurityGroupCommand");
var se_CreateMultiplexCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/multiplexes");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      availabilityZones: [, (_) => (0, import_smithy_client._json)(_), `AvailabilityZones`],
      multiplexSettings: [, (_) => se_MultiplexSettings(_, context), `MultiplexSettings`],
      name: [, , `Name`],
      requestId: [true, (_) => _ ?? (0, import_uuid.v4)(), `RequestId`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateMultiplexCommand");
var se_CreateMultiplexProgramCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/multiplexes/{MultiplexId}/programs");
  b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      multiplexProgramSettings: [, (_) => se_MultiplexProgramSettings(_, context), `MultiplexProgramSettings`],
      programName: [, , `ProgramName`],
      requestId: [true, (_) => _ ?? (0, import_uuid.v4)(), `RequestId`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateMultiplexProgramCommand");
var se_CreatePartnerInputCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/inputs/{InputId}/partners");
  b.p("InputId", () => input.InputId, "{InputId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      requestId: [true, (_) => _ ?? (0, import_uuid.v4)(), `RequestId`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreatePartnerInputCommand");
var se_CreateSignalMapCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/signal-maps");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      cloudWatchAlarmTemplateGroupIdentifiers: [, (_) => (0, import_smithy_client._json)(_), `CloudWatchAlarmTemplateGroupIdentifiers`],
      description: [, , `Description`],
      discoveryEntryPointArn: [, , `DiscoveryEntryPointArn`],
      eventBridgeRuleTemplateGroupIdentifiers: [, (_) => (0, import_smithy_client._json)(_), `EventBridgeRuleTemplateGroupIdentifiers`],
      name: [, , `Name`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateSignalMapCommand");
var se_CreateTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateTagsCommand");
var se_DeleteChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/channels/{ChannelId}");
  b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteChannelCommand");
var se_DeleteCloudWatchAlarmTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/cloudwatch-alarm-templates/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteCloudWatchAlarmTemplateCommand");
var se_DeleteCloudWatchAlarmTemplateGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/cloudwatch-alarm-template-groups/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteCloudWatchAlarmTemplateGroupCommand");
var se_DeleteEventBridgeRuleTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/eventbridge-rule-templates/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteEventBridgeRuleTemplateCommand");
var se_DeleteEventBridgeRuleTemplateGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/eventbridge-rule-template-groups/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteEventBridgeRuleTemplateGroupCommand");
var se_DeleteInputCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputs/{InputId}");
  b.p("InputId", () => input.InputId, "{InputId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteInputCommand");
var se_DeleteInputSecurityGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputSecurityGroups/{InputSecurityGroupId}");
  b.p("InputSecurityGroupId", () => input.InputSecurityGroupId, "{InputSecurityGroupId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteInputSecurityGroupCommand");
var se_DeleteMultiplexCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/multiplexes/{MultiplexId}");
  b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteMultiplexCommand");
var se_DeleteMultiplexProgramCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/multiplexes/{MultiplexId}/programs/{ProgramName}");
  b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
  b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteMultiplexProgramCommand");
var se_DeleteReservationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/reservations/{ReservationId}");
  b.p("ReservationId", () => input.ReservationId, "{ReservationId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteReservationCommand");
var se_DeleteScheduleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/channels/{ChannelId}/schedule");
  b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteScheduleCommand");
var se_DeleteSignalMapCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/signal-maps/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteSignalMapCommand");
var se_DeleteTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_tK]: [
      (0, import_smithy_client.expectNonNull)(input.TagKeys, `TagKeys`) != null,
      () => (input[_TK] || []).map((_entry) => _entry)
    ]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteTagsCommand");
var se_DescribeAccountConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/accountConfiguration");
  let body;
  body = "";
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeAccountConfigurationCommand");
var se_DescribeChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/channels/{ChannelId}");
  b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeChannelCommand");
var se_DescribeInputCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputs/{InputId}");
  b.p("InputId", () => input.InputId, "{InputId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeInputCommand");
var se_DescribeInputDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputDevices/{InputDeviceId}");
  b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeInputDeviceCommand");
var se_DescribeInputDeviceThumbnailCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_a]: input[_A]
  });
  b.bp("/prod/inputDevices/{InputDeviceId}/thumbnailData");
  b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeInputDeviceThumbnailCommand");
var se_DescribeInputSecurityGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputSecurityGroups/{InputSecurityGroupId}");
  b.p("InputSecurityGroupId", () => input.InputSecurityGroupId, "{InputSecurityGroupId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeInputSecurityGroupCommand");
var se_DescribeMultiplexCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/multiplexes/{MultiplexId}");
  b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeMultiplexCommand");
var se_DescribeMultiplexProgramCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/multiplexes/{MultiplexId}/programs/{ProgramName}");
  b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
  b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeMultiplexProgramCommand");
var se_DescribeOfferingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/offerings/{OfferingId}");
  b.p("OfferingId", () => input.OfferingId, "{OfferingId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeOfferingCommand");
var se_DescribeReservationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/reservations/{ReservationId}");
  b.p("ReservationId", () => input.ReservationId, "{ReservationId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeReservationCommand");
var se_DescribeScheduleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/channels/{ChannelId}/schedule");
  b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_DescribeScheduleCommand");
var se_DescribeThumbnailsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/channels/{ChannelId}/thumbnails");
  b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
  const query = (0, import_smithy_client.map)({
    [_pI]: [, (0, import_smithy_client.expectNonNull)(input[_PI], `PipelineId`)],
    [_tT]: [, (0, import_smithy_client.expectNonNull)(input[_TT], `ThumbnailType`)]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_DescribeThumbnailsCommand");
var se_GetCloudWatchAlarmTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/cloudwatch-alarm-templates/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetCloudWatchAlarmTemplateCommand");
var se_GetCloudWatchAlarmTemplateGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/cloudwatch-alarm-template-groups/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetCloudWatchAlarmTemplateGroupCommand");
var se_GetEventBridgeRuleTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/eventbridge-rule-templates/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetEventBridgeRuleTemplateCommand");
var se_GetEventBridgeRuleTemplateGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/eventbridge-rule-template-groups/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetEventBridgeRuleTemplateGroupCommand");
var se_GetSignalMapCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/signal-maps/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetSignalMapCommand");
var se_ListChannelsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/channels");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListChannelsCommand");
var se_ListCloudWatchAlarmTemplateGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/cloudwatch-alarm-template-groups");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_s]: [, input[_S]],
    [_sMI]: [, input[_SMI]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListCloudWatchAlarmTemplateGroupsCommand");
var se_ListCloudWatchAlarmTemplatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/cloudwatch-alarm-templates");
  const query = (0, import_smithy_client.map)({
    [_gI]: [, input[_GI]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_s]: [, input[_S]],
    [_sMI]: [, input[_SMI]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListCloudWatchAlarmTemplatesCommand");
var se_ListEventBridgeRuleTemplateGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/eventbridge-rule-template-groups");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_sMI]: [, input[_SMI]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListEventBridgeRuleTemplateGroupsCommand");
var se_ListEventBridgeRuleTemplatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/eventbridge-rule-templates");
  const query = (0, import_smithy_client.map)({
    [_gI]: [, input[_GI]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_sMI]: [, input[_SMI]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListEventBridgeRuleTemplatesCommand");
var se_ListInputDevicesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputDevices");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListInputDevicesCommand");
var se_ListInputDeviceTransfersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputDeviceTransfers");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_tTr]: [, (0, import_smithy_client.expectNonNull)(input[_TTr], `TransferType`)]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListInputDeviceTransfersCommand");
var se_ListInputsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputs");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListInputsCommand");
var se_ListInputSecurityGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputSecurityGroups");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListInputSecurityGroupsCommand");
var se_ListMultiplexesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/multiplexes");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListMultiplexesCommand");
var se_ListMultiplexProgramsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/multiplexes/{MultiplexId}/programs");
  b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListMultiplexProgramsCommand");
var se_ListOfferingsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/offerings");
  const query = (0, import_smithy_client.map)({
    [_cC]: [, input[_CC]],
    [_cCh]: [, input[_CCh]],
    [_c]: [, input[_C]],
    [_d]: [, input[_D]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_mB]: [, input[_MB]],
    [_mF]: [, input[_MF]],
    [_nT]: [, input[_NT]],
    [_r]: [, input[_R]],
    [_rT]: [, input[_RT]],
    [_sF]: [, input[_SF]],
    [_vQ]: [, input[_VQ]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListOfferingsCommand");
var se_ListReservationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/reservations");
  const query = (0, import_smithy_client.map)({
    [_cC]: [, input[_CC]],
    [_c]: [, input[_C]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_mB]: [, input[_MB]],
    [_mF]: [, input[_MF]],
    [_nT]: [, input[_NT]],
    [_r]: [, input[_R]],
    [_rT]: [, input[_RT]],
    [_sF]: [, input[_SF]],
    [_vQ]: [, input[_VQ]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListReservationsCommand");
var se_ListSignalMapsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/signal-maps");
  const query = (0, import_smithy_client.map)({
    [_cWATGI]: [, input[_CWATGI]],
    [_eBRTGI]: [, input[_EBRTGI]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListSignalMapsCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_PurchaseOfferingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/offerings/{OfferingId}/purchase");
  b.p("OfferingId", () => input.OfferingId, "{OfferingId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      count: [, , `Count`],
      name: [, , `Name`],
      renewalSettings: [, (_) => se_RenewalSettings(_, context), `RenewalSettings`],
      requestId: [true, (_) => _ ?? (0, import_uuid.v4)(), `RequestId`],
      start: [, , `Start`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_PurchaseOfferingCommand");
var se_RebootInputDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/inputDevices/{InputDeviceId}/reboot");
  b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      force: [, , `Force`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_RebootInputDeviceCommand");
var se_RejectInputDeviceTransferCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputDevices/{InputDeviceId}/reject");
  b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_RejectInputDeviceTransferCommand");
var se_RestartChannelPipelinesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/channels/{ChannelId}/restartChannelPipelines");
  b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      pipelineIds: [, (_) => (0, import_smithy_client._json)(_), `PipelineIds`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_RestartChannelPipelinesCommand");
var se_StartChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/channels/{ChannelId}/start");
  b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartChannelCommand");
var se_StartDeleteMonitorDeploymentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/signal-maps/{Identifier}/monitor-deployment");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_StartDeleteMonitorDeploymentCommand");
var se_StartInputDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputDevices/{InputDeviceId}/start");
  b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartInputDeviceCommand");
var se_StartInputDeviceMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputDevices/{InputDeviceId}/startInputDeviceMaintenanceWindow");
  b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartInputDeviceMaintenanceWindowCommand");
var se_StartMonitorDeploymentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/signal-maps/{Identifier}/monitor-deployment");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      dryRun: [, , `DryRun`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartMonitorDeploymentCommand");
var se_StartMultiplexCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/multiplexes/{MultiplexId}/start");
  b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartMultiplexCommand");
var se_StartUpdateSignalMapCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/signal-maps/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      cloudWatchAlarmTemplateGroupIdentifiers: [, (_) => (0, import_smithy_client._json)(_), `CloudWatchAlarmTemplateGroupIdentifiers`],
      description: [, , `Description`],
      discoveryEntryPointArn: [, , `DiscoveryEntryPointArn`],
      eventBridgeRuleTemplateGroupIdentifiers: [, (_) => (0, import_smithy_client._json)(_), `EventBridgeRuleTemplateGroupIdentifiers`],
      forceRediscovery: [, , `ForceRediscovery`],
      name: [, , `Name`]
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_StartUpdateSignalMapCommand");
var se_StopChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/channels/{ChannelId}/stop");
  b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StopChannelCommand");
var se_StopInputDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/inputDevices/{InputDeviceId}/stop");
  b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StopInputDeviceCommand");
var se_StopMultiplexCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/prod/multiplexes/{MultiplexId}/stop");
  b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StopMultiplexCommand");
var se_TransferInputDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/inputDevices/{InputDeviceId}/transfer");
  b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      targetCustomerId: [, , `TargetCustomerId`],
      targetRegion: [, , `TargetRegion`],
      transferMessage: [, , `TransferMessage`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TransferInputDeviceCommand");
var se_UpdateAccountConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/accountConfiguration");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      accountConfiguration: [, (_) => se_AccountConfiguration(_, context), `AccountConfiguration`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateAccountConfigurationCommand");
var se_UpdateChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/channels/{ChannelId}");
  b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      cdiInputSpecification: [, (_) => se_CdiInputSpecification(_, context), `CdiInputSpecification`],
      destinations: [, (_) => se___listOfOutputDestination(_, context), `Destinations`],
      encoderSettings: [, (_) => se_EncoderSettings(_, context), `EncoderSettings`],
      inputAttachments: [, (_) => se___listOfInputAttachment(_, context), `InputAttachments`],
      inputSpecification: [, (_) => se_InputSpecification(_, context), `InputSpecification`],
      logLevel: [, , `LogLevel`],
      maintenance: [, (_) => se_MaintenanceUpdateSettings(_, context), `Maintenance`],
      name: [, , `Name`],
      roleArn: [, , `RoleArn`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateChannelCommand");
var se_UpdateChannelClassCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/channels/{ChannelId}/channelClass");
  b.p("ChannelId", () => input.ChannelId, "{ChannelId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelClass: [, , `ChannelClass`],
      destinations: [, (_) => se___listOfOutputDestination(_, context), `Destinations`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateChannelClassCommand");
var se_UpdateCloudWatchAlarmTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/cloudwatch-alarm-templates/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      comparisonOperator: [, , `ComparisonOperator`],
      datapointsToAlarm: [, , `DatapointsToAlarm`],
      description: [, , `Description`],
      evaluationPeriods: [, , `EvaluationPeriods`],
      groupIdentifier: [, , `GroupIdentifier`],
      metricName: [, , `MetricName`],
      name: [, , `Name`],
      period: [, , `Period`],
      statistic: [, , `Statistic`],
      targetResourceType: [, , `TargetResourceType`],
      threshold: [, (_) => (0, import_smithy_client.serializeFloat)(_), `Threshold`],
      treatMissingData: [, , `TreatMissingData`]
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateCloudWatchAlarmTemplateCommand");
var se_UpdateCloudWatchAlarmTemplateGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/cloudwatch-alarm-template-groups/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [, , `Description`]
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateCloudWatchAlarmTemplateGroupCommand");
var se_UpdateEventBridgeRuleTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/eventbridge-rule-templates/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [, , `Description`],
      eventTargets: [, (_) => se___listOfEventBridgeRuleTemplateTarget(_, context), `EventTargets`],
      eventType: [, , `EventType`],
      groupIdentifier: [, , `GroupIdentifier`],
      name: [, , `Name`]
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateEventBridgeRuleTemplateCommand");
var se_UpdateEventBridgeRuleTemplateGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/eventbridge-rule-template-groups/{Identifier}");
  b.p("Identifier", () => input.Identifier, "{Identifier}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [, , `Description`]
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateEventBridgeRuleTemplateGroupCommand");
var se_UpdateInputCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/inputs/{InputId}");
  b.p("InputId", () => input.InputId, "{InputId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      destinations: [, (_) => se___listOfInputDestinationRequest(_, context), `Destinations`],
      inputDevices: [, (_) => se___listOfInputDeviceRequest(_, context), `InputDevices`],
      inputSecurityGroups: [, (_) => (0, import_smithy_client._json)(_), `InputSecurityGroups`],
      mediaConnectFlows: [, (_) => se___listOfMediaConnectFlowRequest(_, context), `MediaConnectFlows`],
      name: [, , `Name`],
      roleArn: [, , `RoleArn`],
      sources: [, (_) => se___listOfInputSourceRequest(_, context), `Sources`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateInputCommand");
var se_UpdateInputDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/inputDevices/{InputDeviceId}");
  b.p("InputDeviceId", () => input.InputDeviceId, "{InputDeviceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      availabilityZone: [, , `AvailabilityZone`],
      hdDeviceSettings: [, (_) => se_InputDeviceConfigurableSettings(_, context), `HdDeviceSettings`],
      name: [, , `Name`],
      uhdDeviceSettings: [, (_) => se_InputDeviceConfigurableSettings(_, context), `UhdDeviceSettings`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateInputDeviceCommand");
var se_UpdateInputSecurityGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/inputSecurityGroups/{InputSecurityGroupId}");
  b.p("InputSecurityGroupId", () => input.InputSecurityGroupId, "{InputSecurityGroupId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`],
      whitelistRules: [, (_) => se___listOfInputWhitelistRuleCidr(_, context), `WhitelistRules`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateInputSecurityGroupCommand");
var se_UpdateMultiplexCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/multiplexes/{MultiplexId}");
  b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      multiplexSettings: [, (_) => se_MultiplexSettings(_, context), `MultiplexSettings`],
      name: [, , `Name`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateMultiplexCommand");
var se_UpdateMultiplexProgramCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/multiplexes/{MultiplexId}/programs/{ProgramName}");
  b.p("MultiplexId", () => input.MultiplexId, "{MultiplexId}", false);
  b.p("ProgramName", () => input.ProgramName, "{ProgramName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      multiplexProgramSettings: [, (_) => se_MultiplexProgramSettings(_, context), `MultiplexProgramSettings`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateMultiplexProgramCommand");
var se_UpdateReservationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/prod/reservations/{ReservationId}");
  b.p("ReservationId", () => input.ReservationId, "{ReservationId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      name: [, , `Name`],
      renewalSettings: [, (_) => se_RenewalSettings(_, context), `RenewalSettings`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateReservationCommand");
var de_AcceptInputDeviceTransferCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_AcceptInputDeviceTransferCommand");
var de_BatchDeleteCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Failed: [, (_) => de___listOfBatchFailedResultModel(_, context), `failed`],
    Successful: [, (_) => de___listOfBatchSuccessfulResultModel(_, context), `successful`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchDeleteCommand");
var de_BatchStartCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Failed: [, (_) => de___listOfBatchFailedResultModel(_, context), `failed`],
    Successful: [, (_) => de___listOfBatchSuccessfulResultModel(_, context), `successful`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchStartCommand");
var de_BatchStopCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Failed: [, (_) => de___listOfBatchFailedResultModel(_, context), `failed`],
    Successful: [, (_) => de___listOfBatchSuccessfulResultModel(_, context), `successful`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchStopCommand");
var de_BatchUpdateScheduleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Creates: [, (_) => de_BatchScheduleActionCreateResult(_, context), `creates`],
    Deletes: [, (_) => de_BatchScheduleActionDeleteResult(_, context), `deletes`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchUpdateScheduleCommand");
var de_CancelInputDeviceTransferCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_CancelInputDeviceTransferCommand");
var de_ClaimDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_ClaimDeviceCommand");
var de_CreateChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Channel: [, (_) => de_Channel(_, context), `channel`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateChannelCommand");
var de_CreateCloudWatchAlarmTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    ComparisonOperator: [, import_smithy_client.expectString, `comparisonOperator`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    DatapointsToAlarm: [, import_smithy_client.expectInt32, `datapointsToAlarm`],
    Description: [, import_smithy_client.expectString, `description`],
    EvaluationPeriods: [, import_smithy_client.expectInt32, `evaluationPeriods`],
    GroupId: [, import_smithy_client.expectString, `groupId`],
    Id: [, import_smithy_client.expectString, `id`],
    MetricName: [, import_smithy_client.expectString, `metricName`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Period: [, import_smithy_client.expectInt32, `period`],
    Statistic: [, import_smithy_client.expectString, `statistic`],
    Tags: [, import_smithy_client._json, `tags`],
    TargetResourceType: [, import_smithy_client.expectString, `targetResourceType`],
    Threshold: [, import_smithy_client.limitedParseDouble, `threshold`],
    TreatMissingData: [, import_smithy_client.expectString, `treatMissingData`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateCloudWatchAlarmTemplateCommand");
var de_CreateCloudWatchAlarmTemplateGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    Id: [, import_smithy_client.expectString, `id`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateCloudWatchAlarmTemplateGroupCommand");
var de_CreateEventBridgeRuleTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    EventTargets: [, (_) => de___listOfEventBridgeRuleTemplateTarget(_, context), `eventTargets`],
    EventType: [, import_smithy_client.expectString, `eventType`],
    GroupId: [, import_smithy_client.expectString, `groupId`],
    Id: [, import_smithy_client.expectString, `id`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateEventBridgeRuleTemplateCommand");
var de_CreateEventBridgeRuleTemplateGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    Id: [, import_smithy_client.expectString, `id`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateEventBridgeRuleTemplateGroupCommand");
var de_CreateInputCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Input: [, (_) => de_Input(_, context), `input`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateInputCommand");
var de_CreateInputSecurityGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    SecurityGroup: [, (_) => de_InputSecurityGroup(_, context), `securityGroup`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateInputSecurityGroupCommand");
var de_CreateMultiplexCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Multiplex: [, (_) => de_Multiplex(_, context), `multiplex`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateMultiplexCommand");
var de_CreateMultiplexProgramCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    MultiplexProgram: [, (_) => de_MultiplexProgram(_, context), `multiplexProgram`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateMultiplexProgramCommand");
var de_CreatePartnerInputCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Input: [, (_) => de_Input(_, context), `input`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreatePartnerInputCommand");
var de_CreateSignalMapCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CloudWatchAlarmTemplateGroupIds: [, import_smithy_client._json, `cloudWatchAlarmTemplateGroupIds`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    DiscoveryEntryPointArn: [, import_smithy_client.expectString, `discoveryEntryPointArn`],
    ErrorMessage: [, import_smithy_client.expectString, `errorMessage`],
    EventBridgeRuleTemplateGroupIds: [, import_smithy_client._json, `eventBridgeRuleTemplateGroupIds`],
    FailedMediaResourceMap: [, (_) => de_FailedMediaResourceMap(_, context), `failedMediaResourceMap`],
    Id: [, import_smithy_client.expectString, `id`],
    LastDiscoveredAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `lastDiscoveredAt`],
    LastSuccessfulMonitorDeployment: [
      ,
      (_) => de_SuccessfulMonitorDeployment(_, context),
      `lastSuccessfulMonitorDeployment`
    ],
    MediaResourceMap: [, (_) => de_MediaResourceMap(_, context), `mediaResourceMap`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    MonitorChangesPendingDeployment: [, import_smithy_client.expectBoolean, `monitorChangesPendingDeployment`],
    MonitorDeployment: [, (_) => de_MonitorDeployment(_, context), `monitorDeployment`],
    Name: [, import_smithy_client.expectString, `name`],
    Status: [, import_smithy_client.expectString, `status`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateSignalMapCommand");
var de_CreateTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_CreateTagsCommand");
var de_DeleteChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
    ChannelClass: [, import_smithy_client.expectString, `channelClass`],
    Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
    EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
    EncoderSettings: [, (_) => de_EncoderSettings(_, context), `encoderSettings`],
    Id: [, import_smithy_client.expectString, `id`],
    InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
    InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
    LogLevel: [, import_smithy_client.expectString, `logLevel`],
    Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
    Name: [, import_smithy_client.expectString, `name`],
    PipelineDetails: [, (_) => de___listOfPipelineDetail(_, context), `pipelineDetails`],
    PipelinesRunningCount: [, import_smithy_client.expectInt32, `pipelinesRunningCount`],
    RoleArn: [, import_smithy_client.expectString, `roleArn`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteChannelCommand");
var de_DeleteCloudWatchAlarmTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteCloudWatchAlarmTemplateCommand");
var de_DeleteCloudWatchAlarmTemplateGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteCloudWatchAlarmTemplateGroupCommand");
var de_DeleteEventBridgeRuleTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteEventBridgeRuleTemplateCommand");
var de_DeleteEventBridgeRuleTemplateGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteEventBridgeRuleTemplateGroupCommand");
var de_DeleteInputCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteInputCommand");
var de_DeleteInputSecurityGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteInputSecurityGroupCommand");
var de_DeleteMultiplexCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    AvailabilityZones: [, import_smithy_client._json, `availabilityZones`],
    Destinations: [, (_) => de___listOfMultiplexOutputDestination(_, context), `destinations`],
    Id: [, import_smithy_client.expectString, `id`],
    MultiplexSettings: [, (_) => de_MultiplexSettings(_, context), `multiplexSettings`],
    Name: [, import_smithy_client.expectString, `name`],
    PipelinesRunningCount: [, import_smithy_client.expectInt32, `pipelinesRunningCount`],
    ProgramCount: [, import_smithy_client.expectInt32, `programCount`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteMultiplexCommand");
var de_DeleteMultiplexProgramCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ChannelId: [, import_smithy_client.expectString, `channelId`],
    MultiplexProgramSettings: [, (_) => de_MultiplexProgramSettings(_, context), `multiplexProgramSettings`],
    PacketIdentifiersMap: [, (_) => de_MultiplexProgramPacketIdentifiersMap(_, context), `packetIdentifiersMap`],
    PipelineDetails: [, (_) => de___listOfMultiplexProgramPipelineDetail(_, context), `pipelineDetails`],
    ProgramName: [, import_smithy_client.expectString, `programName`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteMultiplexProgramCommand");
var de_DeleteReservationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    Count: [, import_smithy_client.expectInt32, `count`],
    CurrencyCode: [, import_smithy_client.expectString, `currencyCode`],
    Duration: [, import_smithy_client.expectInt32, `duration`],
    DurationUnits: [, import_smithy_client.expectString, `durationUnits`],
    End: [, import_smithy_client.expectString, `end`],
    FixedPrice: [, import_smithy_client.limitedParseDouble, `fixedPrice`],
    Name: [, import_smithy_client.expectString, `name`],
    OfferingDescription: [, import_smithy_client.expectString, `offeringDescription`],
    OfferingId: [, import_smithy_client.expectString, `offeringId`],
    OfferingType: [, import_smithy_client.expectString, `offeringType`],
    Region: [, import_smithy_client.expectString, `region`],
    RenewalSettings: [, (_) => de_RenewalSettings(_, context), `renewalSettings`],
    ReservationId: [, import_smithy_client.expectString, `reservationId`],
    ResourceSpecification: [, (_) => de_ReservationResourceSpecification(_, context), `resourceSpecification`],
    Start: [, import_smithy_client.expectString, `start`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    UsagePrice: [, import_smithy_client.limitedParseDouble, `usagePrice`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteReservationCommand");
var de_DeleteScheduleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteScheduleCommand");
var de_DeleteSignalMapCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteSignalMapCommand");
var de_DeleteTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteTagsCommand");
var de_DescribeAccountConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    AccountConfiguration: [, (_) => de_AccountConfiguration(_, context), `accountConfiguration`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeAccountConfigurationCommand");
var de_DescribeChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
    ChannelClass: [, import_smithy_client.expectString, `channelClass`],
    Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
    EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
    EncoderSettings: [, (_) => de_EncoderSettings(_, context), `encoderSettings`],
    Id: [, import_smithy_client.expectString, `id`],
    InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
    InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
    LogLevel: [, import_smithy_client.expectString, `logLevel`],
    Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
    Name: [, import_smithy_client.expectString, `name`],
    PipelineDetails: [, (_) => de___listOfPipelineDetail(_, context), `pipelineDetails`],
    PipelinesRunningCount: [, import_smithy_client.expectInt32, `pipelinesRunningCount`],
    RoleArn: [, import_smithy_client.expectString, `roleArn`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeChannelCommand");
var de_DescribeInputCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    AttachedChannels: [, import_smithy_client._json, `attachedChannels`],
    Destinations: [, (_) => de___listOfInputDestination(_, context), `destinations`],
    Id: [, import_smithy_client.expectString, `id`],
    InputClass: [, import_smithy_client.expectString, `inputClass`],
    InputDevices: [, (_) => de___listOfInputDeviceSettings(_, context), `inputDevices`],
    InputPartnerIds: [, import_smithy_client._json, `inputPartnerIds`],
    InputSourceType: [, import_smithy_client.expectString, `inputSourceType`],
    MediaConnectFlows: [, (_) => de___listOfMediaConnectFlow(_, context), `mediaConnectFlows`],
    Name: [, import_smithy_client.expectString, `name`],
    RoleArn: [, import_smithy_client.expectString, `roleArn`],
    SecurityGroups: [, import_smithy_client._json, `securityGroups`],
    Sources: [, (_) => de___listOfInputSource(_, context), `sources`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    Type: [, import_smithy_client.expectString, `type`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeInputCommand");
var de_DescribeInputDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    AvailabilityZone: [, import_smithy_client.expectString, `availabilityZone`],
    ConnectionState: [, import_smithy_client.expectString, `connectionState`],
    DeviceSettingsSyncState: [, import_smithy_client.expectString, `deviceSettingsSyncState`],
    DeviceUpdateStatus: [, import_smithy_client.expectString, `deviceUpdateStatus`],
    HdDeviceSettings: [, (_) => de_InputDeviceHdSettings(_, context), `hdDeviceSettings`],
    Id: [, import_smithy_client.expectString, `id`],
    MacAddress: [, import_smithy_client.expectString, `macAddress`],
    MedialiveInputArns: [, import_smithy_client._json, `medialiveInputArns`],
    Name: [, import_smithy_client.expectString, `name`],
    NetworkSettings: [, (_) => de_InputDeviceNetworkSettings(_, context), `networkSettings`],
    OutputType: [, import_smithy_client.expectString, `outputType`],
    SerialNumber: [, import_smithy_client.expectString, `serialNumber`],
    Tags: [, import_smithy_client._json, `tags`],
    Type: [, import_smithy_client.expectString, `type`],
    UhdDeviceSettings: [, (_) => de_InputDeviceUhdSettings(_, context), `uhdDeviceSettings`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeInputDeviceCommand");
var de_DescribeInputDeviceThumbnailCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output),
    [_CT]: [, output.headers[_ct]],
    [_CL]: [() => void 0 !== output.headers[_cl], () => (0, import_smithy_client.strictParseLong)(output.headers[_cl])],
    [_ET]: [, output.headers[_e]],
    [_LM]: [() => void 0 !== output.headers[_lm], () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_lm]))]
  });
  const data = output.body;
  context.sdkStreamMixin(data);
  contents.Body = data;
  return contents;
}, "de_DescribeInputDeviceThumbnailCommand");
var de_DescribeInputSecurityGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    Id: [, import_smithy_client.expectString, `id`],
    Inputs: [, import_smithy_client._json, `inputs`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    WhitelistRules: [, (_) => de___listOfInputWhitelistRule(_, context), `whitelistRules`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeInputSecurityGroupCommand");
var de_DescribeMultiplexCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    AvailabilityZones: [, import_smithy_client._json, `availabilityZones`],
    Destinations: [, (_) => de___listOfMultiplexOutputDestination(_, context), `destinations`],
    Id: [, import_smithy_client.expectString, `id`],
    MultiplexSettings: [, (_) => de_MultiplexSettings(_, context), `multiplexSettings`],
    Name: [, import_smithy_client.expectString, `name`],
    PipelinesRunningCount: [, import_smithy_client.expectInt32, `pipelinesRunningCount`],
    ProgramCount: [, import_smithy_client.expectInt32, `programCount`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeMultiplexCommand");
var de_DescribeMultiplexProgramCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ChannelId: [, import_smithy_client.expectString, `channelId`],
    MultiplexProgramSettings: [, (_) => de_MultiplexProgramSettings(_, context), `multiplexProgramSettings`],
    PacketIdentifiersMap: [, (_) => de_MultiplexProgramPacketIdentifiersMap(_, context), `packetIdentifiersMap`],
    PipelineDetails: [, (_) => de___listOfMultiplexProgramPipelineDetail(_, context), `pipelineDetails`],
    ProgramName: [, import_smithy_client.expectString, `programName`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeMultiplexProgramCommand");
var de_DescribeOfferingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CurrencyCode: [, import_smithy_client.expectString, `currencyCode`],
    Duration: [, import_smithy_client.expectInt32, `duration`],
    DurationUnits: [, import_smithy_client.expectString, `durationUnits`],
    FixedPrice: [, import_smithy_client.limitedParseDouble, `fixedPrice`],
    OfferingDescription: [, import_smithy_client.expectString, `offeringDescription`],
    OfferingId: [, import_smithy_client.expectString, `offeringId`],
    OfferingType: [, import_smithy_client.expectString, `offeringType`],
    Region: [, import_smithy_client.expectString, `region`],
    ResourceSpecification: [, (_) => de_ReservationResourceSpecification(_, context), `resourceSpecification`],
    UsagePrice: [, import_smithy_client.limitedParseDouble, `usagePrice`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeOfferingCommand");
var de_DescribeReservationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    Count: [, import_smithy_client.expectInt32, `count`],
    CurrencyCode: [, import_smithy_client.expectString, `currencyCode`],
    Duration: [, import_smithy_client.expectInt32, `duration`],
    DurationUnits: [, import_smithy_client.expectString, `durationUnits`],
    End: [, import_smithy_client.expectString, `end`],
    FixedPrice: [, import_smithy_client.limitedParseDouble, `fixedPrice`],
    Name: [, import_smithy_client.expectString, `name`],
    OfferingDescription: [, import_smithy_client.expectString, `offeringDescription`],
    OfferingId: [, import_smithy_client.expectString, `offeringId`],
    OfferingType: [, import_smithy_client.expectString, `offeringType`],
    Region: [, import_smithy_client.expectString, `region`],
    RenewalSettings: [, (_) => de_RenewalSettings(_, context), `renewalSettings`],
    ReservationId: [, import_smithy_client.expectString, `reservationId`],
    ResourceSpecification: [, (_) => de_ReservationResourceSpecification(_, context), `resourceSpecification`],
    Start: [, import_smithy_client.expectString, `start`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    UsagePrice: [, import_smithy_client.limitedParseDouble, `usagePrice`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeReservationCommand");
var de_DescribeScheduleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    ScheduleActions: [, (_) => de___listOfScheduleAction(_, context), `scheduleActions`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeScheduleCommand");
var de_DescribeThumbnailsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ThumbnailDetails: [, (_) => de___listOfThumbnailDetail(_, context), `thumbnailDetails`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeThumbnailsCommand");
var de_GetCloudWatchAlarmTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    ComparisonOperator: [, import_smithy_client.expectString, `comparisonOperator`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    DatapointsToAlarm: [, import_smithy_client.expectInt32, `datapointsToAlarm`],
    Description: [, import_smithy_client.expectString, `description`],
    EvaluationPeriods: [, import_smithy_client.expectInt32, `evaluationPeriods`],
    GroupId: [, import_smithy_client.expectString, `groupId`],
    Id: [, import_smithy_client.expectString, `id`],
    MetricName: [, import_smithy_client.expectString, `metricName`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Period: [, import_smithy_client.expectInt32, `period`],
    Statistic: [, import_smithy_client.expectString, `statistic`],
    Tags: [, import_smithy_client._json, `tags`],
    TargetResourceType: [, import_smithy_client.expectString, `targetResourceType`],
    Threshold: [, import_smithy_client.limitedParseDouble, `threshold`],
    TreatMissingData: [, import_smithy_client.expectString, `treatMissingData`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetCloudWatchAlarmTemplateCommand");
var de_GetCloudWatchAlarmTemplateGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    Id: [, import_smithy_client.expectString, `id`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetCloudWatchAlarmTemplateGroupCommand");
var de_GetEventBridgeRuleTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    EventTargets: [, (_) => de___listOfEventBridgeRuleTemplateTarget(_, context), `eventTargets`],
    EventType: [, import_smithy_client.expectString, `eventType`],
    GroupId: [, import_smithy_client.expectString, `groupId`],
    Id: [, import_smithy_client.expectString, `id`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetEventBridgeRuleTemplateCommand");
var de_GetEventBridgeRuleTemplateGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    Id: [, import_smithy_client.expectString, `id`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetEventBridgeRuleTemplateGroupCommand");
var de_GetSignalMapCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CloudWatchAlarmTemplateGroupIds: [, import_smithy_client._json, `cloudWatchAlarmTemplateGroupIds`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    DiscoveryEntryPointArn: [, import_smithy_client.expectString, `discoveryEntryPointArn`],
    ErrorMessage: [, import_smithy_client.expectString, `errorMessage`],
    EventBridgeRuleTemplateGroupIds: [, import_smithy_client._json, `eventBridgeRuleTemplateGroupIds`],
    FailedMediaResourceMap: [, (_) => de_FailedMediaResourceMap(_, context), `failedMediaResourceMap`],
    Id: [, import_smithy_client.expectString, `id`],
    LastDiscoveredAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `lastDiscoveredAt`],
    LastSuccessfulMonitorDeployment: [
      ,
      (_) => de_SuccessfulMonitorDeployment(_, context),
      `lastSuccessfulMonitorDeployment`
    ],
    MediaResourceMap: [, (_) => de_MediaResourceMap(_, context), `mediaResourceMap`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    MonitorChangesPendingDeployment: [, import_smithy_client.expectBoolean, `monitorChangesPendingDeployment`],
    MonitorDeployment: [, (_) => de_MonitorDeployment(_, context), `monitorDeployment`],
    Name: [, import_smithy_client.expectString, `name`],
    Status: [, import_smithy_client.expectString, `status`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetSignalMapCommand");
var de_ListChannelsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Channels: [, (_) => de___listOfChannelSummary(_, context), `channels`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListChannelsCommand");
var de_ListCloudWatchAlarmTemplateGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CloudWatchAlarmTemplateGroups: [
      ,
      (_) => de___listOfCloudWatchAlarmTemplateGroupSummary(_, context),
      `cloudWatchAlarmTemplateGroups`
    ],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListCloudWatchAlarmTemplateGroupsCommand");
var de_ListCloudWatchAlarmTemplatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CloudWatchAlarmTemplates: [
      ,
      (_) => de___listOfCloudWatchAlarmTemplateSummary(_, context),
      `cloudWatchAlarmTemplates`
    ],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListCloudWatchAlarmTemplatesCommand");
var de_ListEventBridgeRuleTemplateGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    EventBridgeRuleTemplateGroups: [
      ,
      (_) => de___listOfEventBridgeRuleTemplateGroupSummary(_, context),
      `eventBridgeRuleTemplateGroups`
    ],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListEventBridgeRuleTemplateGroupsCommand");
var de_ListEventBridgeRuleTemplatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    EventBridgeRuleTemplates: [
      ,
      (_) => de___listOfEventBridgeRuleTemplateSummary(_, context),
      `eventBridgeRuleTemplates`
    ],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListEventBridgeRuleTemplatesCommand");
var de_ListInputDevicesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    InputDevices: [, (_) => de___listOfInputDeviceSummary(_, context), `inputDevices`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListInputDevicesCommand");
var de_ListInputDeviceTransfersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    InputDeviceTransfers: [, (_) => de___listOfTransferringInputDeviceSummary(_, context), `inputDeviceTransfers`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListInputDeviceTransfersCommand");
var de_ListInputsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Inputs: [, (_) => de___listOfInput(_, context), `inputs`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListInputsCommand");
var de_ListInputSecurityGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    InputSecurityGroups: [, (_) => de___listOfInputSecurityGroup(_, context), `inputSecurityGroups`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListInputSecurityGroupsCommand");
var de_ListMultiplexesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Multiplexes: [, (_) => de___listOfMultiplexSummary(_, context), `multiplexes`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListMultiplexesCommand");
var de_ListMultiplexProgramsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    MultiplexPrograms: [, (_) => de___listOfMultiplexProgramSummary(_, context), `multiplexPrograms`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListMultiplexProgramsCommand");
var de_ListOfferingsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    Offerings: [, (_) => de___listOfOffering(_, context), `offerings`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListOfferingsCommand");
var de_ListReservationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    Reservations: [, (_) => de___listOfReservation(_, context), `reservations`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListReservationsCommand");
var de_ListSignalMapsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    SignalMaps: [, (_) => de___listOfSignalMapSummary(_, context), `signalMaps`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListSignalMapsCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_PurchaseOfferingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Reservation: [, (_) => de_Reservation(_, context), `reservation`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_PurchaseOfferingCommand");
var de_RebootInputDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_RebootInputDeviceCommand");
var de_RejectInputDeviceTransferCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_RejectInputDeviceTransferCommand");
var de_RestartChannelPipelinesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
    ChannelClass: [, import_smithy_client.expectString, `channelClass`],
    Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
    EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
    EncoderSettings: [, (_) => de_EncoderSettings(_, context), `encoderSettings`],
    Id: [, import_smithy_client.expectString, `id`],
    InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
    InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
    LogLevel: [, import_smithy_client.expectString, `logLevel`],
    Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
    MaintenanceStatus: [, import_smithy_client.expectString, `maintenanceStatus`],
    Name: [, import_smithy_client.expectString, `name`],
    PipelineDetails: [, (_) => de___listOfPipelineDetail(_, context), `pipelineDetails`],
    PipelinesRunningCount: [, import_smithy_client.expectInt32, `pipelinesRunningCount`],
    RoleArn: [, import_smithy_client.expectString, `roleArn`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RestartChannelPipelinesCommand");
var de_StartChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
    ChannelClass: [, import_smithy_client.expectString, `channelClass`],
    Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
    EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
    EncoderSettings: [, (_) => de_EncoderSettings(_, context), `encoderSettings`],
    Id: [, import_smithy_client.expectString, `id`],
    InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
    InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
    LogLevel: [, import_smithy_client.expectString, `logLevel`],
    Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
    Name: [, import_smithy_client.expectString, `name`],
    PipelineDetails: [, (_) => de___listOfPipelineDetail(_, context), `pipelineDetails`],
    PipelinesRunningCount: [, import_smithy_client.expectInt32, `pipelinesRunningCount`],
    RoleArn: [, import_smithy_client.expectString, `roleArn`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartChannelCommand");
var de_StartDeleteMonitorDeploymentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CloudWatchAlarmTemplateGroupIds: [, import_smithy_client._json, `cloudWatchAlarmTemplateGroupIds`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    DiscoveryEntryPointArn: [, import_smithy_client.expectString, `discoveryEntryPointArn`],
    ErrorMessage: [, import_smithy_client.expectString, `errorMessage`],
    EventBridgeRuleTemplateGroupIds: [, import_smithy_client._json, `eventBridgeRuleTemplateGroupIds`],
    FailedMediaResourceMap: [, (_) => de_FailedMediaResourceMap(_, context), `failedMediaResourceMap`],
    Id: [, import_smithy_client.expectString, `id`],
    LastDiscoveredAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `lastDiscoveredAt`],
    LastSuccessfulMonitorDeployment: [
      ,
      (_) => de_SuccessfulMonitorDeployment(_, context),
      `lastSuccessfulMonitorDeployment`
    ],
    MediaResourceMap: [, (_) => de_MediaResourceMap(_, context), `mediaResourceMap`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    MonitorChangesPendingDeployment: [, import_smithy_client.expectBoolean, `monitorChangesPendingDeployment`],
    MonitorDeployment: [, (_) => de_MonitorDeployment(_, context), `monitorDeployment`],
    Name: [, import_smithy_client.expectString, `name`],
    Status: [, import_smithy_client.expectString, `status`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartDeleteMonitorDeploymentCommand");
var de_StartInputDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_StartInputDeviceCommand");
var de_StartInputDeviceMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_StartInputDeviceMaintenanceWindowCommand");
var de_StartMonitorDeploymentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CloudWatchAlarmTemplateGroupIds: [, import_smithy_client._json, `cloudWatchAlarmTemplateGroupIds`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    DiscoveryEntryPointArn: [, import_smithy_client.expectString, `discoveryEntryPointArn`],
    ErrorMessage: [, import_smithy_client.expectString, `errorMessage`],
    EventBridgeRuleTemplateGroupIds: [, import_smithy_client._json, `eventBridgeRuleTemplateGroupIds`],
    FailedMediaResourceMap: [, (_) => de_FailedMediaResourceMap(_, context), `failedMediaResourceMap`],
    Id: [, import_smithy_client.expectString, `id`],
    LastDiscoveredAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `lastDiscoveredAt`],
    LastSuccessfulMonitorDeployment: [
      ,
      (_) => de_SuccessfulMonitorDeployment(_, context),
      `lastSuccessfulMonitorDeployment`
    ],
    MediaResourceMap: [, (_) => de_MediaResourceMap(_, context), `mediaResourceMap`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    MonitorChangesPendingDeployment: [, import_smithy_client.expectBoolean, `monitorChangesPendingDeployment`],
    MonitorDeployment: [, (_) => de_MonitorDeployment(_, context), `monitorDeployment`],
    Name: [, import_smithy_client.expectString, `name`],
    Status: [, import_smithy_client.expectString, `status`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartMonitorDeploymentCommand");
var de_StartMultiplexCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    AvailabilityZones: [, import_smithy_client._json, `availabilityZones`],
    Destinations: [, (_) => de___listOfMultiplexOutputDestination(_, context), `destinations`],
    Id: [, import_smithy_client.expectString, `id`],
    MultiplexSettings: [, (_) => de_MultiplexSettings(_, context), `multiplexSettings`],
    Name: [, import_smithy_client.expectString, `name`],
    PipelinesRunningCount: [, import_smithy_client.expectInt32, `pipelinesRunningCount`],
    ProgramCount: [, import_smithy_client.expectInt32, `programCount`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartMultiplexCommand");
var de_StartUpdateSignalMapCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CloudWatchAlarmTemplateGroupIds: [, import_smithy_client._json, `cloudWatchAlarmTemplateGroupIds`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    DiscoveryEntryPointArn: [, import_smithy_client.expectString, `discoveryEntryPointArn`],
    ErrorMessage: [, import_smithy_client.expectString, `errorMessage`],
    EventBridgeRuleTemplateGroupIds: [, import_smithy_client._json, `eventBridgeRuleTemplateGroupIds`],
    FailedMediaResourceMap: [, (_) => de_FailedMediaResourceMap(_, context), `failedMediaResourceMap`],
    Id: [, import_smithy_client.expectString, `id`],
    LastDiscoveredAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `lastDiscoveredAt`],
    LastSuccessfulMonitorDeployment: [
      ,
      (_) => de_SuccessfulMonitorDeployment(_, context),
      `lastSuccessfulMonitorDeployment`
    ],
    MediaResourceMap: [, (_) => de_MediaResourceMap(_, context), `mediaResourceMap`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    MonitorChangesPendingDeployment: [, import_smithy_client.expectBoolean, `monitorChangesPendingDeployment`],
    MonitorDeployment: [, (_) => de_MonitorDeployment(_, context), `monitorDeployment`],
    Name: [, import_smithy_client.expectString, `name`],
    Status: [, import_smithy_client.expectString, `status`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartUpdateSignalMapCommand");
var de_StopChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
    ChannelClass: [, import_smithy_client.expectString, `channelClass`],
    Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
    EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
    EncoderSettings: [, (_) => de_EncoderSettings(_, context), `encoderSettings`],
    Id: [, import_smithy_client.expectString, `id`],
    InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
    InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
    LogLevel: [, import_smithy_client.expectString, `logLevel`],
    Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
    Name: [, import_smithy_client.expectString, `name`],
    PipelineDetails: [, (_) => de___listOfPipelineDetail(_, context), `pipelineDetails`],
    PipelinesRunningCount: [, import_smithy_client.expectInt32, `pipelinesRunningCount`],
    RoleArn: [, import_smithy_client.expectString, `roleArn`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StopChannelCommand");
var de_StopInputDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_StopInputDeviceCommand");
var de_StopMultiplexCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    AvailabilityZones: [, import_smithy_client._json, `availabilityZones`],
    Destinations: [, (_) => de___listOfMultiplexOutputDestination(_, context), `destinations`],
    Id: [, import_smithy_client.expectString, `id`],
    MultiplexSettings: [, (_) => de_MultiplexSettings(_, context), `multiplexSettings`],
    Name: [, import_smithy_client.expectString, `name`],
    PipelinesRunningCount: [, import_smithy_client.expectInt32, `pipelinesRunningCount`],
    ProgramCount: [, import_smithy_client.expectInt32, `programCount`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StopMultiplexCommand");
var de_TransferInputDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TransferInputDeviceCommand");
var de_UpdateAccountConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    AccountConfiguration: [, (_) => de_AccountConfiguration(_, context), `accountConfiguration`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateAccountConfigurationCommand");
var de_UpdateChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Channel: [, (_) => de_Channel(_, context), `channel`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateChannelCommand");
var de_UpdateChannelClassCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Channel: [, (_) => de_Channel(_, context), `channel`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateChannelClassCommand");
var de_UpdateCloudWatchAlarmTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    ComparisonOperator: [, import_smithy_client.expectString, `comparisonOperator`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    DatapointsToAlarm: [, import_smithy_client.expectInt32, `datapointsToAlarm`],
    Description: [, import_smithy_client.expectString, `description`],
    EvaluationPeriods: [, import_smithy_client.expectInt32, `evaluationPeriods`],
    GroupId: [, import_smithy_client.expectString, `groupId`],
    Id: [, import_smithy_client.expectString, `id`],
    MetricName: [, import_smithy_client.expectString, `metricName`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Period: [, import_smithy_client.expectInt32, `period`],
    Statistic: [, import_smithy_client.expectString, `statistic`],
    Tags: [, import_smithy_client._json, `tags`],
    TargetResourceType: [, import_smithy_client.expectString, `targetResourceType`],
    Threshold: [, import_smithy_client.limitedParseDouble, `threshold`],
    TreatMissingData: [, import_smithy_client.expectString, `treatMissingData`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateCloudWatchAlarmTemplateCommand");
var de_UpdateCloudWatchAlarmTemplateGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    Id: [, import_smithy_client.expectString, `id`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateCloudWatchAlarmTemplateGroupCommand");
var de_UpdateEventBridgeRuleTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    EventTargets: [, (_) => de___listOfEventBridgeRuleTemplateTarget(_, context), `eventTargets`],
    EventType: [, import_smithy_client.expectString, `eventType`],
    GroupId: [, import_smithy_client.expectString, `groupId`],
    Id: [, import_smithy_client.expectString, `id`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateEventBridgeRuleTemplateCommand");
var de_UpdateEventBridgeRuleTemplateGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    Id: [, import_smithy_client.expectString, `id`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateEventBridgeRuleTemplateGroupCommand");
var de_UpdateInputCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Input: [, (_) => de_Input(_, context), `input`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateInputCommand");
var de_UpdateInputDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    AvailabilityZone: [, import_smithy_client.expectString, `availabilityZone`],
    ConnectionState: [, import_smithy_client.expectString, `connectionState`],
    DeviceSettingsSyncState: [, import_smithy_client.expectString, `deviceSettingsSyncState`],
    DeviceUpdateStatus: [, import_smithy_client.expectString, `deviceUpdateStatus`],
    HdDeviceSettings: [, (_) => de_InputDeviceHdSettings(_, context), `hdDeviceSettings`],
    Id: [, import_smithy_client.expectString, `id`],
    MacAddress: [, import_smithy_client.expectString, `macAddress`],
    MedialiveInputArns: [, import_smithy_client._json, `medialiveInputArns`],
    Name: [, import_smithy_client.expectString, `name`],
    NetworkSettings: [, (_) => de_InputDeviceNetworkSettings(_, context), `networkSettings`],
    OutputType: [, import_smithy_client.expectString, `outputType`],
    SerialNumber: [, import_smithy_client.expectString, `serialNumber`],
    Tags: [, import_smithy_client._json, `tags`],
    Type: [, import_smithy_client.expectString, `type`],
    UhdDeviceSettings: [, (_) => de_InputDeviceUhdSettings(_, context), `uhdDeviceSettings`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateInputDeviceCommand");
var de_UpdateInputSecurityGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    SecurityGroup: [, (_) => de_InputSecurityGroup(_, context), `securityGroup`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateInputSecurityGroupCommand");
var de_UpdateMultiplexCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Multiplex: [, (_) => de_Multiplex(_, context), `multiplex`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateMultiplexCommand");
var de_UpdateMultiplexProgramCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    MultiplexProgram: [, (_) => de_MultiplexProgram(_, context), `multiplexProgram`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateMultiplexProgramCommand");
var de_UpdateReservationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Reservation: [, (_) => de_Reservation(_, context), `reservation`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateReservationCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "BadGatewayException":
    case "com.amazonaws.medialive#BadGatewayException":
      throw await de_BadGatewayExceptionRes(parsedOutput, context);
    case "BadRequestException":
    case "com.amazonaws.medialive#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.medialive#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "ForbiddenException":
    case "com.amazonaws.medialive#ForbiddenException":
      throw await de_ForbiddenExceptionRes(parsedOutput, context);
    case "GatewayTimeoutException":
    case "com.amazonaws.medialive#GatewayTimeoutException":
      throw await de_GatewayTimeoutExceptionRes(parsedOutput, context);
    case "InternalServerErrorException":
    case "com.amazonaws.medialive#InternalServerErrorException":
      throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.medialive#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.medialive#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    case "UnprocessableEntityException":
    case "com.amazonaws.medialive#UnprocessableEntityException":
      throw await de_UnprocessableEntityExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(MediaLiveServiceException);
var de_BadGatewayExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new BadGatewayException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_BadGatewayExceptionRes");
var de_BadRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new BadRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_BadRequestExceptionRes");
var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConflictExceptionRes");
var de_ForbiddenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ForbiddenException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ForbiddenExceptionRes");
var de_GatewayTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new GatewayTimeoutException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_GatewayTimeoutExceptionRes");
var de_InternalServerErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new InternalServerErrorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerErrorExceptionRes");
var de_NotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new NotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_NotFoundExceptionRes");
var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new TooManyRequestsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_TooManyRequestsExceptionRes");
var de_UnprocessableEntityExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`],
    ValidationErrors: [, (_) => de___listOfValidationError(_, context), `validationErrors`]
  });
  Object.assign(contents, doc);
  const exception = new UnprocessableEntityException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_UnprocessableEntityExceptionRes");
var se___listOfAudioChannelMapping = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AudioChannelMapping(entry, context);
  });
}, "se___listOfAudioChannelMapping");
var se___listOfAudioDescription = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AudioDescription(entry, context);
  });
}, "se___listOfAudioDescription");
var se___listOfAudioSelector = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AudioSelector(entry, context);
  });
}, "se___listOfAudioSelector");
var se___listOfAudioTrack = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AudioTrack(entry, context);
  });
}, "se___listOfAudioTrack");
var se___listOfCaptionDescription = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_CaptionDescription(entry, context);
  });
}, "se___listOfCaptionDescription");
var se___listOfCaptionLanguageMapping = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_CaptionLanguageMapping(entry, context);
  });
}, "se___listOfCaptionLanguageMapping");
var se___listOfCaptionSelector = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_CaptionSelector(entry, context);
  });
}, "se___listOfCaptionSelector");
var se___listOfColorCorrection = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_ColorCorrection(entry, context);
  });
}, "se___listOfColorCorrection");
var se___listOfEventBridgeRuleTemplateTarget = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_EventBridgeRuleTemplateTarget(entry, context);
  });
}, "se___listOfEventBridgeRuleTemplateTarget");
var se___listOfFailoverCondition = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_FailoverCondition(entry, context);
  });
}, "se___listOfFailoverCondition");
var se___listOfInputAttachment = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_InputAttachment(entry, context);
  });
}, "se___listOfInputAttachment");
var se___listOfInputChannelLevel = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_InputChannelLevel(entry, context);
  });
}, "se___listOfInputChannelLevel");
var se___listOfInputDestinationRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_InputDestinationRequest(entry, context);
  });
}, "se___listOfInputDestinationRequest");
var se___listOfInputDeviceConfigurableAudioChannelPairConfig = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_InputDeviceConfigurableAudioChannelPairConfig(entry, context);
  });
}, "se___listOfInputDeviceConfigurableAudioChannelPairConfig");
var se___listOfInputDeviceRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_InputDeviceRequest(entry, context);
  });
}, "se___listOfInputDeviceRequest");
var se___listOfInputDeviceSettings = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_InputDeviceSettings(entry, context);
  });
}, "se___listOfInputDeviceSettings");
var se___listOfInputSourceRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_InputSourceRequest(entry, context);
  });
}, "se___listOfInputSourceRequest");
var se___listOfInputWhitelistRuleCidr = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_InputWhitelistRuleCidr(entry, context);
  });
}, "se___listOfInputWhitelistRuleCidr");
var se___listOfMediaConnectFlowRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_MediaConnectFlowRequest(entry, context);
  });
}, "se___listOfMediaConnectFlowRequest");
var se___listOfMediaPackageOutputDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_MediaPackageOutputDestinationSettings(entry, context);
  });
}, "se___listOfMediaPackageOutputDestinationSettings");
var se___listOfOutput = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_Output(entry, context);
  });
}, "se___listOfOutput");
var se___listOfOutputDestination = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_OutputDestination(entry, context);
  });
}, "se___listOfOutputDestination");
var se___listOfOutputDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_OutputDestinationSettings(entry, context);
  });
}, "se___listOfOutputDestinationSettings");
var se___listOfOutputGroup = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_OutputGroup(entry, context);
  });
}, "se___listOfOutputGroup");
var se___listOfPipelinePauseStateSettings = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_PipelinePauseStateSettings(entry, context);
  });
}, "se___listOfPipelinePauseStateSettings");
var se___listOfScheduleAction = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_ScheduleAction(entry, context);
  });
}, "se___listOfScheduleAction");
var se___listOfScte35Descriptor = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_Scte35Descriptor(entry, context);
  });
}, "se___listOfScte35Descriptor");
var se___listOfVideoDescription = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_VideoDescription(entry, context);
  });
}, "se___listOfVideoDescription");
var se_AacSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitrate: [, import_smithy_client.serializeFloat, `Bitrate`],
    codingMode: [, , `CodingMode`],
    inputType: [, , `InputType`],
    profile: [, , `Profile`],
    rateControlMode: [, , `RateControlMode`],
    rawFormat: [, , `RawFormat`],
    sampleRate: [, import_smithy_client.serializeFloat, `SampleRate`],
    spec: [, , `Spec`],
    vbrQuality: [, , `VbrQuality`]
  });
}, "se_AacSettings");
var se_Ac3Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    attenuationControl: [, , `AttenuationControl`],
    bitrate: [, import_smithy_client.serializeFloat, `Bitrate`],
    bitstreamMode: [, , `BitstreamMode`],
    codingMode: [, , `CodingMode`],
    dialnorm: [, , `Dialnorm`],
    drcProfile: [, , `DrcProfile`],
    lfeFilter: [, , `LfeFilter`],
    metadataControl: [, , `MetadataControl`]
  });
}, "se_Ac3Settings");
var se_AccountConfiguration = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    kmsKeyId: [, , `KmsKeyId`]
  });
}, "se_AccountConfiguration");
var se_AncillarySourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    sourceAncillaryChannelNumber: [, , `SourceAncillaryChannelNumber`]
  });
}, "se_AncillarySourceSettings");
var se_ArchiveCdnSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    archiveS3Settings: [, (_) => se_ArchiveS3Settings(_, context), `ArchiveS3Settings`]
  });
}, "se_ArchiveCdnSettings");
var se_ArchiveContainerSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    m2tsSettings: [, (_) => se_M2tsSettings(_, context), `M2tsSettings`],
    rawSettings: [, import_smithy_client._json, `RawSettings`]
  });
}, "se_ArchiveContainerSettings");
var se_ArchiveGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    archiveCdnSettings: [, (_) => se_ArchiveCdnSettings(_, context), `ArchiveCdnSettings`],
    destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
    rolloverInterval: [, , `RolloverInterval`]
  });
}, "se_ArchiveGroupSettings");
var se_ArchiveOutputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    containerSettings: [, (_) => se_ArchiveContainerSettings(_, context), `ContainerSettings`],
    extension: [, , `Extension`],
    nameModifier: [, , `NameModifier`]
  });
}, "se_ArchiveOutputSettings");
var se_ArchiveS3Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    cannedAcl: [, , `CannedAcl`]
  });
}, "se_ArchiveS3Settings");
var se_AudioChannelMapping = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    inputChannelLevels: [, (_) => se___listOfInputChannelLevel(_, context), `InputChannelLevels`],
    outputChannel: [, , `OutputChannel`]
  });
}, "se_AudioChannelMapping");
var se_AudioCodecSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    aacSettings: [, (_) => se_AacSettings(_, context), `AacSettings`],
    ac3Settings: [, (_) => se_Ac3Settings(_, context), `Ac3Settings`],
    eac3AtmosSettings: [, (_) => se_Eac3AtmosSettings(_, context), `Eac3AtmosSettings`],
    eac3Settings: [, (_) => se_Eac3Settings(_, context), `Eac3Settings`],
    mp2Settings: [, (_) => se_Mp2Settings(_, context), `Mp2Settings`],
    passThroughSettings: [, import_smithy_client._json, `PassThroughSettings`],
    wavSettings: [, (_) => se_WavSettings(_, context), `WavSettings`]
  });
}, "se_AudioCodecSettings");
var se_AudioDescription = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioDashRoles: [, import_smithy_client._json, `AudioDashRoles`],
    audioNormalizationSettings: [, (_) => se_AudioNormalizationSettings(_, context), `AudioNormalizationSettings`],
    audioSelectorName: [, , `AudioSelectorName`],
    audioType: [, , `AudioType`],
    audioTypeControl: [, , `AudioTypeControl`],
    audioWatermarkingSettings: [, (_) => se_AudioWatermarkSettings(_, context), `AudioWatermarkingSettings`],
    codecSettings: [, (_) => se_AudioCodecSettings(_, context), `CodecSettings`],
    dvbDashAccessibility: [, , `DvbDashAccessibility`],
    languageCode: [, , `LanguageCode`],
    languageCodeControl: [, , `LanguageCodeControl`],
    name: [, , `Name`],
    remixSettings: [, (_) => se_RemixSettings(_, context), `RemixSettings`],
    streamName: [, , `StreamName`]
  });
}, "se_AudioDescription");
var se_AudioDolbyEDecode = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    programSelection: [, , `ProgramSelection`]
  });
}, "se_AudioDolbyEDecode");
var se_AudioHlsRenditionSelection = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    groupId: [, , `GroupId`],
    name: [, , `Name`]
  });
}, "se_AudioHlsRenditionSelection");
var se_AudioLanguageSelection = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    languageCode: [, , `LanguageCode`],
    languageSelectionPolicy: [, , `LanguageSelectionPolicy`]
  });
}, "se_AudioLanguageSelection");
var se_AudioNormalizationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    algorithm: [, , `Algorithm`],
    algorithmControl: [, , `AlgorithmControl`],
    targetLkfs: [, import_smithy_client.serializeFloat, `TargetLkfs`]
  });
}, "se_AudioNormalizationSettings");
var se_AudioOnlyHlsSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioGroupId: [, , `AudioGroupId`],
    audioOnlyImage: [, (_) => se_InputLocation(_, context), `AudioOnlyImage`],
    audioTrackType: [, , `AudioTrackType`],
    segmentType: [, , `SegmentType`]
  });
}, "se_AudioOnlyHlsSettings");
var se_AudioPidSelection = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    pid: [, , `Pid`]
  });
}, "se_AudioPidSelection");
var se_AudioSelector = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    name: [, , `Name`],
    selectorSettings: [, (_) => se_AudioSelectorSettings(_, context), `SelectorSettings`]
  });
}, "se_AudioSelector");
var se_AudioSelectorSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioHlsRenditionSelection: [, (_) => se_AudioHlsRenditionSelection(_, context), `AudioHlsRenditionSelection`],
    audioLanguageSelection: [, (_) => se_AudioLanguageSelection(_, context), `AudioLanguageSelection`],
    audioPidSelection: [, (_) => se_AudioPidSelection(_, context), `AudioPidSelection`],
    audioTrackSelection: [, (_) => se_AudioTrackSelection(_, context), `AudioTrackSelection`]
  });
}, "se_AudioSelectorSettings");
var se_AudioSilenceFailoverSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioSelectorName: [, , `AudioSelectorName`],
    audioSilenceThresholdMsec: [, , `AudioSilenceThresholdMsec`]
  });
}, "se_AudioSilenceFailoverSettings");
var se_AudioTrack = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    track: [, , `Track`]
  });
}, "se_AudioTrack");
var se_AudioTrackSelection = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    dolbyEDecode: [, (_) => se_AudioDolbyEDecode(_, context), `DolbyEDecode`],
    tracks: [, (_) => se___listOfAudioTrack(_, context), `Tracks`]
  });
}, "se_AudioTrackSelection");
var se_AudioWatermarkSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    nielsenWatermarksSettings: [, (_) => se_NielsenWatermarksSettings(_, context), `NielsenWatermarksSettings`]
  });
}, "se_AudioWatermarkSettings");
var se_AutomaticInputFailoverSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    errorClearTimeMsec: [, , `ErrorClearTimeMsec`],
    failoverConditions: [, (_) => se___listOfFailoverCondition(_, context), `FailoverConditions`],
    inputPreference: [, , `InputPreference`],
    secondaryInputId: [, , `SecondaryInputId`]
  });
}, "se_AutomaticInputFailoverSettings");
var se_AvailBlanking = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    availBlankingImage: [, (_) => se_InputLocation(_, context), `AvailBlankingImage`],
    state: [, , `State`]
  });
}, "se_AvailBlanking");
var se_AvailConfiguration = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    availSettings: [, (_) => se_AvailSettings(_, context), `AvailSettings`]
  });
}, "se_AvailConfiguration");
var se_AvailSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    esam: [, (_) => se_Esam(_, context), `Esam`],
    scte35SpliceInsert: [, (_) => se_Scte35SpliceInsert(_, context), `Scte35SpliceInsert`],
    scte35TimeSignalApos: [, (_) => se_Scte35TimeSignalApos(_, context), `Scte35TimeSignalApos`]
  });
}, "se_AvailSettings");
var se_BatchScheduleActionCreateRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    scheduleActions: [, (_) => se___listOfScheduleAction(_, context), `ScheduleActions`]
  });
}, "se_BatchScheduleActionCreateRequest");
var se_BatchScheduleActionDeleteRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    actionNames: [, import_smithy_client._json, `ActionNames`]
  });
}, "se_BatchScheduleActionDeleteRequest");
var se_BlackoutSlate = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    blackoutSlateImage: [, (_) => se_InputLocation(_, context), `BlackoutSlateImage`],
    networkEndBlackout: [, , `NetworkEndBlackout`],
    networkEndBlackoutImage: [, (_) => se_InputLocation(_, context), `NetworkEndBlackoutImage`],
    networkId: [, , `NetworkId`],
    state: [, , `State`]
  });
}, "se_BlackoutSlate");
var se_BurnInDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    alignment: [, , `Alignment`],
    backgroundColor: [, , `BackgroundColor`],
    backgroundOpacity: [, , `BackgroundOpacity`],
    font: [, (_) => se_InputLocation(_, context), `Font`],
    fontColor: [, , `FontColor`],
    fontOpacity: [, , `FontOpacity`],
    fontResolution: [, , `FontResolution`],
    fontSize: [, , `FontSize`],
    outlineColor: [, , `OutlineColor`],
    outlineSize: [, , `OutlineSize`],
    shadowColor: [, , `ShadowColor`],
    shadowOpacity: [, , `ShadowOpacity`],
    shadowXOffset: [, , `ShadowXOffset`],
    shadowYOffset: [, , `ShadowYOffset`],
    teletextGridControl: [, , `TeletextGridControl`],
    xPosition: [, , `XPosition`],
    yPosition: [, , `YPosition`]
  });
}, "se_BurnInDestinationSettings");
var se_CaptionDescription = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    accessibility: [, , `Accessibility`],
    captionDashRoles: [, import_smithy_client._json, `CaptionDashRoles`],
    captionSelectorName: [, , `CaptionSelectorName`],
    destinationSettings: [, (_) => se_CaptionDestinationSettings(_, context), `DestinationSettings`],
    dvbDashAccessibility: [, , `DvbDashAccessibility`],
    languageCode: [, , `LanguageCode`],
    languageDescription: [, , `LanguageDescription`],
    name: [, , `Name`]
  });
}, "se_CaptionDescription");
var se_CaptionDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    aribDestinationSettings: [, import_smithy_client._json, `AribDestinationSettings`],
    burnInDestinationSettings: [, (_) => se_BurnInDestinationSettings(_, context), `BurnInDestinationSettings`],
    dvbSubDestinationSettings: [, (_) => se_DvbSubDestinationSettings(_, context), `DvbSubDestinationSettings`],
    ebuTtDDestinationSettings: [, (_) => se_EbuTtDDestinationSettings(_, context), `EbuTtDDestinationSettings`],
    embeddedDestinationSettings: [, import_smithy_client._json, `EmbeddedDestinationSettings`],
    embeddedPlusScte20DestinationSettings: [, import_smithy_client._json, `EmbeddedPlusScte20DestinationSettings`],
    rtmpCaptionInfoDestinationSettings: [, import_smithy_client._json, `RtmpCaptionInfoDestinationSettings`],
    scte20PlusEmbeddedDestinationSettings: [, import_smithy_client._json, `Scte20PlusEmbeddedDestinationSettings`],
    scte27DestinationSettings: [, import_smithy_client._json, `Scte27DestinationSettings`],
    smpteTtDestinationSettings: [, import_smithy_client._json, `SmpteTtDestinationSettings`],
    teletextDestinationSettings: [, import_smithy_client._json, `TeletextDestinationSettings`],
    ttmlDestinationSettings: [, (_) => se_TtmlDestinationSettings(_, context), `TtmlDestinationSettings`],
    webvttDestinationSettings: [, (_) => se_WebvttDestinationSettings(_, context), `WebvttDestinationSettings`]
  });
}, "se_CaptionDestinationSettings");
var se_CaptionLanguageMapping = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    captionChannel: [, , `CaptionChannel`],
    languageCode: [, , `LanguageCode`],
    languageDescription: [, , `LanguageDescription`]
  });
}, "se_CaptionLanguageMapping");
var se_CaptionRectangle = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    height: [, import_smithy_client.serializeFloat, `Height`],
    leftOffset: [, import_smithy_client.serializeFloat, `LeftOffset`],
    topOffset: [, import_smithy_client.serializeFloat, `TopOffset`],
    width: [, import_smithy_client.serializeFloat, `Width`]
  });
}, "se_CaptionRectangle");
var se_CaptionSelector = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    languageCode: [, , `LanguageCode`],
    name: [, , `Name`],
    selectorSettings: [, (_) => se_CaptionSelectorSettings(_, context), `SelectorSettings`]
  });
}, "se_CaptionSelector");
var se_CaptionSelectorSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    ancillarySourceSettings: [, (_) => se_AncillarySourceSettings(_, context), `AncillarySourceSettings`],
    aribSourceSettings: [, import_smithy_client._json, `AribSourceSettings`],
    dvbSubSourceSettings: [, (_) => se_DvbSubSourceSettings(_, context), `DvbSubSourceSettings`],
    embeddedSourceSettings: [, (_) => se_EmbeddedSourceSettings(_, context), `EmbeddedSourceSettings`],
    scte20SourceSettings: [, (_) => se_Scte20SourceSettings(_, context), `Scte20SourceSettings`],
    scte27SourceSettings: [, (_) => se_Scte27SourceSettings(_, context), `Scte27SourceSettings`],
    teletextSourceSettings: [, (_) => se_TeletextSourceSettings(_, context), `TeletextSourceSettings`]
  });
}, "se_CaptionSelectorSettings");
var se_CdiInputSpecification = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    resolution: [, , `Resolution`]
  });
}, "se_CdiInputSpecification");
var se_CmafIngestGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
    nielsenId3Behavior: [, , `NielsenId3Behavior`],
    scte35Type: [, , `Scte35Type`],
    segmentLength: [, , `SegmentLength`],
    segmentLengthUnits: [, , `SegmentLengthUnits`],
    sendDelayMs: [, , `SendDelayMs`]
  });
}, "se_CmafIngestGroupSettings");
var se_CmafIngestOutputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    nameModifier: [, , `NameModifier`]
  });
}, "se_CmafIngestOutputSettings");
var se_ColorCorrection = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    inputColorSpace: [, , `InputColorSpace`],
    outputColorSpace: [, , `OutputColorSpace`],
    uri: [, , `Uri`]
  });
}, "se_ColorCorrection");
var se_ColorCorrectionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    globalColorCorrections: [, (_) => se___listOfColorCorrection(_, context), `GlobalColorCorrections`]
  });
}, "se_ColorCorrectionSettings");
var se_DvbNitSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    networkId: [, , `NetworkId`],
    networkName: [, , `NetworkName`],
    repInterval: [, , `RepInterval`]
  });
}, "se_DvbNitSettings");
var se_DvbSdtSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    outputSdt: [, , `OutputSdt`],
    repInterval: [, , `RepInterval`],
    serviceName: [, , `ServiceName`],
    serviceProviderName: [, , `ServiceProviderName`]
  });
}, "se_DvbSdtSettings");
var se_DvbSubDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    alignment: [, , `Alignment`],
    backgroundColor: [, , `BackgroundColor`],
    backgroundOpacity: [, , `BackgroundOpacity`],
    font: [, (_) => se_InputLocation(_, context), `Font`],
    fontColor: [, , `FontColor`],
    fontOpacity: [, , `FontOpacity`],
    fontResolution: [, , `FontResolution`],
    fontSize: [, , `FontSize`],
    outlineColor: [, , `OutlineColor`],
    outlineSize: [, , `OutlineSize`],
    shadowColor: [, , `ShadowColor`],
    shadowOpacity: [, , `ShadowOpacity`],
    shadowXOffset: [, , `ShadowXOffset`],
    shadowYOffset: [, , `ShadowYOffset`],
    teletextGridControl: [, , `TeletextGridControl`],
    xPosition: [, , `XPosition`],
    yPosition: [, , `YPosition`]
  });
}, "se_DvbSubDestinationSettings");
var se_DvbSubSourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    ocrLanguage: [, , `OcrLanguage`],
    pid: [, , `Pid`]
  });
}, "se_DvbSubSourceSettings");
var se_DvbTdtSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    repInterval: [, , `RepInterval`]
  });
}, "se_DvbTdtSettings");
var se_Eac3AtmosSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitrate: [, import_smithy_client.serializeFloat, `Bitrate`],
    codingMode: [, , `CodingMode`],
    dialnorm: [, , `Dialnorm`],
    drcLine: [, , `DrcLine`],
    drcRf: [, , `DrcRf`],
    heightTrim: [, import_smithy_client.serializeFloat, `HeightTrim`],
    surroundTrim: [, import_smithy_client.serializeFloat, `SurroundTrim`]
  });
}, "se_Eac3AtmosSettings");
var se_Eac3Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    attenuationControl: [, , `AttenuationControl`],
    bitrate: [, import_smithy_client.serializeFloat, `Bitrate`],
    bitstreamMode: [, , `BitstreamMode`],
    codingMode: [, , `CodingMode`],
    dcFilter: [, , `DcFilter`],
    dialnorm: [, , `Dialnorm`],
    drcLine: [, , `DrcLine`],
    drcRf: [, , `DrcRf`],
    lfeControl: [, , `LfeControl`],
    lfeFilter: [, , `LfeFilter`],
    loRoCenterMixLevel: [, import_smithy_client.serializeFloat, `LoRoCenterMixLevel`],
    loRoSurroundMixLevel: [, import_smithy_client.serializeFloat, `LoRoSurroundMixLevel`],
    ltRtCenterMixLevel: [, import_smithy_client.serializeFloat, `LtRtCenterMixLevel`],
    ltRtSurroundMixLevel: [, import_smithy_client.serializeFloat, `LtRtSurroundMixLevel`],
    metadataControl: [, , `MetadataControl`],
    passthroughControl: [, , `PassthroughControl`],
    phaseControl: [, , `PhaseControl`],
    stereoDownmix: [, , `StereoDownmix`],
    surroundExMode: [, , `SurroundExMode`],
    surroundMode: [, , `SurroundMode`]
  });
}, "se_Eac3Settings");
var se_EbuTtDDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    copyrightHolder: [, , `CopyrightHolder`],
    fillLineGap: [, , `FillLineGap`],
    fontFamily: [, , `FontFamily`],
    styleControl: [, , `StyleControl`]
  });
}, "se_EbuTtDDestinationSettings");
var se_EmbeddedSourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    convert608To708: [, , `Convert608To708`],
    scte20Detection: [, , `Scte20Detection`],
    source608ChannelNumber: [, , `Source608ChannelNumber`],
    source608TrackNumber: [, , `Source608TrackNumber`]
  });
}, "se_EmbeddedSourceSettings");
var se_EncoderSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioDescriptions: [, (_) => se___listOfAudioDescription(_, context), `AudioDescriptions`],
    availBlanking: [, (_) => se_AvailBlanking(_, context), `AvailBlanking`],
    availConfiguration: [, (_) => se_AvailConfiguration(_, context), `AvailConfiguration`],
    blackoutSlate: [, (_) => se_BlackoutSlate(_, context), `BlackoutSlate`],
    captionDescriptions: [, (_) => se___listOfCaptionDescription(_, context), `CaptionDescriptions`],
    colorCorrectionSettings: [, (_) => se_ColorCorrectionSettings(_, context), `ColorCorrectionSettings`],
    featureActivations: [, (_) => se_FeatureActivations(_, context), `FeatureActivations`],
    globalConfiguration: [, (_) => se_GlobalConfiguration(_, context), `GlobalConfiguration`],
    motionGraphicsConfiguration: [, (_) => se_MotionGraphicsConfiguration(_, context), `MotionGraphicsConfiguration`],
    nielsenConfiguration: [, (_) => se_NielsenConfiguration(_, context), `NielsenConfiguration`],
    outputGroups: [, (_) => se___listOfOutputGroup(_, context), `OutputGroups`],
    thumbnailConfiguration: [, (_) => se_ThumbnailConfiguration(_, context), `ThumbnailConfiguration`],
    timecodeConfig: [, (_) => se_TimecodeConfig(_, context), `TimecodeConfig`],
    videoDescriptions: [, (_) => se___listOfVideoDescription(_, context), `VideoDescriptions`]
  });
}, "se_EncoderSettings");
var se_EpochLockingSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    customEpoch: [, , `CustomEpoch`],
    jamSyncTime: [, , `JamSyncTime`]
  });
}, "se_EpochLockingSettings");
var se_Esam = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    acquisitionPointId: [, , `AcquisitionPointId`],
    adAvailOffset: [, , `AdAvailOffset`],
    passwordParam: [, , `PasswordParam`],
    poisEndpoint: [, , `PoisEndpoint`],
    username: [, , `Username`],
    zoneIdentity: [, , `ZoneIdentity`]
  });
}, "se_Esam");
var se_EventBridgeRuleTemplateTarget = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    arn: [, , `Arn`]
  });
}, "se_EventBridgeRuleTemplateTarget");
var se_FailoverCondition = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    failoverConditionSettings: [, (_) => se_FailoverConditionSettings(_, context), `FailoverConditionSettings`]
  });
}, "se_FailoverCondition");
var se_FailoverConditionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioSilenceSettings: [, (_) => se_AudioSilenceFailoverSettings(_, context), `AudioSilenceSettings`],
    inputLossSettings: [, (_) => se_InputLossFailoverSettings(_, context), `InputLossSettings`],
    videoBlackSettings: [, (_) => se_VideoBlackFailoverSettings(_, context), `VideoBlackSettings`]
  });
}, "se_FailoverConditionSettings");
var se_FeatureActivations = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    inputPrepareScheduleActions: [, , `InputPrepareScheduleActions`],
    outputStaticImageOverlayScheduleActions: [, , `OutputStaticImageOverlayScheduleActions`]
  });
}, "se_FeatureActivations");
var se_FecOutputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    columnDepth: [, , `ColumnDepth`],
    includeFec: [, , `IncludeFec`],
    rowLength: [, , `RowLength`]
  });
}, "se_FecOutputSettings");
var se_FixedModeScheduleActionStartSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    time: [, , `Time`]
  });
}, "se_FixedModeScheduleActionStartSettings");
var se_Fmp4HlsSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioRenditionSets: [, , `AudioRenditionSets`],
    nielsenId3Behavior: [, , `NielsenId3Behavior`],
    timedMetadataBehavior: [, , `TimedMetadataBehavior`]
  });
}, "se_Fmp4HlsSettings");
var se_FollowModeScheduleActionStartSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    followPoint: [, , `FollowPoint`],
    referenceActionName: [, , `ReferenceActionName`]
  });
}, "se_FollowModeScheduleActionStartSettings");
var se_FrameCaptureCdnSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    frameCaptureS3Settings: [, (_) => se_FrameCaptureS3Settings(_, context), `FrameCaptureS3Settings`]
  });
}, "se_FrameCaptureCdnSettings");
var se_FrameCaptureGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
    frameCaptureCdnSettings: [, (_) => se_FrameCaptureCdnSettings(_, context), `FrameCaptureCdnSettings`]
  });
}, "se_FrameCaptureGroupSettings");
var se_FrameCaptureOutputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    nameModifier: [, , `NameModifier`]
  });
}, "se_FrameCaptureOutputSettings");
var se_FrameCaptureS3Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    cannedAcl: [, , `CannedAcl`]
  });
}, "se_FrameCaptureS3Settings");
var se_FrameCaptureSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    captureInterval: [, , `CaptureInterval`],
    captureIntervalUnits: [, , `CaptureIntervalUnits`],
    timecodeBurninSettings: [, (_) => se_TimecodeBurninSettings(_, context), `TimecodeBurninSettings`]
  });
}, "se_FrameCaptureSettings");
var se_GlobalConfiguration = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    initialAudioGain: [, , `InitialAudioGain`],
    inputEndAction: [, , `InputEndAction`],
    inputLossBehavior: [, (_) => se_InputLossBehavior(_, context), `InputLossBehavior`],
    outputLockingMode: [, , `OutputLockingMode`],
    outputLockingSettings: [, (_) => se_OutputLockingSettings(_, context), `OutputLockingSettings`],
    outputTimingSource: [, , `OutputTimingSource`],
    supportLowFramerateInputs: [, , `SupportLowFramerateInputs`]
  });
}, "se_GlobalConfiguration");
var se_H264ColorSpaceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    colorSpacePassthroughSettings: [, import_smithy_client._json, `ColorSpacePassthroughSettings`],
    rec601Settings: [, import_smithy_client._json, `Rec601Settings`],
    rec709Settings: [, import_smithy_client._json, `Rec709Settings`]
  });
}, "se_H264ColorSpaceSettings");
var se_H264FilterSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    temporalFilterSettings: [, (_) => se_TemporalFilterSettings(_, context), `TemporalFilterSettings`]
  });
}, "se_H264FilterSettings");
var se_H264Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adaptiveQuantization: [, , `AdaptiveQuantization`],
    afdSignaling: [, , `AfdSignaling`],
    bitrate: [, , `Bitrate`],
    bufFillPct: [, , `BufFillPct`],
    bufSize: [, , `BufSize`],
    colorMetadata: [, , `ColorMetadata`],
    colorSpaceSettings: [, (_) => se_H264ColorSpaceSettings(_, context), `ColorSpaceSettings`],
    entropyEncoding: [, , `EntropyEncoding`],
    filterSettings: [, (_) => se_H264FilterSettings(_, context), `FilterSettings`],
    fixedAfd: [, , `FixedAfd`],
    flickerAq: [, , `FlickerAq`],
    forceFieldPictures: [, , `ForceFieldPictures`],
    framerateControl: [, , `FramerateControl`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    gopBReference: [, , `GopBReference`],
    gopClosedCadence: [, , `GopClosedCadence`],
    gopNumBFrames: [, , `GopNumBFrames`],
    gopSize: [, import_smithy_client.serializeFloat, `GopSize`],
    gopSizeUnits: [, , `GopSizeUnits`],
    level: [, , `Level`],
    lookAheadRateControl: [, , `LookAheadRateControl`],
    maxBitrate: [, , `MaxBitrate`],
    minIInterval: [, , `MinIInterval`],
    numRefFrames: [, , `NumRefFrames`],
    parControl: [, , `ParControl`],
    parDenominator: [, , `ParDenominator`],
    parNumerator: [, , `ParNumerator`],
    profile: [, , `Profile`],
    qualityLevel: [, , `QualityLevel`],
    qvbrQualityLevel: [, , `QvbrQualityLevel`],
    rateControlMode: [, , `RateControlMode`],
    scanType: [, , `ScanType`],
    sceneChangeDetect: [, , `SceneChangeDetect`],
    slices: [, , `Slices`],
    softness: [, , `Softness`],
    spatialAq: [, , `SpatialAq`],
    subgopLength: [, , `SubgopLength`],
    syntax: [, , `Syntax`],
    temporalAq: [, , `TemporalAq`],
    timecodeBurninSettings: [, (_) => se_TimecodeBurninSettings(_, context), `TimecodeBurninSettings`],
    timecodeInsertion: [, , `TimecodeInsertion`]
  });
}, "se_H264Settings");
var se_H265ColorSpaceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    colorSpacePassthroughSettings: [, import_smithy_client._json, `ColorSpacePassthroughSettings`],
    dolbyVision81Settings: [, import_smithy_client._json, `DolbyVision81Settings`],
    hdr10Settings: [, (_) => se_Hdr10Settings(_, context), `Hdr10Settings`],
    rec601Settings: [, import_smithy_client._json, `Rec601Settings`],
    rec709Settings: [, import_smithy_client._json, `Rec709Settings`]
  });
}, "se_H265ColorSpaceSettings");
var se_H265FilterSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    temporalFilterSettings: [, (_) => se_TemporalFilterSettings(_, context), `TemporalFilterSettings`]
  });
}, "se_H265FilterSettings");
var se_H265Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adaptiveQuantization: [, , `AdaptiveQuantization`],
    afdSignaling: [, , `AfdSignaling`],
    alternativeTransferFunction: [, , `AlternativeTransferFunction`],
    bitrate: [, , `Bitrate`],
    bufSize: [, , `BufSize`],
    colorMetadata: [, , `ColorMetadata`],
    colorSpaceSettings: [, (_) => se_H265ColorSpaceSettings(_, context), `ColorSpaceSettings`],
    filterSettings: [, (_) => se_H265FilterSettings(_, context), `FilterSettings`],
    fixedAfd: [, , `FixedAfd`],
    flickerAq: [, , `FlickerAq`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    gopClosedCadence: [, , `GopClosedCadence`],
    gopSize: [, import_smithy_client.serializeFloat, `GopSize`],
    gopSizeUnits: [, , `GopSizeUnits`],
    level: [, , `Level`],
    lookAheadRateControl: [, , `LookAheadRateControl`],
    maxBitrate: [, , `MaxBitrate`],
    minIInterval: [, , `MinIInterval`],
    mvOverPictureBoundaries: [, , `MvOverPictureBoundaries`],
    mvTemporalPredictor: [, , `MvTemporalPredictor`],
    parDenominator: [, , `ParDenominator`],
    parNumerator: [, , `ParNumerator`],
    profile: [, , `Profile`],
    qvbrQualityLevel: [, , `QvbrQualityLevel`],
    rateControlMode: [, , `RateControlMode`],
    scanType: [, , `ScanType`],
    sceneChangeDetect: [, , `SceneChangeDetect`],
    slices: [, , `Slices`],
    tier: [, , `Tier`],
    tileHeight: [, , `TileHeight`],
    tilePadding: [, , `TilePadding`],
    tileWidth: [, , `TileWidth`],
    timecodeBurninSettings: [, (_) => se_TimecodeBurninSettings(_, context), `TimecodeBurninSettings`],
    timecodeInsertion: [, , `TimecodeInsertion`],
    treeblockSize: [, , `TreeblockSize`]
  });
}, "se_H265Settings");
var se_Hdr10Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maxCll: [, , `MaxCll`],
    maxFall: [, , `MaxFall`]
  });
}, "se_Hdr10Settings");
var se_HlsAkamaiSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    connectionRetryInterval: [, , `ConnectionRetryInterval`],
    filecacheDuration: [, , `FilecacheDuration`],
    httpTransferMode: [, , `HttpTransferMode`],
    numRetries: [, , `NumRetries`],
    restartDelay: [, , `RestartDelay`],
    salt: [, , `Salt`],
    token: [, , `Token`]
  });
}, "se_HlsAkamaiSettings");
var se_HlsBasicPutSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    connectionRetryInterval: [, , `ConnectionRetryInterval`],
    filecacheDuration: [, , `FilecacheDuration`],
    numRetries: [, , `NumRetries`],
    restartDelay: [, , `RestartDelay`]
  });
}, "se_HlsBasicPutSettings");
var se_HlsCdnSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    hlsAkamaiSettings: [, (_) => se_HlsAkamaiSettings(_, context), `HlsAkamaiSettings`],
    hlsBasicPutSettings: [, (_) => se_HlsBasicPutSettings(_, context), `HlsBasicPutSettings`],
    hlsMediaStoreSettings: [, (_) => se_HlsMediaStoreSettings(_, context), `HlsMediaStoreSettings`],
    hlsS3Settings: [, (_) => se_HlsS3Settings(_, context), `HlsS3Settings`],
    hlsWebdavSettings: [, (_) => se_HlsWebdavSettings(_, context), `HlsWebdavSettings`]
  });
}, "se_HlsCdnSettings");
var se_HlsGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adMarkers: [, import_smithy_client._json, `AdMarkers`],
    baseUrlContent: [, , `BaseUrlContent`],
    baseUrlContent1: [, , `BaseUrlContent1`],
    baseUrlManifest: [, , `BaseUrlManifest`],
    baseUrlManifest1: [, , `BaseUrlManifest1`],
    captionLanguageMappings: [, (_) => se___listOfCaptionLanguageMapping(_, context), `CaptionLanguageMappings`],
    captionLanguageSetting: [, , `CaptionLanguageSetting`],
    clientCache: [, , `ClientCache`],
    codecSpecification: [, , `CodecSpecification`],
    constantIv: [, , `ConstantIv`],
    destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
    directoryStructure: [, , `DirectoryStructure`],
    discontinuityTags: [, , `DiscontinuityTags`],
    encryptionType: [, , `EncryptionType`],
    hlsCdnSettings: [, (_) => se_HlsCdnSettings(_, context), `HlsCdnSettings`],
    hlsId3SegmentTagging: [, , `HlsId3SegmentTagging`],
    iFrameOnlyPlaylists: [, , `IFrameOnlyPlaylists`],
    incompleteSegmentBehavior: [, , `IncompleteSegmentBehavior`],
    indexNSegments: [, , `IndexNSegments`],
    inputLossAction: [, , `InputLossAction`],
    ivInManifest: [, , `IvInManifest`],
    ivSource: [, , `IvSource`],
    keepSegments: [, , `KeepSegments`],
    keyFormat: [, , `KeyFormat`],
    keyFormatVersions: [, , `KeyFormatVersions`],
    keyProviderSettings: [, (_) => se_KeyProviderSettings(_, context), `KeyProviderSettings`],
    manifestCompression: [, , `ManifestCompression`],
    manifestDurationFormat: [, , `ManifestDurationFormat`],
    minSegmentLength: [, , `MinSegmentLength`],
    mode: [, , `Mode`],
    outputSelection: [, , `OutputSelection`],
    programDateTime: [, , `ProgramDateTime`],
    programDateTimeClock: [, , `ProgramDateTimeClock`],
    programDateTimePeriod: [, , `ProgramDateTimePeriod`],
    redundantManifest: [, , `RedundantManifest`],
    segmentLength: [, , `SegmentLength`],
    segmentationMode: [, , `SegmentationMode`],
    segmentsPerSubdirectory: [, , `SegmentsPerSubdirectory`],
    streamInfResolution: [, , `StreamInfResolution`],
    timedMetadataId3Frame: [, , `TimedMetadataId3Frame`],
    timedMetadataId3Period: [, , `TimedMetadataId3Period`],
    timestampDeltaMilliseconds: [, , `TimestampDeltaMilliseconds`],
    tsFileMode: [, , `TsFileMode`]
  });
}, "se_HlsGroupSettings");
var se_HlsId3SegmentTaggingScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    id3: [, , `Id3`],
    tag: [, , `Tag`]
  });
}, "se_HlsId3SegmentTaggingScheduleActionSettings");
var se_HlsInputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bandwidth: [, , `Bandwidth`],
    bufferSegments: [, , `BufferSegments`],
    retries: [, , `Retries`],
    retryInterval: [, , `RetryInterval`],
    scte35Source: [, , `Scte35Source`]
  });
}, "se_HlsInputSettings");
var se_HlsMediaStoreSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    connectionRetryInterval: [, , `ConnectionRetryInterval`],
    filecacheDuration: [, , `FilecacheDuration`],
    mediaStoreStorageClass: [, , `MediaStoreStorageClass`],
    numRetries: [, , `NumRetries`],
    restartDelay: [, , `RestartDelay`]
  });
}, "se_HlsMediaStoreSettings");
var se_HlsOutputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    h265PackagingType: [, , `H265PackagingType`],
    hlsSettings: [, (_) => se_HlsSettings(_, context), `HlsSettings`],
    nameModifier: [, , `NameModifier`],
    segmentModifier: [, , `SegmentModifier`]
  });
}, "se_HlsOutputSettings");
var se_HlsS3Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    cannedAcl: [, , `CannedAcl`]
  });
}, "se_HlsS3Settings");
var se_HlsSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioOnlyHlsSettings: [, (_) => se_AudioOnlyHlsSettings(_, context), `AudioOnlyHlsSettings`],
    fmp4HlsSettings: [, (_) => se_Fmp4HlsSettings(_, context), `Fmp4HlsSettings`],
    frameCaptureHlsSettings: [, import_smithy_client._json, `FrameCaptureHlsSettings`],
    standardHlsSettings: [, (_) => se_StandardHlsSettings(_, context), `StandardHlsSettings`]
  });
}, "se_HlsSettings");
var se_HlsTimedMetadataScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    id3: [, , `Id3`]
  });
}, "se_HlsTimedMetadataScheduleActionSettings");
var se_HlsWebdavSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    connectionRetryInterval: [, , `ConnectionRetryInterval`],
    filecacheDuration: [, , `FilecacheDuration`],
    httpTransferMode: [, , `HttpTransferMode`],
    numRetries: [, , `NumRetries`],
    restartDelay: [, , `RestartDelay`]
  });
}, "se_HlsWebdavSettings");
var se_InputAttachment = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    automaticInputFailoverSettings: [
      ,
      (_) => se_AutomaticInputFailoverSettings(_, context),
      `AutomaticInputFailoverSettings`
    ],
    inputAttachmentName: [, , `InputAttachmentName`],
    inputId: [, , `InputId`],
    inputSettings: [, (_) => se_InputSettings(_, context), `InputSettings`]
  });
}, "se_InputAttachment");
var se_InputChannelLevel = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    gain: [, , `Gain`],
    inputChannel: [, , `InputChannel`]
  });
}, "se_InputChannelLevel");
var se_InputClippingSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    inputTimecodeSource: [, , `InputTimecodeSource`],
    startTimecode: [, (_) => se_StartTimecode(_, context), `StartTimecode`],
    stopTimecode: [, (_) => se_StopTimecode(_, context), `StopTimecode`]
  });
}, "se_InputClippingSettings");
var se_InputDestinationRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    streamName: [, , `StreamName`]
  });
}, "se_InputDestinationRequest");
var se_InputDeviceConfigurableAudioChannelPairConfig = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    id: [, , `Id`],
    profile: [, , `Profile`]
  });
}, "se_InputDeviceConfigurableAudioChannelPairConfig");
var se_InputDeviceConfigurableSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioChannelPairs: [
      ,
      (_) => se___listOfInputDeviceConfigurableAudioChannelPairConfig(_, context),
      `AudioChannelPairs`
    ],
    codec: [, , `Codec`],
    configuredInput: [, , `ConfiguredInput`],
    latencyMs: [, , `LatencyMs`],
    maxBitrate: [, , `MaxBitrate`],
    mediaconnectSettings: [, (_) => se_InputDeviceMediaConnectConfigurableSettings(_, context), `MediaconnectSettings`]
  });
}, "se_InputDeviceConfigurableSettings");
var se_InputDeviceMediaConnectConfigurableSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    flowArn: [, , `FlowArn`],
    roleArn: [, , `RoleArn`],
    secretArn: [, , `SecretArn`],
    sourceName: [, , `SourceName`]
  });
}, "se_InputDeviceMediaConnectConfigurableSettings");
var se_InputDeviceRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    id: [, , `Id`]
  });
}, "se_InputDeviceRequest");
var se_InputDeviceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    id: [, , `Id`]
  });
}, "se_InputDeviceSettings");
var se_InputLocation = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    passwordParam: [, , `PasswordParam`],
    uri: [, , `Uri`],
    username: [, , `Username`]
  });
}, "se_InputLocation");
var se_InputLossBehavior = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    blackFrameMsec: [, , `BlackFrameMsec`],
    inputLossImageColor: [, , `InputLossImageColor`],
    inputLossImageSlate: [, (_) => se_InputLocation(_, context), `InputLossImageSlate`],
    inputLossImageType: [, , `InputLossImageType`],
    repeatFrameMsec: [, , `RepeatFrameMsec`]
  });
}, "se_InputLossBehavior");
var se_InputLossFailoverSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    inputLossThresholdMsec: [, , `InputLossThresholdMsec`]
  });
}, "se_InputLossFailoverSettings");
var se_InputPrepareScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    inputAttachmentNameReference: [, , `InputAttachmentNameReference`],
    inputClippingSettings: [, (_) => se_InputClippingSettings(_, context), `InputClippingSettings`],
    urlPath: [, import_smithy_client._json, `UrlPath`]
  });
}, "se_InputPrepareScheduleActionSettings");
var se_InputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioSelectors: [, (_) => se___listOfAudioSelector(_, context), `AudioSelectors`],
    captionSelectors: [, (_) => se___listOfCaptionSelector(_, context), `CaptionSelectors`],
    deblockFilter: [, , `DeblockFilter`],
    denoiseFilter: [, , `DenoiseFilter`],
    filterStrength: [, , `FilterStrength`],
    inputFilter: [, , `InputFilter`],
    networkInputSettings: [, (_) => se_NetworkInputSettings(_, context), `NetworkInputSettings`],
    scte35Pid: [, , `Scte35Pid`],
    smpte2038DataPreference: [, , `Smpte2038DataPreference`],
    sourceEndBehavior: [, , `SourceEndBehavior`],
    videoSelector: [, (_) => se_VideoSelector(_, context), `VideoSelector`]
  });
}, "se_InputSettings");
var se_InputSourceRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    passwordParam: [, , `PasswordParam`],
    url: [, , `Url`],
    username: [, , `Username`]
  });
}, "se_InputSourceRequest");
var se_InputSpecification = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    codec: [, , `Codec`],
    maximumBitrate: [, , `MaximumBitrate`],
    resolution: [, , `Resolution`]
  });
}, "se_InputSpecification");
var se_InputSwitchScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    inputAttachmentNameReference: [, , `InputAttachmentNameReference`],
    inputClippingSettings: [, (_) => se_InputClippingSettings(_, context), `InputClippingSettings`],
    urlPath: [, import_smithy_client._json, `UrlPath`]
  });
}, "se_InputSwitchScheduleActionSettings");
var se_InputVpcRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    securityGroupIds: [, import_smithy_client._json, `SecurityGroupIds`],
    subnetIds: [, import_smithy_client._json, `SubnetIds`]
  });
}, "se_InputVpcRequest");
var se_InputWhitelistRuleCidr = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    cidr: [, , `Cidr`]
  });
}, "se_InputWhitelistRuleCidr");
var se_KeyProviderSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    staticKeySettings: [, (_) => se_StaticKeySettings(_, context), `StaticKeySettings`]
  });
}, "se_KeyProviderSettings");
var se_M2tsSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    absentInputAudioBehavior: [, , `AbsentInputAudioBehavior`],
    arib: [, , `Arib`],
    aribCaptionsPid: [, , `AribCaptionsPid`],
    aribCaptionsPidControl: [, , `AribCaptionsPidControl`],
    audioBufferModel: [, , `AudioBufferModel`],
    audioFramesPerPes: [, , `AudioFramesPerPes`],
    audioPids: [, , `AudioPids`],
    audioStreamType: [, , `AudioStreamType`],
    bitrate: [, , `Bitrate`],
    bufferModel: [, , `BufferModel`],
    ccDescriptor: [, , `CcDescriptor`],
    dvbNitSettings: [, (_) => se_DvbNitSettings(_, context), `DvbNitSettings`],
    dvbSdtSettings: [, (_) => se_DvbSdtSettings(_, context), `DvbSdtSettings`],
    dvbSubPids: [, , `DvbSubPids`],
    dvbTdtSettings: [, (_) => se_DvbTdtSettings(_, context), `DvbTdtSettings`],
    dvbTeletextPid: [, , `DvbTeletextPid`],
    ebif: [, , `Ebif`],
    ebpAudioInterval: [, , `EbpAudioInterval`],
    ebpLookaheadMs: [, , `EbpLookaheadMs`],
    ebpPlacement: [, , `EbpPlacement`],
    ecmPid: [, , `EcmPid`],
    esRateInPes: [, , `EsRateInPes`],
    etvPlatformPid: [, , `EtvPlatformPid`],
    etvSignalPid: [, , `EtvSignalPid`],
    fragmentTime: [, import_smithy_client.serializeFloat, `FragmentTime`],
    klv: [, , `Klv`],
    klvDataPids: [, , `KlvDataPids`],
    nielsenId3Behavior: [, , `NielsenId3Behavior`],
    nullPacketBitrate: [, import_smithy_client.serializeFloat, `NullPacketBitrate`],
    patInterval: [, , `PatInterval`],
    pcrControl: [, , `PcrControl`],
    pcrPeriod: [, , `PcrPeriod`],
    pcrPid: [, , `PcrPid`],
    pmtInterval: [, , `PmtInterval`],
    pmtPid: [, , `PmtPid`],
    programNum: [, , `ProgramNum`],
    rateMode: [, , `RateMode`],
    scte27Pids: [, , `Scte27Pids`],
    scte35Control: [, , `Scte35Control`],
    scte35Pid: [, , `Scte35Pid`],
    scte35PrerollPullupMilliseconds: [, import_smithy_client.serializeFloat, `Scte35PrerollPullupMilliseconds`],
    segmentationMarkers: [, , `SegmentationMarkers`],
    segmentationStyle: [, , `SegmentationStyle`],
    segmentationTime: [, import_smithy_client.serializeFloat, `SegmentationTime`],
    timedMetadataBehavior: [, , `TimedMetadataBehavior`],
    timedMetadataPid: [, , `TimedMetadataPid`],
    transportStreamId: [, , `TransportStreamId`],
    videoPid: [, , `VideoPid`]
  });
}, "se_M2tsSettings");
var se_M3u8Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioFramesPerPes: [, , `AudioFramesPerPes`],
    audioPids: [, , `AudioPids`],
    ecmPid: [, , `EcmPid`],
    klvBehavior: [, , `KlvBehavior`],
    klvDataPids: [, , `KlvDataPids`],
    nielsenId3Behavior: [, , `NielsenId3Behavior`],
    patInterval: [, , `PatInterval`],
    pcrControl: [, , `PcrControl`],
    pcrPeriod: [, , `PcrPeriod`],
    pcrPid: [, , `PcrPid`],
    pmtInterval: [, , `PmtInterval`],
    pmtPid: [, , `PmtPid`],
    programNum: [, , `ProgramNum`],
    scte35Behavior: [, , `Scte35Behavior`],
    scte35Pid: [, , `Scte35Pid`],
    timedMetadataBehavior: [, , `TimedMetadataBehavior`],
    timedMetadataPid: [, , `TimedMetadataPid`],
    transportStreamId: [, , `TransportStreamId`],
    videoPid: [, , `VideoPid`]
  });
}, "se_M3u8Settings");
var se_MaintenanceCreateSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maintenanceDay: [, , `MaintenanceDay`],
    maintenanceStartTime: [, , `MaintenanceStartTime`]
  });
}, "se_MaintenanceCreateSettings");
var se_MaintenanceUpdateSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maintenanceDay: [, , `MaintenanceDay`],
    maintenanceScheduledDate: [, , `MaintenanceScheduledDate`],
    maintenanceStartTime: [, , `MaintenanceStartTime`]
  });
}, "se_MaintenanceUpdateSettings");
var se_MediaConnectFlowRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    flowArn: [, , `FlowArn`]
  });
}, "se_MediaConnectFlowRequest");
var se_MediaPackageGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    destination: [, (_) => se_OutputLocationRef(_, context), `Destination`]
  });
}, "se_MediaPackageGroupSettings");
var se_MediaPackageOutputDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    channelId: [, , `ChannelId`]
  });
}, "se_MediaPackageOutputDestinationSettings");
var se_MotionGraphicsActivateScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    duration: [, , `Duration`],
    passwordParam: [, , `PasswordParam`],
    url: [, , `Url`],
    username: [, , `Username`]
  });
}, "se_MotionGraphicsActivateScheduleActionSettings");
var se_MotionGraphicsConfiguration = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    motionGraphicsInsertion: [, , `MotionGraphicsInsertion`],
    motionGraphicsSettings: [, (_) => se_MotionGraphicsSettings(_, context), `MotionGraphicsSettings`]
  });
}, "se_MotionGraphicsConfiguration");
var se_MotionGraphicsSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    htmlMotionGraphicsSettings: [, import_smithy_client._json, `HtmlMotionGraphicsSettings`]
  });
}, "se_MotionGraphicsSettings");
var se_Mp2Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitrate: [, import_smithy_client.serializeFloat, `Bitrate`],
    codingMode: [, , `CodingMode`],
    sampleRate: [, import_smithy_client.serializeFloat, `SampleRate`]
  });
}, "se_Mp2Settings");
var se_Mpeg2FilterSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    temporalFilterSettings: [, (_) => se_TemporalFilterSettings(_, context), `TemporalFilterSettings`]
  });
}, "se_Mpeg2FilterSettings");
var se_Mpeg2Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adaptiveQuantization: [, , `AdaptiveQuantization`],
    afdSignaling: [, , `AfdSignaling`],
    colorMetadata: [, , `ColorMetadata`],
    colorSpace: [, , `ColorSpace`],
    displayAspectRatio: [, , `DisplayAspectRatio`],
    filterSettings: [, (_) => se_Mpeg2FilterSettings(_, context), `FilterSettings`],
    fixedAfd: [, , `FixedAfd`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    gopClosedCadence: [, , `GopClosedCadence`],
    gopNumBFrames: [, , `GopNumBFrames`],
    gopSize: [, import_smithy_client.serializeFloat, `GopSize`],
    gopSizeUnits: [, , `GopSizeUnits`],
    scanType: [, , `ScanType`],
    subgopLength: [, , `SubgopLength`],
    timecodeBurninSettings: [, (_) => se_TimecodeBurninSettings(_, context), `TimecodeBurninSettings`],
    timecodeInsertion: [, , `TimecodeInsertion`]
  });
}, "se_Mpeg2Settings");
var se_MsSmoothGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    acquisitionPointId: [, , `AcquisitionPointId`],
    audioOnlyTimecodeControl: [, , `AudioOnlyTimecodeControl`],
    certificateMode: [, , `CertificateMode`],
    connectionRetryInterval: [, , `ConnectionRetryInterval`],
    destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
    eventId: [, , `EventId`],
    eventIdMode: [, , `EventIdMode`],
    eventStopBehavior: [, , `EventStopBehavior`],
    filecacheDuration: [, , `FilecacheDuration`],
    fragmentLength: [, , `FragmentLength`],
    inputLossAction: [, , `InputLossAction`],
    numRetries: [, , `NumRetries`],
    restartDelay: [, , `RestartDelay`],
    segmentationMode: [, , `SegmentationMode`],
    sendDelayMs: [, , `SendDelayMs`],
    sparseTrackType: [, , `SparseTrackType`],
    streamManifestBehavior: [, , `StreamManifestBehavior`],
    timestampOffset: [, , `TimestampOffset`],
    timestampOffsetMode: [, , `TimestampOffsetMode`]
  });
}, "se_MsSmoothGroupSettings");
var se_MsSmoothOutputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    h265PackagingType: [, , `H265PackagingType`],
    nameModifier: [, , `NameModifier`]
  });
}, "se_MsSmoothOutputSettings");
var se_MultiplexOutputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    destination: [, (_) => se_OutputLocationRef(_, context), `Destination`]
  });
}, "se_MultiplexOutputSettings");
var se_MultiplexProgramChannelDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    multiplexId: [, , `MultiplexId`],
    programName: [, , `ProgramName`]
  });
}, "se_MultiplexProgramChannelDestinationSettings");
var se_MultiplexProgramServiceDescriptor = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    providerName: [, , `ProviderName`],
    serviceName: [, , `ServiceName`]
  });
}, "se_MultiplexProgramServiceDescriptor");
var se_MultiplexProgramSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    preferredChannelPipeline: [, , `PreferredChannelPipeline`],
    programNumber: [, , `ProgramNumber`],
    serviceDescriptor: [, (_) => se_MultiplexProgramServiceDescriptor(_, context), `ServiceDescriptor`],
    videoSettings: [, (_) => se_MultiplexVideoSettings(_, context), `VideoSettings`]
  });
}, "se_MultiplexProgramSettings");
var se_MultiplexSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maximumVideoBufferDelayMilliseconds: [, , `MaximumVideoBufferDelayMilliseconds`],
    transportStreamBitrate: [, , `TransportStreamBitrate`],
    transportStreamId: [, , `TransportStreamId`],
    transportStreamReservedBitrate: [, , `TransportStreamReservedBitrate`]
  });
}, "se_MultiplexSettings");
var se_MultiplexStatmuxVideoSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maximumBitrate: [, , `MaximumBitrate`],
    minimumBitrate: [, , `MinimumBitrate`],
    priority: [, , `Priority`]
  });
}, "se_MultiplexStatmuxVideoSettings");
var se_MultiplexVideoSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    constantBitrate: [, , `ConstantBitrate`],
    statmuxSettings: [, (_) => se_MultiplexStatmuxVideoSettings(_, context), `StatmuxSettings`]
  });
}, "se_MultiplexVideoSettings");
var se_NetworkInputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    hlsInputSettings: [, (_) => se_HlsInputSettings(_, context), `HlsInputSettings`],
    serverValidation: [, , `ServerValidation`]
  });
}, "se_NetworkInputSettings");
var se_NielsenCBET = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    cbetCheckDigitString: [, , `CbetCheckDigitString`],
    cbetStepaside: [, , `CbetStepaside`],
    csid: [, , `Csid`]
  });
}, "se_NielsenCBET");
var se_NielsenConfiguration = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    distributorId: [, , `DistributorId`],
    nielsenPcmToId3Tagging: [, , `NielsenPcmToId3Tagging`]
  });
}, "se_NielsenConfiguration");
var se_NielsenNaesIiNw = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    checkDigitString: [, , `CheckDigitString`],
    sid: [, import_smithy_client.serializeFloat, `Sid`],
    timezone: [, , `Timezone`]
  });
}, "se_NielsenNaesIiNw");
var se_NielsenWatermarksSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    nielsenCbetSettings: [, (_) => se_NielsenCBET(_, context), `NielsenCbetSettings`],
    nielsenDistributionType: [, , `NielsenDistributionType`],
    nielsenNaesIiNwSettings: [, (_) => se_NielsenNaesIiNw(_, context), `NielsenNaesIiNwSettings`]
  });
}, "se_NielsenWatermarksSettings");
var se_Output = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioDescriptionNames: [, import_smithy_client._json, `AudioDescriptionNames`],
    captionDescriptionNames: [, import_smithy_client._json, `CaptionDescriptionNames`],
    outputName: [, , `OutputName`],
    outputSettings: [, (_) => se_OutputSettings(_, context), `OutputSettings`],
    videoDescriptionName: [, , `VideoDescriptionName`]
  });
}, "se_Output");
var se_OutputDestination = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    id: [, , `Id`],
    mediaPackageSettings: [
      ,
      (_) => se___listOfMediaPackageOutputDestinationSettings(_, context),
      `MediaPackageSettings`
    ],
    multiplexSettings: [, (_) => se_MultiplexProgramChannelDestinationSettings(_, context), `MultiplexSettings`],
    settings: [, (_) => se___listOfOutputDestinationSettings(_, context), `Settings`]
  });
}, "se_OutputDestination");
var se_OutputDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    passwordParam: [, , `PasswordParam`],
    streamName: [, , `StreamName`],
    url: [, , `Url`],
    username: [, , `Username`]
  });
}, "se_OutputDestinationSettings");
var se_OutputGroup = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    name: [, , `Name`],
    outputGroupSettings: [, (_) => se_OutputGroupSettings(_, context), `OutputGroupSettings`],
    outputs: [, (_) => se___listOfOutput(_, context), `Outputs`]
  });
}, "se_OutputGroup");
var se_OutputGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    archiveGroupSettings: [, (_) => se_ArchiveGroupSettings(_, context), `ArchiveGroupSettings`],
    cmafIngestGroupSettings: [, (_) => se_CmafIngestGroupSettings(_, context), `CmafIngestGroupSettings`],
    frameCaptureGroupSettings: [, (_) => se_FrameCaptureGroupSettings(_, context), `FrameCaptureGroupSettings`],
    hlsGroupSettings: [, (_) => se_HlsGroupSettings(_, context), `HlsGroupSettings`],
    mediaPackageGroupSettings: [, (_) => se_MediaPackageGroupSettings(_, context), `MediaPackageGroupSettings`],
    msSmoothGroupSettings: [, (_) => se_MsSmoothGroupSettings(_, context), `MsSmoothGroupSettings`],
    multiplexGroupSettings: [, import_smithy_client._json, `MultiplexGroupSettings`],
    rtmpGroupSettings: [, (_) => se_RtmpGroupSettings(_, context), `RtmpGroupSettings`],
    udpGroupSettings: [, (_) => se_UdpGroupSettings(_, context), `UdpGroupSettings`]
  });
}, "se_OutputGroupSettings");
var se_OutputLocationRef = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    destinationRefId: [, , `DestinationRefId`]
  });
}, "se_OutputLocationRef");
var se_OutputLockingSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    epochLockingSettings: [, (_) => se_EpochLockingSettings(_, context), `EpochLockingSettings`],
    pipelineLockingSettings: [, import_smithy_client._json, `PipelineLockingSettings`]
  });
}, "se_OutputLockingSettings");
var se_OutputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    archiveOutputSettings: [, (_) => se_ArchiveOutputSettings(_, context), `ArchiveOutputSettings`],
    cmafIngestOutputSettings: [, (_) => se_CmafIngestOutputSettings(_, context), `CmafIngestOutputSettings`],
    frameCaptureOutputSettings: [, (_) => se_FrameCaptureOutputSettings(_, context), `FrameCaptureOutputSettings`],
    hlsOutputSettings: [, (_) => se_HlsOutputSettings(_, context), `HlsOutputSettings`],
    mediaPackageOutputSettings: [, import_smithy_client._json, `MediaPackageOutputSettings`],
    msSmoothOutputSettings: [, (_) => se_MsSmoothOutputSettings(_, context), `MsSmoothOutputSettings`],
    multiplexOutputSettings: [, (_) => se_MultiplexOutputSettings(_, context), `MultiplexOutputSettings`],
    rtmpOutputSettings: [, (_) => se_RtmpOutputSettings(_, context), `RtmpOutputSettings`],
    udpOutputSettings: [, (_) => se_UdpOutputSettings(_, context), `UdpOutputSettings`]
  });
}, "se_OutputSettings");
var se_PauseStateScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    pipelines: [, (_) => se___listOfPipelinePauseStateSettings(_, context), `Pipelines`]
  });
}, "se_PauseStateScheduleActionSettings");
var se_PipelinePauseStateSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    pipelineId: [, , `PipelineId`]
  });
}, "se_PipelinePauseStateSettings");
var se_RemixSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    channelMappings: [, (_) => se___listOfAudioChannelMapping(_, context), `ChannelMappings`],
    channelsIn: [, , `ChannelsIn`],
    channelsOut: [, , `ChannelsOut`]
  });
}, "se_RemixSettings");
var se_RenewalSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    automaticRenewal: [, , `AutomaticRenewal`],
    renewalCount: [, , `RenewalCount`]
  });
}, "se_RenewalSettings");
var se_RtmpGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adMarkers: [, import_smithy_client._json, `AdMarkers`],
    authenticationScheme: [, , `AuthenticationScheme`],
    cacheFullBehavior: [, , `CacheFullBehavior`],
    cacheLength: [, , `CacheLength`],
    captionData: [, , `CaptionData`],
    includeFillerNalUnits: [, , `IncludeFillerNalUnits`],
    inputLossAction: [, , `InputLossAction`],
    restartDelay: [, , `RestartDelay`]
  });
}, "se_RtmpGroupSettings");
var se_RtmpOutputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    certificateMode: [, , `CertificateMode`],
    connectionRetryInterval: [, , `ConnectionRetryInterval`],
    destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
    numRetries: [, , `NumRetries`]
  });
}, "se_RtmpOutputSettings");
var se_ScheduleAction = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    actionName: [, , `ActionName`],
    scheduleActionSettings: [, (_) => se_ScheduleActionSettings(_, context), `ScheduleActionSettings`],
    scheduleActionStartSettings: [, (_) => se_ScheduleActionStartSettings(_, context), `ScheduleActionStartSettings`]
  });
}, "se_ScheduleAction");
var se_ScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    hlsId3SegmentTaggingSettings: [
      ,
      (_) => se_HlsId3SegmentTaggingScheduleActionSettings(_, context),
      `HlsId3SegmentTaggingSettings`
    ],
    hlsTimedMetadataSettings: [
      ,
      (_) => se_HlsTimedMetadataScheduleActionSettings(_, context),
      `HlsTimedMetadataSettings`
    ],
    inputPrepareSettings: [, (_) => se_InputPrepareScheduleActionSettings(_, context), `InputPrepareSettings`],
    inputSwitchSettings: [, (_) => se_InputSwitchScheduleActionSettings(_, context), `InputSwitchSettings`],
    motionGraphicsImageActivateSettings: [
      ,
      (_) => se_MotionGraphicsActivateScheduleActionSettings(_, context),
      `MotionGraphicsImageActivateSettings`
    ],
    motionGraphicsImageDeactivateSettings: [, import_smithy_client._json, `MotionGraphicsImageDeactivateSettings`],
    pauseStateSettings: [, (_) => se_PauseStateScheduleActionSettings(_, context), `PauseStateSettings`],
    scte35InputSettings: [, (_) => se_Scte35InputScheduleActionSettings(_, context), `Scte35InputSettings`],
    scte35ReturnToNetworkSettings: [
      ,
      (_) => se_Scte35ReturnToNetworkScheduleActionSettings(_, context),
      `Scte35ReturnToNetworkSettings`
    ],
    scte35SpliceInsertSettings: [
      ,
      (_) => se_Scte35SpliceInsertScheduleActionSettings(_, context),
      `Scte35SpliceInsertSettings`
    ],
    scte35TimeSignalSettings: [
      ,
      (_) => se_Scte35TimeSignalScheduleActionSettings(_, context),
      `Scte35TimeSignalSettings`
    ],
    staticImageActivateSettings: [
      ,
      (_) => se_StaticImageActivateScheduleActionSettings(_, context),
      `StaticImageActivateSettings`
    ],
    staticImageDeactivateSettings: [
      ,
      (_) => se_StaticImageDeactivateScheduleActionSettings(_, context),
      `StaticImageDeactivateSettings`
    ],
    staticImageOutputActivateSettings: [
      ,
      (_) => se_StaticImageOutputActivateScheduleActionSettings(_, context),
      `StaticImageOutputActivateSettings`
    ],
    staticImageOutputDeactivateSettings: [
      ,
      (_) => se_StaticImageOutputDeactivateScheduleActionSettings(_, context),
      `StaticImageOutputDeactivateSettings`
    ]
  });
}, "se_ScheduleActionSettings");
var se_ScheduleActionStartSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    fixedModeScheduleActionStartSettings: [
      ,
      (_) => se_FixedModeScheduleActionStartSettings(_, context),
      `FixedModeScheduleActionStartSettings`
    ],
    followModeScheduleActionStartSettings: [
      ,
      (_) => se_FollowModeScheduleActionStartSettings(_, context),
      `FollowModeScheduleActionStartSettings`
    ],
    immediateModeScheduleActionStartSettings: [, import_smithy_client._json, `ImmediateModeScheduleActionStartSettings`]
  });
}, "se_ScheduleActionStartSettings");
var se_Scte20SourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    convert608To708: [, , `Convert608To708`],
    source608ChannelNumber: [, , `Source608ChannelNumber`]
  });
}, "se_Scte20SourceSettings");
var se_Scte27SourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    ocrLanguage: [, , `OcrLanguage`],
    pid: [, , `Pid`]
  });
}, "se_Scte27SourceSettings");
var se_Scte35DeliveryRestrictions = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    archiveAllowedFlag: [, , `ArchiveAllowedFlag`],
    deviceRestrictions: [, , `DeviceRestrictions`],
    noRegionalBlackoutFlag: [, , `NoRegionalBlackoutFlag`],
    webDeliveryAllowedFlag: [, , `WebDeliveryAllowedFlag`]
  });
}, "se_Scte35DeliveryRestrictions");
var se_Scte35Descriptor = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    scte35DescriptorSettings: [, (_) => se_Scte35DescriptorSettings(_, context), `Scte35DescriptorSettings`]
  });
}, "se_Scte35Descriptor");
var se_Scte35DescriptorSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    segmentationDescriptorScte35DescriptorSettings: [
      ,
      (_) => se_Scte35SegmentationDescriptor(_, context),
      `SegmentationDescriptorScte35DescriptorSettings`
    ]
  });
}, "se_Scte35DescriptorSettings");
var se_Scte35InputScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    inputAttachmentNameReference: [, , `InputAttachmentNameReference`],
    mode: [, , `Mode`]
  });
}, "se_Scte35InputScheduleActionSettings");
var se_Scte35ReturnToNetworkScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    spliceEventId: [, , `SpliceEventId`]
  });
}, "se_Scte35ReturnToNetworkScheduleActionSettings");
var se_Scte35SegmentationDescriptor = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    deliveryRestrictions: [, (_) => se_Scte35DeliveryRestrictions(_, context), `DeliveryRestrictions`],
    segmentNum: [, , `SegmentNum`],
    segmentationCancelIndicator: [, , `SegmentationCancelIndicator`],
    segmentationDuration: [, , `SegmentationDuration`],
    segmentationEventId: [, , `SegmentationEventId`],
    segmentationTypeId: [, , `SegmentationTypeId`],
    segmentationUpid: [, , `SegmentationUpid`],
    segmentationUpidType: [, , `SegmentationUpidType`],
    segmentsExpected: [, , `SegmentsExpected`],
    subSegmentNum: [, , `SubSegmentNum`],
    subSegmentsExpected: [, , `SubSegmentsExpected`]
  });
}, "se_Scte35SegmentationDescriptor");
var se_Scte35SpliceInsert = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adAvailOffset: [, , `AdAvailOffset`],
    noRegionalBlackoutFlag: [, , `NoRegionalBlackoutFlag`],
    webDeliveryAllowedFlag: [, , `WebDeliveryAllowedFlag`]
  });
}, "se_Scte35SpliceInsert");
var se_Scte35SpliceInsertScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    duration: [, , `Duration`],
    spliceEventId: [, , `SpliceEventId`]
  });
}, "se_Scte35SpliceInsertScheduleActionSettings");
var se_Scte35TimeSignalApos = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adAvailOffset: [, , `AdAvailOffset`],
    noRegionalBlackoutFlag: [, , `NoRegionalBlackoutFlag`],
    webDeliveryAllowedFlag: [, , `WebDeliveryAllowedFlag`]
  });
}, "se_Scte35TimeSignalApos");
var se_Scte35TimeSignalScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    scte35Descriptors: [, (_) => se___listOfScte35Descriptor(_, context), `Scte35Descriptors`]
  });
}, "se_Scte35TimeSignalScheduleActionSettings");
var se_StandardHlsSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioRenditionSets: [, , `AudioRenditionSets`],
    m3u8Settings: [, (_) => se_M3u8Settings(_, context), `M3u8Settings`]
  });
}, "se_StandardHlsSettings");
var se_StartTimecode = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    timecode: [, , `Timecode`]
  });
}, "se_StartTimecode");
var se_StaticImageActivateScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    duration: [, , `Duration`],
    fadeIn: [, , `FadeIn`],
    fadeOut: [, , `FadeOut`],
    height: [, , `Height`],
    image: [, (_) => se_InputLocation(_, context), `Image`],
    imageX: [, , `ImageX`],
    imageY: [, , `ImageY`],
    layer: [, , `Layer`],
    opacity: [, , `Opacity`],
    width: [, , `Width`]
  });
}, "se_StaticImageActivateScheduleActionSettings");
var se_StaticImageDeactivateScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    fadeOut: [, , `FadeOut`],
    layer: [, , `Layer`]
  });
}, "se_StaticImageDeactivateScheduleActionSettings");
var se_StaticImageOutputActivateScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    duration: [, , `Duration`],
    fadeIn: [, , `FadeIn`],
    fadeOut: [, , `FadeOut`],
    height: [, , `Height`],
    image: [, (_) => se_InputLocation(_, context), `Image`],
    imageX: [, , `ImageX`],
    imageY: [, , `ImageY`],
    layer: [, , `Layer`],
    opacity: [, , `Opacity`],
    outputNames: [, import_smithy_client._json, `OutputNames`],
    width: [, , `Width`]
  });
}, "se_StaticImageOutputActivateScheduleActionSettings");
var se_StaticImageOutputDeactivateScheduleActionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    fadeOut: [, , `FadeOut`],
    layer: [, , `Layer`],
    outputNames: [, import_smithy_client._json, `OutputNames`]
  });
}, "se_StaticImageOutputDeactivateScheduleActionSettings");
var se_StaticKeySettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    keyProviderServer: [, (_) => se_InputLocation(_, context), `KeyProviderServer`],
    staticKeyValue: [, , `StaticKeyValue`]
  });
}, "se_StaticKeySettings");
var se_StopTimecode = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    lastFrameClippingBehavior: [, , `LastFrameClippingBehavior`],
    timecode: [, , `Timecode`]
  });
}, "se_StopTimecode");
var se_TeletextSourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    outputRectangle: [, (_) => se_CaptionRectangle(_, context), `OutputRectangle`],
    pageNumber: [, , `PageNumber`]
  });
}, "se_TeletextSourceSettings");
var se_TemporalFilterSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    postFilterSharpening: [, , `PostFilterSharpening`],
    strength: [, , `Strength`]
  });
}, "se_TemporalFilterSettings");
var se_ThumbnailConfiguration = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    state: [, , `State`]
  });
}, "se_ThumbnailConfiguration");
var se_TimecodeBurninSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    fontSize: [, , `FontSize`],
    position: [, , `Position`],
    prefix: [, , `Prefix`]
  });
}, "se_TimecodeBurninSettings");
var se_TimecodeConfig = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    source: [, , `Source`],
    syncThreshold: [, , `SyncThreshold`]
  });
}, "se_TimecodeConfig");
var se_TtmlDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    styleControl: [, , `StyleControl`]
  });
}, "se_TtmlDestinationSettings");
var se_UdpContainerSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    m2tsSettings: [, (_) => se_M2tsSettings(_, context), `M2tsSettings`]
  });
}, "se_UdpContainerSettings");
var se_UdpGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    inputLossAction: [, , `InputLossAction`],
    timedMetadataId3Frame: [, , `TimedMetadataId3Frame`],
    timedMetadataId3Period: [, , `TimedMetadataId3Period`]
  });
}, "se_UdpGroupSettings");
var se_UdpOutputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bufferMsec: [, , `BufferMsec`],
    containerSettings: [, (_) => se_UdpContainerSettings(_, context), `ContainerSettings`],
    destination: [, (_) => se_OutputLocationRef(_, context), `Destination`],
    fecOutputSettings: [, (_) => se_FecOutputSettings(_, context), `FecOutputSettings`]
  });
}, "se_UdpOutputSettings");
var se_VideoBlackFailoverSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    blackDetectThreshold: [, import_smithy_client.serializeFloat, `BlackDetectThreshold`],
    videoBlackThresholdMsec: [, , `VideoBlackThresholdMsec`]
  });
}, "se_VideoBlackFailoverSettings");
var se_VideoCodecSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    frameCaptureSettings: [, (_) => se_FrameCaptureSettings(_, context), `FrameCaptureSettings`],
    h264Settings: [, (_) => se_H264Settings(_, context), `H264Settings`],
    h265Settings: [, (_) => se_H265Settings(_, context), `H265Settings`],
    mpeg2Settings: [, (_) => se_Mpeg2Settings(_, context), `Mpeg2Settings`]
  });
}, "se_VideoCodecSettings");
var se_VideoDescription = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    codecSettings: [, (_) => se_VideoCodecSettings(_, context), `CodecSettings`],
    height: [, , `Height`],
    name: [, , `Name`],
    respondToAfd: [, , `RespondToAfd`],
    scalingBehavior: [, , `ScalingBehavior`],
    sharpness: [, , `Sharpness`],
    width: [, , `Width`]
  });
}, "se_VideoDescription");
var se_VideoSelector = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    colorSpace: [, , `ColorSpace`],
    colorSpaceSettings: [, (_) => se_VideoSelectorColorSpaceSettings(_, context), `ColorSpaceSettings`],
    colorSpaceUsage: [, , `ColorSpaceUsage`],
    selectorSettings: [, (_) => se_VideoSelectorSettings(_, context), `SelectorSettings`]
  });
}, "se_VideoSelector");
var se_VideoSelectorColorSpaceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    hdr10Settings: [, (_) => se_Hdr10Settings(_, context), `Hdr10Settings`]
  });
}, "se_VideoSelectorColorSpaceSettings");
var se_VideoSelectorPid = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    pid: [, , `Pid`]
  });
}, "se_VideoSelectorPid");
var se_VideoSelectorProgramId = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    programId: [, , `ProgramId`]
  });
}, "se_VideoSelectorProgramId");
var se_VideoSelectorSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    videoSelectorPid: [, (_) => se_VideoSelectorPid(_, context), `VideoSelectorPid`],
    videoSelectorProgramId: [, (_) => se_VideoSelectorProgramId(_, context), `VideoSelectorProgramId`]
  });
}, "se_VideoSelectorSettings");
var se_VpcOutputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    publicAddressAllocationIds: [, import_smithy_client._json, `PublicAddressAllocationIds`],
    securityGroupIds: [, import_smithy_client._json, `SecurityGroupIds`],
    subnetIds: [, import_smithy_client._json, `SubnetIds`]
  });
}, "se_VpcOutputSettings");
var se_WavSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitDepth: [, import_smithy_client.serializeFloat, `BitDepth`],
    codingMode: [, , `CodingMode`],
    sampleRate: [, import_smithy_client.serializeFloat, `SampleRate`]
  });
}, "se_WavSettings");
var se_WebvttDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    styleControl: [, , `StyleControl`]
  });
}, "se_WebvttDestinationSettings");
var de___listOfAudioChannelMapping = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AudioChannelMapping(entry, context);
  });
  return retVal;
}, "de___listOfAudioChannelMapping");
var de___listOfAudioDescription = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AudioDescription(entry, context);
  });
  return retVal;
}, "de___listOfAudioDescription");
var de___listOfAudioSelector = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AudioSelector(entry, context);
  });
  return retVal;
}, "de___listOfAudioSelector");
var de___listOfAudioTrack = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AudioTrack(entry, context);
  });
  return retVal;
}, "de___listOfAudioTrack");
var de___listOfBatchFailedResultModel = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BatchFailedResultModel(entry, context);
  });
  return retVal;
}, "de___listOfBatchFailedResultModel");
var de___listOfBatchSuccessfulResultModel = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BatchSuccessfulResultModel(entry, context);
  });
  return retVal;
}, "de___listOfBatchSuccessfulResultModel");
var de___listOfCaptionDescription = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_CaptionDescription(entry, context);
  });
  return retVal;
}, "de___listOfCaptionDescription");
var de___listOfCaptionLanguageMapping = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_CaptionLanguageMapping(entry, context);
  });
  return retVal;
}, "de___listOfCaptionLanguageMapping");
var de___listOfCaptionSelector = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_CaptionSelector(entry, context);
  });
  return retVal;
}, "de___listOfCaptionSelector");
var de___listOfChannelEgressEndpoint = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ChannelEgressEndpoint(entry, context);
  });
  return retVal;
}, "de___listOfChannelEgressEndpoint");
var de___listOfChannelSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ChannelSummary(entry, context);
  });
  return retVal;
}, "de___listOfChannelSummary");
var de___listOfCloudWatchAlarmTemplateGroupSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_CloudWatchAlarmTemplateGroupSummary(entry, context);
  });
  return retVal;
}, "de___listOfCloudWatchAlarmTemplateGroupSummary");
var de___listOfCloudWatchAlarmTemplateSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_CloudWatchAlarmTemplateSummary(entry, context);
  });
  return retVal;
}, "de___listOfCloudWatchAlarmTemplateSummary");
var de___listOfColorCorrection = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ColorCorrection(entry, context);
  });
  return retVal;
}, "de___listOfColorCorrection");
var de___listOfEventBridgeRuleTemplateGroupSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_EventBridgeRuleTemplateGroupSummary(entry, context);
  });
  return retVal;
}, "de___listOfEventBridgeRuleTemplateGroupSummary");
var de___listOfEventBridgeRuleTemplateSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_EventBridgeRuleTemplateSummary(entry, context);
  });
  return retVal;
}, "de___listOfEventBridgeRuleTemplateSummary");
var de___listOfEventBridgeRuleTemplateTarget = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_EventBridgeRuleTemplateTarget(entry, context);
  });
  return retVal;
}, "de___listOfEventBridgeRuleTemplateTarget");
var de___listOfFailoverCondition = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_FailoverCondition(entry, context);
  });
  return retVal;
}, "de___listOfFailoverCondition");
var de___listOfInput = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Input(entry, context);
  });
  return retVal;
}, "de___listOfInput");
var de___listOfInputAttachment = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InputAttachment(entry, context);
  });
  return retVal;
}, "de___listOfInputAttachment");
var de___listOfInputChannelLevel = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InputChannelLevel(entry, context);
  });
  return retVal;
}, "de___listOfInputChannelLevel");
var de___listOfInputDestination = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InputDestination(entry, context);
  });
  return retVal;
}, "de___listOfInputDestination");
var de___listOfInputDeviceSettings = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InputDeviceSettings(entry, context);
  });
  return retVal;
}, "de___listOfInputDeviceSettings");
var de___listOfInputDeviceSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InputDeviceSummary(entry, context);
  });
  return retVal;
}, "de___listOfInputDeviceSummary");
var de___listOfInputDeviceUhdAudioChannelPairConfig = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InputDeviceUhdAudioChannelPairConfig(entry, context);
  });
  return retVal;
}, "de___listOfInputDeviceUhdAudioChannelPairConfig");
var de___listOfInputSecurityGroup = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InputSecurityGroup(entry, context);
  });
  return retVal;
}, "de___listOfInputSecurityGroup");
var de___listOfInputSource = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InputSource(entry, context);
  });
  return retVal;
}, "de___listOfInputSource");
var de___listOfInputWhitelistRule = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InputWhitelistRule(entry, context);
  });
  return retVal;
}, "de___listOfInputWhitelistRule");
var de___listOfMediaConnectFlow = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MediaConnectFlow(entry, context);
  });
  return retVal;
}, "de___listOfMediaConnectFlow");
var de___listOfMediaPackageOutputDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MediaPackageOutputDestinationSettings(entry, context);
  });
  return retVal;
}, "de___listOfMediaPackageOutputDestinationSettings");
var de___listOfMediaResourceNeighbor = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MediaResourceNeighbor(entry, context);
  });
  return retVal;
}, "de___listOfMediaResourceNeighbor");
var de___listOfMultiplexOutputDestination = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MultiplexOutputDestination(entry, context);
  });
  return retVal;
}, "de___listOfMultiplexOutputDestination");
var de___listOfMultiplexProgramPipelineDetail = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MultiplexProgramPipelineDetail(entry, context);
  });
  return retVal;
}, "de___listOfMultiplexProgramPipelineDetail");
var de___listOfMultiplexProgramSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MultiplexProgramSummary(entry, context);
  });
  return retVal;
}, "de___listOfMultiplexProgramSummary");
var de___listOfMultiplexSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MultiplexSummary(entry, context);
  });
  return retVal;
}, "de___listOfMultiplexSummary");
var de___listOfOffering = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Offering(entry, context);
  });
  return retVal;
}, "de___listOfOffering");
var de___listOfOutput = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Output(entry, context);
  });
  return retVal;
}, "de___listOfOutput");
var de___listOfOutputDestination = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_OutputDestination(entry, context);
  });
  return retVal;
}, "de___listOfOutputDestination");
var de___listOfOutputDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_OutputDestinationSettings(entry, context);
  });
  return retVal;
}, "de___listOfOutputDestinationSettings");
var de___listOfOutputGroup = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_OutputGroup(entry, context);
  });
  return retVal;
}, "de___listOfOutputGroup");
var de___listOfPipelineDetail = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PipelineDetail(entry, context);
  });
  return retVal;
}, "de___listOfPipelineDetail");
var de___listOfPipelinePauseStateSettings = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PipelinePauseStateSettings(entry, context);
  });
  return retVal;
}, "de___listOfPipelinePauseStateSettings");
var de___listOfReservation = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Reservation(entry, context);
  });
  return retVal;
}, "de___listOfReservation");
var de___listOfScheduleAction = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ScheduleAction(entry, context);
  });
  return retVal;
}, "de___listOfScheduleAction");
var de___listOfScte35Descriptor = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Scte35Descriptor(entry, context);
  });
  return retVal;
}, "de___listOfScte35Descriptor");
var de___listOfSignalMapSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_SignalMapSummary(entry, context);
  });
  return retVal;
}, "de___listOfSignalMapSummary");
var de___listOfThumbnail = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Thumbnail(entry, context);
  });
  return retVal;
}, "de___listOfThumbnail");
var de___listOfThumbnailDetail = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ThumbnailDetail(entry, context);
  });
  return retVal;
}, "de___listOfThumbnailDetail");
var de___listOfTransferringInputDeviceSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_TransferringInputDeviceSummary(entry, context);
  });
  return retVal;
}, "de___listOfTransferringInputDeviceSummary");
var de___listOfValidationError = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ValidationError(entry, context);
  });
  return retVal;
}, "de___listOfValidationError");
var de___listOfVideoDescription = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_VideoDescription(entry, context);
  });
  return retVal;
}, "de___listOfVideoDescription");
var de_AacSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Bitrate: [, import_smithy_client.limitedParseDouble, `bitrate`],
    CodingMode: [, import_smithy_client.expectString, `codingMode`],
    InputType: [, import_smithy_client.expectString, `inputType`],
    Profile: [, import_smithy_client.expectString, `profile`],
    RateControlMode: [, import_smithy_client.expectString, `rateControlMode`],
    RawFormat: [, import_smithy_client.expectString, `rawFormat`],
    SampleRate: [, import_smithy_client.limitedParseDouble, `sampleRate`],
    Spec: [, import_smithy_client.expectString, `spec`],
    VbrQuality: [, import_smithy_client.expectString, `vbrQuality`]
  });
}, "de_AacSettings");
var de_Ac3Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AttenuationControl: [, import_smithy_client.expectString, `attenuationControl`],
    Bitrate: [, import_smithy_client.limitedParseDouble, `bitrate`],
    BitstreamMode: [, import_smithy_client.expectString, `bitstreamMode`],
    CodingMode: [, import_smithy_client.expectString, `codingMode`],
    Dialnorm: [, import_smithy_client.expectInt32, `dialnorm`],
    DrcProfile: [, import_smithy_client.expectString, `drcProfile`],
    LfeFilter: [, import_smithy_client.expectString, `lfeFilter`],
    MetadataControl: [, import_smithy_client.expectString, `metadataControl`]
  });
}, "de_Ac3Settings");
var de_AccountConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    KmsKeyId: [, import_smithy_client.expectString, `kmsKeyId`]
  });
}, "de_AccountConfiguration");
var de_AncillarySourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    SourceAncillaryChannelNumber: [, import_smithy_client.expectInt32, `sourceAncillaryChannelNumber`]
  });
}, "de_AncillarySourceSettings");
var de_ArchiveCdnSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ArchiveS3Settings: [, (_) => de_ArchiveS3Settings(_, context), `archiveS3Settings`]
  });
}, "de_ArchiveCdnSettings");
var de_ArchiveContainerSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    M2tsSettings: [, (_) => de_M2tsSettings(_, context), `m2tsSettings`],
    RawSettings: [, import_smithy_client._json, `rawSettings`]
  });
}, "de_ArchiveContainerSettings");
var de_ArchiveGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ArchiveCdnSettings: [, (_) => de_ArchiveCdnSettings(_, context), `archiveCdnSettings`],
    Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
    RolloverInterval: [, import_smithy_client.expectInt32, `rolloverInterval`]
  });
}, "de_ArchiveGroupSettings");
var de_ArchiveOutputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ContainerSettings: [, (_) => de_ArchiveContainerSettings(_, context), `containerSettings`],
    Extension: [, import_smithy_client.expectString, `extension`],
    NameModifier: [, import_smithy_client.expectString, `nameModifier`]
  });
}, "de_ArchiveOutputSettings");
var de_ArchiveS3Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CannedAcl: [, import_smithy_client.expectString, `cannedAcl`]
  });
}, "de_ArchiveS3Settings");
var de_AudioChannelMapping = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InputChannelLevels: [, (_) => de___listOfInputChannelLevel(_, context), `inputChannelLevels`],
    OutputChannel: [, import_smithy_client.expectInt32, `outputChannel`]
  });
}, "de_AudioChannelMapping");
var de_AudioCodecSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AacSettings: [, (_) => de_AacSettings(_, context), `aacSettings`],
    Ac3Settings: [, (_) => de_Ac3Settings(_, context), `ac3Settings`],
    Eac3AtmosSettings: [, (_) => de_Eac3AtmosSettings(_, context), `eac3AtmosSettings`],
    Eac3Settings: [, (_) => de_Eac3Settings(_, context), `eac3Settings`],
    Mp2Settings: [, (_) => de_Mp2Settings(_, context), `mp2Settings`],
    PassThroughSettings: [, import_smithy_client._json, `passThroughSettings`],
    WavSettings: [, (_) => de_WavSettings(_, context), `wavSettings`]
  });
}, "de_AudioCodecSettings");
var de_AudioDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioDashRoles: [, import_smithy_client._json, `audioDashRoles`],
    AudioNormalizationSettings: [, (_) => de_AudioNormalizationSettings(_, context), `audioNormalizationSettings`],
    AudioSelectorName: [, import_smithy_client.expectString, `audioSelectorName`],
    AudioType: [, import_smithy_client.expectString, `audioType`],
    AudioTypeControl: [, import_smithy_client.expectString, `audioTypeControl`],
    AudioWatermarkingSettings: [, (_) => de_AudioWatermarkSettings(_, context), `audioWatermarkingSettings`],
    CodecSettings: [, (_) => de_AudioCodecSettings(_, context), `codecSettings`],
    DvbDashAccessibility: [, import_smithy_client.expectString, `dvbDashAccessibility`],
    LanguageCode: [, import_smithy_client.expectString, `languageCode`],
    LanguageCodeControl: [, import_smithy_client.expectString, `languageCodeControl`],
    Name: [, import_smithy_client.expectString, `name`],
    RemixSettings: [, (_) => de_RemixSettings(_, context), `remixSettings`],
    StreamName: [, import_smithy_client.expectString, `streamName`]
  });
}, "de_AudioDescription");
var de_AudioDolbyEDecode = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ProgramSelection: [, import_smithy_client.expectString, `programSelection`]
  });
}, "de_AudioDolbyEDecode");
var de_AudioHlsRenditionSelection = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    GroupId: [, import_smithy_client.expectString, `groupId`],
    Name: [, import_smithy_client.expectString, `name`]
  });
}, "de_AudioHlsRenditionSelection");
var de_AudioLanguageSelection = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    LanguageCode: [, import_smithy_client.expectString, `languageCode`],
    LanguageSelectionPolicy: [, import_smithy_client.expectString, `languageSelectionPolicy`]
  });
}, "de_AudioLanguageSelection");
var de_AudioNormalizationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Algorithm: [, import_smithy_client.expectString, `algorithm`],
    AlgorithmControl: [, import_smithy_client.expectString, `algorithmControl`],
    TargetLkfs: [, import_smithy_client.limitedParseDouble, `targetLkfs`]
  });
}, "de_AudioNormalizationSettings");
var de_AudioOnlyHlsSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioGroupId: [, import_smithy_client.expectString, `audioGroupId`],
    AudioOnlyImage: [, (_) => de_InputLocation(_, context), `audioOnlyImage`],
    AudioTrackType: [, import_smithy_client.expectString, `audioTrackType`],
    SegmentType: [, import_smithy_client.expectString, `segmentType`]
  });
}, "de_AudioOnlyHlsSettings");
var de_AudioPidSelection = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Pid: [, import_smithy_client.expectInt32, `pid`]
  });
}, "de_AudioPidSelection");
var de_AudioSelector = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Name: [, import_smithy_client.expectString, `name`],
    SelectorSettings: [, (_) => de_AudioSelectorSettings(_, context), `selectorSettings`]
  });
}, "de_AudioSelector");
var de_AudioSelectorSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioHlsRenditionSelection: [, (_) => de_AudioHlsRenditionSelection(_, context), `audioHlsRenditionSelection`],
    AudioLanguageSelection: [, (_) => de_AudioLanguageSelection(_, context), `audioLanguageSelection`],
    AudioPidSelection: [, (_) => de_AudioPidSelection(_, context), `audioPidSelection`],
    AudioTrackSelection: [, (_) => de_AudioTrackSelection(_, context), `audioTrackSelection`]
  });
}, "de_AudioSelectorSettings");
var de_AudioSilenceFailoverSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioSelectorName: [, import_smithy_client.expectString, `audioSelectorName`],
    AudioSilenceThresholdMsec: [, import_smithy_client.expectInt32, `audioSilenceThresholdMsec`]
  });
}, "de_AudioSilenceFailoverSettings");
var de_AudioTrack = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Track: [, import_smithy_client.expectInt32, `track`]
  });
}, "de_AudioTrack");
var de_AudioTrackSelection = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DolbyEDecode: [, (_) => de_AudioDolbyEDecode(_, context), `dolbyEDecode`],
    Tracks: [, (_) => de___listOfAudioTrack(_, context), `tracks`]
  });
}, "de_AudioTrackSelection");
var de_AudioWatermarkSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    NielsenWatermarksSettings: [, (_) => de_NielsenWatermarksSettings(_, context), `nielsenWatermarksSettings`]
  });
}, "de_AudioWatermarkSettings");
var de_AutomaticInputFailoverSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ErrorClearTimeMsec: [, import_smithy_client.expectInt32, `errorClearTimeMsec`],
    FailoverConditions: [, (_) => de___listOfFailoverCondition(_, context), `failoverConditions`],
    InputPreference: [, import_smithy_client.expectString, `inputPreference`],
    SecondaryInputId: [, import_smithy_client.expectString, `secondaryInputId`]
  });
}, "de_AutomaticInputFailoverSettings");
var de_AvailBlanking = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AvailBlankingImage: [, (_) => de_InputLocation(_, context), `availBlankingImage`],
    State: [, import_smithy_client.expectString, `state`]
  });
}, "de_AvailBlanking");
var de_AvailConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AvailSettings: [, (_) => de_AvailSettings(_, context), `availSettings`]
  });
}, "de_AvailConfiguration");
var de_AvailSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Esam: [, (_) => de_Esam(_, context), `esam`],
    Scte35SpliceInsert: [, (_) => de_Scte35SpliceInsert(_, context), `scte35SpliceInsert`],
    Scte35TimeSignalApos: [, (_) => de_Scte35TimeSignalApos(_, context), `scte35TimeSignalApos`]
  });
}, "de_AvailSettings");
var de_BatchFailedResultModel = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    Code: [, import_smithy_client.expectString, `code`],
    Id: [, import_smithy_client.expectString, `id`],
    Message: [, import_smithy_client.expectString, `message`]
  });
}, "de_BatchFailedResultModel");
var de_BatchScheduleActionCreateResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ScheduleActions: [, (_) => de___listOfScheduleAction(_, context), `scheduleActions`]
  });
}, "de_BatchScheduleActionCreateResult");
var de_BatchScheduleActionDeleteResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ScheduleActions: [, (_) => de___listOfScheduleAction(_, context), `scheduleActions`]
  });
}, "de_BatchScheduleActionDeleteResult");
var de_BatchSuccessfulResultModel = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    Id: [, import_smithy_client.expectString, `id`],
    State: [, import_smithy_client.expectString, `state`]
  });
}, "de_BatchSuccessfulResultModel");
var de_BlackoutSlate = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BlackoutSlateImage: [, (_) => de_InputLocation(_, context), `blackoutSlateImage`],
    NetworkEndBlackout: [, import_smithy_client.expectString, `networkEndBlackout`],
    NetworkEndBlackoutImage: [, (_) => de_InputLocation(_, context), `networkEndBlackoutImage`],
    NetworkId: [, import_smithy_client.expectString, `networkId`],
    State: [, import_smithy_client.expectString, `state`]
  });
}, "de_BlackoutSlate");
var de_BurnInDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Alignment: [, import_smithy_client.expectString, `alignment`],
    BackgroundColor: [, import_smithy_client.expectString, `backgroundColor`],
    BackgroundOpacity: [, import_smithy_client.expectInt32, `backgroundOpacity`],
    Font: [, (_) => de_InputLocation(_, context), `font`],
    FontColor: [, import_smithy_client.expectString, `fontColor`],
    FontOpacity: [, import_smithy_client.expectInt32, `fontOpacity`],
    FontResolution: [, import_smithy_client.expectInt32, `fontResolution`],
    FontSize: [, import_smithy_client.expectString, `fontSize`],
    OutlineColor: [, import_smithy_client.expectString, `outlineColor`],
    OutlineSize: [, import_smithy_client.expectInt32, `outlineSize`],
    ShadowColor: [, import_smithy_client.expectString, `shadowColor`],
    ShadowOpacity: [, import_smithy_client.expectInt32, `shadowOpacity`],
    ShadowXOffset: [, import_smithy_client.expectInt32, `shadowXOffset`],
    ShadowYOffset: [, import_smithy_client.expectInt32, `shadowYOffset`],
    TeletextGridControl: [, import_smithy_client.expectString, `teletextGridControl`],
    XPosition: [, import_smithy_client.expectInt32, `xPosition`],
    YPosition: [, import_smithy_client.expectInt32, `yPosition`]
  });
}, "de_BurnInDestinationSettings");
var de_CaptionDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Accessibility: [, import_smithy_client.expectString, `accessibility`],
    CaptionDashRoles: [, import_smithy_client._json, `captionDashRoles`],
    CaptionSelectorName: [, import_smithy_client.expectString, `captionSelectorName`],
    DestinationSettings: [, (_) => de_CaptionDestinationSettings(_, context), `destinationSettings`],
    DvbDashAccessibility: [, import_smithy_client.expectString, `dvbDashAccessibility`],
    LanguageCode: [, import_smithy_client.expectString, `languageCode`],
    LanguageDescription: [, import_smithy_client.expectString, `languageDescription`],
    Name: [, import_smithy_client.expectString, `name`]
  });
}, "de_CaptionDescription");
var de_CaptionDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AribDestinationSettings: [, import_smithy_client._json, `aribDestinationSettings`],
    BurnInDestinationSettings: [, (_) => de_BurnInDestinationSettings(_, context), `burnInDestinationSettings`],
    DvbSubDestinationSettings: [, (_) => de_DvbSubDestinationSettings(_, context), `dvbSubDestinationSettings`],
    EbuTtDDestinationSettings: [, (_) => de_EbuTtDDestinationSettings(_, context), `ebuTtDDestinationSettings`],
    EmbeddedDestinationSettings: [, import_smithy_client._json, `embeddedDestinationSettings`],
    EmbeddedPlusScte20DestinationSettings: [, import_smithy_client._json, `embeddedPlusScte20DestinationSettings`],
    RtmpCaptionInfoDestinationSettings: [, import_smithy_client._json, `rtmpCaptionInfoDestinationSettings`],
    Scte20PlusEmbeddedDestinationSettings: [, import_smithy_client._json, `scte20PlusEmbeddedDestinationSettings`],
    Scte27DestinationSettings: [, import_smithy_client._json, `scte27DestinationSettings`],
    SmpteTtDestinationSettings: [, import_smithy_client._json, `smpteTtDestinationSettings`],
    TeletextDestinationSettings: [, import_smithy_client._json, `teletextDestinationSettings`],
    TtmlDestinationSettings: [, (_) => de_TtmlDestinationSettings(_, context), `ttmlDestinationSettings`],
    WebvttDestinationSettings: [, (_) => de_WebvttDestinationSettings(_, context), `webvttDestinationSettings`]
  });
}, "de_CaptionDestinationSettings");
var de_CaptionLanguageMapping = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CaptionChannel: [, import_smithy_client.expectInt32, `captionChannel`],
    LanguageCode: [, import_smithy_client.expectString, `languageCode`],
    LanguageDescription: [, import_smithy_client.expectString, `languageDescription`]
  });
}, "de_CaptionLanguageMapping");
var de_CaptionRectangle = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Height: [, import_smithy_client.limitedParseDouble, `height`],
    LeftOffset: [, import_smithy_client.limitedParseDouble, `leftOffset`],
    TopOffset: [, import_smithy_client.limitedParseDouble, `topOffset`],
    Width: [, import_smithy_client.limitedParseDouble, `width`]
  });
}, "de_CaptionRectangle");
var de_CaptionSelector = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    LanguageCode: [, import_smithy_client.expectString, `languageCode`],
    Name: [, import_smithy_client.expectString, `name`],
    SelectorSettings: [, (_) => de_CaptionSelectorSettings(_, context), `selectorSettings`]
  });
}, "de_CaptionSelector");
var de_CaptionSelectorSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AncillarySourceSettings: [, (_) => de_AncillarySourceSettings(_, context), `ancillarySourceSettings`],
    AribSourceSettings: [, import_smithy_client._json, `aribSourceSettings`],
    DvbSubSourceSettings: [, (_) => de_DvbSubSourceSettings(_, context), `dvbSubSourceSettings`],
    EmbeddedSourceSettings: [, (_) => de_EmbeddedSourceSettings(_, context), `embeddedSourceSettings`],
    Scte20SourceSettings: [, (_) => de_Scte20SourceSettings(_, context), `scte20SourceSettings`],
    Scte27SourceSettings: [, (_) => de_Scte27SourceSettings(_, context), `scte27SourceSettings`],
    TeletextSourceSettings: [, (_) => de_TeletextSourceSettings(_, context), `teletextSourceSettings`]
  });
}, "de_CaptionSelectorSettings");
var de_CdiInputSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Resolution: [, import_smithy_client.expectString, `resolution`]
  });
}, "de_CdiInputSpecification");
var de_Channel = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
    ChannelClass: [, import_smithy_client.expectString, `channelClass`],
    Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
    EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
    EncoderSettings: [, (_) => de_EncoderSettings(_, context), `encoderSettings`],
    Id: [, import_smithy_client.expectString, `id`],
    InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
    InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
    LogLevel: [, import_smithy_client.expectString, `logLevel`],
    Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
    Name: [, import_smithy_client.expectString, `name`],
    PipelineDetails: [, (_) => de___listOfPipelineDetail(_, context), `pipelineDetails`],
    PipelinesRunningCount: [, import_smithy_client.expectInt32, `pipelinesRunningCount`],
    RoleArn: [, import_smithy_client.expectString, `roleArn`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`]
  });
}, "de_Channel");
var de_ChannelEgressEndpoint = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    SourceIp: [, import_smithy_client.expectString, `sourceIp`]
  });
}, "de_ChannelEgressEndpoint");
var de_ChannelSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CdiInputSpecification: [, (_) => de_CdiInputSpecification(_, context), `cdiInputSpecification`],
    ChannelClass: [, import_smithy_client.expectString, `channelClass`],
    Destinations: [, (_) => de___listOfOutputDestination(_, context), `destinations`],
    EgressEndpoints: [, (_) => de___listOfChannelEgressEndpoint(_, context), `egressEndpoints`],
    Id: [, import_smithy_client.expectString, `id`],
    InputAttachments: [, (_) => de___listOfInputAttachment(_, context), `inputAttachments`],
    InputSpecification: [, (_) => de_InputSpecification(_, context), `inputSpecification`],
    LogLevel: [, import_smithy_client.expectString, `logLevel`],
    Maintenance: [, (_) => de_MaintenanceStatus(_, context), `maintenance`],
    Name: [, import_smithy_client.expectString, `name`],
    PipelinesRunningCount: [, import_smithy_client.expectInt32, `pipelinesRunningCount`],
    RoleArn: [, import_smithy_client.expectString, `roleArn`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    Vpc: [, (_) => de_VpcOutputSettingsDescription(_, context), `vpc`]
  });
}, "de_ChannelSummary");
var de_CloudWatchAlarmTemplateGroupSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    Id: [, import_smithy_client.expectString, `id`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Tags: [, import_smithy_client._json, `tags`],
    TemplateCount: [, import_smithy_client.expectInt32, `templateCount`]
  });
}, "de_CloudWatchAlarmTemplateGroupSummary");
var de_CloudWatchAlarmTemplateSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    ComparisonOperator: [, import_smithy_client.expectString, `comparisonOperator`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    DatapointsToAlarm: [, import_smithy_client.expectInt32, `datapointsToAlarm`],
    Description: [, import_smithy_client.expectString, `description`],
    EvaluationPeriods: [, import_smithy_client.expectInt32, `evaluationPeriods`],
    GroupId: [, import_smithy_client.expectString, `groupId`],
    Id: [, import_smithy_client.expectString, `id`],
    MetricName: [, import_smithy_client.expectString, `metricName`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Period: [, import_smithy_client.expectInt32, `period`],
    Statistic: [, import_smithy_client.expectString, `statistic`],
    Tags: [, import_smithy_client._json, `tags`],
    TargetResourceType: [, import_smithy_client.expectString, `targetResourceType`],
    Threshold: [, import_smithy_client.limitedParseDouble, `threshold`],
    TreatMissingData: [, import_smithy_client.expectString, `treatMissingData`]
  });
}, "de_CloudWatchAlarmTemplateSummary");
var de_CmafIngestGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
    NielsenId3Behavior: [, import_smithy_client.expectString, `nielsenId3Behavior`],
    Scte35Type: [, import_smithy_client.expectString, `scte35Type`],
    SegmentLength: [, import_smithy_client.expectInt32, `segmentLength`],
    SegmentLengthUnits: [, import_smithy_client.expectString, `segmentLengthUnits`],
    SendDelayMs: [, import_smithy_client.expectInt32, `sendDelayMs`]
  });
}, "de_CmafIngestGroupSettings");
var de_CmafIngestOutputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    NameModifier: [, import_smithy_client.expectString, `nameModifier`]
  });
}, "de_CmafIngestOutputSettings");
var de_ColorCorrection = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InputColorSpace: [, import_smithy_client.expectString, `inputColorSpace`],
    OutputColorSpace: [, import_smithy_client.expectString, `outputColorSpace`],
    Uri: [, import_smithy_client.expectString, `uri`]
  });
}, "de_ColorCorrection");
var de_ColorCorrectionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    GlobalColorCorrections: [, (_) => de___listOfColorCorrection(_, context), `globalColorCorrections`]
  });
}, "de_ColorCorrectionSettings");
var de_DvbNitSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    NetworkId: [, import_smithy_client.expectInt32, `networkId`],
    NetworkName: [, import_smithy_client.expectString, `networkName`],
    RepInterval: [, import_smithy_client.expectInt32, `repInterval`]
  });
}, "de_DvbNitSettings");
var de_DvbSdtSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    OutputSdt: [, import_smithy_client.expectString, `outputSdt`],
    RepInterval: [, import_smithy_client.expectInt32, `repInterval`],
    ServiceName: [, import_smithy_client.expectString, `serviceName`],
    ServiceProviderName: [, import_smithy_client.expectString, `serviceProviderName`]
  });
}, "de_DvbSdtSettings");
var de_DvbSubDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Alignment: [, import_smithy_client.expectString, `alignment`],
    BackgroundColor: [, import_smithy_client.expectString, `backgroundColor`],
    BackgroundOpacity: [, import_smithy_client.expectInt32, `backgroundOpacity`],
    Font: [, (_) => de_InputLocation(_, context), `font`],
    FontColor: [, import_smithy_client.expectString, `fontColor`],
    FontOpacity: [, import_smithy_client.expectInt32, `fontOpacity`],
    FontResolution: [, import_smithy_client.expectInt32, `fontResolution`],
    FontSize: [, import_smithy_client.expectString, `fontSize`],
    OutlineColor: [, import_smithy_client.expectString, `outlineColor`],
    OutlineSize: [, import_smithy_client.expectInt32, `outlineSize`],
    ShadowColor: [, import_smithy_client.expectString, `shadowColor`],
    ShadowOpacity: [, import_smithy_client.expectInt32, `shadowOpacity`],
    ShadowXOffset: [, import_smithy_client.expectInt32, `shadowXOffset`],
    ShadowYOffset: [, import_smithy_client.expectInt32, `shadowYOffset`],
    TeletextGridControl: [, import_smithy_client.expectString, `teletextGridControl`],
    XPosition: [, import_smithy_client.expectInt32, `xPosition`],
    YPosition: [, import_smithy_client.expectInt32, `yPosition`]
  });
}, "de_DvbSubDestinationSettings");
var de_DvbSubSourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    OcrLanguage: [, import_smithy_client.expectString, `ocrLanguage`],
    Pid: [, import_smithy_client.expectInt32, `pid`]
  });
}, "de_DvbSubSourceSettings");
var de_DvbTdtSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    RepInterval: [, import_smithy_client.expectInt32, `repInterval`]
  });
}, "de_DvbTdtSettings");
var de_Eac3AtmosSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Bitrate: [, import_smithy_client.limitedParseDouble, `bitrate`],
    CodingMode: [, import_smithy_client.expectString, `codingMode`],
    Dialnorm: [, import_smithy_client.expectInt32, `dialnorm`],
    DrcLine: [, import_smithy_client.expectString, `drcLine`],
    DrcRf: [, import_smithy_client.expectString, `drcRf`],
    HeightTrim: [, import_smithy_client.limitedParseDouble, `heightTrim`],
    SurroundTrim: [, import_smithy_client.limitedParseDouble, `surroundTrim`]
  });
}, "de_Eac3AtmosSettings");
var de_Eac3Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AttenuationControl: [, import_smithy_client.expectString, `attenuationControl`],
    Bitrate: [, import_smithy_client.limitedParseDouble, `bitrate`],
    BitstreamMode: [, import_smithy_client.expectString, `bitstreamMode`],
    CodingMode: [, import_smithy_client.expectString, `codingMode`],
    DcFilter: [, import_smithy_client.expectString, `dcFilter`],
    Dialnorm: [, import_smithy_client.expectInt32, `dialnorm`],
    DrcLine: [, import_smithy_client.expectString, `drcLine`],
    DrcRf: [, import_smithy_client.expectString, `drcRf`],
    LfeControl: [, import_smithy_client.expectString, `lfeControl`],
    LfeFilter: [, import_smithy_client.expectString, `lfeFilter`],
    LoRoCenterMixLevel: [, import_smithy_client.limitedParseDouble, `loRoCenterMixLevel`],
    LoRoSurroundMixLevel: [, import_smithy_client.limitedParseDouble, `loRoSurroundMixLevel`],
    LtRtCenterMixLevel: [, import_smithy_client.limitedParseDouble, `ltRtCenterMixLevel`],
    LtRtSurroundMixLevel: [, import_smithy_client.limitedParseDouble, `ltRtSurroundMixLevel`],
    MetadataControl: [, import_smithy_client.expectString, `metadataControl`],
    PassthroughControl: [, import_smithy_client.expectString, `passthroughControl`],
    PhaseControl: [, import_smithy_client.expectString, `phaseControl`],
    StereoDownmix: [, import_smithy_client.expectString, `stereoDownmix`],
    SurroundExMode: [, import_smithy_client.expectString, `surroundExMode`],
    SurroundMode: [, import_smithy_client.expectString, `surroundMode`]
  });
}, "de_Eac3Settings");
var de_EbuTtDDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CopyrightHolder: [, import_smithy_client.expectString, `copyrightHolder`],
    FillLineGap: [, import_smithy_client.expectString, `fillLineGap`],
    FontFamily: [, import_smithy_client.expectString, `fontFamily`],
    StyleControl: [, import_smithy_client.expectString, `styleControl`]
  });
}, "de_EbuTtDDestinationSettings");
var de_EmbeddedSourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Convert608To708: [, import_smithy_client.expectString, `convert608To708`],
    Scte20Detection: [, import_smithy_client.expectString, `scte20Detection`],
    Source608ChannelNumber: [, import_smithy_client.expectInt32, `source608ChannelNumber`],
    Source608TrackNumber: [, import_smithy_client.expectInt32, `source608TrackNumber`]
  });
}, "de_EmbeddedSourceSettings");
var de_EncoderSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioDescriptions: [, (_) => de___listOfAudioDescription(_, context), `audioDescriptions`],
    AvailBlanking: [, (_) => de_AvailBlanking(_, context), `availBlanking`],
    AvailConfiguration: [, (_) => de_AvailConfiguration(_, context), `availConfiguration`],
    BlackoutSlate: [, (_) => de_BlackoutSlate(_, context), `blackoutSlate`],
    CaptionDescriptions: [, (_) => de___listOfCaptionDescription(_, context), `captionDescriptions`],
    ColorCorrectionSettings: [, (_) => de_ColorCorrectionSettings(_, context), `colorCorrectionSettings`],
    FeatureActivations: [, (_) => de_FeatureActivations(_, context), `featureActivations`],
    GlobalConfiguration: [, (_) => de_GlobalConfiguration(_, context), `globalConfiguration`],
    MotionGraphicsConfiguration: [
      ,
      (_) => de_MotionGraphicsConfiguration(_, context),
      `motionGraphicsConfiguration`
    ],
    NielsenConfiguration: [, (_) => de_NielsenConfiguration(_, context), `nielsenConfiguration`],
    OutputGroups: [, (_) => de___listOfOutputGroup(_, context), `outputGroups`],
    ThumbnailConfiguration: [, (_) => de_ThumbnailConfiguration(_, context), `thumbnailConfiguration`],
    TimecodeConfig: [, (_) => de_TimecodeConfig(_, context), `timecodeConfig`],
    VideoDescriptions: [, (_) => de___listOfVideoDescription(_, context), `videoDescriptions`]
  });
}, "de_EncoderSettings");
var de_EpochLockingSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CustomEpoch: [, import_smithy_client.expectString, `customEpoch`],
    JamSyncTime: [, import_smithy_client.expectString, `jamSyncTime`]
  });
}, "de_EpochLockingSettings");
var de_Esam = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AcquisitionPointId: [, import_smithy_client.expectString, `acquisitionPointId`],
    AdAvailOffset: [, import_smithy_client.expectInt32, `adAvailOffset`],
    PasswordParam: [, import_smithy_client.expectString, `passwordParam`],
    PoisEndpoint: [, import_smithy_client.expectString, `poisEndpoint`],
    Username: [, import_smithy_client.expectString, `username`],
    ZoneIdentity: [, import_smithy_client.expectString, `zoneIdentity`]
  });
}, "de_Esam");
var de_EventBridgeRuleTemplateGroupSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    Id: [, import_smithy_client.expectString, `id`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Tags: [, import_smithy_client._json, `tags`],
    TemplateCount: [, import_smithy_client.expectInt32, `templateCount`]
  });
}, "de_EventBridgeRuleTemplateGroupSummary");
var de_EventBridgeRuleTemplateSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    EventTargetCount: [, import_smithy_client.expectInt32, `eventTargetCount`],
    EventType: [, import_smithy_client.expectString, `eventType`],
    GroupId: [, import_smithy_client.expectString, `groupId`],
    Id: [, import_smithy_client.expectString, `id`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    Name: [, import_smithy_client.expectString, `name`],
    Tags: [, import_smithy_client._json, `tags`]
  });
}, "de_EventBridgeRuleTemplateSummary");
var de_EventBridgeRuleTemplateTarget = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`]
  });
}, "de_EventBridgeRuleTemplateTarget");
var de_FailedMediaResourceMap = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_MediaResource(value, context);
    return acc;
  }, {});
}, "de_FailedMediaResourceMap");
var de_FailoverCondition = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FailoverConditionSettings: [, (_) => de_FailoverConditionSettings(_, context), `failoverConditionSettings`]
  });
}, "de_FailoverCondition");
var de_FailoverConditionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioSilenceSettings: [, (_) => de_AudioSilenceFailoverSettings(_, context), `audioSilenceSettings`],
    InputLossSettings: [, (_) => de_InputLossFailoverSettings(_, context), `inputLossSettings`],
    VideoBlackSettings: [, (_) => de_VideoBlackFailoverSettings(_, context), `videoBlackSettings`]
  });
}, "de_FailoverConditionSettings");
var de_FeatureActivations = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InputPrepareScheduleActions: [, import_smithy_client.expectString, `inputPrepareScheduleActions`],
    OutputStaticImageOverlayScheduleActions: [, import_smithy_client.expectString, `outputStaticImageOverlayScheduleActions`]
  });
}, "de_FeatureActivations");
var de_FecOutputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ColumnDepth: [, import_smithy_client.expectInt32, `columnDepth`],
    IncludeFec: [, import_smithy_client.expectString, `includeFec`],
    RowLength: [, import_smithy_client.expectInt32, `rowLength`]
  });
}, "de_FecOutputSettings");
var de_FixedModeScheduleActionStartSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Time: [, import_smithy_client.expectString, `time`]
  });
}, "de_FixedModeScheduleActionStartSettings");
var de_Fmp4HlsSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioRenditionSets: [, import_smithy_client.expectString, `audioRenditionSets`],
    NielsenId3Behavior: [, import_smithy_client.expectString, `nielsenId3Behavior`],
    TimedMetadataBehavior: [, import_smithy_client.expectString, `timedMetadataBehavior`]
  });
}, "de_Fmp4HlsSettings");
var de_FollowModeScheduleActionStartSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FollowPoint: [, import_smithy_client.expectString, `followPoint`],
    ReferenceActionName: [, import_smithy_client.expectString, `referenceActionName`]
  });
}, "de_FollowModeScheduleActionStartSettings");
var de_FrameCaptureCdnSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FrameCaptureS3Settings: [, (_) => de_FrameCaptureS3Settings(_, context), `frameCaptureS3Settings`]
  });
}, "de_FrameCaptureCdnSettings");
var de_FrameCaptureGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
    FrameCaptureCdnSettings: [, (_) => de_FrameCaptureCdnSettings(_, context), `frameCaptureCdnSettings`]
  });
}, "de_FrameCaptureGroupSettings");
var de_FrameCaptureOutputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    NameModifier: [, import_smithy_client.expectString, `nameModifier`]
  });
}, "de_FrameCaptureOutputSettings");
var de_FrameCaptureS3Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CannedAcl: [, import_smithy_client.expectString, `cannedAcl`]
  });
}, "de_FrameCaptureS3Settings");
var de_FrameCaptureSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CaptureInterval: [, import_smithy_client.expectInt32, `captureInterval`],
    CaptureIntervalUnits: [, import_smithy_client.expectString, `captureIntervalUnits`],
    TimecodeBurninSettings: [, (_) => de_TimecodeBurninSettings(_, context), `timecodeBurninSettings`]
  });
}, "de_FrameCaptureSettings");
var de_GlobalConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InitialAudioGain: [, import_smithy_client.expectInt32, `initialAudioGain`],
    InputEndAction: [, import_smithy_client.expectString, `inputEndAction`],
    InputLossBehavior: [, (_) => de_InputLossBehavior(_, context), `inputLossBehavior`],
    OutputLockingMode: [, import_smithy_client.expectString, `outputLockingMode`],
    OutputLockingSettings: [, (_) => de_OutputLockingSettings(_, context), `outputLockingSettings`],
    OutputTimingSource: [, import_smithy_client.expectString, `outputTimingSource`],
    SupportLowFramerateInputs: [, import_smithy_client.expectString, `supportLowFramerateInputs`]
  });
}, "de_GlobalConfiguration");
var de_H264ColorSpaceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ColorSpacePassthroughSettings: [, import_smithy_client._json, `colorSpacePassthroughSettings`],
    Rec601Settings: [, import_smithy_client._json, `rec601Settings`],
    Rec709Settings: [, import_smithy_client._json, `rec709Settings`]
  });
}, "de_H264ColorSpaceSettings");
var de_H264FilterSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    TemporalFilterSettings: [, (_) => de_TemporalFilterSettings(_, context), `temporalFilterSettings`]
  });
}, "de_H264FilterSettings");
var de_H264Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdaptiveQuantization: [, import_smithy_client.expectString, `adaptiveQuantization`],
    AfdSignaling: [, import_smithy_client.expectString, `afdSignaling`],
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    BufFillPct: [, import_smithy_client.expectInt32, `bufFillPct`],
    BufSize: [, import_smithy_client.expectInt32, `bufSize`],
    ColorMetadata: [, import_smithy_client.expectString, `colorMetadata`],
    ColorSpaceSettings: [, (_) => de_H264ColorSpaceSettings(_, context), `colorSpaceSettings`],
    EntropyEncoding: [, import_smithy_client.expectString, `entropyEncoding`],
    FilterSettings: [, (_) => de_H264FilterSettings(_, context), `filterSettings`],
    FixedAfd: [, import_smithy_client.expectString, `fixedAfd`],
    FlickerAq: [, import_smithy_client.expectString, `flickerAq`],
    ForceFieldPictures: [, import_smithy_client.expectString, `forceFieldPictures`],
    FramerateControl: [, import_smithy_client.expectString, `framerateControl`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    GopBReference: [, import_smithy_client.expectString, `gopBReference`],
    GopClosedCadence: [, import_smithy_client.expectInt32, `gopClosedCadence`],
    GopNumBFrames: [, import_smithy_client.expectInt32, `gopNumBFrames`],
    GopSize: [, import_smithy_client.limitedParseDouble, `gopSize`],
    GopSizeUnits: [, import_smithy_client.expectString, `gopSizeUnits`],
    Level: [, import_smithy_client.expectString, `level`],
    LookAheadRateControl: [, import_smithy_client.expectString, `lookAheadRateControl`],
    MaxBitrate: [, import_smithy_client.expectInt32, `maxBitrate`],
    MinIInterval: [, import_smithy_client.expectInt32, `minIInterval`],
    NumRefFrames: [, import_smithy_client.expectInt32, `numRefFrames`],
    ParControl: [, import_smithy_client.expectString, `parControl`],
    ParDenominator: [, import_smithy_client.expectInt32, `parDenominator`],
    ParNumerator: [, import_smithy_client.expectInt32, `parNumerator`],
    Profile: [, import_smithy_client.expectString, `profile`],
    QualityLevel: [, import_smithy_client.expectString, `qualityLevel`],
    QvbrQualityLevel: [, import_smithy_client.expectInt32, `qvbrQualityLevel`],
    RateControlMode: [, import_smithy_client.expectString, `rateControlMode`],
    ScanType: [, import_smithy_client.expectString, `scanType`],
    SceneChangeDetect: [, import_smithy_client.expectString, `sceneChangeDetect`],
    Slices: [, import_smithy_client.expectInt32, `slices`],
    Softness: [, import_smithy_client.expectInt32, `softness`],
    SpatialAq: [, import_smithy_client.expectString, `spatialAq`],
    SubgopLength: [, import_smithy_client.expectString, `subgopLength`],
    Syntax: [, import_smithy_client.expectString, `syntax`],
    TemporalAq: [, import_smithy_client.expectString, `temporalAq`],
    TimecodeBurninSettings: [, (_) => de_TimecodeBurninSettings(_, context), `timecodeBurninSettings`],
    TimecodeInsertion: [, import_smithy_client.expectString, `timecodeInsertion`]
  });
}, "de_H264Settings");
var de_H265ColorSpaceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ColorSpacePassthroughSettings: [, import_smithy_client._json, `colorSpacePassthroughSettings`],
    DolbyVision81Settings: [, import_smithy_client._json, `dolbyVision81Settings`],
    Hdr10Settings: [, (_) => de_Hdr10Settings(_, context), `hdr10Settings`],
    Rec601Settings: [, import_smithy_client._json, `rec601Settings`],
    Rec709Settings: [, import_smithy_client._json, `rec709Settings`]
  });
}, "de_H265ColorSpaceSettings");
var de_H265FilterSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    TemporalFilterSettings: [, (_) => de_TemporalFilterSettings(_, context), `temporalFilterSettings`]
  });
}, "de_H265FilterSettings");
var de_H265Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdaptiveQuantization: [, import_smithy_client.expectString, `adaptiveQuantization`],
    AfdSignaling: [, import_smithy_client.expectString, `afdSignaling`],
    AlternativeTransferFunction: [, import_smithy_client.expectString, `alternativeTransferFunction`],
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    BufSize: [, import_smithy_client.expectInt32, `bufSize`],
    ColorMetadata: [, import_smithy_client.expectString, `colorMetadata`],
    ColorSpaceSettings: [, (_) => de_H265ColorSpaceSettings(_, context), `colorSpaceSettings`],
    FilterSettings: [, (_) => de_H265FilterSettings(_, context), `filterSettings`],
    FixedAfd: [, import_smithy_client.expectString, `fixedAfd`],
    FlickerAq: [, import_smithy_client.expectString, `flickerAq`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    GopClosedCadence: [, import_smithy_client.expectInt32, `gopClosedCadence`],
    GopSize: [, import_smithy_client.limitedParseDouble, `gopSize`],
    GopSizeUnits: [, import_smithy_client.expectString, `gopSizeUnits`],
    Level: [, import_smithy_client.expectString, `level`],
    LookAheadRateControl: [, import_smithy_client.expectString, `lookAheadRateControl`],
    MaxBitrate: [, import_smithy_client.expectInt32, `maxBitrate`],
    MinIInterval: [, import_smithy_client.expectInt32, `minIInterval`],
    MvOverPictureBoundaries: [, import_smithy_client.expectString, `mvOverPictureBoundaries`],
    MvTemporalPredictor: [, import_smithy_client.expectString, `mvTemporalPredictor`],
    ParDenominator: [, import_smithy_client.expectInt32, `parDenominator`],
    ParNumerator: [, import_smithy_client.expectInt32, `parNumerator`],
    Profile: [, import_smithy_client.expectString, `profile`],
    QvbrQualityLevel: [, import_smithy_client.expectInt32, `qvbrQualityLevel`],
    RateControlMode: [, import_smithy_client.expectString, `rateControlMode`],
    ScanType: [, import_smithy_client.expectString, `scanType`],
    SceneChangeDetect: [, import_smithy_client.expectString, `sceneChangeDetect`],
    Slices: [, import_smithy_client.expectInt32, `slices`],
    Tier: [, import_smithy_client.expectString, `tier`],
    TileHeight: [, import_smithy_client.expectInt32, `tileHeight`],
    TilePadding: [, import_smithy_client.expectString, `tilePadding`],
    TileWidth: [, import_smithy_client.expectInt32, `tileWidth`],
    TimecodeBurninSettings: [, (_) => de_TimecodeBurninSettings(_, context), `timecodeBurninSettings`],
    TimecodeInsertion: [, import_smithy_client.expectString, `timecodeInsertion`],
    TreeblockSize: [, import_smithy_client.expectString, `treeblockSize`]
  });
}, "de_H265Settings");
var de_Hdr10Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MaxCll: [, import_smithy_client.expectInt32, `maxCll`],
    MaxFall: [, import_smithy_client.expectInt32, `maxFall`]
  });
}, "de_Hdr10Settings");
var de_HlsAkamaiSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConnectionRetryInterval: [, import_smithy_client.expectInt32, `connectionRetryInterval`],
    FilecacheDuration: [, import_smithy_client.expectInt32, `filecacheDuration`],
    HttpTransferMode: [, import_smithy_client.expectString, `httpTransferMode`],
    NumRetries: [, import_smithy_client.expectInt32, `numRetries`],
    RestartDelay: [, import_smithy_client.expectInt32, `restartDelay`],
    Salt: [, import_smithy_client.expectString, `salt`],
    Token: [, import_smithy_client.expectString, `token`]
  });
}, "de_HlsAkamaiSettings");
var de_HlsBasicPutSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConnectionRetryInterval: [, import_smithy_client.expectInt32, `connectionRetryInterval`],
    FilecacheDuration: [, import_smithy_client.expectInt32, `filecacheDuration`],
    NumRetries: [, import_smithy_client.expectInt32, `numRetries`],
    RestartDelay: [, import_smithy_client.expectInt32, `restartDelay`]
  });
}, "de_HlsBasicPutSettings");
var de_HlsCdnSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    HlsAkamaiSettings: [, (_) => de_HlsAkamaiSettings(_, context), `hlsAkamaiSettings`],
    HlsBasicPutSettings: [, (_) => de_HlsBasicPutSettings(_, context), `hlsBasicPutSettings`],
    HlsMediaStoreSettings: [, (_) => de_HlsMediaStoreSettings(_, context), `hlsMediaStoreSettings`],
    HlsS3Settings: [, (_) => de_HlsS3Settings(_, context), `hlsS3Settings`],
    HlsWebdavSettings: [, (_) => de_HlsWebdavSettings(_, context), `hlsWebdavSettings`]
  });
}, "de_HlsCdnSettings");
var de_HlsGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdMarkers: [, import_smithy_client._json, `adMarkers`],
    BaseUrlContent: [, import_smithy_client.expectString, `baseUrlContent`],
    BaseUrlContent1: [, import_smithy_client.expectString, `baseUrlContent1`],
    BaseUrlManifest: [, import_smithy_client.expectString, `baseUrlManifest`],
    BaseUrlManifest1: [, import_smithy_client.expectString, `baseUrlManifest1`],
    CaptionLanguageMappings: [, (_) => de___listOfCaptionLanguageMapping(_, context), `captionLanguageMappings`],
    CaptionLanguageSetting: [, import_smithy_client.expectString, `captionLanguageSetting`],
    ClientCache: [, import_smithy_client.expectString, `clientCache`],
    CodecSpecification: [, import_smithy_client.expectString, `codecSpecification`],
    ConstantIv: [, import_smithy_client.expectString, `constantIv`],
    Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
    DirectoryStructure: [, import_smithy_client.expectString, `directoryStructure`],
    DiscontinuityTags: [, import_smithy_client.expectString, `discontinuityTags`],
    EncryptionType: [, import_smithy_client.expectString, `encryptionType`],
    HlsCdnSettings: [, (_) => de_HlsCdnSettings(_, context), `hlsCdnSettings`],
    HlsId3SegmentTagging: [, import_smithy_client.expectString, `hlsId3SegmentTagging`],
    IFrameOnlyPlaylists: [, import_smithy_client.expectString, `iFrameOnlyPlaylists`],
    IncompleteSegmentBehavior: [, import_smithy_client.expectString, `incompleteSegmentBehavior`],
    IndexNSegments: [, import_smithy_client.expectInt32, `indexNSegments`],
    InputLossAction: [, import_smithy_client.expectString, `inputLossAction`],
    IvInManifest: [, import_smithy_client.expectString, `ivInManifest`],
    IvSource: [, import_smithy_client.expectString, `ivSource`],
    KeepSegments: [, import_smithy_client.expectInt32, `keepSegments`],
    KeyFormat: [, import_smithy_client.expectString, `keyFormat`],
    KeyFormatVersions: [, import_smithy_client.expectString, `keyFormatVersions`],
    KeyProviderSettings: [, (_) => de_KeyProviderSettings(_, context), `keyProviderSettings`],
    ManifestCompression: [, import_smithy_client.expectString, `manifestCompression`],
    ManifestDurationFormat: [, import_smithy_client.expectString, `manifestDurationFormat`],
    MinSegmentLength: [, import_smithy_client.expectInt32, `minSegmentLength`],
    Mode: [, import_smithy_client.expectString, `mode`],
    OutputSelection: [, import_smithy_client.expectString, `outputSelection`],
    ProgramDateTime: [, import_smithy_client.expectString, `programDateTime`],
    ProgramDateTimeClock: [, import_smithy_client.expectString, `programDateTimeClock`],
    ProgramDateTimePeriod: [, import_smithy_client.expectInt32, `programDateTimePeriod`],
    RedundantManifest: [, import_smithy_client.expectString, `redundantManifest`],
    SegmentLength: [, import_smithy_client.expectInt32, `segmentLength`],
    SegmentationMode: [, import_smithy_client.expectString, `segmentationMode`],
    SegmentsPerSubdirectory: [, import_smithy_client.expectInt32, `segmentsPerSubdirectory`],
    StreamInfResolution: [, import_smithy_client.expectString, `streamInfResolution`],
    TimedMetadataId3Frame: [, import_smithy_client.expectString, `timedMetadataId3Frame`],
    TimedMetadataId3Period: [, import_smithy_client.expectInt32, `timedMetadataId3Period`],
    TimestampDeltaMilliseconds: [, import_smithy_client.expectInt32, `timestampDeltaMilliseconds`],
    TsFileMode: [, import_smithy_client.expectString, `tsFileMode`]
  });
}, "de_HlsGroupSettings");
var de_HlsId3SegmentTaggingScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Id3: [, import_smithy_client.expectString, `id3`],
    Tag: [, import_smithy_client.expectString, `tag`]
  });
}, "de_HlsId3SegmentTaggingScheduleActionSettings");
var de_HlsInputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Bandwidth: [, import_smithy_client.expectInt32, `bandwidth`],
    BufferSegments: [, import_smithy_client.expectInt32, `bufferSegments`],
    Retries: [, import_smithy_client.expectInt32, `retries`],
    RetryInterval: [, import_smithy_client.expectInt32, `retryInterval`],
    Scte35Source: [, import_smithy_client.expectString, `scte35Source`]
  });
}, "de_HlsInputSettings");
var de_HlsMediaStoreSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConnectionRetryInterval: [, import_smithy_client.expectInt32, `connectionRetryInterval`],
    FilecacheDuration: [, import_smithy_client.expectInt32, `filecacheDuration`],
    MediaStoreStorageClass: [, import_smithy_client.expectString, `mediaStoreStorageClass`],
    NumRetries: [, import_smithy_client.expectInt32, `numRetries`],
    RestartDelay: [, import_smithy_client.expectInt32, `restartDelay`]
  });
}, "de_HlsMediaStoreSettings");
var de_HlsOutputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    H265PackagingType: [, import_smithy_client.expectString, `h265PackagingType`],
    HlsSettings: [, (_) => de_HlsSettings(_, context), `hlsSettings`],
    NameModifier: [, import_smithy_client.expectString, `nameModifier`],
    SegmentModifier: [, import_smithy_client.expectString, `segmentModifier`]
  });
}, "de_HlsOutputSettings");
var de_HlsS3Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CannedAcl: [, import_smithy_client.expectString, `cannedAcl`]
  });
}, "de_HlsS3Settings");
var de_HlsSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioOnlyHlsSettings: [, (_) => de_AudioOnlyHlsSettings(_, context), `audioOnlyHlsSettings`],
    Fmp4HlsSettings: [, (_) => de_Fmp4HlsSettings(_, context), `fmp4HlsSettings`],
    FrameCaptureHlsSettings: [, import_smithy_client._json, `frameCaptureHlsSettings`],
    StandardHlsSettings: [, (_) => de_StandardHlsSettings(_, context), `standardHlsSettings`]
  });
}, "de_HlsSettings");
var de_HlsTimedMetadataScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Id3: [, import_smithy_client.expectString, `id3`]
  });
}, "de_HlsTimedMetadataScheduleActionSettings");
var de_HlsWebdavSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConnectionRetryInterval: [, import_smithy_client.expectInt32, `connectionRetryInterval`],
    FilecacheDuration: [, import_smithy_client.expectInt32, `filecacheDuration`],
    HttpTransferMode: [, import_smithy_client.expectString, `httpTransferMode`],
    NumRetries: [, import_smithy_client.expectInt32, `numRetries`],
    RestartDelay: [, import_smithy_client.expectInt32, `restartDelay`]
  });
}, "de_HlsWebdavSettings");
var de_Input = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    AttachedChannels: [, import_smithy_client._json, `attachedChannels`],
    Destinations: [, (_) => de___listOfInputDestination(_, context), `destinations`],
    Id: [, import_smithy_client.expectString, `id`],
    InputClass: [, import_smithy_client.expectString, `inputClass`],
    InputDevices: [, (_) => de___listOfInputDeviceSettings(_, context), `inputDevices`],
    InputPartnerIds: [, import_smithy_client._json, `inputPartnerIds`],
    InputSourceType: [, import_smithy_client.expectString, `inputSourceType`],
    MediaConnectFlows: [, (_) => de___listOfMediaConnectFlow(_, context), `mediaConnectFlows`],
    Name: [, import_smithy_client.expectString, `name`],
    RoleArn: [, import_smithy_client.expectString, `roleArn`],
    SecurityGroups: [, import_smithy_client._json, `securityGroups`],
    Sources: [, (_) => de___listOfInputSource(_, context), `sources`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    Type: [, import_smithy_client.expectString, `type`]
  });
}, "de_Input");
var de_InputAttachment = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AutomaticInputFailoverSettings: [
      ,
      (_) => de_AutomaticInputFailoverSettings(_, context),
      `automaticInputFailoverSettings`
    ],
    InputAttachmentName: [, import_smithy_client.expectString, `inputAttachmentName`],
    InputId: [, import_smithy_client.expectString, `inputId`],
    InputSettings: [, (_) => de_InputSettings(_, context), `inputSettings`]
  });
}, "de_InputAttachment");
var de_InputChannelLevel = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Gain: [, import_smithy_client.expectInt32, `gain`],
    InputChannel: [, import_smithy_client.expectInt32, `inputChannel`]
  });
}, "de_InputChannelLevel");
var de_InputClippingSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InputTimecodeSource: [, import_smithy_client.expectString, `inputTimecodeSource`],
    StartTimecode: [, (_) => de_StartTimecode(_, context), `startTimecode`],
    StopTimecode: [, (_) => de_StopTimecode(_, context), `stopTimecode`]
  });
}, "de_InputClippingSettings");
var de_InputDestination = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Ip: [, import_smithy_client.expectString, `ip`],
    Port: [, import_smithy_client.expectString, `port`],
    Url: [, import_smithy_client.expectString, `url`],
    Vpc: [, (_) => de_InputDestinationVpc(_, context), `vpc`]
  });
}, "de_InputDestination");
var de_InputDestinationVpc = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AvailabilityZone: [, import_smithy_client.expectString, `availabilityZone`],
    NetworkInterfaceId: [, import_smithy_client.expectString, `networkInterfaceId`]
  });
}, "de_InputDestinationVpc");
var de_InputDeviceHdSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ActiveInput: [, import_smithy_client.expectString, `activeInput`],
    ConfiguredInput: [, import_smithy_client.expectString, `configuredInput`],
    DeviceState: [, import_smithy_client.expectString, `deviceState`],
    Framerate: [, import_smithy_client.limitedParseDouble, `framerate`],
    Height: [, import_smithy_client.expectInt32, `height`],
    LatencyMs: [, import_smithy_client.expectInt32, `latencyMs`],
    MaxBitrate: [, import_smithy_client.expectInt32, `maxBitrate`],
    ScanType: [, import_smithy_client.expectString, `scanType`],
    Width: [, import_smithy_client.expectInt32, `width`]
  });
}, "de_InputDeviceHdSettings");
var de_InputDeviceMediaConnectSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    RoleArn: [, import_smithy_client.expectString, `roleArn`],
    SecretArn: [, import_smithy_client.expectString, `secretArn`],
    SourceName: [, import_smithy_client.expectString, `sourceName`]
  });
}, "de_InputDeviceMediaConnectSettings");
var de_InputDeviceNetworkSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DnsAddresses: [, import_smithy_client._json, `dnsAddresses`],
    Gateway: [, import_smithy_client.expectString, `gateway`],
    IpAddress: [, import_smithy_client.expectString, `ipAddress`],
    IpScheme: [, import_smithy_client.expectString, `ipScheme`],
    SubnetMask: [, import_smithy_client.expectString, `subnetMask`]
  });
}, "de_InputDeviceNetworkSettings");
var de_InputDeviceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Id: [, import_smithy_client.expectString, `id`]
  });
}, "de_InputDeviceSettings");
var de_InputDeviceSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    AvailabilityZone: [, import_smithy_client.expectString, `availabilityZone`],
    ConnectionState: [, import_smithy_client.expectString, `connectionState`],
    DeviceSettingsSyncState: [, import_smithy_client.expectString, `deviceSettingsSyncState`],
    DeviceUpdateStatus: [, import_smithy_client.expectString, `deviceUpdateStatus`],
    HdDeviceSettings: [, (_) => de_InputDeviceHdSettings(_, context), `hdDeviceSettings`],
    Id: [, import_smithy_client.expectString, `id`],
    MacAddress: [, import_smithy_client.expectString, `macAddress`],
    MedialiveInputArns: [, import_smithy_client._json, `medialiveInputArns`],
    Name: [, import_smithy_client.expectString, `name`],
    NetworkSettings: [, (_) => de_InputDeviceNetworkSettings(_, context), `networkSettings`],
    OutputType: [, import_smithy_client.expectString, `outputType`],
    SerialNumber: [, import_smithy_client.expectString, `serialNumber`],
    Tags: [, import_smithy_client._json, `tags`],
    Type: [, import_smithy_client.expectString, `type`],
    UhdDeviceSettings: [, (_) => de_InputDeviceUhdSettings(_, context), `uhdDeviceSettings`]
  });
}, "de_InputDeviceSummary");
var de_InputDeviceUhdAudioChannelPairConfig = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Id: [, import_smithy_client.expectInt32, `id`],
    Profile: [, import_smithy_client.expectString, `profile`]
  });
}, "de_InputDeviceUhdAudioChannelPairConfig");
var de_InputDeviceUhdSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ActiveInput: [, import_smithy_client.expectString, `activeInput`],
    AudioChannelPairs: [, (_) => de___listOfInputDeviceUhdAudioChannelPairConfig(_, context), `audioChannelPairs`],
    Codec: [, import_smithy_client.expectString, `codec`],
    ConfiguredInput: [, import_smithy_client.expectString, `configuredInput`],
    DeviceState: [, import_smithy_client.expectString, `deviceState`],
    Framerate: [, import_smithy_client.limitedParseDouble, `framerate`],
    Height: [, import_smithy_client.expectInt32, `height`],
    LatencyMs: [, import_smithy_client.expectInt32, `latencyMs`],
    MaxBitrate: [, import_smithy_client.expectInt32, `maxBitrate`],
    MediaconnectSettings: [, (_) => de_InputDeviceMediaConnectSettings(_, context), `mediaconnectSettings`],
    ScanType: [, import_smithy_client.expectString, `scanType`],
    Width: [, import_smithy_client.expectInt32, `width`]
  });
}, "de_InputDeviceUhdSettings");
var de_InputLocation = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PasswordParam: [, import_smithy_client.expectString, `passwordParam`],
    Uri: [, import_smithy_client.expectString, `uri`],
    Username: [, import_smithy_client.expectString, `username`]
  });
}, "de_InputLocation");
var de_InputLossBehavior = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BlackFrameMsec: [, import_smithy_client.expectInt32, `blackFrameMsec`],
    InputLossImageColor: [, import_smithy_client.expectString, `inputLossImageColor`],
    InputLossImageSlate: [, (_) => de_InputLocation(_, context), `inputLossImageSlate`],
    InputLossImageType: [, import_smithy_client.expectString, `inputLossImageType`],
    RepeatFrameMsec: [, import_smithy_client.expectInt32, `repeatFrameMsec`]
  });
}, "de_InputLossBehavior");
var de_InputLossFailoverSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InputLossThresholdMsec: [, import_smithy_client.expectInt32, `inputLossThresholdMsec`]
  });
}, "de_InputLossFailoverSettings");
var de_InputPrepareScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InputAttachmentNameReference: [, import_smithy_client.expectString, `inputAttachmentNameReference`],
    InputClippingSettings: [, (_) => de_InputClippingSettings(_, context), `inputClippingSettings`],
    UrlPath: [, import_smithy_client._json, `urlPath`]
  });
}, "de_InputPrepareScheduleActionSettings");
var de_InputSecurityGroup = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    Id: [, import_smithy_client.expectString, `id`],
    Inputs: [, import_smithy_client._json, `inputs`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    WhitelistRules: [, (_) => de___listOfInputWhitelistRule(_, context), `whitelistRules`]
  });
}, "de_InputSecurityGroup");
var de_InputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioSelectors: [, (_) => de___listOfAudioSelector(_, context), `audioSelectors`],
    CaptionSelectors: [, (_) => de___listOfCaptionSelector(_, context), `captionSelectors`],
    DeblockFilter: [, import_smithy_client.expectString, `deblockFilter`],
    DenoiseFilter: [, import_smithy_client.expectString, `denoiseFilter`],
    FilterStrength: [, import_smithy_client.expectInt32, `filterStrength`],
    InputFilter: [, import_smithy_client.expectString, `inputFilter`],
    NetworkInputSettings: [, (_) => de_NetworkInputSettings(_, context), `networkInputSettings`],
    Scte35Pid: [, import_smithy_client.expectInt32, `scte35Pid`],
    Smpte2038DataPreference: [, import_smithy_client.expectString, `smpte2038DataPreference`],
    SourceEndBehavior: [, import_smithy_client.expectString, `sourceEndBehavior`],
    VideoSelector: [, (_) => de_VideoSelector(_, context), `videoSelector`]
  });
}, "de_InputSettings");
var de_InputSource = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PasswordParam: [, import_smithy_client.expectString, `passwordParam`],
    Url: [, import_smithy_client.expectString, `url`],
    Username: [, import_smithy_client.expectString, `username`]
  });
}, "de_InputSource");
var de_InputSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Codec: [, import_smithy_client.expectString, `codec`],
    MaximumBitrate: [, import_smithy_client.expectString, `maximumBitrate`],
    Resolution: [, import_smithy_client.expectString, `resolution`]
  });
}, "de_InputSpecification");
var de_InputSwitchScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InputAttachmentNameReference: [, import_smithy_client.expectString, `inputAttachmentNameReference`],
    InputClippingSettings: [, (_) => de_InputClippingSettings(_, context), `inputClippingSettings`],
    UrlPath: [, import_smithy_client._json, `urlPath`]
  });
}, "de_InputSwitchScheduleActionSettings");
var de_InputWhitelistRule = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Cidr: [, import_smithy_client.expectString, `cidr`]
  });
}, "de_InputWhitelistRule");
var de_KeyProviderSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    StaticKeySettings: [, (_) => de_StaticKeySettings(_, context), `staticKeySettings`]
  });
}, "de_KeyProviderSettings");
var de_M2tsSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AbsentInputAudioBehavior: [, import_smithy_client.expectString, `absentInputAudioBehavior`],
    Arib: [, import_smithy_client.expectString, `arib`],
    AribCaptionsPid: [, import_smithy_client.expectString, `aribCaptionsPid`],
    AribCaptionsPidControl: [, import_smithy_client.expectString, `aribCaptionsPidControl`],
    AudioBufferModel: [, import_smithy_client.expectString, `audioBufferModel`],
    AudioFramesPerPes: [, import_smithy_client.expectInt32, `audioFramesPerPes`],
    AudioPids: [, import_smithy_client.expectString, `audioPids`],
    AudioStreamType: [, import_smithy_client.expectString, `audioStreamType`],
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    BufferModel: [, import_smithy_client.expectString, `bufferModel`],
    CcDescriptor: [, import_smithy_client.expectString, `ccDescriptor`],
    DvbNitSettings: [, (_) => de_DvbNitSettings(_, context), `dvbNitSettings`],
    DvbSdtSettings: [, (_) => de_DvbSdtSettings(_, context), `dvbSdtSettings`],
    DvbSubPids: [, import_smithy_client.expectString, `dvbSubPids`],
    DvbTdtSettings: [, (_) => de_DvbTdtSettings(_, context), `dvbTdtSettings`],
    DvbTeletextPid: [, import_smithy_client.expectString, `dvbTeletextPid`],
    Ebif: [, import_smithy_client.expectString, `ebif`],
    EbpAudioInterval: [, import_smithy_client.expectString, `ebpAudioInterval`],
    EbpLookaheadMs: [, import_smithy_client.expectInt32, `ebpLookaheadMs`],
    EbpPlacement: [, import_smithy_client.expectString, `ebpPlacement`],
    EcmPid: [, import_smithy_client.expectString, `ecmPid`],
    EsRateInPes: [, import_smithy_client.expectString, `esRateInPes`],
    EtvPlatformPid: [, import_smithy_client.expectString, `etvPlatformPid`],
    EtvSignalPid: [, import_smithy_client.expectString, `etvSignalPid`],
    FragmentTime: [, import_smithy_client.limitedParseDouble, `fragmentTime`],
    Klv: [, import_smithy_client.expectString, `klv`],
    KlvDataPids: [, import_smithy_client.expectString, `klvDataPids`],
    NielsenId3Behavior: [, import_smithy_client.expectString, `nielsenId3Behavior`],
    NullPacketBitrate: [, import_smithy_client.limitedParseDouble, `nullPacketBitrate`],
    PatInterval: [, import_smithy_client.expectInt32, `patInterval`],
    PcrControl: [, import_smithy_client.expectString, `pcrControl`],
    PcrPeriod: [, import_smithy_client.expectInt32, `pcrPeriod`],
    PcrPid: [, import_smithy_client.expectString, `pcrPid`],
    PmtInterval: [, import_smithy_client.expectInt32, `pmtInterval`],
    PmtPid: [, import_smithy_client.expectString, `pmtPid`],
    ProgramNum: [, import_smithy_client.expectInt32, `programNum`],
    RateMode: [, import_smithy_client.expectString, `rateMode`],
    Scte27Pids: [, import_smithy_client.expectString, `scte27Pids`],
    Scte35Control: [, import_smithy_client.expectString, `scte35Control`],
    Scte35Pid: [, import_smithy_client.expectString, `scte35Pid`],
    Scte35PrerollPullupMilliseconds: [, import_smithy_client.limitedParseDouble, `scte35PrerollPullupMilliseconds`],
    SegmentationMarkers: [, import_smithy_client.expectString, `segmentationMarkers`],
    SegmentationStyle: [, import_smithy_client.expectString, `segmentationStyle`],
    SegmentationTime: [, import_smithy_client.limitedParseDouble, `segmentationTime`],
    TimedMetadataBehavior: [, import_smithy_client.expectString, `timedMetadataBehavior`],
    TimedMetadataPid: [, import_smithy_client.expectString, `timedMetadataPid`],
    TransportStreamId: [, import_smithy_client.expectInt32, `transportStreamId`],
    VideoPid: [, import_smithy_client.expectString, `videoPid`]
  });
}, "de_M2tsSettings");
var de_M3u8Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioFramesPerPes: [, import_smithy_client.expectInt32, `audioFramesPerPes`],
    AudioPids: [, import_smithy_client.expectString, `audioPids`],
    EcmPid: [, import_smithy_client.expectString, `ecmPid`],
    KlvBehavior: [, import_smithy_client.expectString, `klvBehavior`],
    KlvDataPids: [, import_smithy_client.expectString, `klvDataPids`],
    NielsenId3Behavior: [, import_smithy_client.expectString, `nielsenId3Behavior`],
    PatInterval: [, import_smithy_client.expectInt32, `patInterval`],
    PcrControl: [, import_smithy_client.expectString, `pcrControl`],
    PcrPeriod: [, import_smithy_client.expectInt32, `pcrPeriod`],
    PcrPid: [, import_smithy_client.expectString, `pcrPid`],
    PmtInterval: [, import_smithy_client.expectInt32, `pmtInterval`],
    PmtPid: [, import_smithy_client.expectString, `pmtPid`],
    ProgramNum: [, import_smithy_client.expectInt32, `programNum`],
    Scte35Behavior: [, import_smithy_client.expectString, `scte35Behavior`],
    Scte35Pid: [, import_smithy_client.expectString, `scte35Pid`],
    TimedMetadataBehavior: [, import_smithy_client.expectString, `timedMetadataBehavior`],
    TimedMetadataPid: [, import_smithy_client.expectString, `timedMetadataPid`],
    TransportStreamId: [, import_smithy_client.expectInt32, `transportStreamId`],
    VideoPid: [, import_smithy_client.expectString, `videoPid`]
  });
}, "de_M3u8Settings");
var de_MaintenanceStatus = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MaintenanceDay: [, import_smithy_client.expectString, `maintenanceDay`],
    MaintenanceDeadline: [, import_smithy_client.expectString, `maintenanceDeadline`],
    MaintenanceScheduledDate: [, import_smithy_client.expectString, `maintenanceScheduledDate`],
    MaintenanceStartTime: [, import_smithy_client.expectString, `maintenanceStartTime`]
  });
}, "de_MaintenanceStatus");
var de_MediaConnectFlow = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`]
  });
}, "de_MediaConnectFlow");
var de_MediaPackageGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Destination: [, (_) => de_OutputLocationRef(_, context), `destination`]
  });
}, "de_MediaPackageGroupSettings");
var de_MediaPackageOutputDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ChannelId: [, import_smithy_client.expectString, `channelId`]
  });
}, "de_MediaPackageOutputDestinationSettings");
var de_MediaResource = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Destinations: [, (_) => de___listOfMediaResourceNeighbor(_, context), `destinations`],
    Name: [, import_smithy_client.expectString, `name`],
    Sources: [, (_) => de___listOfMediaResourceNeighbor(_, context), `sources`]
  });
}, "de_MediaResource");
var de_MediaResourceMap = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_MediaResource(value, context);
    return acc;
  }, {});
}, "de_MediaResourceMap");
var de_MediaResourceNeighbor = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    Name: [, import_smithy_client.expectString, `name`]
  });
}, "de_MediaResourceNeighbor");
var de_MonitorDeployment = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DetailsUri: [, import_smithy_client.expectString, `detailsUri`],
    ErrorMessage: [, import_smithy_client.expectString, `errorMessage`],
    Status: [, import_smithy_client.expectString, `status`]
  });
}, "de_MonitorDeployment");
var de_MotionGraphicsActivateScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Duration: [, import_smithy_client.expectLong, `duration`],
    PasswordParam: [, import_smithy_client.expectString, `passwordParam`],
    Url: [, import_smithy_client.expectString, `url`],
    Username: [, import_smithy_client.expectString, `username`]
  });
}, "de_MotionGraphicsActivateScheduleActionSettings");
var de_MotionGraphicsConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MotionGraphicsInsertion: [, import_smithy_client.expectString, `motionGraphicsInsertion`],
    MotionGraphicsSettings: [, (_) => de_MotionGraphicsSettings(_, context), `motionGraphicsSettings`]
  });
}, "de_MotionGraphicsConfiguration");
var de_MotionGraphicsSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    HtmlMotionGraphicsSettings: [, import_smithy_client._json, `htmlMotionGraphicsSettings`]
  });
}, "de_MotionGraphicsSettings");
var de_Mp2Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Bitrate: [, import_smithy_client.limitedParseDouble, `bitrate`],
    CodingMode: [, import_smithy_client.expectString, `codingMode`],
    SampleRate: [, import_smithy_client.limitedParseDouble, `sampleRate`]
  });
}, "de_Mp2Settings");
var de_Mpeg2FilterSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    TemporalFilterSettings: [, (_) => de_TemporalFilterSettings(_, context), `temporalFilterSettings`]
  });
}, "de_Mpeg2FilterSettings");
var de_Mpeg2Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdaptiveQuantization: [, import_smithy_client.expectString, `adaptiveQuantization`],
    AfdSignaling: [, import_smithy_client.expectString, `afdSignaling`],
    ColorMetadata: [, import_smithy_client.expectString, `colorMetadata`],
    ColorSpace: [, import_smithy_client.expectString, `colorSpace`],
    DisplayAspectRatio: [, import_smithy_client.expectString, `displayAspectRatio`],
    FilterSettings: [, (_) => de_Mpeg2FilterSettings(_, context), `filterSettings`],
    FixedAfd: [, import_smithy_client.expectString, `fixedAfd`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    GopClosedCadence: [, import_smithy_client.expectInt32, `gopClosedCadence`],
    GopNumBFrames: [, import_smithy_client.expectInt32, `gopNumBFrames`],
    GopSize: [, import_smithy_client.limitedParseDouble, `gopSize`],
    GopSizeUnits: [, import_smithy_client.expectString, `gopSizeUnits`],
    ScanType: [, import_smithy_client.expectString, `scanType`],
    SubgopLength: [, import_smithy_client.expectString, `subgopLength`],
    TimecodeBurninSettings: [, (_) => de_TimecodeBurninSettings(_, context), `timecodeBurninSettings`],
    TimecodeInsertion: [, import_smithy_client.expectString, `timecodeInsertion`]
  });
}, "de_Mpeg2Settings");
var de_MsSmoothGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AcquisitionPointId: [, import_smithy_client.expectString, `acquisitionPointId`],
    AudioOnlyTimecodeControl: [, import_smithy_client.expectString, `audioOnlyTimecodeControl`],
    CertificateMode: [, import_smithy_client.expectString, `certificateMode`],
    ConnectionRetryInterval: [, import_smithy_client.expectInt32, `connectionRetryInterval`],
    Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
    EventId: [, import_smithy_client.expectString, `eventId`],
    EventIdMode: [, import_smithy_client.expectString, `eventIdMode`],
    EventStopBehavior: [, import_smithy_client.expectString, `eventStopBehavior`],
    FilecacheDuration: [, import_smithy_client.expectInt32, `filecacheDuration`],
    FragmentLength: [, import_smithy_client.expectInt32, `fragmentLength`],
    InputLossAction: [, import_smithy_client.expectString, `inputLossAction`],
    NumRetries: [, import_smithy_client.expectInt32, `numRetries`],
    RestartDelay: [, import_smithy_client.expectInt32, `restartDelay`],
    SegmentationMode: [, import_smithy_client.expectString, `segmentationMode`],
    SendDelayMs: [, import_smithy_client.expectInt32, `sendDelayMs`],
    SparseTrackType: [, import_smithy_client.expectString, `sparseTrackType`],
    StreamManifestBehavior: [, import_smithy_client.expectString, `streamManifestBehavior`],
    TimestampOffset: [, import_smithy_client.expectString, `timestampOffset`],
    TimestampOffsetMode: [, import_smithy_client.expectString, `timestampOffsetMode`]
  });
}, "de_MsSmoothGroupSettings");
var de_MsSmoothOutputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    H265PackagingType: [, import_smithy_client.expectString, `h265PackagingType`],
    NameModifier: [, import_smithy_client.expectString, `nameModifier`]
  });
}, "de_MsSmoothOutputSettings");
var de_Multiplex = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    AvailabilityZones: [, import_smithy_client._json, `availabilityZones`],
    Destinations: [, (_) => de___listOfMultiplexOutputDestination(_, context), `destinations`],
    Id: [, import_smithy_client.expectString, `id`],
    MultiplexSettings: [, (_) => de_MultiplexSettings(_, context), `multiplexSettings`],
    Name: [, import_smithy_client.expectString, `name`],
    PipelinesRunningCount: [, import_smithy_client.expectInt32, `pipelinesRunningCount`],
    ProgramCount: [, import_smithy_client.expectInt32, `programCount`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`]
  });
}, "de_Multiplex");
var de_MultiplexMediaConnectOutputDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EntitlementArn: [, import_smithy_client.expectString, `entitlementArn`]
  });
}, "de_MultiplexMediaConnectOutputDestinationSettings");
var de_MultiplexOutputDestination = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MediaConnectSettings: [
      ,
      (_) => de_MultiplexMediaConnectOutputDestinationSettings(_, context),
      `mediaConnectSettings`
    ]
  });
}, "de_MultiplexOutputDestination");
var de_MultiplexOutputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Destination: [, (_) => de_OutputLocationRef(_, context), `destination`]
  });
}, "de_MultiplexOutputSettings");
var de_MultiplexProgram = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ChannelId: [, import_smithy_client.expectString, `channelId`],
    MultiplexProgramSettings: [, (_) => de_MultiplexProgramSettings(_, context), `multiplexProgramSettings`],
    PacketIdentifiersMap: [, (_) => de_MultiplexProgramPacketIdentifiersMap(_, context), `packetIdentifiersMap`],
    PipelineDetails: [, (_) => de___listOfMultiplexProgramPipelineDetail(_, context), `pipelineDetails`],
    ProgramName: [, import_smithy_client.expectString, `programName`]
  });
}, "de_MultiplexProgram");
var de_MultiplexProgramChannelDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MultiplexId: [, import_smithy_client.expectString, `multiplexId`],
    ProgramName: [, import_smithy_client.expectString, `programName`]
  });
}, "de_MultiplexProgramChannelDestinationSettings");
var de_MultiplexProgramPacketIdentifiersMap = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioPids: [, import_smithy_client._json, `audioPids`],
    DvbSubPids: [, import_smithy_client._json, `dvbSubPids`],
    DvbTeletextPid: [, import_smithy_client.expectInt32, `dvbTeletextPid`],
    EtvPlatformPid: [, import_smithy_client.expectInt32, `etvPlatformPid`],
    EtvSignalPid: [, import_smithy_client.expectInt32, `etvSignalPid`],
    KlvDataPids: [, import_smithy_client._json, `klvDataPids`],
    PcrPid: [, import_smithy_client.expectInt32, `pcrPid`],
    PmtPid: [, import_smithy_client.expectInt32, `pmtPid`],
    PrivateMetadataPid: [, import_smithy_client.expectInt32, `privateMetadataPid`],
    Scte27Pids: [, import_smithy_client._json, `scte27Pids`],
    Scte35Pid: [, import_smithy_client.expectInt32, `scte35Pid`],
    TimedMetadataPid: [, import_smithy_client.expectInt32, `timedMetadataPid`],
    VideoPid: [, import_smithy_client.expectInt32, `videoPid`]
  });
}, "de_MultiplexProgramPacketIdentifiersMap");
var de_MultiplexProgramPipelineDetail = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ActiveChannelPipeline: [, import_smithy_client.expectString, `activeChannelPipeline`],
    PipelineId: [, import_smithy_client.expectString, `pipelineId`]
  });
}, "de_MultiplexProgramPipelineDetail");
var de_MultiplexProgramServiceDescriptor = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ProviderName: [, import_smithy_client.expectString, `providerName`],
    ServiceName: [, import_smithy_client.expectString, `serviceName`]
  });
}, "de_MultiplexProgramServiceDescriptor");
var de_MultiplexProgramSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PreferredChannelPipeline: [, import_smithy_client.expectString, `preferredChannelPipeline`],
    ProgramNumber: [, import_smithy_client.expectInt32, `programNumber`],
    ServiceDescriptor: [, (_) => de_MultiplexProgramServiceDescriptor(_, context), `serviceDescriptor`],
    VideoSettings: [, (_) => de_MultiplexVideoSettings(_, context), `videoSettings`]
  });
}, "de_MultiplexProgramSettings");
var de_MultiplexProgramSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ChannelId: [, import_smithy_client.expectString, `channelId`],
    ProgramName: [, import_smithy_client.expectString, `programName`]
  });
}, "de_MultiplexProgramSummary");
var de_MultiplexSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MaximumVideoBufferDelayMilliseconds: [, import_smithy_client.expectInt32, `maximumVideoBufferDelayMilliseconds`],
    TransportStreamBitrate: [, import_smithy_client.expectInt32, `transportStreamBitrate`],
    TransportStreamId: [, import_smithy_client.expectInt32, `transportStreamId`],
    TransportStreamReservedBitrate: [, import_smithy_client.expectInt32, `transportStreamReservedBitrate`]
  });
}, "de_MultiplexSettings");
var de_MultiplexSettingsSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    TransportStreamBitrate: [, import_smithy_client.expectInt32, `transportStreamBitrate`]
  });
}, "de_MultiplexSettingsSummary");
var de_MultiplexStatmuxVideoSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MaximumBitrate: [, import_smithy_client.expectInt32, `maximumBitrate`],
    MinimumBitrate: [, import_smithy_client.expectInt32, `minimumBitrate`],
    Priority: [, import_smithy_client.expectInt32, `priority`]
  });
}, "de_MultiplexStatmuxVideoSettings");
var de_MultiplexSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    AvailabilityZones: [, import_smithy_client._json, `availabilityZones`],
    Id: [, import_smithy_client.expectString, `id`],
    MultiplexSettings: [, (_) => de_MultiplexSettingsSummary(_, context), `multiplexSettings`],
    Name: [, import_smithy_client.expectString, `name`],
    PipelinesRunningCount: [, import_smithy_client.expectInt32, `pipelinesRunningCount`],
    ProgramCount: [, import_smithy_client.expectInt32, `programCount`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`]
  });
}, "de_MultiplexSummary");
var de_MultiplexVideoSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConstantBitrate: [, import_smithy_client.expectInt32, `constantBitrate`],
    StatmuxSettings: [, (_) => de_MultiplexStatmuxVideoSettings(_, context), `statmuxSettings`]
  });
}, "de_MultiplexVideoSettings");
var de_NetworkInputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    HlsInputSettings: [, (_) => de_HlsInputSettings(_, context), `hlsInputSettings`],
    ServerValidation: [, import_smithy_client.expectString, `serverValidation`]
  });
}, "de_NetworkInputSettings");
var de_NielsenCBET = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CbetCheckDigitString: [, import_smithy_client.expectString, `cbetCheckDigitString`],
    CbetStepaside: [, import_smithy_client.expectString, `cbetStepaside`],
    Csid: [, import_smithy_client.expectString, `csid`]
  });
}, "de_NielsenCBET");
var de_NielsenConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DistributorId: [, import_smithy_client.expectString, `distributorId`],
    NielsenPcmToId3Tagging: [, import_smithy_client.expectString, `nielsenPcmToId3Tagging`]
  });
}, "de_NielsenConfiguration");
var de_NielsenNaesIiNw = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CheckDigitString: [, import_smithy_client.expectString, `checkDigitString`],
    Sid: [, import_smithy_client.limitedParseDouble, `sid`],
    Timezone: [, import_smithy_client.expectString, `timezone`]
  });
}, "de_NielsenNaesIiNw");
var de_NielsenWatermarksSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    NielsenCbetSettings: [, (_) => de_NielsenCBET(_, context), `nielsenCbetSettings`],
    NielsenDistributionType: [, import_smithy_client.expectString, `nielsenDistributionType`],
    NielsenNaesIiNwSettings: [, (_) => de_NielsenNaesIiNw(_, context), `nielsenNaesIiNwSettings`]
  });
}, "de_NielsenWatermarksSettings");
var de_Offering = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CurrencyCode: [, import_smithy_client.expectString, `currencyCode`],
    Duration: [, import_smithy_client.expectInt32, `duration`],
    DurationUnits: [, import_smithy_client.expectString, `durationUnits`],
    FixedPrice: [, import_smithy_client.limitedParseDouble, `fixedPrice`],
    OfferingDescription: [, import_smithy_client.expectString, `offeringDescription`],
    OfferingId: [, import_smithy_client.expectString, `offeringId`],
    OfferingType: [, import_smithy_client.expectString, `offeringType`],
    Region: [, import_smithy_client.expectString, `region`],
    ResourceSpecification: [, (_) => de_ReservationResourceSpecification(_, context), `resourceSpecification`],
    UsagePrice: [, import_smithy_client.limitedParseDouble, `usagePrice`]
  });
}, "de_Offering");
var de_Output = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioDescriptionNames: [, import_smithy_client._json, `audioDescriptionNames`],
    CaptionDescriptionNames: [, import_smithy_client._json, `captionDescriptionNames`],
    OutputName: [, import_smithy_client.expectString, `outputName`],
    OutputSettings: [, (_) => de_OutputSettings(_, context), `outputSettings`],
    VideoDescriptionName: [, import_smithy_client.expectString, `videoDescriptionName`]
  });
}, "de_Output");
var de_OutputDestination = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Id: [, import_smithy_client.expectString, `id`],
    MediaPackageSettings: [
      ,
      (_) => de___listOfMediaPackageOutputDestinationSettings(_, context),
      `mediaPackageSettings`
    ],
    MultiplexSettings: [, (_) => de_MultiplexProgramChannelDestinationSettings(_, context), `multiplexSettings`],
    Settings: [, (_) => de___listOfOutputDestinationSettings(_, context), `settings`]
  });
}, "de_OutputDestination");
var de_OutputDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PasswordParam: [, import_smithy_client.expectString, `passwordParam`],
    StreamName: [, import_smithy_client.expectString, `streamName`],
    Url: [, import_smithy_client.expectString, `url`],
    Username: [, import_smithy_client.expectString, `username`]
  });
}, "de_OutputDestinationSettings");
var de_OutputGroup = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Name: [, import_smithy_client.expectString, `name`],
    OutputGroupSettings: [, (_) => de_OutputGroupSettings(_, context), `outputGroupSettings`],
    Outputs: [, (_) => de___listOfOutput(_, context), `outputs`]
  });
}, "de_OutputGroup");
var de_OutputGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ArchiveGroupSettings: [, (_) => de_ArchiveGroupSettings(_, context), `archiveGroupSettings`],
    CmafIngestGroupSettings: [, (_) => de_CmafIngestGroupSettings(_, context), `cmafIngestGroupSettings`],
    FrameCaptureGroupSettings: [, (_) => de_FrameCaptureGroupSettings(_, context), `frameCaptureGroupSettings`],
    HlsGroupSettings: [, (_) => de_HlsGroupSettings(_, context), `hlsGroupSettings`],
    MediaPackageGroupSettings: [, (_) => de_MediaPackageGroupSettings(_, context), `mediaPackageGroupSettings`],
    MsSmoothGroupSettings: [, (_) => de_MsSmoothGroupSettings(_, context), `msSmoothGroupSettings`],
    MultiplexGroupSettings: [, import_smithy_client._json, `multiplexGroupSettings`],
    RtmpGroupSettings: [, (_) => de_RtmpGroupSettings(_, context), `rtmpGroupSettings`],
    UdpGroupSettings: [, (_) => de_UdpGroupSettings(_, context), `udpGroupSettings`]
  });
}, "de_OutputGroupSettings");
var de_OutputLocationRef = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DestinationRefId: [, import_smithy_client.expectString, `destinationRefId`]
  });
}, "de_OutputLocationRef");
var de_OutputLockingSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EpochLockingSettings: [, (_) => de_EpochLockingSettings(_, context), `epochLockingSettings`],
    PipelineLockingSettings: [, import_smithy_client._json, `pipelineLockingSettings`]
  });
}, "de_OutputLockingSettings");
var de_OutputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ArchiveOutputSettings: [, (_) => de_ArchiveOutputSettings(_, context), `archiveOutputSettings`],
    CmafIngestOutputSettings: [, (_) => de_CmafIngestOutputSettings(_, context), `cmafIngestOutputSettings`],
    FrameCaptureOutputSettings: [, (_) => de_FrameCaptureOutputSettings(_, context), `frameCaptureOutputSettings`],
    HlsOutputSettings: [, (_) => de_HlsOutputSettings(_, context), `hlsOutputSettings`],
    MediaPackageOutputSettings: [, import_smithy_client._json, `mediaPackageOutputSettings`],
    MsSmoothOutputSettings: [, (_) => de_MsSmoothOutputSettings(_, context), `msSmoothOutputSettings`],
    MultiplexOutputSettings: [, (_) => de_MultiplexOutputSettings(_, context), `multiplexOutputSettings`],
    RtmpOutputSettings: [, (_) => de_RtmpOutputSettings(_, context), `rtmpOutputSettings`],
    UdpOutputSettings: [, (_) => de_UdpOutputSettings(_, context), `udpOutputSettings`]
  });
}, "de_OutputSettings");
var de_PauseStateScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Pipelines: [, (_) => de___listOfPipelinePauseStateSettings(_, context), `pipelines`]
  });
}, "de_PauseStateScheduleActionSettings");
var de_PipelineDetail = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ActiveInputAttachmentName: [, import_smithy_client.expectString, `activeInputAttachmentName`],
    ActiveInputSwitchActionName: [, import_smithy_client.expectString, `activeInputSwitchActionName`],
    ActiveMotionGraphicsActionName: [, import_smithy_client.expectString, `activeMotionGraphicsActionName`],
    ActiveMotionGraphicsUri: [, import_smithy_client.expectString, `activeMotionGraphicsUri`],
    PipelineId: [, import_smithy_client.expectString, `pipelineId`]
  });
}, "de_PipelineDetail");
var de_PipelinePauseStateSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PipelineId: [, import_smithy_client.expectString, `pipelineId`]
  });
}, "de_PipelinePauseStateSettings");
var de_RemixSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ChannelMappings: [, (_) => de___listOfAudioChannelMapping(_, context), `channelMappings`],
    ChannelsIn: [, import_smithy_client.expectInt32, `channelsIn`],
    ChannelsOut: [, import_smithy_client.expectInt32, `channelsOut`]
  });
}, "de_RemixSettings");
var de_RenewalSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AutomaticRenewal: [, import_smithy_client.expectString, `automaticRenewal`],
    RenewalCount: [, import_smithy_client.expectInt32, `renewalCount`]
  });
}, "de_RenewalSettings");
var de_Reservation = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    Count: [, import_smithy_client.expectInt32, `count`],
    CurrencyCode: [, import_smithy_client.expectString, `currencyCode`],
    Duration: [, import_smithy_client.expectInt32, `duration`],
    DurationUnits: [, import_smithy_client.expectString, `durationUnits`],
    End: [, import_smithy_client.expectString, `end`],
    FixedPrice: [, import_smithy_client.limitedParseDouble, `fixedPrice`],
    Name: [, import_smithy_client.expectString, `name`],
    OfferingDescription: [, import_smithy_client.expectString, `offeringDescription`],
    OfferingId: [, import_smithy_client.expectString, `offeringId`],
    OfferingType: [, import_smithy_client.expectString, `offeringType`],
    Region: [, import_smithy_client.expectString, `region`],
    RenewalSettings: [, (_) => de_RenewalSettings(_, context), `renewalSettings`],
    ReservationId: [, import_smithy_client.expectString, `reservationId`],
    ResourceSpecification: [, (_) => de_ReservationResourceSpecification(_, context), `resourceSpecification`],
    Start: [, import_smithy_client.expectString, `start`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    UsagePrice: [, import_smithy_client.limitedParseDouble, `usagePrice`]
  });
}, "de_Reservation");
var de_ReservationResourceSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ChannelClass: [, import_smithy_client.expectString, `channelClass`],
    Codec: [, import_smithy_client.expectString, `codec`],
    MaximumBitrate: [, import_smithy_client.expectString, `maximumBitrate`],
    MaximumFramerate: [, import_smithy_client.expectString, `maximumFramerate`],
    Resolution: [, import_smithy_client.expectString, `resolution`],
    ResourceType: [, import_smithy_client.expectString, `resourceType`],
    SpecialFeature: [, import_smithy_client.expectString, `specialFeature`],
    VideoQuality: [, import_smithy_client.expectString, `videoQuality`]
  });
}, "de_ReservationResourceSpecification");
var de_RtmpGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdMarkers: [, import_smithy_client._json, `adMarkers`],
    AuthenticationScheme: [, import_smithy_client.expectString, `authenticationScheme`],
    CacheFullBehavior: [, import_smithy_client.expectString, `cacheFullBehavior`],
    CacheLength: [, import_smithy_client.expectInt32, `cacheLength`],
    CaptionData: [, import_smithy_client.expectString, `captionData`],
    IncludeFillerNalUnits: [, import_smithy_client.expectString, `includeFillerNalUnits`],
    InputLossAction: [, import_smithy_client.expectString, `inputLossAction`],
    RestartDelay: [, import_smithy_client.expectInt32, `restartDelay`]
  });
}, "de_RtmpGroupSettings");
var de_RtmpOutputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CertificateMode: [, import_smithy_client.expectString, `certificateMode`],
    ConnectionRetryInterval: [, import_smithy_client.expectInt32, `connectionRetryInterval`],
    Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
    NumRetries: [, import_smithy_client.expectInt32, `numRetries`]
  });
}, "de_RtmpOutputSettings");
var de_ScheduleAction = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ActionName: [, import_smithy_client.expectString, `actionName`],
    ScheduleActionSettings: [, (_) => de_ScheduleActionSettings(_, context), `scheduleActionSettings`],
    ScheduleActionStartSettings: [
      ,
      (_) => de_ScheduleActionStartSettings(_, context),
      `scheduleActionStartSettings`
    ]
  });
}, "de_ScheduleAction");
var de_ScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    HlsId3SegmentTaggingSettings: [
      ,
      (_) => de_HlsId3SegmentTaggingScheduleActionSettings(_, context),
      `hlsId3SegmentTaggingSettings`
    ],
    HlsTimedMetadataSettings: [
      ,
      (_) => de_HlsTimedMetadataScheduleActionSettings(_, context),
      `hlsTimedMetadataSettings`
    ],
    InputPrepareSettings: [, (_) => de_InputPrepareScheduleActionSettings(_, context), `inputPrepareSettings`],
    InputSwitchSettings: [, (_) => de_InputSwitchScheduleActionSettings(_, context), `inputSwitchSettings`],
    MotionGraphicsImageActivateSettings: [
      ,
      (_) => de_MotionGraphicsActivateScheduleActionSettings(_, context),
      `motionGraphicsImageActivateSettings`
    ],
    MotionGraphicsImageDeactivateSettings: [, import_smithy_client._json, `motionGraphicsImageDeactivateSettings`],
    PauseStateSettings: [, (_) => de_PauseStateScheduleActionSettings(_, context), `pauseStateSettings`],
    Scte35InputSettings: [, (_) => de_Scte35InputScheduleActionSettings(_, context), `scte35InputSettings`],
    Scte35ReturnToNetworkSettings: [
      ,
      (_) => de_Scte35ReturnToNetworkScheduleActionSettings(_, context),
      `scte35ReturnToNetworkSettings`
    ],
    Scte35SpliceInsertSettings: [
      ,
      (_) => de_Scte35SpliceInsertScheduleActionSettings(_, context),
      `scte35SpliceInsertSettings`
    ],
    Scte35TimeSignalSettings: [
      ,
      (_) => de_Scte35TimeSignalScheduleActionSettings(_, context),
      `scte35TimeSignalSettings`
    ],
    StaticImageActivateSettings: [
      ,
      (_) => de_StaticImageActivateScheduleActionSettings(_, context),
      `staticImageActivateSettings`
    ],
    StaticImageDeactivateSettings: [
      ,
      (_) => de_StaticImageDeactivateScheduleActionSettings(_, context),
      `staticImageDeactivateSettings`
    ],
    StaticImageOutputActivateSettings: [
      ,
      (_) => de_StaticImageOutputActivateScheduleActionSettings(_, context),
      `staticImageOutputActivateSettings`
    ],
    StaticImageOutputDeactivateSettings: [
      ,
      (_) => de_StaticImageOutputDeactivateScheduleActionSettings(_, context),
      `staticImageOutputDeactivateSettings`
    ]
  });
}, "de_ScheduleActionSettings");
var de_ScheduleActionStartSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FixedModeScheduleActionStartSettings: [
      ,
      (_) => de_FixedModeScheduleActionStartSettings(_, context),
      `fixedModeScheduleActionStartSettings`
    ],
    FollowModeScheduleActionStartSettings: [
      ,
      (_) => de_FollowModeScheduleActionStartSettings(_, context),
      `followModeScheduleActionStartSettings`
    ],
    ImmediateModeScheduleActionStartSettings: [, import_smithy_client._json, `immediateModeScheduleActionStartSettings`]
  });
}, "de_ScheduleActionStartSettings");
var de_Scte20SourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Convert608To708: [, import_smithy_client.expectString, `convert608To708`],
    Source608ChannelNumber: [, import_smithy_client.expectInt32, `source608ChannelNumber`]
  });
}, "de_Scte20SourceSettings");
var de_Scte27SourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    OcrLanguage: [, import_smithy_client.expectString, `ocrLanguage`],
    Pid: [, import_smithy_client.expectInt32, `pid`]
  });
}, "de_Scte27SourceSettings");
var de_Scte35DeliveryRestrictions = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ArchiveAllowedFlag: [, import_smithy_client.expectString, `archiveAllowedFlag`],
    DeviceRestrictions: [, import_smithy_client.expectString, `deviceRestrictions`],
    NoRegionalBlackoutFlag: [, import_smithy_client.expectString, `noRegionalBlackoutFlag`],
    WebDeliveryAllowedFlag: [, import_smithy_client.expectString, `webDeliveryAllowedFlag`]
  });
}, "de_Scte35DeliveryRestrictions");
var de_Scte35Descriptor = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Scte35DescriptorSettings: [, (_) => de_Scte35DescriptorSettings(_, context), `scte35DescriptorSettings`]
  });
}, "de_Scte35Descriptor");
var de_Scte35DescriptorSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    SegmentationDescriptorScte35DescriptorSettings: [
      ,
      (_) => de_Scte35SegmentationDescriptor(_, context),
      `segmentationDescriptorScte35DescriptorSettings`
    ]
  });
}, "de_Scte35DescriptorSettings");
var de_Scte35InputScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InputAttachmentNameReference: [, import_smithy_client.expectString, `inputAttachmentNameReference`],
    Mode: [, import_smithy_client.expectString, `mode`]
  });
}, "de_Scte35InputScheduleActionSettings");
var de_Scte35ReturnToNetworkScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    SpliceEventId: [, import_smithy_client.expectLong, `spliceEventId`]
  });
}, "de_Scte35ReturnToNetworkScheduleActionSettings");
var de_Scte35SegmentationDescriptor = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DeliveryRestrictions: [, (_) => de_Scte35DeliveryRestrictions(_, context), `deliveryRestrictions`],
    SegmentNum: [, import_smithy_client.expectInt32, `segmentNum`],
    SegmentationCancelIndicator: [, import_smithy_client.expectString, `segmentationCancelIndicator`],
    SegmentationDuration: [, import_smithy_client.expectLong, `segmentationDuration`],
    SegmentationEventId: [, import_smithy_client.expectLong, `segmentationEventId`],
    SegmentationTypeId: [, import_smithy_client.expectInt32, `segmentationTypeId`],
    SegmentationUpid: [, import_smithy_client.expectString, `segmentationUpid`],
    SegmentationUpidType: [, import_smithy_client.expectInt32, `segmentationUpidType`],
    SegmentsExpected: [, import_smithy_client.expectInt32, `segmentsExpected`],
    SubSegmentNum: [, import_smithy_client.expectInt32, `subSegmentNum`],
    SubSegmentsExpected: [, import_smithy_client.expectInt32, `subSegmentsExpected`]
  });
}, "de_Scte35SegmentationDescriptor");
var de_Scte35SpliceInsert = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdAvailOffset: [, import_smithy_client.expectInt32, `adAvailOffset`],
    NoRegionalBlackoutFlag: [, import_smithy_client.expectString, `noRegionalBlackoutFlag`],
    WebDeliveryAllowedFlag: [, import_smithy_client.expectString, `webDeliveryAllowedFlag`]
  });
}, "de_Scte35SpliceInsert");
var de_Scte35SpliceInsertScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Duration: [, import_smithy_client.expectLong, `duration`],
    SpliceEventId: [, import_smithy_client.expectLong, `spliceEventId`]
  });
}, "de_Scte35SpliceInsertScheduleActionSettings");
var de_Scte35TimeSignalApos = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdAvailOffset: [, import_smithy_client.expectInt32, `adAvailOffset`],
    NoRegionalBlackoutFlag: [, import_smithy_client.expectString, `noRegionalBlackoutFlag`],
    WebDeliveryAllowedFlag: [, import_smithy_client.expectString, `webDeliveryAllowedFlag`]
  });
}, "de_Scte35TimeSignalApos");
var de_Scte35TimeSignalScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Scte35Descriptors: [, (_) => de___listOfScte35Descriptor(_, context), `scte35Descriptors`]
  });
}, "de_Scte35TimeSignalScheduleActionSettings");
var de_SignalMapSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    Id: [, import_smithy_client.expectString, `id`],
    ModifiedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `modifiedAt`],
    MonitorDeploymentStatus: [, import_smithy_client.expectString, `monitorDeploymentStatus`],
    Name: [, import_smithy_client.expectString, `name`],
    Status: [, import_smithy_client.expectString, `status`],
    Tags: [, import_smithy_client._json, `tags`]
  });
}, "de_SignalMapSummary");
var de_StandardHlsSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioRenditionSets: [, import_smithy_client.expectString, `audioRenditionSets`],
    M3u8Settings: [, (_) => de_M3u8Settings(_, context), `m3u8Settings`]
  });
}, "de_StandardHlsSettings");
var de_StartTimecode = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Timecode: [, import_smithy_client.expectString, `timecode`]
  });
}, "de_StartTimecode");
var de_StaticImageActivateScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Duration: [, import_smithy_client.expectInt32, `duration`],
    FadeIn: [, import_smithy_client.expectInt32, `fadeIn`],
    FadeOut: [, import_smithy_client.expectInt32, `fadeOut`],
    Height: [, import_smithy_client.expectInt32, `height`],
    Image: [, (_) => de_InputLocation(_, context), `image`],
    ImageX: [, import_smithy_client.expectInt32, `imageX`],
    ImageY: [, import_smithy_client.expectInt32, `imageY`],
    Layer: [, import_smithy_client.expectInt32, `layer`],
    Opacity: [, import_smithy_client.expectInt32, `opacity`],
    Width: [, import_smithy_client.expectInt32, `width`]
  });
}, "de_StaticImageActivateScheduleActionSettings");
var de_StaticImageDeactivateScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FadeOut: [, import_smithy_client.expectInt32, `fadeOut`],
    Layer: [, import_smithy_client.expectInt32, `layer`]
  });
}, "de_StaticImageDeactivateScheduleActionSettings");
var de_StaticImageOutputActivateScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Duration: [, import_smithy_client.expectInt32, `duration`],
    FadeIn: [, import_smithy_client.expectInt32, `fadeIn`],
    FadeOut: [, import_smithy_client.expectInt32, `fadeOut`],
    Height: [, import_smithy_client.expectInt32, `height`],
    Image: [, (_) => de_InputLocation(_, context), `image`],
    ImageX: [, import_smithy_client.expectInt32, `imageX`],
    ImageY: [, import_smithy_client.expectInt32, `imageY`],
    Layer: [, import_smithy_client.expectInt32, `layer`],
    Opacity: [, import_smithy_client.expectInt32, `opacity`],
    OutputNames: [, import_smithy_client._json, `outputNames`],
    Width: [, import_smithy_client.expectInt32, `width`]
  });
}, "de_StaticImageOutputActivateScheduleActionSettings");
var de_StaticImageOutputDeactivateScheduleActionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FadeOut: [, import_smithy_client.expectInt32, `fadeOut`],
    Layer: [, import_smithy_client.expectInt32, `layer`],
    OutputNames: [, import_smithy_client._json, `outputNames`]
  });
}, "de_StaticImageOutputDeactivateScheduleActionSettings");
var de_StaticKeySettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    KeyProviderServer: [, (_) => de_InputLocation(_, context), `keyProviderServer`],
    StaticKeyValue: [, import_smithy_client.expectString, `staticKeyValue`]
  });
}, "de_StaticKeySettings");
var de_StopTimecode = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    LastFrameClippingBehavior: [, import_smithy_client.expectString, `lastFrameClippingBehavior`],
    Timecode: [, import_smithy_client.expectString, `timecode`]
  });
}, "de_StopTimecode");
var de_SuccessfulMonitorDeployment = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DetailsUri: [, import_smithy_client.expectString, `detailsUri`],
    Status: [, import_smithy_client.expectString, `status`]
  });
}, "de_SuccessfulMonitorDeployment");
var de_TeletextSourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    OutputRectangle: [, (_) => de_CaptionRectangle(_, context), `outputRectangle`],
    PageNumber: [, import_smithy_client.expectString, `pageNumber`]
  });
}, "de_TeletextSourceSettings");
var de_TemporalFilterSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PostFilterSharpening: [, import_smithy_client.expectString, `postFilterSharpening`],
    Strength: [, import_smithy_client.expectString, `strength`]
  });
}, "de_TemporalFilterSettings");
var de_Thumbnail = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Body: [, import_smithy_client.expectString, `body`],
    ContentType: [, import_smithy_client.expectString, `contentType`],
    ThumbnailType: [, import_smithy_client.expectString, `thumbnailType`],
    TimeStamp: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `timeStamp`]
  });
}, "de_Thumbnail");
var de_ThumbnailConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    State: [, import_smithy_client.expectString, `state`]
  });
}, "de_ThumbnailConfiguration");
var de_ThumbnailDetail = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PipelineId: [, import_smithy_client.expectString, `pipelineId`],
    Thumbnails: [, (_) => de___listOfThumbnail(_, context), `thumbnails`]
  });
}, "de_ThumbnailDetail");
var de_TimecodeBurninSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FontSize: [, import_smithy_client.expectString, `fontSize`],
    Position: [, import_smithy_client.expectString, `position`],
    Prefix: [, import_smithy_client.expectString, `prefix`]
  });
}, "de_TimecodeBurninSettings");
var de_TimecodeConfig = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Source: [, import_smithy_client.expectString, `source`],
    SyncThreshold: [, import_smithy_client.expectInt32, `syncThreshold`]
  });
}, "de_TimecodeConfig");
var de_TransferringInputDeviceSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Id: [, import_smithy_client.expectString, `id`],
    Message: [, import_smithy_client.expectString, `message`],
    TargetCustomerId: [, import_smithy_client.expectString, `targetCustomerId`],
    TransferType: [, import_smithy_client.expectString, `transferType`]
  });
}, "de_TransferringInputDeviceSummary");
var de_TtmlDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    StyleControl: [, import_smithy_client.expectString, `styleControl`]
  });
}, "de_TtmlDestinationSettings");
var de_UdpContainerSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    M2tsSettings: [, (_) => de_M2tsSettings(_, context), `m2tsSettings`]
  });
}, "de_UdpContainerSettings");
var de_UdpGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InputLossAction: [, import_smithy_client.expectString, `inputLossAction`],
    TimedMetadataId3Frame: [, import_smithy_client.expectString, `timedMetadataId3Frame`],
    TimedMetadataId3Period: [, import_smithy_client.expectInt32, `timedMetadataId3Period`]
  });
}, "de_UdpGroupSettings");
var de_UdpOutputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BufferMsec: [, import_smithy_client.expectInt32, `bufferMsec`],
    ContainerSettings: [, (_) => de_UdpContainerSettings(_, context), `containerSettings`],
    Destination: [, (_) => de_OutputLocationRef(_, context), `destination`],
    FecOutputSettings: [, (_) => de_FecOutputSettings(_, context), `fecOutputSettings`]
  });
}, "de_UdpOutputSettings");
var de_ValidationError = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ElementPath: [, import_smithy_client.expectString, `elementPath`],
    ErrorMessage: [, import_smithy_client.expectString, `errorMessage`]
  });
}, "de_ValidationError");
var de_VideoBlackFailoverSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BlackDetectThreshold: [, import_smithy_client.limitedParseDouble, `blackDetectThreshold`],
    VideoBlackThresholdMsec: [, import_smithy_client.expectInt32, `videoBlackThresholdMsec`]
  });
}, "de_VideoBlackFailoverSettings");
var de_VideoCodecSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FrameCaptureSettings: [, (_) => de_FrameCaptureSettings(_, context), `frameCaptureSettings`],
    H264Settings: [, (_) => de_H264Settings(_, context), `h264Settings`],
    H265Settings: [, (_) => de_H265Settings(_, context), `h265Settings`],
    Mpeg2Settings: [, (_) => de_Mpeg2Settings(_, context), `mpeg2Settings`]
  });
}, "de_VideoCodecSettings");
var de_VideoDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CodecSettings: [, (_) => de_VideoCodecSettings(_, context), `codecSettings`],
    Height: [, import_smithy_client.expectInt32, `height`],
    Name: [, import_smithy_client.expectString, `name`],
    RespondToAfd: [, import_smithy_client.expectString, `respondToAfd`],
    ScalingBehavior: [, import_smithy_client.expectString, `scalingBehavior`],
    Sharpness: [, import_smithy_client.expectInt32, `sharpness`],
    Width: [, import_smithy_client.expectInt32, `width`]
  });
}, "de_VideoDescription");
var de_VideoSelector = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ColorSpace: [, import_smithy_client.expectString, `colorSpace`],
    ColorSpaceSettings: [, (_) => de_VideoSelectorColorSpaceSettings(_, context), `colorSpaceSettings`],
    ColorSpaceUsage: [, import_smithy_client.expectString, `colorSpaceUsage`],
    SelectorSettings: [, (_) => de_VideoSelectorSettings(_, context), `selectorSettings`]
  });
}, "de_VideoSelector");
var de_VideoSelectorColorSpaceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Hdr10Settings: [, (_) => de_Hdr10Settings(_, context), `hdr10Settings`]
  });
}, "de_VideoSelectorColorSpaceSettings");
var de_VideoSelectorPid = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Pid: [, import_smithy_client.expectInt32, `pid`]
  });
}, "de_VideoSelectorPid");
var de_VideoSelectorProgramId = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ProgramId: [, import_smithy_client.expectInt32, `programId`]
  });
}, "de_VideoSelectorProgramId");
var de_VideoSelectorSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    VideoSelectorPid: [, (_) => de_VideoSelectorPid(_, context), `videoSelectorPid`],
    VideoSelectorProgramId: [, (_) => de_VideoSelectorProgramId(_, context), `videoSelectorProgramId`]
  });
}, "de_VideoSelectorSettings");
var de_VpcOutputSettingsDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AvailabilityZones: [, import_smithy_client._json, `availabilityZones`],
    NetworkInterfaceIds: [, import_smithy_client._json, `networkInterfaceIds`],
    SecurityGroupIds: [, import_smithy_client._json, `securityGroupIds`],
    SubnetIds: [, import_smithy_client._json, `subnetIds`]
  });
}, "de_VpcOutputSettingsDescription");
var de_WavSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BitDepth: [, import_smithy_client.limitedParseDouble, `bitDepth`],
    CodingMode: [, import_smithy_client.expectString, `codingMode`],
    SampleRate: [, import_smithy_client.limitedParseDouble, `sampleRate`]
  });
}, "de_WavSettings");
var de_WebvttDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    StyleControl: [, import_smithy_client.expectString, `styleControl`]
  });
}, "de_WebvttDestinationSettings");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var isSerializableHeaderValue = /* @__PURE__ */ __name((value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0), "isSerializableHeaderValue");
var _A = "Accept";
var _C = "Codec";
var _CC = "ChannelClass";
var _CCh = "ChannelConfiguration";
var _CL = "ContentLength";
var _CT = "ContentType";
var _CWATGI = "CloudWatchAlarmTemplateGroupIdentifier";
var _D = "Duration";
var _EBRTGI = "EventBridgeRuleTemplateGroupIdentifier";
var _ET = "ETag";
var _GI = "GroupIdentifier";
var _LM = "LastModified";
var _MB = "MaximumBitrate";
var _MF = "MaximumFramerate";
var _MR = "MaxResults";
var _NT = "NextToken";
var _PI = "PipelineId";
var _R = "Resolution";
var _RT = "ResourceType";
var _S = "Scope";
var _SF = "SpecialFeature";
var _SMI = "SignalMapIdentifier";
var _TK = "TagKeys";
var _TT = "ThumbnailType";
var _TTr = "TransferType";
var _VQ = "VideoQuality";
var _a = "accept";
var _c = "codec";
var _cC = "channelClass";
var _cCh = "channelConfiguration";
var _cWATGI = "cloudWatchAlarmTemplateGroupIdentifier";
var _cl = "content-length";
var _ct = "content-type";
var _d = "duration";
var _e = "etag";
var _eBRTGI = "eventBridgeRuleTemplateGroupIdentifier";
var _gI = "groupIdentifier";
var _lm = "last-modified";
var _mB = "maximumBitrate";
var _mF = "maximumFramerate";
var _mR = "maxResults";
var _nT = "nextToken";
var _pI = "pipelineId";
var _r = "resolution";
var _rT = "resourceType";
var _s = "scope";
var _sF = "specialFeature";
var _sMI = "signalMapIdentifier";
var _tK = "tagKeys";
var _tT = "thumbnailType";
var _tTr = "transferType";
var _vQ = "videoQuality";

// src/commands/AcceptInputDeviceTransferCommand.ts
var _AcceptInputDeviceTransferCommand = class _AcceptInputDeviceTransferCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "AcceptInputDeviceTransfer", {}).n("MediaLiveClient", "AcceptInputDeviceTransferCommand").f(void 0, void 0).ser(se_AcceptInputDeviceTransferCommand).de(de_AcceptInputDeviceTransferCommand).build() {
};
__name(_AcceptInputDeviceTransferCommand, "AcceptInputDeviceTransferCommand");
var AcceptInputDeviceTransferCommand = _AcceptInputDeviceTransferCommand;

// src/commands/BatchDeleteCommand.ts




var _BatchDeleteCommand = class _BatchDeleteCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "BatchDelete", {}).n("MediaLiveClient", "BatchDeleteCommand").f(void 0, void 0).ser(se_BatchDeleteCommand).de(de_BatchDeleteCommand).build() {
};
__name(_BatchDeleteCommand, "BatchDeleteCommand");
var BatchDeleteCommand = _BatchDeleteCommand;

// src/commands/BatchStartCommand.ts




var _BatchStartCommand = class _BatchStartCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "BatchStart", {}).n("MediaLiveClient", "BatchStartCommand").f(void 0, void 0).ser(se_BatchStartCommand).de(de_BatchStartCommand).build() {
};
__name(_BatchStartCommand, "BatchStartCommand");
var BatchStartCommand = _BatchStartCommand;

// src/commands/BatchStopCommand.ts




var _BatchStopCommand = class _BatchStopCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "BatchStop", {}).n("MediaLiveClient", "BatchStopCommand").f(void 0, void 0).ser(se_BatchStopCommand).de(de_BatchStopCommand).build() {
};
__name(_BatchStopCommand, "BatchStopCommand");
var BatchStopCommand = _BatchStopCommand;

// src/commands/BatchUpdateScheduleCommand.ts




var _BatchUpdateScheduleCommand = class _BatchUpdateScheduleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "BatchUpdateSchedule", {}).n("MediaLiveClient", "BatchUpdateScheduleCommand").f(void 0, void 0).ser(se_BatchUpdateScheduleCommand).de(de_BatchUpdateScheduleCommand).build() {
};
__name(_BatchUpdateScheduleCommand, "BatchUpdateScheduleCommand");
var BatchUpdateScheduleCommand = _BatchUpdateScheduleCommand;

// src/commands/CancelInputDeviceTransferCommand.ts




var _CancelInputDeviceTransferCommand = class _CancelInputDeviceTransferCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "CancelInputDeviceTransfer", {}).n("MediaLiveClient", "CancelInputDeviceTransferCommand").f(void 0, void 0).ser(se_CancelInputDeviceTransferCommand).de(de_CancelInputDeviceTransferCommand).build() {
};
__name(_CancelInputDeviceTransferCommand, "CancelInputDeviceTransferCommand");
var CancelInputDeviceTransferCommand = _CancelInputDeviceTransferCommand;

// src/commands/ClaimDeviceCommand.ts




var _ClaimDeviceCommand = class _ClaimDeviceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ClaimDevice", {}).n("MediaLiveClient", "ClaimDeviceCommand").f(void 0, void 0).ser(se_ClaimDeviceCommand).de(de_ClaimDeviceCommand).build() {
};
__name(_ClaimDeviceCommand, "ClaimDeviceCommand");
var ClaimDeviceCommand = _ClaimDeviceCommand;

// src/commands/CreateChannelCommand.ts




var _CreateChannelCommand = class _CreateChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "CreateChannel", {}).n("MediaLiveClient", "CreateChannelCommand").f(void 0, void 0).ser(se_CreateChannelCommand).de(de_CreateChannelCommand).build() {
};
__name(_CreateChannelCommand, "CreateChannelCommand");
var CreateChannelCommand = _CreateChannelCommand;

// src/commands/CreateCloudWatchAlarmTemplateCommand.ts




var _CreateCloudWatchAlarmTemplateCommand = class _CreateCloudWatchAlarmTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "CreateCloudWatchAlarmTemplate", {}).n("MediaLiveClient", "CreateCloudWatchAlarmTemplateCommand").f(void 0, void 0).ser(se_CreateCloudWatchAlarmTemplateCommand).de(de_CreateCloudWatchAlarmTemplateCommand).build() {
};
__name(_CreateCloudWatchAlarmTemplateCommand, "CreateCloudWatchAlarmTemplateCommand");
var CreateCloudWatchAlarmTemplateCommand = _CreateCloudWatchAlarmTemplateCommand;

// src/commands/CreateCloudWatchAlarmTemplateGroupCommand.ts




var _CreateCloudWatchAlarmTemplateGroupCommand = class _CreateCloudWatchAlarmTemplateGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "CreateCloudWatchAlarmTemplateGroup", {}).n("MediaLiveClient", "CreateCloudWatchAlarmTemplateGroupCommand").f(void 0, void 0).ser(se_CreateCloudWatchAlarmTemplateGroupCommand).de(de_CreateCloudWatchAlarmTemplateGroupCommand).build() {
};
__name(_CreateCloudWatchAlarmTemplateGroupCommand, "CreateCloudWatchAlarmTemplateGroupCommand");
var CreateCloudWatchAlarmTemplateGroupCommand = _CreateCloudWatchAlarmTemplateGroupCommand;

// src/commands/CreateEventBridgeRuleTemplateCommand.ts




var _CreateEventBridgeRuleTemplateCommand = class _CreateEventBridgeRuleTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "CreateEventBridgeRuleTemplate", {}).n("MediaLiveClient", "CreateEventBridgeRuleTemplateCommand").f(void 0, void 0).ser(se_CreateEventBridgeRuleTemplateCommand).de(de_CreateEventBridgeRuleTemplateCommand).build() {
};
__name(_CreateEventBridgeRuleTemplateCommand, "CreateEventBridgeRuleTemplateCommand");
var CreateEventBridgeRuleTemplateCommand = _CreateEventBridgeRuleTemplateCommand;

// src/commands/CreateEventBridgeRuleTemplateGroupCommand.ts




var _CreateEventBridgeRuleTemplateGroupCommand = class _CreateEventBridgeRuleTemplateGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "CreateEventBridgeRuleTemplateGroup", {}).n("MediaLiveClient", "CreateEventBridgeRuleTemplateGroupCommand").f(void 0, void 0).ser(se_CreateEventBridgeRuleTemplateGroupCommand).de(de_CreateEventBridgeRuleTemplateGroupCommand).build() {
};
__name(_CreateEventBridgeRuleTemplateGroupCommand, "CreateEventBridgeRuleTemplateGroupCommand");
var CreateEventBridgeRuleTemplateGroupCommand = _CreateEventBridgeRuleTemplateGroupCommand;

// src/commands/CreateInputCommand.ts




var _CreateInputCommand = class _CreateInputCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "CreateInput", {}).n("MediaLiveClient", "CreateInputCommand").f(void 0, void 0).ser(se_CreateInputCommand).de(de_CreateInputCommand).build() {
};
__name(_CreateInputCommand, "CreateInputCommand");
var CreateInputCommand = _CreateInputCommand;

// src/commands/CreateInputSecurityGroupCommand.ts




var _CreateInputSecurityGroupCommand = class _CreateInputSecurityGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "CreateInputSecurityGroup", {}).n("MediaLiveClient", "CreateInputSecurityGroupCommand").f(void 0, void 0).ser(se_CreateInputSecurityGroupCommand).de(de_CreateInputSecurityGroupCommand).build() {
};
__name(_CreateInputSecurityGroupCommand, "CreateInputSecurityGroupCommand");
var CreateInputSecurityGroupCommand = _CreateInputSecurityGroupCommand;

// src/commands/CreateMultiplexCommand.ts




var _CreateMultiplexCommand = class _CreateMultiplexCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "CreateMultiplex", {}).n("MediaLiveClient", "CreateMultiplexCommand").f(void 0, void 0).ser(se_CreateMultiplexCommand).de(de_CreateMultiplexCommand).build() {
};
__name(_CreateMultiplexCommand, "CreateMultiplexCommand");
var CreateMultiplexCommand = _CreateMultiplexCommand;

// src/commands/CreateMultiplexProgramCommand.ts




var _CreateMultiplexProgramCommand = class _CreateMultiplexProgramCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "CreateMultiplexProgram", {}).n("MediaLiveClient", "CreateMultiplexProgramCommand").f(void 0, void 0).ser(se_CreateMultiplexProgramCommand).de(de_CreateMultiplexProgramCommand).build() {
};
__name(_CreateMultiplexProgramCommand, "CreateMultiplexProgramCommand");
var CreateMultiplexProgramCommand = _CreateMultiplexProgramCommand;

// src/commands/CreatePartnerInputCommand.ts




var _CreatePartnerInputCommand = class _CreatePartnerInputCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "CreatePartnerInput", {}).n("MediaLiveClient", "CreatePartnerInputCommand").f(void 0, void 0).ser(se_CreatePartnerInputCommand).de(de_CreatePartnerInputCommand).build() {
};
__name(_CreatePartnerInputCommand, "CreatePartnerInputCommand");
var CreatePartnerInputCommand = _CreatePartnerInputCommand;

// src/commands/CreateSignalMapCommand.ts




var _CreateSignalMapCommand = class _CreateSignalMapCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "CreateSignalMap", {}).n("MediaLiveClient", "CreateSignalMapCommand").f(void 0, void 0).ser(se_CreateSignalMapCommand).de(de_CreateSignalMapCommand).build() {
};
__name(_CreateSignalMapCommand, "CreateSignalMapCommand");
var CreateSignalMapCommand = _CreateSignalMapCommand;

// src/commands/CreateTagsCommand.ts




var _CreateTagsCommand = class _CreateTagsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "CreateTags", {}).n("MediaLiveClient", "CreateTagsCommand").f(void 0, void 0).ser(se_CreateTagsCommand).de(de_CreateTagsCommand).build() {
};
__name(_CreateTagsCommand, "CreateTagsCommand");
var CreateTagsCommand = _CreateTagsCommand;

// src/commands/DeleteChannelCommand.ts




var _DeleteChannelCommand = class _DeleteChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DeleteChannel", {}).n("MediaLiveClient", "DeleteChannelCommand").f(void 0, void 0).ser(se_DeleteChannelCommand).de(de_DeleteChannelCommand).build() {
};
__name(_DeleteChannelCommand, "DeleteChannelCommand");
var DeleteChannelCommand = _DeleteChannelCommand;

// src/commands/DeleteCloudWatchAlarmTemplateCommand.ts




var _DeleteCloudWatchAlarmTemplateCommand = class _DeleteCloudWatchAlarmTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DeleteCloudWatchAlarmTemplate", {}).n("MediaLiveClient", "DeleteCloudWatchAlarmTemplateCommand").f(void 0, void 0).ser(se_DeleteCloudWatchAlarmTemplateCommand).de(de_DeleteCloudWatchAlarmTemplateCommand).build() {
};
__name(_DeleteCloudWatchAlarmTemplateCommand, "DeleteCloudWatchAlarmTemplateCommand");
var DeleteCloudWatchAlarmTemplateCommand = _DeleteCloudWatchAlarmTemplateCommand;

// src/commands/DeleteCloudWatchAlarmTemplateGroupCommand.ts




var _DeleteCloudWatchAlarmTemplateGroupCommand = class _DeleteCloudWatchAlarmTemplateGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DeleteCloudWatchAlarmTemplateGroup", {}).n("MediaLiveClient", "DeleteCloudWatchAlarmTemplateGroupCommand").f(void 0, void 0).ser(se_DeleteCloudWatchAlarmTemplateGroupCommand).de(de_DeleteCloudWatchAlarmTemplateGroupCommand).build() {
};
__name(_DeleteCloudWatchAlarmTemplateGroupCommand, "DeleteCloudWatchAlarmTemplateGroupCommand");
var DeleteCloudWatchAlarmTemplateGroupCommand = _DeleteCloudWatchAlarmTemplateGroupCommand;

// src/commands/DeleteEventBridgeRuleTemplateCommand.ts




var _DeleteEventBridgeRuleTemplateCommand = class _DeleteEventBridgeRuleTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DeleteEventBridgeRuleTemplate", {}).n("MediaLiveClient", "DeleteEventBridgeRuleTemplateCommand").f(void 0, void 0).ser(se_DeleteEventBridgeRuleTemplateCommand).de(de_DeleteEventBridgeRuleTemplateCommand).build() {
};
__name(_DeleteEventBridgeRuleTemplateCommand, "DeleteEventBridgeRuleTemplateCommand");
var DeleteEventBridgeRuleTemplateCommand = _DeleteEventBridgeRuleTemplateCommand;

// src/commands/DeleteEventBridgeRuleTemplateGroupCommand.ts




var _DeleteEventBridgeRuleTemplateGroupCommand = class _DeleteEventBridgeRuleTemplateGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DeleteEventBridgeRuleTemplateGroup", {}).n("MediaLiveClient", "DeleteEventBridgeRuleTemplateGroupCommand").f(void 0, void 0).ser(se_DeleteEventBridgeRuleTemplateGroupCommand).de(de_DeleteEventBridgeRuleTemplateGroupCommand).build() {
};
__name(_DeleteEventBridgeRuleTemplateGroupCommand, "DeleteEventBridgeRuleTemplateGroupCommand");
var DeleteEventBridgeRuleTemplateGroupCommand = _DeleteEventBridgeRuleTemplateGroupCommand;

// src/commands/DeleteInputCommand.ts




var _DeleteInputCommand = class _DeleteInputCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DeleteInput", {}).n("MediaLiveClient", "DeleteInputCommand").f(void 0, void 0).ser(se_DeleteInputCommand).de(de_DeleteInputCommand).build() {
};
__name(_DeleteInputCommand, "DeleteInputCommand");
var DeleteInputCommand = _DeleteInputCommand;

// src/commands/DeleteInputSecurityGroupCommand.ts




var _DeleteInputSecurityGroupCommand = class _DeleteInputSecurityGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DeleteInputSecurityGroup", {}).n("MediaLiveClient", "DeleteInputSecurityGroupCommand").f(void 0, void 0).ser(se_DeleteInputSecurityGroupCommand).de(de_DeleteInputSecurityGroupCommand).build() {
};
__name(_DeleteInputSecurityGroupCommand, "DeleteInputSecurityGroupCommand");
var DeleteInputSecurityGroupCommand = _DeleteInputSecurityGroupCommand;

// src/commands/DeleteMultiplexCommand.ts




var _DeleteMultiplexCommand = class _DeleteMultiplexCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DeleteMultiplex", {}).n("MediaLiveClient", "DeleteMultiplexCommand").f(void 0, void 0).ser(se_DeleteMultiplexCommand).de(de_DeleteMultiplexCommand).build() {
};
__name(_DeleteMultiplexCommand, "DeleteMultiplexCommand");
var DeleteMultiplexCommand = _DeleteMultiplexCommand;

// src/commands/DeleteMultiplexProgramCommand.ts




var _DeleteMultiplexProgramCommand = class _DeleteMultiplexProgramCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DeleteMultiplexProgram", {}).n("MediaLiveClient", "DeleteMultiplexProgramCommand").f(void 0, void 0).ser(se_DeleteMultiplexProgramCommand).de(de_DeleteMultiplexProgramCommand).build() {
};
__name(_DeleteMultiplexProgramCommand, "DeleteMultiplexProgramCommand");
var DeleteMultiplexProgramCommand = _DeleteMultiplexProgramCommand;

// src/commands/DeleteReservationCommand.ts




var _DeleteReservationCommand = class _DeleteReservationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DeleteReservation", {}).n("MediaLiveClient", "DeleteReservationCommand").f(void 0, void 0).ser(se_DeleteReservationCommand).de(de_DeleteReservationCommand).build() {
};
__name(_DeleteReservationCommand, "DeleteReservationCommand");
var DeleteReservationCommand = _DeleteReservationCommand;

// src/commands/DeleteScheduleCommand.ts




var _DeleteScheduleCommand = class _DeleteScheduleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DeleteSchedule", {}).n("MediaLiveClient", "DeleteScheduleCommand").f(void 0, void 0).ser(se_DeleteScheduleCommand).de(de_DeleteScheduleCommand).build() {
};
__name(_DeleteScheduleCommand, "DeleteScheduleCommand");
var DeleteScheduleCommand = _DeleteScheduleCommand;

// src/commands/DeleteSignalMapCommand.ts




var _DeleteSignalMapCommand = class _DeleteSignalMapCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DeleteSignalMap", {}).n("MediaLiveClient", "DeleteSignalMapCommand").f(void 0, void 0).ser(se_DeleteSignalMapCommand).de(de_DeleteSignalMapCommand).build() {
};
__name(_DeleteSignalMapCommand, "DeleteSignalMapCommand");
var DeleteSignalMapCommand = _DeleteSignalMapCommand;

// src/commands/DeleteTagsCommand.ts




var _DeleteTagsCommand = class _DeleteTagsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DeleteTags", {}).n("MediaLiveClient", "DeleteTagsCommand").f(void 0, void 0).ser(se_DeleteTagsCommand).de(de_DeleteTagsCommand).build() {
};
__name(_DeleteTagsCommand, "DeleteTagsCommand");
var DeleteTagsCommand = _DeleteTagsCommand;

// src/commands/DescribeAccountConfigurationCommand.ts




var _DescribeAccountConfigurationCommand = class _DescribeAccountConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DescribeAccountConfiguration", {}).n("MediaLiveClient", "DescribeAccountConfigurationCommand").f(void 0, void 0).ser(se_DescribeAccountConfigurationCommand).de(de_DescribeAccountConfigurationCommand).build() {
};
__name(_DescribeAccountConfigurationCommand, "DescribeAccountConfigurationCommand");
var DescribeAccountConfigurationCommand = _DescribeAccountConfigurationCommand;

// src/commands/DescribeChannelCommand.ts




var _DescribeChannelCommand = class _DescribeChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DescribeChannel", {}).n("MediaLiveClient", "DescribeChannelCommand").f(void 0, void 0).ser(se_DescribeChannelCommand).de(de_DescribeChannelCommand).build() {
};
__name(_DescribeChannelCommand, "DescribeChannelCommand");
var DescribeChannelCommand = _DescribeChannelCommand;

// src/commands/DescribeInputCommand.ts




var _DescribeInputCommand = class _DescribeInputCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DescribeInput", {}).n("MediaLiveClient", "DescribeInputCommand").f(void 0, void 0).ser(se_DescribeInputCommand).de(de_DescribeInputCommand).build() {
};
__name(_DescribeInputCommand, "DescribeInputCommand");
var DescribeInputCommand = _DescribeInputCommand;

// src/commands/DescribeInputDeviceCommand.ts




var _DescribeInputDeviceCommand = class _DescribeInputDeviceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DescribeInputDevice", {}).n("MediaLiveClient", "DescribeInputDeviceCommand").f(void 0, void 0).ser(se_DescribeInputDeviceCommand).de(de_DescribeInputDeviceCommand).build() {
};
__name(_DescribeInputDeviceCommand, "DescribeInputDeviceCommand");
var DescribeInputDeviceCommand = _DescribeInputDeviceCommand;

// src/commands/DescribeInputDeviceThumbnailCommand.ts





// src/models/models_2.ts
var RebootInputDeviceForce = {
  NO: "NO",
  YES: "YES"
};
var DescribeInputDeviceThumbnailResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj
}), "DescribeInputDeviceThumbnailResponseFilterSensitiveLog");

// src/commands/DescribeInputDeviceThumbnailCommand.ts
var _DescribeInputDeviceThumbnailCommand = class _DescribeInputDeviceThumbnailCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DescribeInputDeviceThumbnail", {}).n("MediaLiveClient", "DescribeInputDeviceThumbnailCommand").f(void 0, DescribeInputDeviceThumbnailResponseFilterSensitiveLog).ser(se_DescribeInputDeviceThumbnailCommand).de(de_DescribeInputDeviceThumbnailCommand).build() {
};
__name(_DescribeInputDeviceThumbnailCommand, "DescribeInputDeviceThumbnailCommand");
var DescribeInputDeviceThumbnailCommand = _DescribeInputDeviceThumbnailCommand;

// src/commands/DescribeInputSecurityGroupCommand.ts




var _DescribeInputSecurityGroupCommand = class _DescribeInputSecurityGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DescribeInputSecurityGroup", {}).n("MediaLiveClient", "DescribeInputSecurityGroupCommand").f(void 0, void 0).ser(se_DescribeInputSecurityGroupCommand).de(de_DescribeInputSecurityGroupCommand).build() {
};
__name(_DescribeInputSecurityGroupCommand, "DescribeInputSecurityGroupCommand");
var DescribeInputSecurityGroupCommand = _DescribeInputSecurityGroupCommand;

// src/commands/DescribeMultiplexCommand.ts




var _DescribeMultiplexCommand = class _DescribeMultiplexCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DescribeMultiplex", {}).n("MediaLiveClient", "DescribeMultiplexCommand").f(void 0, void 0).ser(se_DescribeMultiplexCommand).de(de_DescribeMultiplexCommand).build() {
};
__name(_DescribeMultiplexCommand, "DescribeMultiplexCommand");
var DescribeMultiplexCommand = _DescribeMultiplexCommand;

// src/commands/DescribeMultiplexProgramCommand.ts




var _DescribeMultiplexProgramCommand = class _DescribeMultiplexProgramCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DescribeMultiplexProgram", {}).n("MediaLiveClient", "DescribeMultiplexProgramCommand").f(void 0, void 0).ser(se_DescribeMultiplexProgramCommand).de(de_DescribeMultiplexProgramCommand).build() {
};
__name(_DescribeMultiplexProgramCommand, "DescribeMultiplexProgramCommand");
var DescribeMultiplexProgramCommand = _DescribeMultiplexProgramCommand;

// src/commands/DescribeOfferingCommand.ts




var _DescribeOfferingCommand = class _DescribeOfferingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DescribeOffering", {}).n("MediaLiveClient", "DescribeOfferingCommand").f(void 0, void 0).ser(se_DescribeOfferingCommand).de(de_DescribeOfferingCommand).build() {
};
__name(_DescribeOfferingCommand, "DescribeOfferingCommand");
var DescribeOfferingCommand = _DescribeOfferingCommand;

// src/commands/DescribeReservationCommand.ts




var _DescribeReservationCommand = class _DescribeReservationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DescribeReservation", {}).n("MediaLiveClient", "DescribeReservationCommand").f(void 0, void 0).ser(se_DescribeReservationCommand).de(de_DescribeReservationCommand).build() {
};
__name(_DescribeReservationCommand, "DescribeReservationCommand");
var DescribeReservationCommand = _DescribeReservationCommand;

// src/commands/DescribeScheduleCommand.ts




var _DescribeScheduleCommand = class _DescribeScheduleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DescribeSchedule", {}).n("MediaLiveClient", "DescribeScheduleCommand").f(void 0, void 0).ser(se_DescribeScheduleCommand).de(de_DescribeScheduleCommand).build() {
};
__name(_DescribeScheduleCommand, "DescribeScheduleCommand");
var DescribeScheduleCommand = _DescribeScheduleCommand;

// src/commands/DescribeThumbnailsCommand.ts




var _DescribeThumbnailsCommand = class _DescribeThumbnailsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "DescribeThumbnails", {}).n("MediaLiveClient", "DescribeThumbnailsCommand").f(void 0, void 0).ser(se_DescribeThumbnailsCommand).de(de_DescribeThumbnailsCommand).build() {
};
__name(_DescribeThumbnailsCommand, "DescribeThumbnailsCommand");
var DescribeThumbnailsCommand = _DescribeThumbnailsCommand;

// src/commands/GetCloudWatchAlarmTemplateCommand.ts




var _GetCloudWatchAlarmTemplateCommand = class _GetCloudWatchAlarmTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "GetCloudWatchAlarmTemplate", {}).n("MediaLiveClient", "GetCloudWatchAlarmTemplateCommand").f(void 0, void 0).ser(se_GetCloudWatchAlarmTemplateCommand).de(de_GetCloudWatchAlarmTemplateCommand).build() {
};
__name(_GetCloudWatchAlarmTemplateCommand, "GetCloudWatchAlarmTemplateCommand");
var GetCloudWatchAlarmTemplateCommand = _GetCloudWatchAlarmTemplateCommand;

// src/commands/GetCloudWatchAlarmTemplateGroupCommand.ts




var _GetCloudWatchAlarmTemplateGroupCommand = class _GetCloudWatchAlarmTemplateGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "GetCloudWatchAlarmTemplateGroup", {}).n("MediaLiveClient", "GetCloudWatchAlarmTemplateGroupCommand").f(void 0, void 0).ser(se_GetCloudWatchAlarmTemplateGroupCommand).de(de_GetCloudWatchAlarmTemplateGroupCommand).build() {
};
__name(_GetCloudWatchAlarmTemplateGroupCommand, "GetCloudWatchAlarmTemplateGroupCommand");
var GetCloudWatchAlarmTemplateGroupCommand = _GetCloudWatchAlarmTemplateGroupCommand;

// src/commands/GetEventBridgeRuleTemplateCommand.ts




var _GetEventBridgeRuleTemplateCommand = class _GetEventBridgeRuleTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "GetEventBridgeRuleTemplate", {}).n("MediaLiveClient", "GetEventBridgeRuleTemplateCommand").f(void 0, void 0).ser(se_GetEventBridgeRuleTemplateCommand).de(de_GetEventBridgeRuleTemplateCommand).build() {
};
__name(_GetEventBridgeRuleTemplateCommand, "GetEventBridgeRuleTemplateCommand");
var GetEventBridgeRuleTemplateCommand = _GetEventBridgeRuleTemplateCommand;

// src/commands/GetEventBridgeRuleTemplateGroupCommand.ts




var _GetEventBridgeRuleTemplateGroupCommand = class _GetEventBridgeRuleTemplateGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "GetEventBridgeRuleTemplateGroup", {}).n("MediaLiveClient", "GetEventBridgeRuleTemplateGroupCommand").f(void 0, void 0).ser(se_GetEventBridgeRuleTemplateGroupCommand).de(de_GetEventBridgeRuleTemplateGroupCommand).build() {
};
__name(_GetEventBridgeRuleTemplateGroupCommand, "GetEventBridgeRuleTemplateGroupCommand");
var GetEventBridgeRuleTemplateGroupCommand = _GetEventBridgeRuleTemplateGroupCommand;

// src/commands/GetSignalMapCommand.ts




var _GetSignalMapCommand = class _GetSignalMapCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "GetSignalMap", {}).n("MediaLiveClient", "GetSignalMapCommand").f(void 0, void 0).ser(se_GetSignalMapCommand).de(de_GetSignalMapCommand).build() {
};
__name(_GetSignalMapCommand, "GetSignalMapCommand");
var GetSignalMapCommand = _GetSignalMapCommand;

// src/commands/ListChannelsCommand.ts




var _ListChannelsCommand = class _ListChannelsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListChannels", {}).n("MediaLiveClient", "ListChannelsCommand").f(void 0, void 0).ser(se_ListChannelsCommand).de(de_ListChannelsCommand).build() {
};
__name(_ListChannelsCommand, "ListChannelsCommand");
var ListChannelsCommand = _ListChannelsCommand;

// src/commands/ListCloudWatchAlarmTemplateGroupsCommand.ts




var _ListCloudWatchAlarmTemplateGroupsCommand = class _ListCloudWatchAlarmTemplateGroupsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListCloudWatchAlarmTemplateGroups", {}).n("MediaLiveClient", "ListCloudWatchAlarmTemplateGroupsCommand").f(void 0, void 0).ser(se_ListCloudWatchAlarmTemplateGroupsCommand).de(de_ListCloudWatchAlarmTemplateGroupsCommand).build() {
};
__name(_ListCloudWatchAlarmTemplateGroupsCommand, "ListCloudWatchAlarmTemplateGroupsCommand");
var ListCloudWatchAlarmTemplateGroupsCommand = _ListCloudWatchAlarmTemplateGroupsCommand;

// src/commands/ListCloudWatchAlarmTemplatesCommand.ts




var _ListCloudWatchAlarmTemplatesCommand = class _ListCloudWatchAlarmTemplatesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListCloudWatchAlarmTemplates", {}).n("MediaLiveClient", "ListCloudWatchAlarmTemplatesCommand").f(void 0, void 0).ser(se_ListCloudWatchAlarmTemplatesCommand).de(de_ListCloudWatchAlarmTemplatesCommand).build() {
};
__name(_ListCloudWatchAlarmTemplatesCommand, "ListCloudWatchAlarmTemplatesCommand");
var ListCloudWatchAlarmTemplatesCommand = _ListCloudWatchAlarmTemplatesCommand;

// src/commands/ListEventBridgeRuleTemplateGroupsCommand.ts




var _ListEventBridgeRuleTemplateGroupsCommand = class _ListEventBridgeRuleTemplateGroupsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListEventBridgeRuleTemplateGroups", {}).n("MediaLiveClient", "ListEventBridgeRuleTemplateGroupsCommand").f(void 0, void 0).ser(se_ListEventBridgeRuleTemplateGroupsCommand).de(de_ListEventBridgeRuleTemplateGroupsCommand).build() {
};
__name(_ListEventBridgeRuleTemplateGroupsCommand, "ListEventBridgeRuleTemplateGroupsCommand");
var ListEventBridgeRuleTemplateGroupsCommand = _ListEventBridgeRuleTemplateGroupsCommand;

// src/commands/ListEventBridgeRuleTemplatesCommand.ts




var _ListEventBridgeRuleTemplatesCommand = class _ListEventBridgeRuleTemplatesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListEventBridgeRuleTemplates", {}).n("MediaLiveClient", "ListEventBridgeRuleTemplatesCommand").f(void 0, void 0).ser(se_ListEventBridgeRuleTemplatesCommand).de(de_ListEventBridgeRuleTemplatesCommand).build() {
};
__name(_ListEventBridgeRuleTemplatesCommand, "ListEventBridgeRuleTemplatesCommand");
var ListEventBridgeRuleTemplatesCommand = _ListEventBridgeRuleTemplatesCommand;

// src/commands/ListInputDevicesCommand.ts




var _ListInputDevicesCommand = class _ListInputDevicesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListInputDevices", {}).n("MediaLiveClient", "ListInputDevicesCommand").f(void 0, void 0).ser(se_ListInputDevicesCommand).de(de_ListInputDevicesCommand).build() {
};
__name(_ListInputDevicesCommand, "ListInputDevicesCommand");
var ListInputDevicesCommand = _ListInputDevicesCommand;

// src/commands/ListInputDeviceTransfersCommand.ts




var _ListInputDeviceTransfersCommand = class _ListInputDeviceTransfersCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListInputDeviceTransfers", {}).n("MediaLiveClient", "ListInputDeviceTransfersCommand").f(void 0, void 0).ser(se_ListInputDeviceTransfersCommand).de(de_ListInputDeviceTransfersCommand).build() {
};
__name(_ListInputDeviceTransfersCommand, "ListInputDeviceTransfersCommand");
var ListInputDeviceTransfersCommand = _ListInputDeviceTransfersCommand;

// src/commands/ListInputsCommand.ts




var _ListInputsCommand = class _ListInputsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListInputs", {}).n("MediaLiveClient", "ListInputsCommand").f(void 0, void 0).ser(se_ListInputsCommand).de(de_ListInputsCommand).build() {
};
__name(_ListInputsCommand, "ListInputsCommand");
var ListInputsCommand = _ListInputsCommand;

// src/commands/ListInputSecurityGroupsCommand.ts




var _ListInputSecurityGroupsCommand = class _ListInputSecurityGroupsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListInputSecurityGroups", {}).n("MediaLiveClient", "ListInputSecurityGroupsCommand").f(void 0, void 0).ser(se_ListInputSecurityGroupsCommand).de(de_ListInputSecurityGroupsCommand).build() {
};
__name(_ListInputSecurityGroupsCommand, "ListInputSecurityGroupsCommand");
var ListInputSecurityGroupsCommand = _ListInputSecurityGroupsCommand;

// src/commands/ListMultiplexesCommand.ts




var _ListMultiplexesCommand = class _ListMultiplexesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListMultiplexes", {}).n("MediaLiveClient", "ListMultiplexesCommand").f(void 0, void 0).ser(se_ListMultiplexesCommand).de(de_ListMultiplexesCommand).build() {
};
__name(_ListMultiplexesCommand, "ListMultiplexesCommand");
var ListMultiplexesCommand = _ListMultiplexesCommand;

// src/commands/ListMultiplexProgramsCommand.ts




var _ListMultiplexProgramsCommand = class _ListMultiplexProgramsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListMultiplexPrograms", {}).n("MediaLiveClient", "ListMultiplexProgramsCommand").f(void 0, void 0).ser(se_ListMultiplexProgramsCommand).de(de_ListMultiplexProgramsCommand).build() {
};
__name(_ListMultiplexProgramsCommand, "ListMultiplexProgramsCommand");
var ListMultiplexProgramsCommand = _ListMultiplexProgramsCommand;

// src/commands/ListOfferingsCommand.ts




var _ListOfferingsCommand = class _ListOfferingsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListOfferings", {}).n("MediaLiveClient", "ListOfferingsCommand").f(void 0, void 0).ser(se_ListOfferingsCommand).de(de_ListOfferingsCommand).build() {
};
__name(_ListOfferingsCommand, "ListOfferingsCommand");
var ListOfferingsCommand = _ListOfferingsCommand;

// src/commands/ListReservationsCommand.ts




var _ListReservationsCommand = class _ListReservationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListReservations", {}).n("MediaLiveClient", "ListReservationsCommand").f(void 0, void 0).ser(se_ListReservationsCommand).de(de_ListReservationsCommand).build() {
};
__name(_ListReservationsCommand, "ListReservationsCommand");
var ListReservationsCommand = _ListReservationsCommand;

// src/commands/ListSignalMapsCommand.ts




var _ListSignalMapsCommand = class _ListSignalMapsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListSignalMaps", {}).n("MediaLiveClient", "ListSignalMapsCommand").f(void 0, void 0).ser(se_ListSignalMapsCommand).de(de_ListSignalMapsCommand).build() {
};
__name(_ListSignalMapsCommand, "ListSignalMapsCommand");
var ListSignalMapsCommand = _ListSignalMapsCommand;

// src/commands/ListTagsForResourceCommand.ts




var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "ListTagsForResource", {}).n("MediaLiveClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/PurchaseOfferingCommand.ts




var _PurchaseOfferingCommand = class _PurchaseOfferingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "PurchaseOffering", {}).n("MediaLiveClient", "PurchaseOfferingCommand").f(void 0, void 0).ser(se_PurchaseOfferingCommand).de(de_PurchaseOfferingCommand).build() {
};
__name(_PurchaseOfferingCommand, "PurchaseOfferingCommand");
var PurchaseOfferingCommand = _PurchaseOfferingCommand;

// src/commands/RebootInputDeviceCommand.ts




var _RebootInputDeviceCommand = class _RebootInputDeviceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "RebootInputDevice", {}).n("MediaLiveClient", "RebootInputDeviceCommand").f(void 0, void 0).ser(se_RebootInputDeviceCommand).de(de_RebootInputDeviceCommand).build() {
};
__name(_RebootInputDeviceCommand, "RebootInputDeviceCommand");
var RebootInputDeviceCommand = _RebootInputDeviceCommand;

// src/commands/RejectInputDeviceTransferCommand.ts




var _RejectInputDeviceTransferCommand = class _RejectInputDeviceTransferCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "RejectInputDeviceTransfer", {}).n("MediaLiveClient", "RejectInputDeviceTransferCommand").f(void 0, void 0).ser(se_RejectInputDeviceTransferCommand).de(de_RejectInputDeviceTransferCommand).build() {
};
__name(_RejectInputDeviceTransferCommand, "RejectInputDeviceTransferCommand");
var RejectInputDeviceTransferCommand = _RejectInputDeviceTransferCommand;

// src/commands/RestartChannelPipelinesCommand.ts




var _RestartChannelPipelinesCommand = class _RestartChannelPipelinesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "RestartChannelPipelines", {}).n("MediaLiveClient", "RestartChannelPipelinesCommand").f(void 0, void 0).ser(se_RestartChannelPipelinesCommand).de(de_RestartChannelPipelinesCommand).build() {
};
__name(_RestartChannelPipelinesCommand, "RestartChannelPipelinesCommand");
var RestartChannelPipelinesCommand = _RestartChannelPipelinesCommand;

// src/commands/StartChannelCommand.ts




var _StartChannelCommand = class _StartChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "StartChannel", {}).n("MediaLiveClient", "StartChannelCommand").f(void 0, void 0).ser(se_StartChannelCommand).de(de_StartChannelCommand).build() {
};
__name(_StartChannelCommand, "StartChannelCommand");
var StartChannelCommand = _StartChannelCommand;

// src/commands/StartDeleteMonitorDeploymentCommand.ts




var _StartDeleteMonitorDeploymentCommand = class _StartDeleteMonitorDeploymentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "StartDeleteMonitorDeployment", {}).n("MediaLiveClient", "StartDeleteMonitorDeploymentCommand").f(void 0, void 0).ser(se_StartDeleteMonitorDeploymentCommand).de(de_StartDeleteMonitorDeploymentCommand).build() {
};
__name(_StartDeleteMonitorDeploymentCommand, "StartDeleteMonitorDeploymentCommand");
var StartDeleteMonitorDeploymentCommand = _StartDeleteMonitorDeploymentCommand;

// src/commands/StartInputDeviceCommand.ts




var _StartInputDeviceCommand = class _StartInputDeviceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "StartInputDevice", {}).n("MediaLiveClient", "StartInputDeviceCommand").f(void 0, void 0).ser(se_StartInputDeviceCommand).de(de_StartInputDeviceCommand).build() {
};
__name(_StartInputDeviceCommand, "StartInputDeviceCommand");
var StartInputDeviceCommand = _StartInputDeviceCommand;

// src/commands/StartInputDeviceMaintenanceWindowCommand.ts




var _StartInputDeviceMaintenanceWindowCommand = class _StartInputDeviceMaintenanceWindowCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "StartInputDeviceMaintenanceWindow", {}).n("MediaLiveClient", "StartInputDeviceMaintenanceWindowCommand").f(void 0, void 0).ser(se_StartInputDeviceMaintenanceWindowCommand).de(de_StartInputDeviceMaintenanceWindowCommand).build() {
};
__name(_StartInputDeviceMaintenanceWindowCommand, "StartInputDeviceMaintenanceWindowCommand");
var StartInputDeviceMaintenanceWindowCommand = _StartInputDeviceMaintenanceWindowCommand;

// src/commands/StartMonitorDeploymentCommand.ts




var _StartMonitorDeploymentCommand = class _StartMonitorDeploymentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "StartMonitorDeployment", {}).n("MediaLiveClient", "StartMonitorDeploymentCommand").f(void 0, void 0).ser(se_StartMonitorDeploymentCommand).de(de_StartMonitorDeploymentCommand).build() {
};
__name(_StartMonitorDeploymentCommand, "StartMonitorDeploymentCommand");
var StartMonitorDeploymentCommand = _StartMonitorDeploymentCommand;

// src/commands/StartMultiplexCommand.ts




var _StartMultiplexCommand = class _StartMultiplexCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "StartMultiplex", {}).n("MediaLiveClient", "StartMultiplexCommand").f(void 0, void 0).ser(se_StartMultiplexCommand).de(de_StartMultiplexCommand).build() {
};
__name(_StartMultiplexCommand, "StartMultiplexCommand");
var StartMultiplexCommand = _StartMultiplexCommand;

// src/commands/StartUpdateSignalMapCommand.ts




var _StartUpdateSignalMapCommand = class _StartUpdateSignalMapCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "StartUpdateSignalMap", {}).n("MediaLiveClient", "StartUpdateSignalMapCommand").f(void 0, void 0).ser(se_StartUpdateSignalMapCommand).de(de_StartUpdateSignalMapCommand).build() {
};
__name(_StartUpdateSignalMapCommand, "StartUpdateSignalMapCommand");
var StartUpdateSignalMapCommand = _StartUpdateSignalMapCommand;

// src/commands/StopChannelCommand.ts




var _StopChannelCommand = class _StopChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "StopChannel", {}).n("MediaLiveClient", "StopChannelCommand").f(void 0, void 0).ser(se_StopChannelCommand).de(de_StopChannelCommand).build() {
};
__name(_StopChannelCommand, "StopChannelCommand");
var StopChannelCommand = _StopChannelCommand;

// src/commands/StopInputDeviceCommand.ts




var _StopInputDeviceCommand = class _StopInputDeviceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "StopInputDevice", {}).n("MediaLiveClient", "StopInputDeviceCommand").f(void 0, void 0).ser(se_StopInputDeviceCommand).de(de_StopInputDeviceCommand).build() {
};
__name(_StopInputDeviceCommand, "StopInputDeviceCommand");
var StopInputDeviceCommand = _StopInputDeviceCommand;

// src/commands/StopMultiplexCommand.ts




var _StopMultiplexCommand = class _StopMultiplexCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "StopMultiplex", {}).n("MediaLiveClient", "StopMultiplexCommand").f(void 0, void 0).ser(se_StopMultiplexCommand).de(de_StopMultiplexCommand).build() {
};
__name(_StopMultiplexCommand, "StopMultiplexCommand");
var StopMultiplexCommand = _StopMultiplexCommand;

// src/commands/TransferInputDeviceCommand.ts




var _TransferInputDeviceCommand = class _TransferInputDeviceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "TransferInputDevice", {}).n("MediaLiveClient", "TransferInputDeviceCommand").f(void 0, void 0).ser(se_TransferInputDeviceCommand).de(de_TransferInputDeviceCommand).build() {
};
__name(_TransferInputDeviceCommand, "TransferInputDeviceCommand");
var TransferInputDeviceCommand = _TransferInputDeviceCommand;

// src/commands/UpdateAccountConfigurationCommand.ts




var _UpdateAccountConfigurationCommand = class _UpdateAccountConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "UpdateAccountConfiguration", {}).n("MediaLiveClient", "UpdateAccountConfigurationCommand").f(void 0, void 0).ser(se_UpdateAccountConfigurationCommand).de(de_UpdateAccountConfigurationCommand).build() {
};
__name(_UpdateAccountConfigurationCommand, "UpdateAccountConfigurationCommand");
var UpdateAccountConfigurationCommand = _UpdateAccountConfigurationCommand;

// src/commands/UpdateChannelClassCommand.ts




var _UpdateChannelClassCommand = class _UpdateChannelClassCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "UpdateChannelClass", {}).n("MediaLiveClient", "UpdateChannelClassCommand").f(void 0, void 0).ser(se_UpdateChannelClassCommand).de(de_UpdateChannelClassCommand).build() {
};
__name(_UpdateChannelClassCommand, "UpdateChannelClassCommand");
var UpdateChannelClassCommand = _UpdateChannelClassCommand;

// src/commands/UpdateChannelCommand.ts




var _UpdateChannelCommand = class _UpdateChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "UpdateChannel", {}).n("MediaLiveClient", "UpdateChannelCommand").f(void 0, void 0).ser(se_UpdateChannelCommand).de(de_UpdateChannelCommand).build() {
};
__name(_UpdateChannelCommand, "UpdateChannelCommand");
var UpdateChannelCommand = _UpdateChannelCommand;

// src/commands/UpdateCloudWatchAlarmTemplateCommand.ts




var _UpdateCloudWatchAlarmTemplateCommand = class _UpdateCloudWatchAlarmTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "UpdateCloudWatchAlarmTemplate", {}).n("MediaLiveClient", "UpdateCloudWatchAlarmTemplateCommand").f(void 0, void 0).ser(se_UpdateCloudWatchAlarmTemplateCommand).de(de_UpdateCloudWatchAlarmTemplateCommand).build() {
};
__name(_UpdateCloudWatchAlarmTemplateCommand, "UpdateCloudWatchAlarmTemplateCommand");
var UpdateCloudWatchAlarmTemplateCommand = _UpdateCloudWatchAlarmTemplateCommand;

// src/commands/UpdateCloudWatchAlarmTemplateGroupCommand.ts




var _UpdateCloudWatchAlarmTemplateGroupCommand = class _UpdateCloudWatchAlarmTemplateGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "UpdateCloudWatchAlarmTemplateGroup", {}).n("MediaLiveClient", "UpdateCloudWatchAlarmTemplateGroupCommand").f(void 0, void 0).ser(se_UpdateCloudWatchAlarmTemplateGroupCommand).de(de_UpdateCloudWatchAlarmTemplateGroupCommand).build() {
};
__name(_UpdateCloudWatchAlarmTemplateGroupCommand, "UpdateCloudWatchAlarmTemplateGroupCommand");
var UpdateCloudWatchAlarmTemplateGroupCommand = _UpdateCloudWatchAlarmTemplateGroupCommand;

// src/commands/UpdateEventBridgeRuleTemplateCommand.ts




var _UpdateEventBridgeRuleTemplateCommand = class _UpdateEventBridgeRuleTemplateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "UpdateEventBridgeRuleTemplate", {}).n("MediaLiveClient", "UpdateEventBridgeRuleTemplateCommand").f(void 0, void 0).ser(se_UpdateEventBridgeRuleTemplateCommand).de(de_UpdateEventBridgeRuleTemplateCommand).build() {
};
__name(_UpdateEventBridgeRuleTemplateCommand, "UpdateEventBridgeRuleTemplateCommand");
var UpdateEventBridgeRuleTemplateCommand = _UpdateEventBridgeRuleTemplateCommand;

// src/commands/UpdateEventBridgeRuleTemplateGroupCommand.ts




var _UpdateEventBridgeRuleTemplateGroupCommand = class _UpdateEventBridgeRuleTemplateGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "UpdateEventBridgeRuleTemplateGroup", {}).n("MediaLiveClient", "UpdateEventBridgeRuleTemplateGroupCommand").f(void 0, void 0).ser(se_UpdateEventBridgeRuleTemplateGroupCommand).de(de_UpdateEventBridgeRuleTemplateGroupCommand).build() {
};
__name(_UpdateEventBridgeRuleTemplateGroupCommand, "UpdateEventBridgeRuleTemplateGroupCommand");
var UpdateEventBridgeRuleTemplateGroupCommand = _UpdateEventBridgeRuleTemplateGroupCommand;

// src/commands/UpdateInputCommand.ts




var _UpdateInputCommand = class _UpdateInputCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "UpdateInput", {}).n("MediaLiveClient", "UpdateInputCommand").f(void 0, void 0).ser(se_UpdateInputCommand).de(de_UpdateInputCommand).build() {
};
__name(_UpdateInputCommand, "UpdateInputCommand");
var UpdateInputCommand = _UpdateInputCommand;

// src/commands/UpdateInputDeviceCommand.ts




var _UpdateInputDeviceCommand = class _UpdateInputDeviceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "UpdateInputDevice", {}).n("MediaLiveClient", "UpdateInputDeviceCommand").f(void 0, void 0).ser(se_UpdateInputDeviceCommand).de(de_UpdateInputDeviceCommand).build() {
};
__name(_UpdateInputDeviceCommand, "UpdateInputDeviceCommand");
var UpdateInputDeviceCommand = _UpdateInputDeviceCommand;

// src/commands/UpdateInputSecurityGroupCommand.ts




var _UpdateInputSecurityGroupCommand = class _UpdateInputSecurityGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "UpdateInputSecurityGroup", {}).n("MediaLiveClient", "UpdateInputSecurityGroupCommand").f(void 0, void 0).ser(se_UpdateInputSecurityGroupCommand).de(de_UpdateInputSecurityGroupCommand).build() {
};
__name(_UpdateInputSecurityGroupCommand, "UpdateInputSecurityGroupCommand");
var UpdateInputSecurityGroupCommand = _UpdateInputSecurityGroupCommand;

// src/commands/UpdateMultiplexCommand.ts




var _UpdateMultiplexCommand = class _UpdateMultiplexCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "UpdateMultiplex", {}).n("MediaLiveClient", "UpdateMultiplexCommand").f(void 0, void 0).ser(se_UpdateMultiplexCommand).de(de_UpdateMultiplexCommand).build() {
};
__name(_UpdateMultiplexCommand, "UpdateMultiplexCommand");
var UpdateMultiplexCommand = _UpdateMultiplexCommand;

// src/commands/UpdateMultiplexProgramCommand.ts




var _UpdateMultiplexProgramCommand = class _UpdateMultiplexProgramCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "UpdateMultiplexProgram", {}).n("MediaLiveClient", "UpdateMultiplexProgramCommand").f(void 0, void 0).ser(se_UpdateMultiplexProgramCommand).de(de_UpdateMultiplexProgramCommand).build() {
};
__name(_UpdateMultiplexProgramCommand, "UpdateMultiplexProgramCommand");
var UpdateMultiplexProgramCommand = _UpdateMultiplexProgramCommand;

// src/commands/UpdateReservationCommand.ts




var _UpdateReservationCommand = class _UpdateReservationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaLive", "UpdateReservation", {}).n("MediaLiveClient", "UpdateReservationCommand").f(void 0, void 0).ser(se_UpdateReservationCommand).de(de_UpdateReservationCommand).build() {
};
__name(_UpdateReservationCommand, "UpdateReservationCommand");
var UpdateReservationCommand = _UpdateReservationCommand;

// src/MediaLive.ts
var commands = {
  AcceptInputDeviceTransferCommand,
  BatchDeleteCommand,
  BatchStartCommand,
  BatchStopCommand,
  BatchUpdateScheduleCommand,
  CancelInputDeviceTransferCommand,
  ClaimDeviceCommand,
  CreateChannelCommand,
  CreateCloudWatchAlarmTemplateCommand,
  CreateCloudWatchAlarmTemplateGroupCommand,
  CreateEventBridgeRuleTemplateCommand,
  CreateEventBridgeRuleTemplateGroupCommand,
  CreateInputCommand,
  CreateInputSecurityGroupCommand,
  CreateMultiplexCommand,
  CreateMultiplexProgramCommand,
  CreatePartnerInputCommand,
  CreateSignalMapCommand,
  CreateTagsCommand,
  DeleteChannelCommand,
  DeleteCloudWatchAlarmTemplateCommand,
  DeleteCloudWatchAlarmTemplateGroupCommand,
  DeleteEventBridgeRuleTemplateCommand,
  DeleteEventBridgeRuleTemplateGroupCommand,
  DeleteInputCommand,
  DeleteInputSecurityGroupCommand,
  DeleteMultiplexCommand,
  DeleteMultiplexProgramCommand,
  DeleteReservationCommand,
  DeleteScheduleCommand,
  DeleteSignalMapCommand,
  DeleteTagsCommand,
  DescribeAccountConfigurationCommand,
  DescribeChannelCommand,
  DescribeInputCommand,
  DescribeInputDeviceCommand,
  DescribeInputDeviceThumbnailCommand,
  DescribeInputSecurityGroupCommand,
  DescribeMultiplexCommand,
  DescribeMultiplexProgramCommand,
  DescribeOfferingCommand,
  DescribeReservationCommand,
  DescribeScheduleCommand,
  DescribeThumbnailsCommand,
  GetCloudWatchAlarmTemplateCommand,
  GetCloudWatchAlarmTemplateGroupCommand,
  GetEventBridgeRuleTemplateCommand,
  GetEventBridgeRuleTemplateGroupCommand,
  GetSignalMapCommand,
  ListChannelsCommand,
  ListCloudWatchAlarmTemplateGroupsCommand,
  ListCloudWatchAlarmTemplatesCommand,
  ListEventBridgeRuleTemplateGroupsCommand,
  ListEventBridgeRuleTemplatesCommand,
  ListInputDevicesCommand,
  ListInputDeviceTransfersCommand,
  ListInputsCommand,
  ListInputSecurityGroupsCommand,
  ListMultiplexesCommand,
  ListMultiplexProgramsCommand,
  ListOfferingsCommand,
  ListReservationsCommand,
  ListSignalMapsCommand,
  ListTagsForResourceCommand,
  PurchaseOfferingCommand,
  RebootInputDeviceCommand,
  RejectInputDeviceTransferCommand,
  RestartChannelPipelinesCommand,
  StartChannelCommand,
  StartDeleteMonitorDeploymentCommand,
  StartInputDeviceCommand,
  StartInputDeviceMaintenanceWindowCommand,
  StartMonitorDeploymentCommand,
  StartMultiplexCommand,
  StartUpdateSignalMapCommand,
  StopChannelCommand,
  StopInputDeviceCommand,
  StopMultiplexCommand,
  TransferInputDeviceCommand,
  UpdateAccountConfigurationCommand,
  UpdateChannelCommand,
  UpdateChannelClassCommand,
  UpdateCloudWatchAlarmTemplateCommand,
  UpdateCloudWatchAlarmTemplateGroupCommand,
  UpdateEventBridgeRuleTemplateCommand,
  UpdateEventBridgeRuleTemplateGroupCommand,
  UpdateInputCommand,
  UpdateInputDeviceCommand,
  UpdateInputSecurityGroupCommand,
  UpdateMultiplexCommand,
  UpdateMultiplexProgramCommand,
  UpdateReservationCommand
};
var _MediaLive = class _MediaLive extends MediaLiveClient {
};
__name(_MediaLive, "MediaLive");
var MediaLive = _MediaLive;
(0, import_smithy_client.createAggregatedClient)(commands, MediaLive);

// src/pagination/DescribeSchedulePaginator.ts

var paginateDescribeSchedule = (0, import_core.createPaginator)(MediaLiveClient, DescribeScheduleCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListChannelsPaginator.ts

var paginateListChannels = (0, import_core.createPaginator)(MediaLiveClient, ListChannelsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListCloudWatchAlarmTemplateGroupsPaginator.ts

var paginateListCloudWatchAlarmTemplateGroups = (0, import_core.createPaginator)(MediaLiveClient, ListCloudWatchAlarmTemplateGroupsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListCloudWatchAlarmTemplatesPaginator.ts

var paginateListCloudWatchAlarmTemplates = (0, import_core.createPaginator)(MediaLiveClient, ListCloudWatchAlarmTemplatesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListEventBridgeRuleTemplateGroupsPaginator.ts

var paginateListEventBridgeRuleTemplateGroups = (0, import_core.createPaginator)(MediaLiveClient, ListEventBridgeRuleTemplateGroupsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListEventBridgeRuleTemplatesPaginator.ts

var paginateListEventBridgeRuleTemplates = (0, import_core.createPaginator)(MediaLiveClient, ListEventBridgeRuleTemplatesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListInputDeviceTransfersPaginator.ts

var paginateListInputDeviceTransfers = (0, import_core.createPaginator)(MediaLiveClient, ListInputDeviceTransfersCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListInputDevicesPaginator.ts

var paginateListInputDevices = (0, import_core.createPaginator)(MediaLiveClient, ListInputDevicesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListInputSecurityGroupsPaginator.ts

var paginateListInputSecurityGroups = (0, import_core.createPaginator)(MediaLiveClient, ListInputSecurityGroupsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListInputsPaginator.ts

var paginateListInputs = (0, import_core.createPaginator)(MediaLiveClient, ListInputsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListMultiplexProgramsPaginator.ts

var paginateListMultiplexPrograms = (0, import_core.createPaginator)(MediaLiveClient, ListMultiplexProgramsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListMultiplexesPaginator.ts

var paginateListMultiplexes = (0, import_core.createPaginator)(MediaLiveClient, ListMultiplexesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListOfferingsPaginator.ts

var paginateListOfferings = (0, import_core.createPaginator)(MediaLiveClient, ListOfferingsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListReservationsPaginator.ts

var paginateListReservations = (0, import_core.createPaginator)(MediaLiveClient, ListReservationsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListSignalMapsPaginator.ts

var paginateListSignalMaps = (0, import_core.createPaginator)(MediaLiveClient, ListSignalMapsCommand, "NextToken", "NextToken", "MaxResults");

// src/waiters/waitForChannelCreated.ts
var import_util_waiter = require("@smithy/util-waiter");
var checkState = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeChannelCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "IDLE") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "CREATING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "CREATE_FAILED") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForChannelCreated = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
}, "waitForChannelCreated");
var waitUntilChannelCreated = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilChannelCreated");

// src/waiters/waitForChannelDeleted.ts

var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeChannelCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "DELETED") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "DELETING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForChannelDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
}, "waitForChannelDeleted");
var waitUntilChannelDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilChannelDeleted");

// src/waiters/waitForChannelRunning.ts

var checkState3 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeChannelCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "RUNNING") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "STARTING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForChannelRunning = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
}, "waitForChannelRunning");
var waitUntilChannelRunning = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilChannelRunning");

// src/waiters/waitForChannelStopped.ts

var checkState4 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeChannelCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "IDLE") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "STOPPING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForChannelStopped = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
}, "waitForChannelStopped");
var waitUntilChannelStopped = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilChannelStopped");

// src/waiters/waitForInputAttached.ts

var checkState5 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeInputCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "ATTACHED") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "DETACHED") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForInputAttached = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState5);
}, "waitForInputAttached");
var waitUntilInputAttached = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState5);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilInputAttached");

// src/waiters/waitForInputDeleted.ts

var checkState6 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeInputCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "DELETED") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "DELETING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForInputDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState6);
}, "waitForInputDeleted");
var waitUntilInputDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState6);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilInputDeleted");

// src/waiters/waitForInputDetached.ts

var checkState7 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeInputCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "DETACHED") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "CREATING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "ATTACHED") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForInputDetached = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState7);
}, "waitForInputDetached");
var waitUntilInputDetached = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState7);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilInputDetached");

// src/waiters/waitForMultiplexCreated.ts

var checkState8 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeMultiplexCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "IDLE") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "CREATING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "CREATE_FAILED") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForMultiplexCreated = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState8);
}, "waitForMultiplexCreated");
var waitUntilMultiplexCreated = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState8);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilMultiplexCreated");

// src/waiters/waitForMultiplexDeleted.ts

var checkState9 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeMultiplexCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "DELETED") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "DELETING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForMultiplexDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState9);
}, "waitForMultiplexDeleted");
var waitUntilMultiplexDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState9);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilMultiplexDeleted");

// src/waiters/waitForMultiplexRunning.ts

var checkState10 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeMultiplexCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "RUNNING") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "STARTING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForMultiplexRunning = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState10);
}, "waitForMultiplexRunning");
var waitUntilMultiplexRunning = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState10);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilMultiplexRunning");

// src/waiters/waitForMultiplexStopped.ts

var checkState11 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeMultiplexCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "IDLE") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.State;
      }, "returnComparator");
      if (returnComparator() === "STOPPING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForMultiplexStopped = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState11);
}, "waitForMultiplexStopped");
var waitUntilMultiplexStopped = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState11);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilMultiplexStopped");

// src/waiters/waitForSignalMapCreated.ts

var checkState12 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new GetSignalMapCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Status;
      }, "returnComparator");
      if (returnComparator() === "CREATE_COMPLETE") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Status;
      }, "returnComparator");
      if (returnComparator() === "CREATE_IN_PROGRESS") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Status;
      }, "returnComparator");
      if (returnComparator() === "CREATE_FAILED") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForSignalMapCreated = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState12);
}, "waitForSignalMapCreated");
var waitUntilSignalMapCreated = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState12);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilSignalMapCreated");

// src/waiters/waitForSignalMapMonitorDeleted.ts

var checkState13 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new GetSignalMapCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.MonitorDeployment.Status;
      }, "returnComparator");
      if (returnComparator() === "DELETE_COMPLETE") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.MonitorDeployment.Status;
      }, "returnComparator");
      if (returnComparator() === "DELETE_IN_PROGRESS") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.MonitorDeployment.Status;
      }, "returnComparator");
      if (returnComparator() === "DELETE_FAILED") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForSignalMapMonitorDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState13);
}, "waitForSignalMapMonitorDeleted");
var waitUntilSignalMapMonitorDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState13);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilSignalMapMonitorDeleted");

// src/waiters/waitForSignalMapMonitorDeployed.ts

var checkState14 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new GetSignalMapCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.MonitorDeployment.Status;
      }, "returnComparator");
      if (returnComparator() === "DRY_RUN_DEPLOYMENT_COMPLETE") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.MonitorDeployment.Status;
      }, "returnComparator");
      if (returnComparator() === "DEPLOYMENT_COMPLETE") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.MonitorDeployment.Status;
      }, "returnComparator");
      if (returnComparator() === "DRY_RUN_DEPLOYMENT_IN_PROGRESS") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.MonitorDeployment.Status;
      }, "returnComparator");
      if (returnComparator() === "DEPLOYMENT_IN_PROGRESS") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.MonitorDeployment.Status;
      }, "returnComparator");
      if (returnComparator() === "DRY_RUN_DEPLOYMENT_FAILED") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.MonitorDeployment.Status;
      }, "returnComparator");
      if (returnComparator() === "DEPLOYMENT_FAILED") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForSignalMapMonitorDeployed = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState14);
}, "waitForSignalMapMonitorDeployed");
var waitUntilSignalMapMonitorDeployed = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState14);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilSignalMapMonitorDeployed");

// src/waiters/waitForSignalMapUpdated.ts

var checkState15 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new GetSignalMapCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Status;
      }, "returnComparator");
      if (returnComparator() === "UPDATE_COMPLETE") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Status;
      }, "returnComparator");
      if (returnComparator() === "UPDATE_IN_PROGRESS") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Status;
      }, "returnComparator");
      if (returnComparator() === "UPDATE_FAILED") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Status;
      }, "returnComparator");
      if (returnComparator() === "UPDATE_REVERTED") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForSignalMapUpdated = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState15);
}, "waitForSignalMapUpdated");
var waitUntilSignalMapUpdated = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 5, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState15);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilSignalMapUpdated");

// src/models/models_0.ts
var DashRoleAudio = {
  ALTERNATE: "ALTERNATE",
  COMMENTARY: "COMMENTARY",
  DESCRIPTION: "DESCRIPTION",
  DUB: "DUB",
  EMERGENCY: "EMERGENCY",
  ENHANCED_AUDIO_INTELLIGIBILITY: "ENHANCED-AUDIO-INTELLIGIBILITY",
  KARAOKE: "KARAOKE",
  MAIN: "MAIN",
  SUPPLEMENTARY: "SUPPLEMENTARY"
};
var AudioNormalizationAlgorithm = {
  ITU_1770_1: "ITU_1770_1",
  ITU_1770_2: "ITU_1770_2"
};
var AudioNormalizationAlgorithmControl = {
  CORRECT_AUDIO: "CORRECT_AUDIO"
};
var AudioType = {
  CLEAN_EFFECTS: "CLEAN_EFFECTS",
  HEARING_IMPAIRED: "HEARING_IMPAIRED",
  UNDEFINED: "UNDEFINED",
  VISUAL_IMPAIRED_COMMENTARY: "VISUAL_IMPAIRED_COMMENTARY"
};
var AudioDescriptionAudioTypeControl = {
  FOLLOW_INPUT: "FOLLOW_INPUT",
  USE_CONFIGURED: "USE_CONFIGURED"
};
var NielsenWatermarksCbetStepaside = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var NielsenWatermarksDistributionTypes = {
  FINAL_DISTRIBUTOR: "FINAL_DISTRIBUTOR",
  PROGRAM_CONTENT: "PROGRAM_CONTENT"
};
var NielsenWatermarkTimezones = {
  AMERICA_PUERTO_RICO: "AMERICA_PUERTO_RICO",
  US_ALASKA: "US_ALASKA",
  US_ARIZONA: "US_ARIZONA",
  US_CENTRAL: "US_CENTRAL",
  US_EASTERN: "US_EASTERN",
  US_HAWAII: "US_HAWAII",
  US_MOUNTAIN: "US_MOUNTAIN",
  US_PACIFIC: "US_PACIFIC",
  US_SAMOA: "US_SAMOA",
  UTC: "UTC"
};
var AacCodingMode = {
  AD_RECEIVER_MIX: "AD_RECEIVER_MIX",
  CODING_MODE_1_0: "CODING_MODE_1_0",
  CODING_MODE_1_1: "CODING_MODE_1_1",
  CODING_MODE_2_0: "CODING_MODE_2_0",
  CODING_MODE_5_1: "CODING_MODE_5_1"
};
var AacInputType = {
  BROADCASTER_MIXED_AD: "BROADCASTER_MIXED_AD",
  NORMAL: "NORMAL"
};
var AacProfile = {
  HEV1: "HEV1",
  HEV2: "HEV2",
  LC: "LC"
};
var AacRateControlMode = {
  CBR: "CBR",
  VBR: "VBR"
};
var AacRawFormat = {
  LATM_LOAS: "LATM_LOAS",
  NONE: "NONE"
};
var AacSpec = {
  MPEG2: "MPEG2",
  MPEG4: "MPEG4"
};
var AacVbrQuality = {
  HIGH: "HIGH",
  LOW: "LOW",
  MEDIUM_HIGH: "MEDIUM_HIGH",
  MEDIUM_LOW: "MEDIUM_LOW"
};
var Ac3AttenuationControl = {
  ATTENUATE_3_DB: "ATTENUATE_3_DB",
  NONE: "NONE"
};
var Ac3BitstreamMode = {
  COMMENTARY: "COMMENTARY",
  COMPLETE_MAIN: "COMPLETE_MAIN",
  DIALOGUE: "DIALOGUE",
  EMERGENCY: "EMERGENCY",
  HEARING_IMPAIRED: "HEARING_IMPAIRED",
  MUSIC_AND_EFFECTS: "MUSIC_AND_EFFECTS",
  VISUALLY_IMPAIRED: "VISUALLY_IMPAIRED",
  VOICE_OVER: "VOICE_OVER"
};
var Ac3CodingMode = {
  CODING_MODE_1_0: "CODING_MODE_1_0",
  CODING_MODE_1_1: "CODING_MODE_1_1",
  CODING_MODE_2_0: "CODING_MODE_2_0",
  CODING_MODE_3_2_LFE: "CODING_MODE_3_2_LFE"
};
var Ac3DrcProfile = {
  FILM_STANDARD: "FILM_STANDARD",
  NONE: "NONE"
};
var Ac3LfeFilter = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Ac3MetadataControl = {
  FOLLOW_INPUT: "FOLLOW_INPUT",
  USE_CONFIGURED: "USE_CONFIGURED"
};
var Eac3AtmosCodingMode = {
  CODING_MODE_5_1_4: "CODING_MODE_5_1_4",
  CODING_MODE_7_1_4: "CODING_MODE_7_1_4",
  CODING_MODE_9_1_6: "CODING_MODE_9_1_6"
};
var Eac3AtmosDrcLine = {
  FILM_LIGHT: "FILM_LIGHT",
  FILM_STANDARD: "FILM_STANDARD",
  MUSIC_LIGHT: "MUSIC_LIGHT",
  MUSIC_STANDARD: "MUSIC_STANDARD",
  NONE: "NONE",
  SPEECH: "SPEECH"
};
var Eac3AtmosDrcRf = {
  FILM_LIGHT: "FILM_LIGHT",
  FILM_STANDARD: "FILM_STANDARD",
  MUSIC_LIGHT: "MUSIC_LIGHT",
  MUSIC_STANDARD: "MUSIC_STANDARD",
  NONE: "NONE",
  SPEECH: "SPEECH"
};
var Eac3AttenuationControl = {
  ATTENUATE_3_DB: "ATTENUATE_3_DB",
  NONE: "NONE"
};
var Eac3BitstreamMode = {
  COMMENTARY: "COMMENTARY",
  COMPLETE_MAIN: "COMPLETE_MAIN",
  EMERGENCY: "EMERGENCY",
  HEARING_IMPAIRED: "HEARING_IMPAIRED",
  VISUALLY_IMPAIRED: "VISUALLY_IMPAIRED"
};
var Eac3CodingMode = {
  CODING_MODE_1_0: "CODING_MODE_1_0",
  CODING_MODE_2_0: "CODING_MODE_2_0",
  CODING_MODE_3_2: "CODING_MODE_3_2"
};
var Eac3DcFilter = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Eac3DrcLine = {
  FILM_LIGHT: "FILM_LIGHT",
  FILM_STANDARD: "FILM_STANDARD",
  MUSIC_LIGHT: "MUSIC_LIGHT",
  MUSIC_STANDARD: "MUSIC_STANDARD",
  NONE: "NONE",
  SPEECH: "SPEECH"
};
var Eac3DrcRf = {
  FILM_LIGHT: "FILM_LIGHT",
  FILM_STANDARD: "FILM_STANDARD",
  MUSIC_LIGHT: "MUSIC_LIGHT",
  MUSIC_STANDARD: "MUSIC_STANDARD",
  NONE: "NONE",
  SPEECH: "SPEECH"
};
var Eac3LfeControl = {
  LFE: "LFE",
  NO_LFE: "NO_LFE"
};
var Eac3LfeFilter = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Eac3MetadataControl = {
  FOLLOW_INPUT: "FOLLOW_INPUT",
  USE_CONFIGURED: "USE_CONFIGURED"
};
var Eac3PassthroughControl = {
  NO_PASSTHROUGH: "NO_PASSTHROUGH",
  WHEN_POSSIBLE: "WHEN_POSSIBLE"
};
var Eac3PhaseControl = {
  NO_SHIFT: "NO_SHIFT",
  SHIFT_90_DEGREES: "SHIFT_90_DEGREES"
};
var Eac3StereoDownmix = {
  DPL2: "DPL2",
  LO_RO: "LO_RO",
  LT_RT: "LT_RT",
  NOT_INDICATED: "NOT_INDICATED"
};
var Eac3SurroundExMode = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED",
  NOT_INDICATED: "NOT_INDICATED"
};
var Eac3SurroundMode = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED",
  NOT_INDICATED: "NOT_INDICATED"
};
var Mp2CodingMode = {
  CODING_MODE_1_0: "CODING_MODE_1_0",
  CODING_MODE_2_0: "CODING_MODE_2_0"
};
var WavCodingMode = {
  CODING_MODE_1_0: "CODING_MODE_1_0",
  CODING_MODE_2_0: "CODING_MODE_2_0",
  CODING_MODE_4_0: "CODING_MODE_4_0",
  CODING_MODE_8_0: "CODING_MODE_8_0"
};
var DvbDashAccessibility = {
  DVBDASH_1_VISUALLY_IMPAIRED: "DVBDASH_1_VISUALLY_IMPAIRED",
  DVBDASH_2_HARD_OF_HEARING: "DVBDASH_2_HARD_OF_HEARING",
  DVBDASH_3_SUPPLEMENTAL_COMMENTARY: "DVBDASH_3_SUPPLEMENTAL_COMMENTARY",
  DVBDASH_4_DIRECTORS_COMMENTARY: "DVBDASH_4_DIRECTORS_COMMENTARY",
  DVBDASH_5_EDUCATIONAL_NOTES: "DVBDASH_5_EDUCATIONAL_NOTES",
  DVBDASH_6_MAIN_PROGRAM: "DVBDASH_6_MAIN_PROGRAM",
  DVBDASH_7_CLEAN_FEED: "DVBDASH_7_CLEAN_FEED"
};
var AudioDescriptionLanguageCodeControl = {
  FOLLOW_INPUT: "FOLLOW_INPUT",
  USE_CONFIGURED: "USE_CONFIGURED"
};
var AudioLanguageSelectionPolicy = {
  LOOSE: "LOOSE",
  STRICT: "STRICT"
};
var DolbyEProgramSelection = {
  ALL_CHANNELS: "ALL_CHANNELS",
  PROGRAM_1: "PROGRAM_1",
  PROGRAM_2: "PROGRAM_2",
  PROGRAM_3: "PROGRAM_3",
  PROGRAM_4: "PROGRAM_4",
  PROGRAM_5: "PROGRAM_5",
  PROGRAM_6: "PROGRAM_6",
  PROGRAM_7: "PROGRAM_7",
  PROGRAM_8: "PROGRAM_8"
};
var AccessibilityType = {
  DOES_NOT_IMPLEMENT_ACCESSIBILITY_FEATURES: "DOES_NOT_IMPLEMENT_ACCESSIBILITY_FEATURES",
  IMPLEMENTS_ACCESSIBILITY_FEATURES: "IMPLEMENTS_ACCESSIBILITY_FEATURES"
};
var DashRoleCaption = {
  ALTERNATE: "ALTERNATE",
  CAPTION: "CAPTION",
  COMMENTARY: "COMMENTARY",
  DESCRIPTION: "DESCRIPTION",
  DUB: "DUB",
  EASYREADER: "EASYREADER",
  EMERGENCY: "EMERGENCY",
  FORCED_SUBTITLE: "FORCED-SUBTITLE",
  KARAOKE: "KARAOKE",
  MAIN: "MAIN",
  METADATA: "METADATA",
  SUBTITLE: "SUBTITLE",
  SUPPLEMENTARY: "SUPPLEMENTARY"
};
var BurnInAlignment = {
  CENTERED: "CENTERED",
  LEFT: "LEFT",
  SMART: "SMART"
};
var BurnInBackgroundColor = {
  BLACK: "BLACK",
  NONE: "NONE",
  WHITE: "WHITE"
};
var BurnInFontColor = {
  BLACK: "BLACK",
  BLUE: "BLUE",
  GREEN: "GREEN",
  RED: "RED",
  WHITE: "WHITE",
  YELLOW: "YELLOW"
};
var BurnInOutlineColor = {
  BLACK: "BLACK",
  BLUE: "BLUE",
  GREEN: "GREEN",
  RED: "RED",
  WHITE: "WHITE",
  YELLOW: "YELLOW"
};
var BurnInShadowColor = {
  BLACK: "BLACK",
  NONE: "NONE",
  WHITE: "WHITE"
};
var BurnInTeletextGridControl = {
  FIXED: "FIXED",
  SCALED: "SCALED"
};
var DvbSubDestinationAlignment = {
  CENTERED: "CENTERED",
  LEFT: "LEFT",
  SMART: "SMART"
};
var DvbSubDestinationBackgroundColor = {
  BLACK: "BLACK",
  NONE: "NONE",
  WHITE: "WHITE"
};
var DvbSubDestinationFontColor = {
  BLACK: "BLACK",
  BLUE: "BLUE",
  GREEN: "GREEN",
  RED: "RED",
  WHITE: "WHITE",
  YELLOW: "YELLOW"
};
var DvbSubDestinationOutlineColor = {
  BLACK: "BLACK",
  BLUE: "BLUE",
  GREEN: "GREEN",
  RED: "RED",
  WHITE: "WHITE",
  YELLOW: "YELLOW"
};
var DvbSubDestinationShadowColor = {
  BLACK: "BLACK",
  NONE: "NONE",
  WHITE: "WHITE"
};
var DvbSubDestinationTeletextGridControl = {
  FIXED: "FIXED",
  SCALED: "SCALED"
};
var EbuTtDFillLineGapControl = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var EbuTtDDestinationStyleControl = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var TtmlDestinationStyleControl = {
  PASSTHROUGH: "PASSTHROUGH",
  USE_CONFIGURED: "USE_CONFIGURED"
};
var WebvttDestinationStyleControl = {
  NO_STYLE_DATA: "NO_STYLE_DATA",
  PASSTHROUGH: "PASSTHROUGH"
};
var DvbSubOcrLanguage = {
  DEU: "DEU",
  ENG: "ENG",
  FRA: "FRA",
  NLD: "NLD",
  POR: "POR",
  SPA: "SPA"
};
var EmbeddedConvert608To708 = {
  DISABLED: "DISABLED",
  UPCONVERT: "UPCONVERT"
};
var EmbeddedScte20Detection = {
  AUTO: "AUTO",
  OFF: "OFF"
};
var Scte20Convert608To708 = {
  DISABLED: "DISABLED",
  UPCONVERT: "UPCONVERT"
};
var Scte27OcrLanguage = {
  DEU: "DEU",
  ENG: "ENG",
  FRA: "FRA",
  NLD: "NLD",
  POR: "POR",
  SPA: "SPA"
};
var ChannelPipelineIdToRestart = {
  PIPELINE_0: "PIPELINE_0",
  PIPELINE_1: "PIPELINE_1"
};
var CdiInputResolution = {
  FHD: "FHD",
  HD: "HD",
  SD: "SD",
  UHD: "UHD"
};
var ChannelClass = {
  SINGLE_PIPELINE: "SINGLE_PIPELINE",
  STANDARD: "STANDARD"
};
var InputPreference = {
  EQUAL_INPUT_PREFERENCE: "EQUAL_INPUT_PREFERENCE",
  PRIMARY_INPUT_PREFERRED: "PRIMARY_INPUT_PREFERRED"
};
var InputDeblockFilter = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var InputDenoiseFilter = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var InputFilter = {
  AUTO: "AUTO",
  DISABLED: "DISABLED",
  FORCED: "FORCED"
};
var HlsScte35SourceType = {
  MANIFEST: "MANIFEST",
  SEGMENTS: "SEGMENTS"
};
var NetworkInputServerValidation = {
  CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME: "CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME",
  CHECK_CRYPTOGRAPHY_ONLY: "CHECK_CRYPTOGRAPHY_ONLY"
};
var Smpte2038DataPreference = {
  IGNORE: "IGNORE",
  PREFER: "PREFER"
};
var InputSourceEndBehavior = {
  CONTINUE: "CONTINUE",
  LOOP: "LOOP"
};
var VideoSelectorColorSpace = {
  FOLLOW: "FOLLOW",
  HDR10: "HDR10",
  HLG_2020: "HLG_2020",
  REC_601: "REC_601",
  REC_709: "REC_709"
};
var VideoSelectorColorSpaceUsage = {
  FALLBACK: "FALLBACK",
  FORCE: "FORCE"
};
var InputCodec = {
  AVC: "AVC",
  HEVC: "HEVC",
  MPEG2: "MPEG2"
};
var InputMaximumBitrate = {
  MAX_10_MBPS: "MAX_10_MBPS",
  MAX_20_MBPS: "MAX_20_MBPS",
  MAX_50_MBPS: "MAX_50_MBPS"
};
var InputResolution = {
  HD: "HD",
  SD: "SD",
  UHD: "UHD"
};
var LogLevel = {
  DEBUG: "DEBUG",
  DISABLED: "DISABLED",
  ERROR: "ERROR",
  INFO: "INFO",
  WARNING: "WARNING"
};
var MaintenanceDay = {
  FRIDAY: "FRIDAY",
  MONDAY: "MONDAY",
  SATURDAY: "SATURDAY",
  SUNDAY: "SUNDAY",
  THURSDAY: "THURSDAY",
  TUESDAY: "TUESDAY",
  WEDNESDAY: "WEDNESDAY"
};
var ChannelState = {
  CREATE_FAILED: "CREATE_FAILED",
  CREATING: "CREATING",
  DELETED: "DELETED",
  DELETING: "DELETING",
  IDLE: "IDLE",
  RECOVERING: "RECOVERING",
  RUNNING: "RUNNING",
  STARTING: "STARTING",
  STOPPING: "STOPPING",
  UPDATE_FAILED: "UPDATE_FAILED",
  UPDATING: "UPDATING"
};
var CloudWatchAlarmTemplateComparisonOperator = {
  GreaterThanOrEqualToThreshold: "GreaterThanOrEqualToThreshold",
  GreaterThanThreshold: "GreaterThanThreshold",
  LessThanOrEqualToThreshold: "LessThanOrEqualToThreshold",
  LessThanThreshold: "LessThanThreshold"
};
var CloudWatchAlarmTemplateStatistic = {
  Average: "Average",
  Maximum: "Maximum",
  Minimum: "Minimum",
  SampleCount: "SampleCount",
  Sum: "Sum"
};
var CloudWatchAlarmTemplateTargetResourceType = {
  CLOUDFRONT_DISTRIBUTION: "CLOUDFRONT_DISTRIBUTION",
  MEDIACONNECT_FLOW: "MEDIACONNECT_FLOW",
  MEDIALIVE_CHANNEL: "MEDIALIVE_CHANNEL",
  MEDIALIVE_INPUT_DEVICE: "MEDIALIVE_INPUT_DEVICE",
  MEDIALIVE_MULTIPLEX: "MEDIALIVE_MULTIPLEX",
  MEDIAPACKAGE_CHANNEL: "MEDIAPACKAGE_CHANNEL",
  MEDIAPACKAGE_ORIGIN_ENDPOINT: "MEDIAPACKAGE_ORIGIN_ENDPOINT",
  S3_BUCKET: "S3_BUCKET"
};
var CloudWatchAlarmTemplateTreatMissingData = {
  breaching: "breaching",
  ignore: "ignore",
  missing: "missing",
  notBreaching: "notBreaching"
};
var ColorSpace = {
  HDR10: "HDR10",
  HLG_2020: "HLG_2020",
  REC_601: "REC_601",
  REC_709: "REC_709"
};
var EventBridgeRuleTemplateEventType = {
  MEDIACONNECT_ALERT: "MEDIACONNECT_ALERT",
  MEDIACONNECT_FLOW_STATUS_CHANGE: "MEDIACONNECT_FLOW_STATUS_CHANGE",
  MEDIACONNECT_OUTPUT_HEALTH: "MEDIACONNECT_OUTPUT_HEALTH",
  MEDIACONNECT_SOURCE_HEALTH: "MEDIACONNECT_SOURCE_HEALTH",
  MEDIALIVE_CHANNEL_ALERT: "MEDIALIVE_CHANNEL_ALERT",
  MEDIALIVE_CHANNEL_INPUT_CHANGE: "MEDIALIVE_CHANNEL_INPUT_CHANGE",
  MEDIALIVE_CHANNEL_STATE_CHANGE: "MEDIALIVE_CHANNEL_STATE_CHANGE",
  MEDIALIVE_MULTIPLEX_ALERT: "MEDIALIVE_MULTIPLEX_ALERT",
  MEDIALIVE_MULTIPLEX_STATE_CHANGE: "MEDIALIVE_MULTIPLEX_STATE_CHANGE",
  MEDIAPACKAGE_HARVEST_JOB_NOTIFICATION: "MEDIAPACKAGE_HARVEST_JOB_NOTIFICATION",
  MEDIAPACKAGE_INPUT_NOTIFICATION: "MEDIAPACKAGE_INPUT_NOTIFICATION",
  MEDIAPACKAGE_KEY_PROVIDER_NOTIFICATION: "MEDIAPACKAGE_KEY_PROVIDER_NOTIFICATION",
  SIGNAL_MAP_ACTIVE_ALARM: "SIGNAL_MAP_ACTIVE_ALARM"
};
var HlsAdMarkers = {
  ADOBE: "ADOBE",
  ELEMENTAL: "ELEMENTAL",
  ELEMENTAL_SCTE35: "ELEMENTAL_SCTE35"
};
var InputClass = {
  SINGLE_PIPELINE: "SINGLE_PIPELINE",
  STANDARD: "STANDARD"
};
var InputSourceType = {
  DYNAMIC: "DYNAMIC",
  STATIC: "STATIC"
};
var InputState = {
  ATTACHED: "ATTACHED",
  CREATING: "CREATING",
  DELETED: "DELETED",
  DELETING: "DELETING",
  DETACHED: "DETACHED"
};
var InputType = {
  AWS_CDI: "AWS_CDI",
  INPUT_DEVICE: "INPUT_DEVICE",
  MEDIACONNECT: "MEDIACONNECT",
  MP4_FILE: "MP4_FILE",
  RTMP_PULL: "RTMP_PULL",
  RTMP_PUSH: "RTMP_PUSH",
  RTP_PUSH: "RTP_PUSH",
  TS_FILE: "TS_FILE",
  UDP_PUSH: "UDP_PUSH",
  URL_PULL: "URL_PULL"
};
var InputDeviceConfigurableAudioChannelPairProfile = {
  CBR_AAC_HQ_192000: "CBR-AAC_HQ-192000",
  CBR_AAC_HQ_256000: "CBR-AAC_HQ-256000",
  CBR_AAC_HQ_384000: "CBR-AAC_HQ-384000",
  CBR_AAC_HQ_512000: "CBR-AAC_HQ-512000",
  DISABLED: "DISABLED",
  VBR_AAC_HE_64000: "VBR-AAC_HE-64000",
  VBR_AAC_HHE_16000: "VBR-AAC_HHE-16000",
  VBR_AAC_LC_128000: "VBR-AAC_LC-128000"
};
var InputDeviceConnectionState = {
  CONNECTED: "CONNECTED",
  DISCONNECTED: "DISCONNECTED"
};
var DeviceSettingsSyncState = {
  SYNCED: "SYNCED",
  SYNCING: "SYNCING"
};
var DeviceUpdateStatus = {
  NOT_UP_TO_DATE: "NOT_UP_TO_DATE",
  UPDATING: "UPDATING",
  UP_TO_DATE: "UP_TO_DATE"
};
var InputDeviceActiveInput = {
  HDMI: "HDMI",
  SDI: "SDI"
};
var InputDeviceConfiguredInput = {
  AUTO: "AUTO",
  HDMI: "HDMI",
  SDI: "SDI"
};
var InputDeviceState = {
  IDLE: "IDLE",
  STREAMING: "STREAMING"
};
var InputDeviceScanType = {
  INTERLACED: "INTERLACED",
  PROGRESSIVE: "PROGRESSIVE"
};
var InputDeviceIpScheme = {
  DHCP: "DHCP",
  STATIC: "STATIC"
};
var InputDeviceOutputType = {
  MEDIACONNECT_FLOW: "MEDIACONNECT_FLOW",
  MEDIALIVE_INPUT: "MEDIALIVE_INPUT",
  NONE: "NONE"
};
var InputDeviceType = {
  HD: "HD",
  UHD: "UHD"
};
var InputDeviceUhdAudioChannelPairProfile = {
  CBR_AAC_HQ_192000: "CBR-AAC_HQ-192000",
  CBR_AAC_HQ_256000: "CBR-AAC_HQ-256000",
  CBR_AAC_HQ_384000: "CBR-AAC_HQ-384000",
  CBR_AAC_HQ_512000: "CBR-AAC_HQ-512000",
  DISABLED: "DISABLED",
  VBR_AAC_HE_64000: "VBR-AAC_HE-64000",
  VBR_AAC_HHE_16000: "VBR-AAC_HHE-16000",
  VBR_AAC_LC_128000: "VBR-AAC_LC-128000"
};
var InputDeviceCodec = {
  AVC: "AVC",
  HEVC: "HEVC"
};
var InputSecurityGroupState = {
  DELETED: "DELETED",
  IDLE: "IDLE",
  IN_USE: "IN_USE",
  UPDATING: "UPDATING"
};
var MultiplexState = {
  CREATE_FAILED: "CREATE_FAILED",
  CREATING: "CREATING",
  DELETED: "DELETED",
  DELETING: "DELETING",
  IDLE: "IDLE",
  RECOVERING: "RECOVERING",
  RUNNING: "RUNNING",
  STARTING: "STARTING",
  STOPPING: "STOPPING"
};
var OfferingDurationUnits = {
  MONTHS: "MONTHS"
};
var OfferingType = {
  NO_UPFRONT: "NO_UPFRONT"
};
var ReservationCodec = {
  AUDIO: "AUDIO",
  AVC: "AVC",
  HEVC: "HEVC",
  LINK: "LINK",
  MPEG2: "MPEG2"
};
var ReservationMaximumBitrate = {
  MAX_10_MBPS: "MAX_10_MBPS",
  MAX_20_MBPS: "MAX_20_MBPS",
  MAX_50_MBPS: "MAX_50_MBPS"
};
var ReservationMaximumFramerate = {
  MAX_30_FPS: "MAX_30_FPS",
  MAX_60_FPS: "MAX_60_FPS"
};
var ReservationResolution = {
  FHD: "FHD",
  HD: "HD",
  SD: "SD",
  UHD: "UHD"
};
var ReservationResourceType = {
  CHANNEL: "CHANNEL",
  INPUT: "INPUT",
  MULTIPLEX: "MULTIPLEX",
  OUTPUT: "OUTPUT"
};
var ReservationSpecialFeature = {
  ADVANCED_AUDIO: "ADVANCED_AUDIO",
  AUDIO_NORMALIZATION: "AUDIO_NORMALIZATION",
  MGHD: "MGHD",
  MGUHD: "MGUHD"
};
var ReservationVideoQuality = {
  ENHANCED: "ENHANCED",
  PREMIUM: "PREMIUM",
  STANDARD: "STANDARD"
};
var M2tsAbsentInputAudioBehavior = {
  DROP: "DROP",
  ENCODE_SILENCE: "ENCODE_SILENCE"
};
var M2tsArib = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var M2tsAribCaptionsPidControl = {
  AUTO: "AUTO",
  USE_CONFIGURED: "USE_CONFIGURED"
};
var M2tsAudioBufferModel = {
  ATSC: "ATSC",
  DVB: "DVB"
};
var M2tsAudioStreamType = {
  ATSC: "ATSC",
  DVB: "DVB"
};
var M2tsBufferModel = {
  MULTIPLEX: "MULTIPLEX",
  NONE: "NONE"
};
var M2tsCcDescriptor = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var DvbSdtOutputSdt = {
  SDT_FOLLOW: "SDT_FOLLOW",
  SDT_FOLLOW_IF_PRESENT: "SDT_FOLLOW_IF_PRESENT",
  SDT_MANUAL: "SDT_MANUAL",
  SDT_NONE: "SDT_NONE"
};
var M2tsEbifControl = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH"
};
var M2tsAudioInterval = {
  VIDEO_AND_FIXED_INTERVALS: "VIDEO_AND_FIXED_INTERVALS",
  VIDEO_INTERVAL: "VIDEO_INTERVAL"
};
var M2tsEbpPlacement = {
  VIDEO_AND_AUDIO_PIDS: "VIDEO_AND_AUDIO_PIDS",
  VIDEO_PID: "VIDEO_PID"
};
var M2tsEsRateInPes = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var M2tsKlv = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH"
};
var M2tsNielsenId3Behavior = {
  NO_PASSTHROUGH: "NO_PASSTHROUGH",
  PASSTHROUGH: "PASSTHROUGH"
};
var M2tsPcrControl = {
  CONFIGURED_PCR_PERIOD: "CONFIGURED_PCR_PERIOD",
  PCR_EVERY_PES_PACKET: "PCR_EVERY_PES_PACKET"
};
var M2tsRateMode = {
  CBR: "CBR",
  VBR: "VBR"
};
var M2tsScte35Control = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH"
};
var M2tsSegmentationMarkers = {
  EBP: "EBP",
  EBP_LEGACY: "EBP_LEGACY",
  NONE: "NONE",
  PSI_SEGSTART: "PSI_SEGSTART",
  RAI_ADAPT: "RAI_ADAPT",
  RAI_SEGSTART: "RAI_SEGSTART"
};
var M2tsSegmentationStyle = {
  MAINTAIN_CADENCE: "MAINTAIN_CADENCE",
  RESET_CADENCE: "RESET_CADENCE"
};
var M2tsTimedMetadataBehavior = {
  NO_PASSTHROUGH: "NO_PASSTHROUGH",
  PASSTHROUGH: "PASSTHROUGH"
};
var HlsH265PackagingType = {
  HEV1: "HEV1",
  HVC1: "HVC1"
};
var AudioOnlyHlsTrackType = {
  ALTERNATE_AUDIO_AUTO_SELECT: "ALTERNATE_AUDIO_AUTO_SELECT",
  ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT: "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT",
  ALTERNATE_AUDIO_NOT_AUTO_SELECT: "ALTERNATE_AUDIO_NOT_AUTO_SELECT",
  AUDIO_ONLY_VARIANT_STREAM: "AUDIO_ONLY_VARIANT_STREAM"
};
var AudioOnlyHlsSegmentType = {
  AAC: "AAC",
  FMP4: "FMP4"
};
var Fmp4NielsenId3Behavior = {
  NO_PASSTHROUGH: "NO_PASSTHROUGH",
  PASSTHROUGH: "PASSTHROUGH"
};
var Fmp4TimedMetadataBehavior = {
  NO_PASSTHROUGH: "NO_PASSTHROUGH",
  PASSTHROUGH: "PASSTHROUGH"
};
var M3u8KlvBehavior = {
  NO_PASSTHROUGH: "NO_PASSTHROUGH",
  PASSTHROUGH: "PASSTHROUGH"
};
var M3u8NielsenId3Behavior = {
  NO_PASSTHROUGH: "NO_PASSTHROUGH",
  PASSTHROUGH: "PASSTHROUGH"
};
var M3u8PcrControl = {
  CONFIGURED_PCR_PERIOD: "CONFIGURED_PCR_PERIOD",
  PCR_EVERY_PES_PACKET: "PCR_EVERY_PES_PACKET"
};
var M3u8Scte35Behavior = {
  NO_PASSTHROUGH: "NO_PASSTHROUGH",
  PASSTHROUGH: "PASSTHROUGH"
};
var M3u8TimedMetadataBehavior = {
  NO_PASSTHROUGH: "NO_PASSTHROUGH",
  PASSTHROUGH: "PASSTHROUGH"
};
var MsSmoothH265PackagingType = {
  HEV1: "HEV1",
  HVC1: "HVC1"
};
var RtmpOutputCertificateMode = {
  SELF_SIGNED: "SELF_SIGNED",
  VERIFY_AUTHENTICITY: "VERIFY_AUTHENTICITY"
};
var FecOutputIncludeFec = {
  COLUMN: "COLUMN",
  COLUMN_AND_ROW: "COLUMN_AND_ROW"
};
var S3CannedAcl = {
  AUTHENTICATED_READ: "AUTHENTICATED_READ",
  BUCKET_OWNER_FULL_CONTROL: "BUCKET_OWNER_FULL_CONTROL",
  BUCKET_OWNER_READ: "BUCKET_OWNER_READ",
  PUBLIC_READ: "PUBLIC_READ"
};
var CmafNielsenId3Behavior = {
  NO_PASSTHROUGH: "NO_PASSTHROUGH",
  PASSTHROUGH: "PASSTHROUGH"
};
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  MediaLiveServiceException,
  __Client,
  MediaLiveClient,
  MediaLive,
  $Command,
  AcceptInputDeviceTransferCommand,
  BatchDeleteCommand,
  BatchStartCommand,
  BatchStopCommand,
  BatchUpdateScheduleCommand,
  CancelInputDeviceTransferCommand,
  ClaimDeviceCommand,
  CreateChannelCommand,
  CreateCloudWatchAlarmTemplateCommand,
  CreateCloudWatchAlarmTemplateGroupCommand,
  CreateEventBridgeRuleTemplateCommand,
  CreateEventBridgeRuleTemplateGroupCommand,
  CreateInputCommand,
  CreateInputSecurityGroupCommand,
  CreateMultiplexCommand,
  CreateMultiplexProgramCommand,
  CreatePartnerInputCommand,
  CreateSignalMapCommand,
  CreateTagsCommand,
  DeleteChannelCommand,
  DeleteCloudWatchAlarmTemplateCommand,
  DeleteCloudWatchAlarmTemplateGroupCommand,
  DeleteEventBridgeRuleTemplateCommand,
  DeleteEventBridgeRuleTemplateGroupCommand,
  DeleteInputCommand,
  DeleteInputSecurityGroupCommand,
  DeleteMultiplexCommand,
  DeleteMultiplexProgramCommand,
  DeleteReservationCommand,
  DeleteScheduleCommand,
  DeleteSignalMapCommand,
  DeleteTagsCommand,
  DescribeAccountConfigurationCommand,
  DescribeChannelCommand,
  DescribeInputCommand,
  DescribeInputDeviceCommand,
  DescribeInputDeviceThumbnailCommand,
  DescribeInputSecurityGroupCommand,
  DescribeMultiplexCommand,
  DescribeMultiplexProgramCommand,
  DescribeOfferingCommand,
  DescribeReservationCommand,
  DescribeScheduleCommand,
  DescribeThumbnailsCommand,
  GetCloudWatchAlarmTemplateCommand,
  GetCloudWatchAlarmTemplateGroupCommand,
  GetEventBridgeRuleTemplateCommand,
  GetEventBridgeRuleTemplateGroupCommand,
  GetSignalMapCommand,
  ListChannelsCommand,
  ListCloudWatchAlarmTemplateGroupsCommand,
  ListCloudWatchAlarmTemplatesCommand,
  ListEventBridgeRuleTemplateGroupsCommand,
  ListEventBridgeRuleTemplatesCommand,
  ListInputDeviceTransfersCommand,
  ListInputDevicesCommand,
  ListInputSecurityGroupsCommand,
  ListInputsCommand,
  ListMultiplexProgramsCommand,
  ListMultiplexesCommand,
  ListOfferingsCommand,
  ListReservationsCommand,
  ListSignalMapsCommand,
  ListTagsForResourceCommand,
  PurchaseOfferingCommand,
  RebootInputDeviceCommand,
  RejectInputDeviceTransferCommand,
  RestartChannelPipelinesCommand,
  StartChannelCommand,
  StartDeleteMonitorDeploymentCommand,
  StartInputDeviceCommand,
  StartInputDeviceMaintenanceWindowCommand,
  StartMonitorDeploymentCommand,
  StartMultiplexCommand,
  StartUpdateSignalMapCommand,
  StopChannelCommand,
  StopInputDeviceCommand,
  StopMultiplexCommand,
  TransferInputDeviceCommand,
  UpdateAccountConfigurationCommand,
  UpdateChannelClassCommand,
  UpdateChannelCommand,
  UpdateCloudWatchAlarmTemplateCommand,
  UpdateCloudWatchAlarmTemplateGroupCommand,
  UpdateEventBridgeRuleTemplateCommand,
  UpdateEventBridgeRuleTemplateGroupCommand,
  UpdateInputCommand,
  UpdateInputDeviceCommand,
  UpdateInputSecurityGroupCommand,
  UpdateMultiplexCommand,
  UpdateMultiplexProgramCommand,
  UpdateReservationCommand,
  paginateDescribeSchedule,
  paginateListChannels,
  paginateListCloudWatchAlarmTemplateGroups,
  paginateListCloudWatchAlarmTemplates,
  paginateListEventBridgeRuleTemplateGroups,
  paginateListEventBridgeRuleTemplates,
  paginateListInputDeviceTransfers,
  paginateListInputDevices,
  paginateListInputSecurityGroups,
  paginateListInputs,
  paginateListMultiplexPrograms,
  paginateListMultiplexes,
  paginateListOfferings,
  paginateListReservations,
  paginateListSignalMaps,
  waitForChannelCreated,
  waitUntilChannelCreated,
  waitForChannelDeleted,
  waitUntilChannelDeleted,
  waitForChannelRunning,
  waitUntilChannelRunning,
  waitForChannelStopped,
  waitUntilChannelStopped,
  waitForInputAttached,
  waitUntilInputAttached,
  waitForInputDeleted,
  waitUntilInputDeleted,
  waitForInputDetached,
  waitUntilInputDetached,
  waitForMultiplexCreated,
  waitUntilMultiplexCreated,
  waitForMultiplexDeleted,
  waitUntilMultiplexDeleted,
  waitForMultiplexRunning,
  waitUntilMultiplexRunning,
  waitForMultiplexStopped,
  waitUntilMultiplexStopped,
  waitForSignalMapCreated,
  waitUntilSignalMapCreated,
  waitForSignalMapMonitorDeleted,
  waitUntilSignalMapMonitorDeleted,
  waitForSignalMapMonitorDeployed,
  waitUntilSignalMapMonitorDeployed,
  waitForSignalMapUpdated,
  waitUntilSignalMapUpdated,
  DashRoleAudio,
  AudioNormalizationAlgorithm,
  AudioNormalizationAlgorithmControl,
  AudioType,
  AudioDescriptionAudioTypeControl,
  NielsenWatermarksCbetStepaside,
  NielsenWatermarksDistributionTypes,
  NielsenWatermarkTimezones,
  AacCodingMode,
  AacInputType,
  AacProfile,
  AacRateControlMode,
  AacRawFormat,
  AacSpec,
  AacVbrQuality,
  Ac3AttenuationControl,
  Ac3BitstreamMode,
  Ac3CodingMode,
  Ac3DrcProfile,
  Ac3LfeFilter,
  Ac3MetadataControl,
  Eac3AtmosCodingMode,
  Eac3AtmosDrcLine,
  Eac3AtmosDrcRf,
  Eac3AttenuationControl,
  Eac3BitstreamMode,
  Eac3CodingMode,
  Eac3DcFilter,
  Eac3DrcLine,
  Eac3DrcRf,
  Eac3LfeControl,
  Eac3LfeFilter,
  Eac3MetadataControl,
  Eac3PassthroughControl,
  Eac3PhaseControl,
  Eac3StereoDownmix,
  Eac3SurroundExMode,
  Eac3SurroundMode,
  Mp2CodingMode,
  WavCodingMode,
  DvbDashAccessibility,
  AudioDescriptionLanguageCodeControl,
  AudioLanguageSelectionPolicy,
  DolbyEProgramSelection,
  AccessibilityType,
  DashRoleCaption,
  BurnInAlignment,
  BurnInBackgroundColor,
  BurnInFontColor,
  BurnInOutlineColor,
  BurnInShadowColor,
  BurnInTeletextGridControl,
  DvbSubDestinationAlignment,
  DvbSubDestinationBackgroundColor,
  DvbSubDestinationFontColor,
  DvbSubDestinationOutlineColor,
  DvbSubDestinationShadowColor,
  DvbSubDestinationTeletextGridControl,
  EbuTtDFillLineGapControl,
  EbuTtDDestinationStyleControl,
  TtmlDestinationStyleControl,
  WebvttDestinationStyleControl,
  DvbSubOcrLanguage,
  EmbeddedConvert608To708,
  EmbeddedScte20Detection,
  Scte20Convert608To708,
  Scte27OcrLanguage,
  ChannelPipelineIdToRestart,
  CdiInputResolution,
  ChannelClass,
  InputPreference,
  InputDeblockFilter,
  InputDenoiseFilter,
  InputFilter,
  HlsScte35SourceType,
  NetworkInputServerValidation,
  Smpte2038DataPreference,
  InputSourceEndBehavior,
  VideoSelectorColorSpace,
  VideoSelectorColorSpaceUsage,
  InputCodec,
  InputMaximumBitrate,
  InputResolution,
  LogLevel,
  MaintenanceDay,
  ChannelState,
  CloudWatchAlarmTemplateComparisonOperator,
  CloudWatchAlarmTemplateStatistic,
  CloudWatchAlarmTemplateTargetResourceType,
  CloudWatchAlarmTemplateTreatMissingData,
  ColorSpace,
  EventBridgeRuleTemplateEventType,
  HlsAdMarkers,
  InputClass,
  InputSourceType,
  InputState,
  InputType,
  InputDeviceConfigurableAudioChannelPairProfile,
  InputDeviceConnectionState,
  DeviceSettingsSyncState,
  DeviceUpdateStatus,
  InputDeviceActiveInput,
  InputDeviceConfiguredInput,
  InputDeviceState,
  InputDeviceScanType,
  InputDeviceIpScheme,
  InputDeviceOutputType,
  InputDeviceType,
  InputDeviceUhdAudioChannelPairProfile,
  InputDeviceCodec,
  InputSecurityGroupState,
  MultiplexState,
  OfferingDurationUnits,
  OfferingType,
  ReservationCodec,
  ReservationMaximumBitrate,
  ReservationMaximumFramerate,
  ReservationResolution,
  ReservationResourceType,
  ReservationSpecialFeature,
  ReservationVideoQuality,
  M2tsAbsentInputAudioBehavior,
  M2tsArib,
  M2tsAribCaptionsPidControl,
  M2tsAudioBufferModel,
  M2tsAudioStreamType,
  M2tsBufferModel,
  M2tsCcDescriptor,
  DvbSdtOutputSdt,
  M2tsEbifControl,
  M2tsAudioInterval,
  M2tsEbpPlacement,
  M2tsEsRateInPes,
  M2tsKlv,
  M2tsNielsenId3Behavior,
  M2tsPcrControl,
  M2tsRateMode,
  M2tsScte35Control,
  M2tsSegmentationMarkers,
  M2tsSegmentationStyle,
  M2tsTimedMetadataBehavior,
  HlsH265PackagingType,
  AudioOnlyHlsTrackType,
  AudioOnlyHlsSegmentType,
  Fmp4NielsenId3Behavior,
  Fmp4TimedMetadataBehavior,
  M3u8KlvBehavior,
  M3u8NielsenId3Behavior,
  M3u8PcrControl,
  M3u8Scte35Behavior,
  M3u8TimedMetadataBehavior,
  MsSmoothH265PackagingType,
  RtmpOutputCertificateMode,
  FecOutputIncludeFec,
  S3CannedAcl,
  CmafNielsenId3Behavior,
  Scte35Type,
  CmafIngestSegmentLengthUnits,
  HlsCaptionLanguageSetting,
  HlsClientCache,
  HlsCodecSpecification,
  HlsDirectoryStructure,
  HlsDiscontinuityTags,
  HlsEncryptionType,
  HlsAkamaiHttpTransferMode,
  HlsMediaStoreStorageClass,
  HlsWebdavHttpTransferMode,
  HlsId3SegmentTaggingState,
  IFrameOnlyPlaylistType,
  HlsIncompleteSegmentBehavior,
  InputLossActionForHlsOut,
  HlsIvInManifest,
  HlsIvSource,
  HlsManifestCompression,
  HlsManifestDurationFormat,
  HlsMode,
  HlsOutputSelection,
  HlsProgramDateTime,
  HlsProgramDateTimeClock,
  HlsRedundantManifest,
  HlsSegmentationMode,
  HlsStreamInfResolution,
  HlsTimedMetadataId3Frame,
  HlsTsFileMode,
  SmoothGroupAudioOnlyTimecodeControl,
  SmoothGroupCertificateMode,
  SmoothGroupEventIdMode,
  SmoothGroupEventStopBehavior,
  InputLossActionForMsSmoothOut,
  SmoothGroupSegmentationMode,
  SmoothGroupSparseTrackType,
  SmoothGroupStreamManifestBehavior,
  SmoothGroupTimestampOffsetMode,
  RtmpAdMarkers,
  AuthenticationScheme,
  RtmpCacheFullBehavior,
  RtmpCaptionData,
  IncludeFillerNalUnits,
  InputLossActionForRtmpOut,
  InputLossActionForUdpOut,
  UdpTimedMetadataId3Frame,
  PipelineId,
  ReservationAutomaticRenewal,
  ReservationState,
  InputTimecodeSource,
  LastFrameClippingBehavior,
  Scte35InputMode,
  Scte35ArchiveAllowedFlag,
  Scte35DeviceRestrictions,
  Scte35NoRegionalBlackoutFlag,
  Scte35WebDeliveryAllowedFlag,
  Scte35SegmentationCancelIndicator,
  FollowPoint,
  SignalMapMonitorDeploymentStatus,
  SignalMapStatus,
  ThumbnailType,
  InputDeviceTransferType,
  FrameCaptureIntervalUnit,
  TimecodeBurninFontSize,
  TimecodeBurninPosition,
  H264AdaptiveQuantization,
  AfdSignaling,
  H264ColorMetadata,
  H264EntropyEncoding,
  TemporalFilterPostFilterSharpening,
  TemporalFilterStrength,
  FixedAfd,
  H264FlickerAq,
  H264ForceFieldPictures,
  H264FramerateControl,
  H264GopBReference,
  H264GopSizeUnits,
  H264Level,
  H264LookAheadRateControl,
  H264ParControl,
  H264Profile,
  H264QualityLevel,
  H264RateControlMode,
  H264ScanType,
  H264SceneChangeDetect,
  H264SpatialAq,
  H264SubGopLength,
  H264Syntax,
  H264TemporalAq,
  H264TimecodeInsertionBehavior,
  H265AdaptiveQuantization,
  H265AlternativeTransferFunction,
  H265ColorMetadata,
  H265FlickerAq,
  H265GopSizeUnits,
  H265Level,
  H265LookAheadRateControl,
  H265MvOverPictureBoundaries,
  H265MvTemporalPredictor,
  H265Profile,
  H265RateControlMode,
  H265ScanType,
  H265SceneChangeDetect,
  H265Tier,
  H265TilePadding,
  H265TimecodeInsertionBehavior,
  H265TreeblockSize,
  Mpeg2AdaptiveQuantization,
  Mpeg2ColorMetadata,
  Mpeg2ColorSpace,
  Mpeg2DisplayRatio,
  Mpeg2GopSizeUnits,
  Mpeg2ScanType,
  Mpeg2SubGopLength,
  Mpeg2TimecodeInsertionBehavior,
  VideoDescriptionRespondToAfd,
  VideoDescriptionScalingBehavior,
  AcceptHeader,
  BadGatewayException,
  BadRequestException,
  ConflictException,
  ForbiddenException,
  GatewayTimeoutException,
  InternalServerErrorException,
  NotFoundException,
  TooManyRequestsException,
  UnprocessableEntityException,
  AvailBlankingState,
  Scte35SpliceInsertNoRegionalBlackoutBehavior,
  Scte35SpliceInsertWebDeliveryAllowedBehavior,
  Scte35AposNoRegionalBlackoutBehavior,
  Scte35AposWebDeliveryAllowedBehavior,
  BlackoutSlateNetworkEndBlackout,
  BlackoutSlateState,
  FeatureActivationsInputPrepareScheduleActions,
  FeatureActivationsOutputStaticImageOverlayScheduleActions,
  GlobalConfigurationInputEndAction,
  InputLossImageType,
  GlobalConfigurationOutputLockingMode,
  GlobalConfigurationOutputTimingSource,
  GlobalConfigurationLowFramerateInputs,
  MotionGraphicsInsertion,
  NielsenPcmToId3TaggingState,
  ThumbnailState,
  TimecodeConfigSource,
  ContentType,
  PreferredChannelPipeline,
  RebootInputDeviceForce,
  DescribeInputDeviceThumbnailResponseFilterSensitiveLog
});

