import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { GlueServiceException as __BaseException } from "./GlueServiceException";
import {
  Action,
  Aggregate,
  AmazonRedshiftSource,
  AmazonRedshiftTarget,
  AthenaConnectorSource,
  AuditContext,
  BasicCatalogTarget,
  CatalogDeltaSource,
  CatalogHudiSource,
  CatalogKafkaSource,
  CatalogKinesisSource,
  CatalogSource,
  Column,
  ConnectionInput,
  ConnectionsList,
  ConnectorDataSource,
  ConnectorDataTarget,
  CrawlerTargets,
  CsvHeaderOption,
  CsvSerdeOption,
  CustomCode,
  CustomEntityType,
  DataSource,
  DirectJDBCSource,
  DirectKafkaSource,
  DirectKinesisSource,
  DropDuplicates,
  DropFields,
  DropNullFields,
  DynamicTransform,
  DynamoDBCatalogSource,
  ErrorDetail,
  EvaluateDataQuality,
  EvaluateDataQualityMultiFrame,
  EventBatchingCondition,
  ExecutionClass,
  ExecutionProperty,
  FillMissingValues,
  Filter,
  GovernedCatalogSource,
  GovernedCatalogTarget,
  JDBCConnectorSource,
  JDBCConnectorTarget,
  JobCommand,
  Join,
  LakeFormationConfiguration,
  LineageConfiguration,
  Merge,
  MicrosoftSQLServerCatalogSource,
  MicrosoftSQLServerCatalogTarget,
  MySQLCatalogSource,
  MySQLCatalogTarget,
  NotificationProperty,
  OracleSQLCatalogSource,
  OracleSQLCatalogTarget,
  Partition,
  PartitionInput,
  PIIDetection,
  PostgreSQLCatalogSource,
  PostgreSQLCatalogTarget,
  Predicate,
  Recipe,
  RecrawlPolicy,
  RedshiftSource,
  RedshiftTarget,
  RelationalCatalogSource,
  RenameField,
  S3CatalogDeltaSource,
  S3CatalogHudiSource,
  S3CatalogSource,
  S3CatalogTarget,
  S3CsvSource,
  S3DeltaCatalogTarget,
  S3DeltaDirectTarget,
  S3DeltaSource,
  S3DirectTarget,
  S3GlueParquetTarget,
  S3HudiCatalogTarget,
  S3HudiDirectTarget,
  S3HudiSource,
  S3JsonSource,
  S3ParquetSource,
  SchemaChangePolicy,
  SchemaId,
  SelectFields,
  SelectFromCollection,
  SnowflakeSource,
  SnowflakeTarget,
  SourceControlAuthStrategy,
  SourceControlDetails,
  SourceControlProvider,
  SparkConnectorSource,
  SparkConnectorTarget,
  SparkSQL,
  Spigot,
  SplitFields,
  StorageDescriptor,
  TableOptimizer,
  TableOptimizerConfiguration,
  TableOptimizerRun,
  TableOptimizerType,
  TaskStatusType,
  Trigger,
  Union,
  WorkerType,
  Workflow,
  WorkflowRun,
} from "./models_0";
import {
  ColumnStatistics,
  Compatibility,
  DatabaseInput,
  DataCatalogEncryptionSettings,
  DataQualityEvaluationRunAdditionalRunOptions,
  DataQualityTargetTable,
  JobBookmarkEntry,
  Permission,
  PrincipalType,
  RegistryId,
  RegistryStatus,
  ResourceShareType,
  ResourceUri,
  SchemaStatus,
  SchemaVersionNumber,
  SchemaVersionStatus,
  SecurityConfiguration,
  Segment,
  Session,
  TableIdentifier,
  TableInput,
  TransformFilterCriteria,
  TransformParameters,
  TransformSortCriteria,
  UserDefinedFunctionInput,
} from "./models_1";
export interface GetSecurityConfigurationsResponse {
  SecurityConfigurations?: SecurityConfiguration[];
  NextToken?: string;
}
export interface GetSessionRequest {
  Id: string | undefined;
  RequestOrigin?: string;
}
export interface GetSessionResponse {
  Session?: Session;
}
export interface GetStatementRequest {
  SessionId: string | undefined;
  Id: number | undefined;
  RequestOrigin?: string;
}
export interface StatementOutputData {
  TextPlain?: string;
}
export declare const StatementState: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CANCELLED: "CANCELLED";
  readonly CANCELLING: "CANCELLING";
  readonly ERROR: "ERROR";
  readonly RUNNING: "RUNNING";
  readonly WAITING: "WAITING";
};
export type StatementState =
  (typeof StatementState)[keyof typeof StatementState];
export interface StatementOutput {
  Data?: StatementOutputData;
  ExecutionCount?: number;
  Status?: StatementState;
  ErrorName?: string;
  ErrorValue?: string;
  Traceback?: string[];
}
export interface Statement {
  Id?: number;
  Code?: string;
  State?: StatementState;
  Output?: StatementOutput;
  Progress?: number;
  StartedOn?: number;
  CompletedOn?: number;
}
export interface GetStatementResponse {
  Statement?: Statement;
}
export interface GetTableRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  Name: string | undefined;
  TransactionId?: string;
  QueryAsOfTime?: Date;
}
export interface FederatedTable {
  Identifier?: string;
  DatabaseIdentifier?: string;
  ConnectionName?: string;
}
export declare const ViewDialect: {
  readonly ATHENA: "ATHENA";
  readonly REDSHIFT: "REDSHIFT";
  readonly SPARK: "SPARK";
};
export type ViewDialect = (typeof ViewDialect)[keyof typeof ViewDialect];
export interface ViewRepresentation {
  Dialect?: ViewDialect;
  DialectVersion?: string;
  ViewOriginalText?: string;
  ViewExpandedText?: string;
  IsStale?: boolean;
}
export interface ViewDefinition {
  IsProtected?: boolean;
  Definer?: string;
  SubObjects?: string[];
  Representations?: ViewRepresentation[];
}
export interface Table {
  Name: string | undefined;
  DatabaseName?: string;
  Description?: string;
  Owner?: string;
  CreateTime?: Date;
  UpdateTime?: Date;
  LastAccessTime?: Date;
  LastAnalyzedTime?: Date;
  Retention?: number;
  StorageDescriptor?: StorageDescriptor;
  PartitionKeys?: Column[];
  ViewOriginalText?: string;
  ViewExpandedText?: string;
  TableType?: string;
  Parameters?: Record<string, string>;
  CreatedBy?: string;
  IsRegisteredWithLakeFormation?: boolean;
  TargetTable?: TableIdentifier;
  CatalogId?: string;
  VersionId?: string;
  FederatedTable?: FederatedTable;
  ViewDefinition?: ViewDefinition;
  IsMultiDialectView?: boolean;
}
export interface GetTableResponse {
  Table?: Table;
}
export interface GetTableOptimizerRequest {
  CatalogId: string | undefined;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  Type: TableOptimizerType | undefined;
}
export interface GetTableOptimizerResponse {
  CatalogId?: string;
  DatabaseName?: string;
  TableName?: string;
  TableOptimizer?: TableOptimizer;
}
export interface GetTablesRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  Expression?: string;
  NextToken?: string;
  MaxResults?: number;
  TransactionId?: string;
  QueryAsOfTime?: Date;
}
export interface GetTablesResponse {
  TableList?: Table[];
  NextToken?: string;
}
export interface GetTableVersionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  VersionId?: string;
}
export interface TableVersion {
  Table?: Table;
  VersionId?: string;
}
export interface GetTableVersionResponse {
  TableVersion?: TableVersion;
}
export interface GetTableVersionsRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface GetTableVersionsResponse {
  TableVersions?: TableVersion[];
  NextToken?: string;
}
export interface GetTagsRequest {
  ResourceArn: string | undefined;
}
export interface GetTagsResponse {
  Tags?: Record<string, string>;
}
export interface GetTriggerRequest {
  Name: string | undefined;
}
export interface GetTriggerResponse {
  Trigger?: Trigger;
}
export interface GetTriggersRequest {
  NextToken?: string;
  DependentJobName?: string;
  MaxResults?: number;
}
export interface GetTriggersResponse {
  Triggers?: Trigger[];
  NextToken?: string;
}
export interface QuerySessionContext {
  QueryId?: string;
  QueryStartTime?: Date;
  ClusterId?: string;
  QueryAuthorizationId?: string;
  AdditionalContext?: Record<string, string>;
}
export declare const PermissionType: {
  readonly CELL_FILTER_PERMISSION: "CELL_FILTER_PERMISSION";
  readonly COLUMN_PERMISSION: "COLUMN_PERMISSION";
  readonly NESTED_CELL_PERMISSION: "NESTED_CELL_PERMISSION";
  readonly NESTED_PERMISSION: "NESTED_PERMISSION";
};
export type PermissionType =
  (typeof PermissionType)[keyof typeof PermissionType];
export interface GetUnfilteredPartitionMetadataRequest {
  Region?: string;
  CatalogId: string | undefined;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionValues: string[] | undefined;
  AuditContext?: AuditContext;
  SupportedPermissionTypes: PermissionType[] | undefined;
  QuerySessionContext?: QuerySessionContext;
}
export interface GetUnfilteredPartitionMetadataResponse {
  Partition?: Partition;
  AuthorizedColumns?: string[];
  IsRegisteredWithLakeFormation?: boolean;
}
export declare class PermissionTypeMismatchException extends __BaseException {
  readonly name: "PermissionTypeMismatchException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      PermissionTypeMismatchException,
      __BaseException
    >
  );
}
export interface GetUnfilteredPartitionsMetadataRequest {
  Region?: string;
  CatalogId: string | undefined;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  Expression?: string;
  AuditContext?: AuditContext;
  SupportedPermissionTypes: PermissionType[] | undefined;
  NextToken?: string;
  Segment?: Segment;
  MaxResults?: number;
  QuerySessionContext?: QuerySessionContext;
}
export interface UnfilteredPartition {
  Partition?: Partition;
  AuthorizedColumns?: string[];
  IsRegisteredWithLakeFormation?: boolean;
}
export interface GetUnfilteredPartitionsMetadataResponse {
  UnfilteredPartitions?: UnfilteredPartition[];
  NextToken?: string;
}
export interface SupportedDialect {
  Dialect?: ViewDialect;
  DialectVersion?: string;
}
export interface GetUnfilteredTableMetadataRequest {
  Region?: string;
  CatalogId: string | undefined;
  DatabaseName: string | undefined;
  Name: string | undefined;
  AuditContext?: AuditContext;
  SupportedPermissionTypes: PermissionType[] | undefined;
  ParentResourceArn?: string;
  RootResourceArn?: string;
  SupportedDialect?: SupportedDialect;
  Permissions?: Permission[];
  QuerySessionContext?: QuerySessionContext;
}
export interface ColumnRowFilter {
  ColumnName?: string;
  RowFilterExpression?: string;
}
export interface GetUnfilteredTableMetadataResponse {
  Table?: Table;
  AuthorizedColumns?: string[];
  IsRegisteredWithLakeFormation?: boolean;
  CellFilters?: ColumnRowFilter[];
  QueryAuthorizationId?: string;
  IsMultiDialectView?: boolean;
  ResourceArn?: string;
  IsProtected?: boolean;
  Permissions?: Permission[];
  RowFilter?: string;
}
export interface GetUserDefinedFunctionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  FunctionName: string | undefined;
}
export interface UserDefinedFunction {
  FunctionName?: string;
  DatabaseName?: string;
  ClassName?: string;
  OwnerName?: string;
  OwnerType?: PrincipalType;
  CreateTime?: Date;
  ResourceUris?: ResourceUri[];
  CatalogId?: string;
}
export interface GetUserDefinedFunctionResponse {
  UserDefinedFunction?: UserDefinedFunction;
}
export interface GetUserDefinedFunctionsRequest {
  CatalogId?: string;
  DatabaseName?: string;
  Pattern: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface GetUserDefinedFunctionsResponse {
  UserDefinedFunctions?: UserDefinedFunction[];
  NextToken?: string;
}
export interface GetWorkflowRequest {
  Name: string | undefined;
  IncludeGraph?: boolean;
}
export interface GetWorkflowResponse {
  Workflow?: Workflow;
}
export interface GetWorkflowRunRequest {
  Name: string | undefined;
  RunId: string | undefined;
  IncludeGraph?: boolean;
}
export interface GetWorkflowRunResponse {
  Run?: WorkflowRun;
}
export interface GetWorkflowRunPropertiesRequest {
  Name: string | undefined;
  RunId: string | undefined;
}
export interface GetWorkflowRunPropertiesResponse {
  RunProperties?: Record<string, string>;
}
export interface GetWorkflowRunsRequest {
  Name: string | undefined;
  IncludeGraph?: boolean;
  NextToken?: string;
  MaxResults?: number;
}
export interface GetWorkflowRunsResponse {
  Runs?: WorkflowRun[];
  NextToken?: string;
}
export interface ImportCatalogToGlueRequest {
  CatalogId?: string;
}
export interface ImportCatalogToGlueResponse {}
export interface ListBlueprintsRequest {
  NextToken?: string;
  MaxResults?: number;
  Tags?: Record<string, string>;
}
export interface ListBlueprintsResponse {
  Blueprints?: string[];
  NextToken?: string;
}
export interface ListColumnStatisticsTaskRunsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListColumnStatisticsTaskRunsResponse {
  ColumnStatisticsTaskRunIds?: string[];
  NextToken?: string;
}
export interface ListCrawlersRequest {
  MaxResults?: number;
  NextToken?: string;
  Tags?: Record<string, string>;
}
export interface ListCrawlersResponse {
  CrawlerNames?: string[];
  NextToken?: string;
}
export declare const FieldName: {
  readonly CRAWL_ID: "CRAWL_ID";
  readonly DPU_HOUR: "DPU_HOUR";
  readonly END_TIME: "END_TIME";
  readonly START_TIME: "START_TIME";
  readonly STATE: "STATE";
};
export type FieldName = (typeof FieldName)[keyof typeof FieldName];
export declare const FilterOperator: {
  readonly EQ: "EQ";
  readonly GE: "GE";
  readonly GT: "GT";
  readonly LE: "LE";
  readonly LT: "LT";
  readonly NE: "NE";
};
export type FilterOperator =
  (typeof FilterOperator)[keyof typeof FilterOperator];
export interface CrawlsFilter {
  FieldName?: FieldName;
  FilterOperator?: FilterOperator;
  FieldValue?: string;
}
export interface ListCrawlsRequest {
  CrawlerName: string | undefined;
  MaxResults?: number;
  Filters?: CrawlsFilter[];
  NextToken?: string;
}
export declare const CrawlerHistoryState: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly RUNNING: "RUNNING";
  readonly STOPPED: "STOPPED";
};
export type CrawlerHistoryState =
  (typeof CrawlerHistoryState)[keyof typeof CrawlerHistoryState];
export interface CrawlerHistory {
  CrawlId?: string;
  State?: CrawlerHistoryState;
  StartTime?: Date;
  EndTime?: Date;
  Summary?: string;
  ErrorMessage?: string;
  LogGroup?: string;
  LogStream?: string;
  MessagePrefix?: string;
  DPUHour?: number;
}
export interface ListCrawlsResponse {
  Crawls?: CrawlerHistory[];
  NextToken?: string;
}
export interface ListCustomEntityTypesRequest {
  NextToken?: string;
  MaxResults?: number;
  Tags?: Record<string, string>;
}
export interface ListCustomEntityTypesResponse {
  CustomEntityTypes?: CustomEntityType[];
  NextToken?: string;
}
export interface DataQualityResultFilterCriteria {
  DataSource?: DataSource;
  JobName?: string;
  JobRunId?: string;
  StartedAfter?: Date;
  StartedBefore?: Date;
}
export interface ListDataQualityResultsRequest {
  Filter?: DataQualityResultFilterCriteria;
  NextToken?: string;
  MaxResults?: number;
}
export interface DataQualityResultDescription {
  ResultId?: string;
  DataSource?: DataSource;
  JobName?: string;
  JobRunId?: string;
  StartedOn?: Date;
}
export interface ListDataQualityResultsResponse {
  Results: DataQualityResultDescription[] | undefined;
  NextToken?: string;
}
export interface DataQualityRuleRecommendationRunFilter {
  DataSource: DataSource | undefined;
  StartedBefore?: Date;
  StartedAfter?: Date;
}
export interface ListDataQualityRuleRecommendationRunsRequest {
  Filter?: DataQualityRuleRecommendationRunFilter;
  NextToken?: string;
  MaxResults?: number;
}
export interface DataQualityRuleRecommendationRunDescription {
  RunId?: string;
  Status?: TaskStatusType;
  StartedOn?: Date;
  DataSource?: DataSource;
}
export interface ListDataQualityRuleRecommendationRunsResponse {
  Runs?: DataQualityRuleRecommendationRunDescription[];
  NextToken?: string;
}
export interface DataQualityRulesetEvaluationRunFilter {
  DataSource: DataSource | undefined;
  StartedBefore?: Date;
  StartedAfter?: Date;
}
export interface ListDataQualityRulesetEvaluationRunsRequest {
  Filter?: DataQualityRulesetEvaluationRunFilter;
  NextToken?: string;
  MaxResults?: number;
}
export interface DataQualityRulesetEvaluationRunDescription {
  RunId?: string;
  Status?: TaskStatusType;
  StartedOn?: Date;
  DataSource?: DataSource;
}
export interface ListDataQualityRulesetEvaluationRunsResponse {
  Runs?: DataQualityRulesetEvaluationRunDescription[];
  NextToken?: string;
}
export interface DataQualityRulesetFilterCriteria {
  Name?: string;
  Description?: string;
  CreatedBefore?: Date;
  CreatedAfter?: Date;
  LastModifiedBefore?: Date;
  LastModifiedAfter?: Date;
  TargetTable?: DataQualityTargetTable;
}
export interface ListDataQualityRulesetsRequest {
  NextToken?: string;
  MaxResults?: number;
  Filter?: DataQualityRulesetFilterCriteria;
  Tags?: Record<string, string>;
}
export interface DataQualityRulesetListDetails {
  Name?: string;
  Description?: string;
  CreatedOn?: Date;
  LastModifiedOn?: Date;
  TargetTable?: DataQualityTargetTable;
  RecommendationRunId?: string;
  RuleCount?: number;
}
export interface ListDataQualityRulesetsResponse {
  Rulesets?: DataQualityRulesetListDetails[];
  NextToken?: string;
}
export interface ListDevEndpointsRequest {
  NextToken?: string;
  MaxResults?: number;
  Tags?: Record<string, string>;
}
export interface ListDevEndpointsResponse {
  DevEndpointNames?: string[];
  NextToken?: string;
}
export interface ListJobsRequest {
  NextToken?: string;
  MaxResults?: number;
  Tags?: Record<string, string>;
}
export interface ListJobsResponse {
  JobNames?: string[];
  NextToken?: string;
}
export interface ListMLTransformsRequest {
  NextToken?: string;
  MaxResults?: number;
  Filter?: TransformFilterCriteria;
  Sort?: TransformSortCriteria;
  Tags?: Record<string, string>;
}
export interface ListMLTransformsResponse {
  TransformIds: string[] | undefined;
  NextToken?: string;
}
export interface ListRegistriesInput {
  MaxResults?: number;
  NextToken?: string;
}
export interface RegistryListItem {
  RegistryName?: string;
  RegistryArn?: string;
  Description?: string;
  Status?: RegistryStatus;
  CreatedTime?: string;
  UpdatedTime?: string;
}
export interface ListRegistriesResponse {
  Registries?: RegistryListItem[];
  NextToken?: string;
}
export interface ListSchemasInput {
  RegistryId?: RegistryId;
  MaxResults?: number;
  NextToken?: string;
}
export interface SchemaListItem {
  RegistryName?: string;
  SchemaName?: string;
  SchemaArn?: string;
  Description?: string;
  SchemaStatus?: SchemaStatus;
  CreatedTime?: string;
  UpdatedTime?: string;
}
export interface ListSchemasResponse {
  Schemas?: SchemaListItem[];
  NextToken?: string;
}
export interface ListSchemaVersionsInput {
  SchemaId: SchemaId | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface SchemaVersionListItem {
  SchemaArn?: string;
  SchemaVersionId?: string;
  VersionNumber?: number;
  Status?: SchemaVersionStatus;
  CreatedTime?: string;
}
export interface ListSchemaVersionsResponse {
  Schemas?: SchemaVersionListItem[];
  NextToken?: string;
}
export interface ListSessionsRequest {
  NextToken?: string;
  MaxResults?: number;
  Tags?: Record<string, string>;
  RequestOrigin?: string;
}
export interface ListSessionsResponse {
  Ids?: string[];
  Sessions?: Session[];
  NextToken?: string;
}
export interface ListStatementsRequest {
  SessionId: string | undefined;
  RequestOrigin?: string;
  NextToken?: string;
}
export interface ListStatementsResponse {
  Statements?: Statement[];
  NextToken?: string;
}
export interface ListTableOptimizerRunsRequest {
  CatalogId: string | undefined;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  Type: TableOptimizerType | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListTableOptimizerRunsResponse {
  CatalogId?: string;
  DatabaseName?: string;
  TableName?: string;
  NextToken?: string;
  TableOptimizerRuns?: TableOptimizerRun[];
}
export interface ListTriggersRequest {
  NextToken?: string;
  DependentJobName?: string;
  MaxResults?: number;
  Tags?: Record<string, string>;
}
export interface ListTriggersResponse {
  TriggerNames?: string[];
  NextToken?: string;
}
export interface ListWorkflowsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListWorkflowsResponse {
  Workflows?: string[];
  NextToken?: string;
}
export interface PutDataCatalogEncryptionSettingsRequest {
  CatalogId?: string;
  DataCatalogEncryptionSettings: DataCatalogEncryptionSettings | undefined;
}
export interface PutDataCatalogEncryptionSettingsResponse {}
export declare const EnableHybridValues: {
  readonly FALSE: "FALSE";
  readonly TRUE: "TRUE";
};
export type EnableHybridValues =
  (typeof EnableHybridValues)[keyof typeof EnableHybridValues];
export declare const ExistCondition: {
  readonly MUST_EXIST: "MUST_EXIST";
  readonly NONE: "NONE";
  readonly NOT_EXIST: "NOT_EXIST";
};
export type ExistCondition =
  (typeof ExistCondition)[keyof typeof ExistCondition];
export interface PutResourcePolicyRequest {
  PolicyInJson: string | undefined;
  ResourceArn?: string;
  PolicyHashCondition?: string;
  PolicyExistsCondition?: ExistCondition;
  EnableHybrid?: EnableHybridValues;
}
export interface PutResourcePolicyResponse {
  PolicyHash?: string;
}
export interface MetadataKeyValuePair {
  MetadataKey?: string;
  MetadataValue?: string;
}
export interface PutSchemaVersionMetadataInput {
  SchemaId?: SchemaId;
  SchemaVersionNumber?: SchemaVersionNumber;
  SchemaVersionId?: string;
  MetadataKeyValue: MetadataKeyValuePair | undefined;
}
export interface PutSchemaVersionMetadataResponse {
  SchemaArn?: string;
  SchemaName?: string;
  RegistryName?: string;
  LatestVersion?: boolean;
  VersionNumber?: number;
  SchemaVersionId?: string;
  MetadataKey?: string;
  MetadataValue?: string;
}
export interface PutWorkflowRunPropertiesRequest {
  Name: string | undefined;
  RunId: string | undefined;
  RunProperties: Record<string, string> | undefined;
}
export interface PutWorkflowRunPropertiesResponse {}
export interface QuerySchemaVersionMetadataInput {
  SchemaId?: SchemaId;
  SchemaVersionNumber?: SchemaVersionNumber;
  SchemaVersionId?: string;
  MetadataList?: MetadataKeyValuePair[];
  MaxResults?: number;
  NextToken?: string;
}
export interface OtherMetadataValueListItem {
  MetadataValue?: string;
  CreatedTime?: string;
}
export interface MetadataInfo {
  MetadataValue?: string;
  CreatedTime?: string;
  OtherMetadataValueList?: OtherMetadataValueListItem[];
}
export interface QuerySchemaVersionMetadataResponse {
  MetadataInfoMap?: Record<string, MetadataInfo>;
  SchemaVersionId?: string;
  NextToken?: string;
}
export interface RegisterSchemaVersionInput {
  SchemaId: SchemaId | undefined;
  SchemaDefinition: string | undefined;
}
export interface RegisterSchemaVersionResponse {
  SchemaVersionId?: string;
  VersionNumber?: number;
  Status?: SchemaVersionStatus;
}
export interface RemoveSchemaVersionMetadataInput {
  SchemaId?: SchemaId;
  SchemaVersionNumber?: SchemaVersionNumber;
  SchemaVersionId?: string;
  MetadataKeyValue: MetadataKeyValuePair | undefined;
}
export interface RemoveSchemaVersionMetadataResponse {
  SchemaArn?: string;
  SchemaName?: string;
  RegistryName?: string;
  LatestVersion?: boolean;
  VersionNumber?: number;
  SchemaVersionId?: string;
  MetadataKey?: string;
  MetadataValue?: string;
}
export interface ResetJobBookmarkRequest {
  JobName: string | undefined;
  RunId?: string;
}
export interface ResetJobBookmarkResponse {
  JobBookmarkEntry?: JobBookmarkEntry;
}
export declare class ConcurrentRunsExceededException extends __BaseException {
  readonly name: "ConcurrentRunsExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      ConcurrentRunsExceededException,
      __BaseException
    >
  );
}
export declare class IllegalWorkflowStateException extends __BaseException {
  readonly name: "IllegalWorkflowStateException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<IllegalWorkflowStateException, __BaseException>
  );
}
export interface ResumeWorkflowRunRequest {
  Name: string | undefined;
  RunId: string | undefined;
  NodeIds: string[] | undefined;
}
export interface ResumeWorkflowRunResponse {
  RunId?: string;
  NodeIds?: string[];
}
export interface RunStatementRequest {
  SessionId: string | undefined;
  Code: string | undefined;
  RequestOrigin?: string;
}
export interface RunStatementResponse {
  Id?: number;
}
export declare const Comparator: {
  readonly EQUALS: "EQUALS";
  readonly GREATER_THAN: "GREATER_THAN";
  readonly GREATER_THAN_EQUALS: "GREATER_THAN_EQUALS";
  readonly LESS_THAN: "LESS_THAN";
  readonly LESS_THAN_EQUALS: "LESS_THAN_EQUALS";
};
export type Comparator = (typeof Comparator)[keyof typeof Comparator];
export interface PropertyPredicate {
  Key?: string;
  Value?: string;
  Comparator?: Comparator;
}
export declare const Sort: {
  readonly ASCENDING: "ASC";
  readonly DESCENDING: "DESC";
};
export type Sort = (typeof Sort)[keyof typeof Sort];
export interface SortCriterion {
  FieldName?: string;
  Sort?: Sort;
}
export interface SearchTablesRequest {
  CatalogId?: string;
  NextToken?: string;
  Filters?: PropertyPredicate[];
  SearchText?: string;
  SortCriteria?: SortCriterion[];
  MaxResults?: number;
  ResourceShareType?: ResourceShareType;
}
export interface SearchTablesResponse {
  NextToken?: string;
  TableList?: Table[];
}
export declare class IllegalBlueprintStateException extends __BaseException {
  readonly name: "IllegalBlueprintStateException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<IllegalBlueprintStateException, __BaseException>
  );
}
export interface StartBlueprintRunRequest {
  BlueprintName: string | undefined;
  Parameters?: string;
  RoleArn: string | undefined;
}
export interface StartBlueprintRunResponse {
  RunId?: string;
}
export declare class ColumnStatisticsTaskRunningException extends __BaseException {
  readonly name: "ColumnStatisticsTaskRunningException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      ColumnStatisticsTaskRunningException,
      __BaseException
    >
  );
}
export interface StartColumnStatisticsTaskRunRequest {
  DatabaseName: string | undefined;
  TableName: string | undefined;
  ColumnNameList?: string[];
  Role: string | undefined;
  SampleSize?: number;
  CatalogID?: string;
  SecurityConfiguration?: string;
}
export interface StartColumnStatisticsTaskRunResponse {
  ColumnStatisticsTaskRunId?: string;
}
export interface StartCrawlerRequest {
  Name: string | undefined;
}
export interface StartCrawlerResponse {}
export declare class NoScheduleException extends __BaseException {
  readonly name: "NoScheduleException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<NoScheduleException, __BaseException>
  );
}
export declare class SchedulerRunningException extends __BaseException {
  readonly name: "SchedulerRunningException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<SchedulerRunningException, __BaseException>
  );
}
export interface StartCrawlerScheduleRequest {
  CrawlerName: string | undefined;
}
export interface StartCrawlerScheduleResponse {}
export interface StartDataQualityRuleRecommendationRunRequest {
  DataSource: DataSource | undefined;
  Role: string | undefined;
  NumberOfWorkers?: number;
  Timeout?: number;
  CreatedRulesetName?: string;
  ClientToken?: string;
}
export interface StartDataQualityRuleRecommendationRunResponse {
  RunId?: string;
}
export interface StartDataQualityRulesetEvaluationRunRequest {
  DataSource: DataSource | undefined;
  Role: string | undefined;
  NumberOfWorkers?: number;
  Timeout?: number;
  ClientToken?: string;
  AdditionalRunOptions?: DataQualityEvaluationRunAdditionalRunOptions;
  RulesetNames: string[] | undefined;
  AdditionalDataSources?: Record<string, DataSource>;
}
export interface StartDataQualityRulesetEvaluationRunResponse {
  RunId?: string;
}
export interface StartExportLabelsTaskRunRequest {
  TransformId: string | undefined;
  OutputS3Path: string | undefined;
}
export interface StartExportLabelsTaskRunResponse {
  TaskRunId?: string;
}
export interface StartImportLabelsTaskRunRequest {
  TransformId: string | undefined;
  InputS3Path: string | undefined;
  ReplaceAllLabels?: boolean;
}
export interface StartImportLabelsTaskRunResponse {
  TaskRunId?: string;
}
export interface StartJobRunRequest {
  JobName: string | undefined;
  JobRunId?: string;
  Arguments?: Record<string, string>;
  AllocatedCapacity?: number;
  Timeout?: number;
  MaxCapacity?: number;
  SecurityConfiguration?: string;
  NotificationProperty?: NotificationProperty;
  WorkerType?: WorkerType;
  NumberOfWorkers?: number;
  ExecutionClass?: ExecutionClass;
}
export interface StartJobRunResponse {
  JobRunId?: string;
}
export declare class MLTransformNotReadyException extends __BaseException {
  readonly name: "MLTransformNotReadyException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<MLTransformNotReadyException, __BaseException>
  );
}
export interface StartMLEvaluationTaskRunRequest {
  TransformId: string | undefined;
}
export interface StartMLEvaluationTaskRunResponse {
  TaskRunId?: string;
}
export interface StartMLLabelingSetGenerationTaskRunRequest {
  TransformId: string | undefined;
  OutputS3Path: string | undefined;
}
export interface StartMLLabelingSetGenerationTaskRunResponse {
  TaskRunId?: string;
}
export interface StartTriggerRequest {
  Name: string | undefined;
}
export interface StartTriggerResponse {
  Name?: string;
}
export interface StartWorkflowRunRequest {
  Name: string | undefined;
  RunProperties?: Record<string, string>;
}
export interface StartWorkflowRunResponse {
  RunId?: string;
}
export declare class ColumnStatisticsTaskNotRunningException extends __BaseException {
  readonly name: "ColumnStatisticsTaskNotRunningException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      ColumnStatisticsTaskNotRunningException,
      __BaseException
    >
  );
}
export declare class ColumnStatisticsTaskStoppingException extends __BaseException {
  readonly name: "ColumnStatisticsTaskStoppingException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      ColumnStatisticsTaskStoppingException,
      __BaseException
    >
  );
}
export interface StopColumnStatisticsTaskRunRequest {
  DatabaseName: string | undefined;
  TableName: string | undefined;
}
export interface StopColumnStatisticsTaskRunResponse {}
export declare class CrawlerNotRunningException extends __BaseException {
  readonly name: "CrawlerNotRunningException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<CrawlerNotRunningException, __BaseException>
  );
}
export declare class CrawlerStoppingException extends __BaseException {
  readonly name: "CrawlerStoppingException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<CrawlerStoppingException, __BaseException>
  );
}
export interface StopCrawlerRequest {
  Name: string | undefined;
}
export interface StopCrawlerResponse {}
export declare class SchedulerNotRunningException extends __BaseException {
  readonly name: "SchedulerNotRunningException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<SchedulerNotRunningException, __BaseException>
  );
}
export interface StopCrawlerScheduleRequest {
  CrawlerName: string | undefined;
}
export interface StopCrawlerScheduleResponse {}
export interface StopSessionRequest {
  Id: string | undefined;
  RequestOrigin?: string;
}
export interface StopSessionResponse {
  Id?: string;
}
export interface StopTriggerRequest {
  Name: string | undefined;
}
export interface StopTriggerResponse {
  Name?: string;
}
export interface StopWorkflowRunRequest {
  Name: string | undefined;
  RunId: string | undefined;
}
export interface StopWorkflowRunResponse {}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  TagsToAdd: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagsToRemove: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateBlueprintRequest {
  Name: string | undefined;
  Description?: string;
  BlueprintLocation: string | undefined;
}
export interface UpdateBlueprintResponse {
  Name?: string;
}
export interface UpdateCsvClassifierRequest {
  Name: string | undefined;
  Delimiter?: string;
  QuoteSymbol?: string;
  ContainsHeader?: CsvHeaderOption;
  Header?: string[];
  DisableValueTrimming?: boolean;
  AllowSingleColumn?: boolean;
  CustomDatatypeConfigured?: boolean;
  CustomDatatypes?: string[];
  Serde?: CsvSerdeOption;
}
export interface UpdateGrokClassifierRequest {
  Name: string | undefined;
  Classification?: string;
  GrokPattern?: string;
  CustomPatterns?: string;
}
export interface UpdateJsonClassifierRequest {
  Name: string | undefined;
  JsonPath?: string;
}
export interface UpdateXMLClassifierRequest {
  Name: string | undefined;
  Classification?: string;
  RowTag?: string;
}
export interface UpdateClassifierRequest {
  GrokClassifier?: UpdateGrokClassifierRequest;
  XMLClassifier?: UpdateXMLClassifierRequest;
  JsonClassifier?: UpdateJsonClassifierRequest;
  CsvClassifier?: UpdateCsvClassifierRequest;
}
export interface UpdateClassifierResponse {}
export declare class VersionMismatchException extends __BaseException {
  readonly name: "VersionMismatchException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<VersionMismatchException, __BaseException>
  );
}
export interface UpdateColumnStatisticsForPartitionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionValues: string[] | undefined;
  ColumnStatisticsList: ColumnStatistics[] | undefined;
}
export interface ColumnStatisticsError {
  ColumnStatistics?: ColumnStatistics;
  Error?: ErrorDetail;
}
export interface UpdateColumnStatisticsForPartitionResponse {
  Errors?: ColumnStatisticsError[];
}
export interface UpdateColumnStatisticsForTableRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  ColumnStatisticsList: ColumnStatistics[] | undefined;
}
export interface UpdateColumnStatisticsForTableResponse {
  Errors?: ColumnStatisticsError[];
}
export interface UpdateConnectionRequest {
  CatalogId?: string;
  Name: string | undefined;
  ConnectionInput: ConnectionInput | undefined;
}
export interface UpdateConnectionResponse {}
export interface UpdateCrawlerRequest {
  Name: string | undefined;
  Role?: string;
  DatabaseName?: string;
  Description?: string;
  Targets?: CrawlerTargets;
  Schedule?: string;
  Classifiers?: string[];
  TablePrefix?: string;
  SchemaChangePolicy?: SchemaChangePolicy;
  RecrawlPolicy?: RecrawlPolicy;
  LineageConfiguration?: LineageConfiguration;
  LakeFormationConfiguration?: LakeFormationConfiguration;
  Configuration?: string;
  CrawlerSecurityConfiguration?: string;
}
export interface UpdateCrawlerResponse {}
export interface UpdateCrawlerScheduleRequest {
  CrawlerName: string | undefined;
  Schedule?: string;
}
export interface UpdateCrawlerScheduleResponse {}
export interface UpdateDatabaseRequest {
  CatalogId?: string;
  Name: string | undefined;
  DatabaseInput: DatabaseInput | undefined;
}
export interface UpdateDatabaseResponse {}
export interface UpdateDataQualityRulesetRequest {
  Name: string | undefined;
  Description?: string;
  Ruleset?: string;
}
export interface UpdateDataQualityRulesetResponse {
  Name?: string;
  Description?: string;
  Ruleset?: string;
}
export interface DevEndpointCustomLibraries {
  ExtraPythonLibsS3Path?: string;
  ExtraJarsS3Path?: string;
}
export interface UpdateDevEndpointRequest {
  EndpointName: string | undefined;
  PublicKey?: string;
  AddPublicKeys?: string[];
  DeletePublicKeys?: string[];
  CustomLibraries?: DevEndpointCustomLibraries;
  UpdateEtlLibraries?: boolean;
  DeleteArguments?: string[];
  AddArguments?: Record<string, string>;
}
export interface UpdateDevEndpointResponse {}
export interface UpdateJobResponse {
  JobName?: string;
}
export interface UpdateJobFromSourceControlRequest {
  JobName?: string;
  Provider?: SourceControlProvider;
  RepositoryName?: string;
  RepositoryOwner?: string;
  BranchName?: string;
  Folder?: string;
  CommitId?: string;
  AuthStrategy?: SourceControlAuthStrategy;
  AuthToken?: string;
}
export interface UpdateJobFromSourceControlResponse {
  JobName?: string;
}
export interface UpdateMLTransformRequest {
  TransformId: string | undefined;
  Name?: string;
  Description?: string;
  Parameters?: TransformParameters;
  Role?: string;
  GlueVersion?: string;
  MaxCapacity?: number;
  WorkerType?: WorkerType;
  NumberOfWorkers?: number;
  Timeout?: number;
  MaxRetries?: number;
}
export interface UpdateMLTransformResponse {
  TransformId?: string;
}
export interface UpdatePartitionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionValueList: string[] | undefined;
  PartitionInput: PartitionInput | undefined;
}
export interface UpdatePartitionResponse {}
export interface UpdateRegistryInput {
  RegistryId: RegistryId | undefined;
  Description: string | undefined;
}
export interface UpdateRegistryResponse {
  RegistryName?: string;
  RegistryArn?: string;
}
export interface UpdateSchemaInput {
  SchemaId: SchemaId | undefined;
  SchemaVersionNumber?: SchemaVersionNumber;
  Compatibility?: Compatibility;
  Description?: string;
}
export interface UpdateSchemaResponse {
  SchemaArn?: string;
  SchemaName?: string;
  RegistryName?: string;
}
export interface UpdateSourceControlFromJobRequest {
  JobName?: string;
  Provider?: SourceControlProvider;
  RepositoryName?: string;
  RepositoryOwner?: string;
  BranchName?: string;
  Folder?: string;
  CommitId?: string;
  AuthStrategy?: SourceControlAuthStrategy;
  AuthToken?: string;
}
export interface UpdateSourceControlFromJobResponse {
  JobName?: string;
}
export interface UpdateTableRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableInput: TableInput | undefined;
  SkipArchive?: boolean;
  TransactionId?: string;
  VersionId?: string;
}
export interface UpdateTableResponse {}
export interface UpdateTableOptimizerRequest {
  CatalogId: string | undefined;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  Type: TableOptimizerType | undefined;
  TableOptimizerConfiguration: TableOptimizerConfiguration | undefined;
}
export interface UpdateTableOptimizerResponse {}
export interface TriggerUpdate {
  Name?: string;
  Description?: string;
  Schedule?: string;
  Actions?: Action[];
  Predicate?: Predicate;
  EventBatchingCondition?: EventBatchingCondition;
}
export interface UpdateTriggerRequest {
  Name: string | undefined;
  TriggerUpdate: TriggerUpdate | undefined;
}
export interface UpdateTriggerResponse {
  Trigger?: Trigger;
}
export interface UpdateUserDefinedFunctionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  FunctionName: string | undefined;
  FunctionInput: UserDefinedFunctionInput | undefined;
}
export interface UpdateUserDefinedFunctionResponse {}
export interface UpdateWorkflowRequest {
  Name: string | undefined;
  Description?: string;
  DefaultRunProperties?: Record<string, string>;
  MaxConcurrentRuns?: number;
}
export interface UpdateWorkflowResponse {
  Name?: string;
}
export interface Mapping {
  ToKey?: string;
  FromPath?: string[];
  FromType?: string;
  ToType?: string;
  Dropped?: boolean;
  Children?: Mapping[];
}
export interface ApplyMapping {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Mapping: Mapping[] | undefined;
}
export interface CodeGenConfigurationNode {
  AthenaConnectorSource?: AthenaConnectorSource;
  JDBCConnectorSource?: JDBCConnectorSource;
  SparkConnectorSource?: SparkConnectorSource;
  CatalogSource?: CatalogSource;
  RedshiftSource?: RedshiftSource;
  S3CatalogSource?: S3CatalogSource;
  S3CsvSource?: S3CsvSource;
  S3JsonSource?: S3JsonSource;
  S3ParquetSource?: S3ParquetSource;
  RelationalCatalogSource?: RelationalCatalogSource;
  DynamoDBCatalogSource?: DynamoDBCatalogSource;
  JDBCConnectorTarget?: JDBCConnectorTarget;
  SparkConnectorTarget?: SparkConnectorTarget;
  CatalogTarget?: BasicCatalogTarget;
  RedshiftTarget?: RedshiftTarget;
  S3CatalogTarget?: S3CatalogTarget;
  S3GlueParquetTarget?: S3GlueParquetTarget;
  S3DirectTarget?: S3DirectTarget;
  ApplyMapping?: ApplyMapping;
  SelectFields?: SelectFields;
  DropFields?: DropFields;
  RenameField?: RenameField;
  Spigot?: Spigot;
  Join?: Join;
  SplitFields?: SplitFields;
  SelectFromCollection?: SelectFromCollection;
  FillMissingValues?: FillMissingValues;
  Filter?: Filter;
  CustomCode?: CustomCode;
  SparkSQL?: SparkSQL;
  DirectKinesisSource?: DirectKinesisSource;
  DirectKafkaSource?: DirectKafkaSource;
  CatalogKinesisSource?: CatalogKinesisSource;
  CatalogKafkaSource?: CatalogKafkaSource;
  DropNullFields?: DropNullFields;
  Merge?: Merge;
  Union?: Union;
  PIIDetection?: PIIDetection;
  Aggregate?: Aggregate;
  DropDuplicates?: DropDuplicates;
  GovernedCatalogTarget?: GovernedCatalogTarget;
  GovernedCatalogSource?: GovernedCatalogSource;
  MicrosoftSQLServerCatalogSource?: MicrosoftSQLServerCatalogSource;
  MySQLCatalogSource?: MySQLCatalogSource;
  OracleSQLCatalogSource?: OracleSQLCatalogSource;
  PostgreSQLCatalogSource?: PostgreSQLCatalogSource;
  MicrosoftSQLServerCatalogTarget?: MicrosoftSQLServerCatalogTarget;
  MySQLCatalogTarget?: MySQLCatalogTarget;
  OracleSQLCatalogTarget?: OracleSQLCatalogTarget;
  PostgreSQLCatalogTarget?: PostgreSQLCatalogTarget;
  DynamicTransform?: DynamicTransform;
  EvaluateDataQuality?: EvaluateDataQuality;
  S3CatalogHudiSource?: S3CatalogHudiSource;
  CatalogHudiSource?: CatalogHudiSource;
  S3HudiSource?: S3HudiSource;
  S3HudiCatalogTarget?: S3HudiCatalogTarget;
  S3HudiDirectTarget?: S3HudiDirectTarget;
  DirectJDBCSource?: DirectJDBCSource;
  S3CatalogDeltaSource?: S3CatalogDeltaSource;
  CatalogDeltaSource?: CatalogDeltaSource;
  S3DeltaSource?: S3DeltaSource;
  S3DeltaCatalogTarget?: S3DeltaCatalogTarget;
  S3DeltaDirectTarget?: S3DeltaDirectTarget;
  AmazonRedshiftSource?: AmazonRedshiftSource;
  AmazonRedshiftTarget?: AmazonRedshiftTarget;
  EvaluateDataQualityMultiFrame?: EvaluateDataQualityMultiFrame;
  Recipe?: Recipe;
  SnowflakeSource?: SnowflakeSource;
  SnowflakeTarget?: SnowflakeTarget;
  ConnectorDataSource?: ConnectorDataSource;
  ConnectorDataTarget?: ConnectorDataTarget;
}
export interface CreateJobRequest {
  Name: string | undefined;
  Description?: string;
  LogUri?: string;
  Role: string | undefined;
  ExecutionProperty?: ExecutionProperty;
  Command: JobCommand | undefined;
  DefaultArguments?: Record<string, string>;
  NonOverridableArguments?: Record<string, string>;
  Connections?: ConnectionsList;
  MaxRetries?: number;
  AllocatedCapacity?: number;
  Timeout?: number;
  MaxCapacity?: number;
  SecurityConfiguration?: string;
  Tags?: Record<string, string>;
  NotificationProperty?: NotificationProperty;
  GlueVersion?: string;
  NumberOfWorkers?: number;
  WorkerType?: WorkerType;
  CodeGenConfigurationNodes?: Record<string, CodeGenConfigurationNode>;
  ExecutionClass?: ExecutionClass;
  SourceControlDetails?: SourceControlDetails;
}
export interface Job {
  Name?: string;
  Description?: string;
  LogUri?: string;
  Role?: string;
  CreatedOn?: Date;
  LastModifiedOn?: Date;
  ExecutionProperty?: ExecutionProperty;
  Command?: JobCommand;
  DefaultArguments?: Record<string, string>;
  NonOverridableArguments?: Record<string, string>;
  Connections?: ConnectionsList;
  MaxRetries?: number;
  AllocatedCapacity?: number;
  Timeout?: number;
  MaxCapacity?: number;
  WorkerType?: WorkerType;
  NumberOfWorkers?: number;
  SecurityConfiguration?: string;
  NotificationProperty?: NotificationProperty;
  GlueVersion?: string;
  CodeGenConfigurationNodes?: Record<string, CodeGenConfigurationNode>;
  ExecutionClass?: ExecutionClass;
  SourceControlDetails?: SourceControlDetails;
}
export interface JobUpdate {
  Description?: string;
  LogUri?: string;
  Role?: string;
  ExecutionProperty?: ExecutionProperty;
  Command?: JobCommand;
  DefaultArguments?: Record<string, string>;
  NonOverridableArguments?: Record<string, string>;
  Connections?: ConnectionsList;
  MaxRetries?: number;
  AllocatedCapacity?: number;
  Timeout?: number;
  MaxCapacity?: number;
  WorkerType?: WorkerType;
  NumberOfWorkers?: number;
  SecurityConfiguration?: string;
  NotificationProperty?: NotificationProperty;
  GlueVersion?: string;
  CodeGenConfigurationNodes?: Record<string, CodeGenConfigurationNode>;
  ExecutionClass?: ExecutionClass;
  SourceControlDetails?: SourceControlDetails;
}
export interface GetJobResponse {
  Job?: Job;
}
export interface UpdateJobRequest {
  JobName: string | undefined;
  JobUpdate: JobUpdate | undefined;
}
export interface BatchGetJobsResponse {
  Jobs?: Job[];
  JobsNotFound?: string[];
}
export interface GetJobsResponse {
  Jobs?: Job[];
  NextToken?: string;
}
export declare const CreateJobRequestFilterSensitiveLog: (
  obj: CreateJobRequest
) => any;
export declare const JobFilterSensitiveLog: (obj: Job) => any;
export declare const JobUpdateFilterSensitiveLog: (obj: JobUpdate) => any;
export declare const GetJobResponseFilterSensitiveLog: (
  obj: GetJobResponse
) => any;
export declare const UpdateJobRequestFilterSensitiveLog: (
  obj: UpdateJobRequest
) => any;
export declare const BatchGetJobsResponseFilterSensitiveLog: (
  obj: BatchGetJobsResponse
) => any;
export declare const GetJobsResponseFilterSensitiveLog: (
  obj: GetJobsResponse
) => any;
