import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { GlueServiceException as __BaseException } from "../models/GlueServiceException";
import { AccessDeniedException, AlreadyExistsException, EntityNotFoundException, FederationSourceException, FederationSourceRetryableException, GlueEncryptionException, IllegalSessionStateException, InternalServiceException, InvalidInputException, InvalidStateException, OperationTimeoutException, ResourceNotReadyException, ResourceNumberLimitExceededException, } from "../models/models_0";
import { ConcurrentModificationException, ConditionCheckFailureException, ConflictException, CrawlerRunningException, FederatedResourceAlreadyExistsException, IdempotentParameterMismatchException, SchedulerTransitioningException, ValidationException, } from "../models/models_1";
import { ColumnStatisticsTaskNotRunningException, ColumnStatisticsTaskRunningException, ColumnStatisticsTaskStoppingException, ConcurrentRunsExceededException, CrawlerNotRunningException, CrawlerStoppingException, IllegalBlueprintStateException, IllegalWorkflowStateException, MLTransformNotReadyException, NoScheduleException, PermissionTypeMismatchException, SchedulerNotRunningException, SchedulerRunningException, VersionMismatchException, } from "../models/models_2";
export const se_BatchCreatePartitionCommand = async (input, context) => {
    const headers = sharedHeaders("BatchCreatePartition");
    let body;
    body = JSON.stringify(se_BatchCreatePartitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchDeleteConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchDeletePartitionCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeletePartition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchDeleteTableCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteTable");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchDeleteTableVersionCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteTableVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetBlueprintsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetBlueprints");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetCrawlersCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetCrawlers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetCustomEntityTypesCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetCustomEntityTypes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetDataQualityResultCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetDataQualityResult");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetDevEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetDevEndpoints");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetJobsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetPartitionCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetPartition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetTableOptimizerCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetTableOptimizer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetTriggersCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetTriggers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetWorkflowsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetWorkflows");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchStopJobRunCommand = async (input, context) => {
    const headers = sharedHeaders("BatchStopJobRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchUpdatePartitionCommand = async (input, context) => {
    const headers = sharedHeaders("BatchUpdatePartition");
    let body;
    body = JSON.stringify(se_BatchUpdatePartitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelDataQualityRuleRecommendationRunCommand = async (input, context) => {
    const headers = sharedHeaders("CancelDataQualityRuleRecommendationRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelDataQualityRulesetEvaluationRunCommand = async (input, context) => {
    const headers = sharedHeaders("CancelDataQualityRulesetEvaluationRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelMLTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("CancelMLTaskRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelStatementCommand = async (input, context) => {
    const headers = sharedHeaders("CancelStatement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CheckSchemaVersionValidityCommand = async (input, context) => {
    const headers = sharedHeaders("CheckSchemaVersionValidity");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateBlueprintCommand = async (input, context) => {
    const headers = sharedHeaders("CreateBlueprint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateClassifierCommand = async (input, context) => {
    const headers = sharedHeaders("CreateClassifier");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCrawlerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCrawler");
    let body;
    body = JSON.stringify(se_CreateCrawlerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCustomEntityTypeCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCustomEntityType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDatabase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDataQualityRulesetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDataQualityRuleset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDevEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDevEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateJob");
    let body;
    body = JSON.stringify(se_CreateJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateMLTransformCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMLTransform");
    let body;
    body = JSON.stringify(se_CreateMLTransformRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePartitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePartition");
    let body;
    body = JSON.stringify(se_CreatePartitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePartitionIndexCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePartitionIndex");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRegistryCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRegistry");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSchemaCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSchema");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateScriptCommand = async (input, context) => {
    const headers = sharedHeaders("CreateScript");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSecurityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSecurityConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSessionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSession");
    let body;
    body = JSON.stringify(se_CreateSessionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTableCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTable");
    let body;
    body = JSON.stringify(se_CreateTableRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTableOptimizerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTableOptimizer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTriggerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTrigger");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateUserDefinedFunctionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUserDefinedFunction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateWorkflowCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWorkflow");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteBlueprintCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBlueprint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteClassifierCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteClassifier");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteColumnStatisticsForPartitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteColumnStatisticsForPartition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteColumnStatisticsForTableCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteColumnStatisticsForTable");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCrawlerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCrawler");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCustomEntityTypeCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCustomEntityType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDatabase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDataQualityRulesetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDataQualityRuleset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDevEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDevEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMLTransformCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMLTransform");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePartitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePartition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePartitionIndexCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePartitionIndex");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRegistryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRegistry");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSchemaCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSchema");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSchemaVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSchemaVersions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSecurityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSecurityConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSessionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTableCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTable");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTableOptimizerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTableOptimizer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTableVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTableVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTriggerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTrigger");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteUserDefinedFunctionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUserDefinedFunction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteWorkflowCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWorkflow");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetBlueprintCommand = async (input, context) => {
    const headers = sharedHeaders("GetBlueprint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetBlueprintRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetBlueprintRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetBlueprintRunsCommand = async (input, context) => {
    const headers = sharedHeaders("GetBlueprintRuns");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCatalogImportStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetCatalogImportStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetClassifierCommand = async (input, context) => {
    const headers = sharedHeaders("GetClassifier");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetClassifiersCommand = async (input, context) => {
    const headers = sharedHeaders("GetClassifiers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetColumnStatisticsForPartitionCommand = async (input, context) => {
    const headers = sharedHeaders("GetColumnStatisticsForPartition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetColumnStatisticsForTableCommand = async (input, context) => {
    const headers = sharedHeaders("GetColumnStatisticsForTable");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetColumnStatisticsTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetColumnStatisticsTaskRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetColumnStatisticsTaskRunsCommand = async (input, context) => {
    const headers = sharedHeaders("GetColumnStatisticsTaskRuns");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("GetConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetConnectionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetConnections");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCrawlerCommand = async (input, context) => {
    const headers = sharedHeaders("GetCrawler");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCrawlerMetricsCommand = async (input, context) => {
    const headers = sharedHeaders("GetCrawlerMetrics");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCrawlersCommand = async (input, context) => {
    const headers = sharedHeaders("GetCrawlers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCustomEntityTypeCommand = async (input, context) => {
    const headers = sharedHeaders("GetCustomEntityType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("GetDatabase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDatabasesCommand = async (input, context) => {
    const headers = sharedHeaders("GetDatabases");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDataCatalogEncryptionSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataCatalogEncryptionSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDataflowGraphCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataflowGraph");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDataQualityResultCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataQualityResult");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDataQualityRuleRecommendationRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataQualityRuleRecommendationRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDataQualityRulesetCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataQualityRuleset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDataQualityRulesetEvaluationRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataQualityRulesetEvaluationRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDevEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("GetDevEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDevEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("GetDevEndpoints");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetJobCommand = async (input, context) => {
    const headers = sharedHeaders("GetJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetJobBookmarkCommand = async (input, context) => {
    const headers = sharedHeaders("GetJobBookmark");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetJobRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetJobRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetJobRunsCommand = async (input, context) => {
    const headers = sharedHeaders("GetJobRuns");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetJobsCommand = async (input, context) => {
    const headers = sharedHeaders("GetJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMappingCommand = async (input, context) => {
    const headers = sharedHeaders("GetMapping");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMLTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetMLTaskRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMLTaskRunsCommand = async (input, context) => {
    const headers = sharedHeaders("GetMLTaskRuns");
    let body;
    body = JSON.stringify(se_GetMLTaskRunsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMLTransformCommand = async (input, context) => {
    const headers = sharedHeaders("GetMLTransform");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMLTransformsCommand = async (input, context) => {
    const headers = sharedHeaders("GetMLTransforms");
    let body;
    body = JSON.stringify(se_GetMLTransformsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetPartitionCommand = async (input, context) => {
    const headers = sharedHeaders("GetPartition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetPartitionIndexesCommand = async (input, context) => {
    const headers = sharedHeaders("GetPartitionIndexes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetPartitionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetPartitions");
    let body;
    body = JSON.stringify(se_GetPartitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetPlanCommand = async (input, context) => {
    const headers = sharedHeaders("GetPlan");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRegistryCommand = async (input, context) => {
    const headers = sharedHeaders("GetRegistry");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourcePoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourcePolicies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSchemaCommand = async (input, context) => {
    const headers = sharedHeaders("GetSchema");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSchemaByDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("GetSchemaByDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSchemaVersionCommand = async (input, context) => {
    const headers = sharedHeaders("GetSchemaVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSchemaVersionsDiffCommand = async (input, context) => {
    const headers = sharedHeaders("GetSchemaVersionsDiff");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSecurityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetSecurityConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSecurityConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("GetSecurityConfigurations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSessionCommand = async (input, context) => {
    const headers = sharedHeaders("GetSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetStatementCommand = async (input, context) => {
    const headers = sharedHeaders("GetStatement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTableCommand = async (input, context) => {
    const headers = sharedHeaders("GetTable");
    let body;
    body = JSON.stringify(se_GetTableRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTableOptimizerCommand = async (input, context) => {
    const headers = sharedHeaders("GetTableOptimizer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTablesCommand = async (input, context) => {
    const headers = sharedHeaders("GetTables");
    let body;
    body = JSON.stringify(se_GetTablesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTableVersionCommand = async (input, context) => {
    const headers = sharedHeaders("GetTableVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTableVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetTableVersions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTagsCommand = async (input, context) => {
    const headers = sharedHeaders("GetTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTriggerCommand = async (input, context) => {
    const headers = sharedHeaders("GetTrigger");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTriggersCommand = async (input, context) => {
    const headers = sharedHeaders("GetTriggers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetUnfilteredPartitionMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("GetUnfilteredPartitionMetadata");
    let body;
    body = JSON.stringify(se_GetUnfilteredPartitionMetadataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetUnfilteredPartitionsMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("GetUnfilteredPartitionsMetadata");
    let body;
    body = JSON.stringify(se_GetUnfilteredPartitionsMetadataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetUnfilteredTableMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("GetUnfilteredTableMetadata");
    let body;
    body = JSON.stringify(se_GetUnfilteredTableMetadataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetUserDefinedFunctionCommand = async (input, context) => {
    const headers = sharedHeaders("GetUserDefinedFunction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetUserDefinedFunctionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetUserDefinedFunctions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetWorkflowCommand = async (input, context) => {
    const headers = sharedHeaders("GetWorkflow");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetWorkflowRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetWorkflowRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetWorkflowRunPropertiesCommand = async (input, context) => {
    const headers = sharedHeaders("GetWorkflowRunProperties");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetWorkflowRunsCommand = async (input, context) => {
    const headers = sharedHeaders("GetWorkflowRuns");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportCatalogToGlueCommand = async (input, context) => {
    const headers = sharedHeaders("ImportCatalogToGlue");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListBlueprintsCommand = async (input, context) => {
    const headers = sharedHeaders("ListBlueprints");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListColumnStatisticsTaskRunsCommand = async (input, context) => {
    const headers = sharedHeaders("ListColumnStatisticsTaskRuns");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCrawlersCommand = async (input, context) => {
    const headers = sharedHeaders("ListCrawlers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCrawlsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCrawls");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCustomEntityTypesCommand = async (input, context) => {
    const headers = sharedHeaders("ListCustomEntityTypes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDataQualityResultsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDataQualityResults");
    let body;
    body = JSON.stringify(se_ListDataQualityResultsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDataQualityRuleRecommendationRunsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDataQualityRuleRecommendationRuns");
    let body;
    body = JSON.stringify(se_ListDataQualityRuleRecommendationRunsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDataQualityRulesetEvaluationRunsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDataQualityRulesetEvaluationRuns");
    let body;
    body = JSON.stringify(se_ListDataQualityRulesetEvaluationRunsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDataQualityRulesetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDataQualityRulesets");
    let body;
    body = JSON.stringify(se_ListDataQualityRulesetsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDevEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDevEndpoints");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMLTransformsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMLTransforms");
    let body;
    body = JSON.stringify(se_ListMLTransformsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRegistriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListRegistries");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSchemasCommand = async (input, context) => {
    const headers = sharedHeaders("ListSchemas");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSchemaVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSchemaVersions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSessionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSessions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListStatementsCommand = async (input, context) => {
    const headers = sharedHeaders("ListStatements");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTableOptimizerRunsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTableOptimizerRuns");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTriggersCommand = async (input, context) => {
    const headers = sharedHeaders("ListTriggers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListWorkflowsCommand = async (input, context) => {
    const headers = sharedHeaders("ListWorkflows");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutDataCatalogEncryptionSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("PutDataCatalogEncryptionSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutSchemaVersionMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("PutSchemaVersionMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutWorkflowRunPropertiesCommand = async (input, context) => {
    const headers = sharedHeaders("PutWorkflowRunProperties");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_QuerySchemaVersionMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("QuerySchemaVersionMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterSchemaVersionCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterSchemaVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RemoveSchemaVersionMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveSchemaVersionMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResetJobBookmarkCommand = async (input, context) => {
    const headers = sharedHeaders("ResetJobBookmark");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResumeWorkflowRunCommand = async (input, context) => {
    const headers = sharedHeaders("ResumeWorkflowRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RunStatementCommand = async (input, context) => {
    const headers = sharedHeaders("RunStatement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SearchTablesCommand = async (input, context) => {
    const headers = sharedHeaders("SearchTables");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartBlueprintRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartBlueprintRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartColumnStatisticsTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartColumnStatisticsTaskRun");
    let body;
    body = JSON.stringify(se_StartColumnStatisticsTaskRunRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartCrawlerCommand = async (input, context) => {
    const headers = sharedHeaders("StartCrawler");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartCrawlerScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("StartCrawlerSchedule");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartDataQualityRuleRecommendationRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartDataQualityRuleRecommendationRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartDataQualityRulesetEvaluationRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartDataQualityRulesetEvaluationRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartExportLabelsTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartExportLabelsTaskRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartImportLabelsTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartImportLabelsTaskRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartJobRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartJobRun");
    let body;
    body = JSON.stringify(se_StartJobRunRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartMLEvaluationTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartMLEvaluationTaskRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartMLLabelingSetGenerationTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartMLLabelingSetGenerationTaskRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartTriggerCommand = async (input, context) => {
    const headers = sharedHeaders("StartTrigger");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartWorkflowRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartWorkflowRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopColumnStatisticsTaskRunCommand = async (input, context) => {
    const headers = sharedHeaders("StopColumnStatisticsTaskRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopCrawlerCommand = async (input, context) => {
    const headers = sharedHeaders("StopCrawler");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopCrawlerScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("StopCrawlerSchedule");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopSessionCommand = async (input, context) => {
    const headers = sharedHeaders("StopSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopTriggerCommand = async (input, context) => {
    const headers = sharedHeaders("StopTrigger");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopWorkflowRunCommand = async (input, context) => {
    const headers = sharedHeaders("StopWorkflowRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateBlueprintCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateBlueprint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateClassifierCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateClassifier");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateColumnStatisticsForPartitionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateColumnStatisticsForPartition");
    let body;
    body = JSON.stringify(se_UpdateColumnStatisticsForPartitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateColumnStatisticsForTableCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateColumnStatisticsForTable");
    let body;
    body = JSON.stringify(se_UpdateColumnStatisticsForTableRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateCrawlerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCrawler");
    let body;
    body = JSON.stringify(se_UpdateCrawlerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateCrawlerScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCrawlerSchedule");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDatabase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDataQualityRulesetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDataQualityRuleset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDevEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDevEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateJobCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateJob");
    let body;
    body = JSON.stringify(se_UpdateJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateJobFromSourceControlCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateJobFromSourceControl");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateMLTransformCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMLTransform");
    let body;
    body = JSON.stringify(se_UpdateMLTransformRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdatePartitionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePartition");
    let body;
    body = JSON.stringify(se_UpdatePartitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateRegistryCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRegistry");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateSchemaCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateSchema");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateSourceControlFromJobCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateSourceControlFromJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateTableCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTable");
    let body;
    body = JSON.stringify(se_UpdateTableRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateTableOptimizerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTableOptimizer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateTriggerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTrigger");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateUserDefinedFunctionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUserDefinedFunction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateWorkflowCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateWorkflow");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_BatchCreatePartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchDeleteConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchDeletePartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchDeleteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchDeleteTableVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetBlueprintsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetBlueprintsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetCrawlersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetCrawlersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetCustomEntityTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetDataQualityResultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetDataQualityResultResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetDevEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetDevEndpointsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetPartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetPartitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetTableOptimizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetTableOptimizerResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetTriggersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetWorkflowsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetWorkflowsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchStopJobRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchUpdatePartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CancelDataQualityRuleRecommendationRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CancelDataQualityRulesetEvaluationRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CancelMLTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CancelStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CheckSchemaVersionValidityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateBlueprintCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateClassifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCrawlerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCustomEntityTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDataQualityRulesetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDevEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDevEndpointResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateMLTransformCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreatePartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreatePartitionIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRegistryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateSchemaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateScriptCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateSecurityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateSecurityConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateSessionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateTableOptimizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateTriggerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateUserDefinedFunctionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateWorkflowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteBlueprintCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteClassifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteColumnStatisticsForPartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteColumnStatisticsForTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteCrawlerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteCustomEntityTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDataQualityRulesetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDevEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteMLTransformCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeletePartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeletePartitionIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRegistryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteSchemaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteSchemaVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteSecurityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteTableOptimizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteTableVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteTriggerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteUserDefinedFunctionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteWorkflowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetBlueprintCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBlueprintResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetBlueprintRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBlueprintRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetBlueprintRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBlueprintRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCatalogImportStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCatalogImportStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetClassifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetClassifierResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetClassifiersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetClassifiersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetColumnStatisticsForPartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetColumnStatisticsForPartitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetColumnStatisticsForTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetColumnStatisticsForTableResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetColumnStatisticsTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetColumnStatisticsTaskRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetColumnStatisticsTaskRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetColumnStatisticsTaskRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetConnectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetConnectionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCrawlerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCrawlerResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCrawlerMetricsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCrawlerMetricsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCrawlersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCrawlersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCustomEntityTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDatabaseResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDatabasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDatabasesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDataCatalogEncryptionSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDataflowGraphCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDataQualityResultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDataQualityResultResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDataQualityRuleRecommendationRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDataQualityRuleRecommendationRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDataQualityRulesetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDataQualityRulesetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDataQualityRulesetEvaluationRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDataQualityRulesetEvaluationRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDevEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDevEndpointResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDevEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDevEndpointsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetJobBookmarkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetJobRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetJobRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetJobRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetJobRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMappingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMLTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMLTaskRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMLTaskRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMLTaskRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMLTransformCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMLTransformResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMLTransformsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMLTransformsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetPartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetPartitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetPartitionIndexesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetPartitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetPartitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetPlanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRegistryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetResourcePoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourcePoliciesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourcePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSchemaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSchemaByDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSchemaVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSchemaVersionsDiffCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSecurityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSecurityConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSecurityConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSecurityConfigurationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSessionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetStatementResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTableResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTableOptimizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTableOptimizerResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTablesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTableVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTableVersionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTableVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTableVersionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTriggerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTriggersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetUnfilteredPartitionMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetUnfilteredPartitionMetadataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetUnfilteredPartitionsMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetUnfilteredPartitionsMetadataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetUnfilteredTableMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetUnfilteredTableMetadataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetUserDefinedFunctionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetUserDefinedFunctionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetUserDefinedFunctionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetUserDefinedFunctionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetWorkflowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetWorkflowResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetWorkflowRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetWorkflowRunResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetWorkflowRunPropertiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetWorkflowRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetWorkflowRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ImportCatalogToGlueCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListBlueprintsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListColumnStatisticsTaskRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCrawlersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCrawlsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCrawlsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCustomEntityTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDataQualityResultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDataQualityResultsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDataQualityRuleRecommendationRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDataQualityRuleRecommendationRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDataQualityRulesetEvaluationRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDataQualityRulesetEvaluationRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDataQualityRulesetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDataQualityRulesetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDevEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMLTransformsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRegistriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSchemasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSchemaVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSessionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListStatementsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListStatementsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTableOptimizerRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTableOptimizerRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTriggersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListWorkflowsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutDataCatalogEncryptionSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutSchemaVersionMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutWorkflowRunPropertiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_QuerySchemaVersionMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RegisterSchemaVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RemoveSchemaVersionMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ResetJobBookmarkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ResumeWorkflowRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RunStatementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SearchTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SearchTablesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartBlueprintRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartColumnStatisticsTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartCrawlerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartCrawlerScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartDataQualityRuleRecommendationRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartDataQualityRulesetEvaluationRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartExportLabelsTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartImportLabelsTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartJobRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartMLEvaluationTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartMLLabelingSetGenerationTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartTriggerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartWorkflowRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopColumnStatisticsTaskRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopCrawlerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopCrawlerScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopTriggerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopWorkflowRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateBlueprintCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateClassifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateColumnStatisticsForPartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateColumnStatisticsForPartitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateColumnStatisticsForTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateColumnStatisticsForTableResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateCrawlerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateCrawlerScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDataQualityRulesetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDevEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateJobFromSourceControlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateMLTransformCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdatePartitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateRegistryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateSchemaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateSourceControlFromJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateTableOptimizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateTriggerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateUserDefinedFunctionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateWorkflowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.glue#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "EntityNotFoundException":
        case "com.amazonaws.glue#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "GlueEncryptionException":
        case "com.amazonaws.glue#GlueEncryptionException":
            throw await de_GlueEncryptionExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.glue#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.glue#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OperationTimeoutException":
        case "com.amazonaws.glue#OperationTimeoutException":
            throw await de_OperationTimeoutExceptionRes(parsedOutput, context);
        case "ResourceNumberLimitExceededException":
        case "com.amazonaws.glue#ResourceNumberLimitExceededException":
            throw await de_ResourceNumberLimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.glue#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.glue#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "FederationSourceException":
        case "com.amazonaws.glue#FederationSourceException":
            throw await de_FederationSourceExceptionRes(parsedOutput, context);
        case "FederationSourceRetryableException":
        case "com.amazonaws.glue#FederationSourceRetryableException":
            throw await de_FederationSourceRetryableExceptionRes(parsedOutput, context);
        case "InvalidStateException":
        case "com.amazonaws.glue#InvalidStateException":
            throw await de_InvalidStateExceptionRes(parsedOutput, context);
        case "IllegalSessionStateException":
        case "com.amazonaws.glue#IllegalSessionStateException":
            throw await de_IllegalSessionStateExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.glue#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.glue#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "FederatedResourceAlreadyExistsException":
        case "com.amazonaws.glue#FederatedResourceAlreadyExistsException":
            throw await de_FederatedResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.glue#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "CrawlerRunningException":
        case "com.amazonaws.glue#CrawlerRunningException":
            throw await de_CrawlerRunningExceptionRes(parsedOutput, context);
        case "SchedulerTransitioningException":
        case "com.amazonaws.glue#SchedulerTransitioningException":
            throw await de_SchedulerTransitioningExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.glue#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ConditionCheckFailureException":
        case "com.amazonaws.glue#ConditionCheckFailureException":
            throw await de_ConditionCheckFailureExceptionRes(parsedOutput, context);
        case "PermissionTypeMismatchException":
        case "com.amazonaws.glue#PermissionTypeMismatchException":
            throw await de_PermissionTypeMismatchExceptionRes(parsedOutput, context);
        case "ConcurrentRunsExceededException":
        case "com.amazonaws.glue#ConcurrentRunsExceededException":
            throw await de_ConcurrentRunsExceededExceptionRes(parsedOutput, context);
        case "IllegalWorkflowStateException":
        case "com.amazonaws.glue#IllegalWorkflowStateException":
            throw await de_IllegalWorkflowStateExceptionRes(parsedOutput, context);
        case "IllegalBlueprintStateException":
        case "com.amazonaws.glue#IllegalBlueprintStateException":
            throw await de_IllegalBlueprintStateExceptionRes(parsedOutput, context);
        case "ColumnStatisticsTaskRunningException":
        case "com.amazonaws.glue#ColumnStatisticsTaskRunningException":
            throw await de_ColumnStatisticsTaskRunningExceptionRes(parsedOutput, context);
        case "NoScheduleException":
        case "com.amazonaws.glue#NoScheduleException":
            throw await de_NoScheduleExceptionRes(parsedOutput, context);
        case "SchedulerRunningException":
        case "com.amazonaws.glue#SchedulerRunningException":
            throw await de_SchedulerRunningExceptionRes(parsedOutput, context);
        case "MLTransformNotReadyException":
        case "com.amazonaws.glue#MLTransformNotReadyException":
            throw await de_MLTransformNotReadyExceptionRes(parsedOutput, context);
        case "ColumnStatisticsTaskNotRunningException":
        case "com.amazonaws.glue#ColumnStatisticsTaskNotRunningException":
            throw await de_ColumnStatisticsTaskNotRunningExceptionRes(parsedOutput, context);
        case "ColumnStatisticsTaskStoppingException":
        case "com.amazonaws.glue#ColumnStatisticsTaskStoppingException":
            throw await de_ColumnStatisticsTaskStoppingExceptionRes(parsedOutput, context);
        case "CrawlerNotRunningException":
        case "com.amazonaws.glue#CrawlerNotRunningException":
            throw await de_CrawlerNotRunningExceptionRes(parsedOutput, context);
        case "CrawlerStoppingException":
        case "com.amazonaws.glue#CrawlerStoppingException":
            throw await de_CrawlerStoppingExceptionRes(parsedOutput, context);
        case "SchedulerNotRunningException":
        case "com.amazonaws.glue#SchedulerNotRunningException":
            throw await de_SchedulerNotRunningExceptionRes(parsedOutput, context);
        case "VersionMismatchException":
        case "com.amazonaws.glue#VersionMismatchException":
            throw await de_VersionMismatchExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ColumnStatisticsTaskNotRunningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ColumnStatisticsTaskNotRunningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ColumnStatisticsTaskRunningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ColumnStatisticsTaskRunningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ColumnStatisticsTaskStoppingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ColumnStatisticsTaskStoppingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConcurrentRunsExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConcurrentRunsExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConditionCheckFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConditionCheckFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_CrawlerNotRunningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CrawlerNotRunningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_CrawlerRunningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CrawlerRunningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_CrawlerStoppingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CrawlerStoppingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EntityNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EntityNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_FederatedResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new FederatedResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_FederationSourceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new FederationSourceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_FederationSourceRetryableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new FederationSourceRetryableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_GlueEncryptionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new GlueEncryptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_IdempotentParameterMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_IllegalBlueprintStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IllegalBlueprintStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_IllegalSessionStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IllegalSessionStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_IllegalWorkflowStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IllegalWorkflowStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_MLTransformNotReadyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new MLTransformNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NoScheduleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NoScheduleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OperationTimeoutExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OperationTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_PermissionTypeMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new PermissionTypeMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotReadyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNumberLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNumberLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_SchedulerNotRunningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new SchedulerNotRunningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_SchedulerRunningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new SchedulerRunningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_SchedulerTransitioningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new SchedulerTransitioningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_VersionMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new VersionMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_ApplyMapping = (input, context) => {
    return take(input, {
        Inputs: _json,
        Mapping: (_) => se_Mappings(_, context),
        Name: [],
    });
};
const se_BatchCreatePartitionRequest = (input, context) => {
    return take(input, {
        CatalogId: [],
        DatabaseName: [],
        PartitionInputList: (_) => se_PartitionInputList(_, context),
        TableName: [],
    });
};
const se_BatchUpdatePartitionRequest = (input, context) => {
    return take(input, {
        CatalogId: [],
        DatabaseName: [],
        Entries: (_) => se_BatchUpdatePartitionRequestEntryList(_, context),
        TableName: [],
    });
};
const se_BatchUpdatePartitionRequestEntry = (input, context) => {
    return take(input, {
        PartitionInput: (_) => se_PartitionInput(_, context),
        PartitionValueList: _json,
    });
};
const se_BatchUpdatePartitionRequestEntryList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_BatchUpdatePartitionRequestEntry(entry, context);
    });
};
const se_BinaryColumnStatisticsData = (input, context) => {
    return take(input, {
        AverageLength: __serializeFloat,
        MaximumLength: [],
        NumberOfNulls: [],
    });
};
const se_CatalogKafkaSource = (input, context) => {
    return take(input, {
        DataPreviewOptions: _json,
        Database: [],
        DetectSchema: [],
        Name: [],
        StreamingOptions: (_) => se_KafkaStreamingSourceOptions(_, context),
        Table: [],
        WindowSize: [],
    });
};
const se_CatalogKinesisSource = (input, context) => {
    return take(input, {
        DataPreviewOptions: _json,
        Database: [],
        DetectSchema: [],
        Name: [],
        StreamingOptions: (_) => se_KinesisStreamingSourceOptions(_, context),
        Table: [],
        WindowSize: [],
    });
};
const se_CodeGenConfigurationNode = (input, context) => {
    return take(input, {
        Aggregate: _json,
        AmazonRedshiftSource: _json,
        AmazonRedshiftTarget: _json,
        ApplyMapping: (_) => se_ApplyMapping(_, context),
        AthenaConnectorSource: _json,
        CatalogDeltaSource: _json,
        CatalogHudiSource: _json,
        CatalogKafkaSource: (_) => se_CatalogKafkaSource(_, context),
        CatalogKinesisSource: (_) => se_CatalogKinesisSource(_, context),
        CatalogSource: _json,
        CatalogTarget: _json,
        ConnectorDataSource: _json,
        ConnectorDataTarget: _json,
        CustomCode: _json,
        DirectJDBCSource: _json,
        DirectKafkaSource: (_) => se_DirectKafkaSource(_, context),
        DirectKinesisSource: (_) => se_DirectKinesisSource(_, context),
        DropDuplicates: _json,
        DropFields: _json,
        DropNullFields: _json,
        DynamicTransform: _json,
        DynamoDBCatalogSource: _json,
        EvaluateDataQuality: _json,
        EvaluateDataQualityMultiFrame: _json,
        FillMissingValues: _json,
        Filter: _json,
        GovernedCatalogSource: _json,
        GovernedCatalogTarget: _json,
        JDBCConnectorSource: _json,
        JDBCConnectorTarget: _json,
        Join: _json,
        Merge: _json,
        MicrosoftSQLServerCatalogSource: _json,
        MicrosoftSQLServerCatalogTarget: _json,
        MySQLCatalogSource: _json,
        MySQLCatalogTarget: _json,
        OracleSQLCatalogSource: _json,
        OracleSQLCatalogTarget: _json,
        PIIDetection: (_) => se_PIIDetection(_, context),
        PostgreSQLCatalogSource: _json,
        PostgreSQLCatalogTarget: _json,
        Recipe: _json,
        RedshiftSource: _json,
        RedshiftTarget: _json,
        RelationalCatalogSource: _json,
        RenameField: _json,
        S3CatalogDeltaSource: _json,
        S3CatalogHudiSource: _json,
        S3CatalogSource: _json,
        S3CatalogTarget: _json,
        S3CsvSource: _json,
        S3DeltaCatalogTarget: _json,
        S3DeltaDirectTarget: _json,
        S3DeltaSource: _json,
        S3DirectTarget: _json,
        S3GlueParquetTarget: _json,
        S3HudiCatalogTarget: _json,
        S3HudiDirectTarget: _json,
        S3HudiSource: _json,
        S3JsonSource: _json,
        S3ParquetSource: _json,
        SelectFields: _json,
        SelectFromCollection: _json,
        SnowflakeSource: _json,
        SnowflakeTarget: _json,
        SparkConnectorSource: _json,
        SparkConnectorTarget: _json,
        SparkSQL: _json,
        Spigot: (_) => se_Spigot(_, context),
        SplitFields: _json,
        Union: _json,
    });
};
const se_CodeGenConfigurationNodes = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_CodeGenConfigurationNode(value, context);
        return acc;
    }, {});
};
const se_ColumnStatistics = (input, context) => {
    return take(input, {
        AnalyzedTime: (_) => Math.round(_.getTime() / 1000),
        ColumnName: [],
        ColumnType: [],
        StatisticsData: (_) => se_ColumnStatisticsData(_, context),
    });
};
const se_ColumnStatisticsData = (input, context) => {
    return take(input, {
        BinaryColumnStatisticsData: (_) => se_BinaryColumnStatisticsData(_, context),
        BooleanColumnStatisticsData: _json,
        DateColumnStatisticsData: (_) => se_DateColumnStatisticsData(_, context),
        DecimalColumnStatisticsData: (_) => se_DecimalColumnStatisticsData(_, context),
        DoubleColumnStatisticsData: (_) => se_DoubleColumnStatisticsData(_, context),
        LongColumnStatisticsData: _json,
        StringColumnStatisticsData: (_) => se_StringColumnStatisticsData(_, context),
        Type: [],
    });
};
const se_CrawlerTargets = (input, context) => {
    return take(input, {
        CatalogTargets: _json,
        DeltaTargets: _json,
        DynamoDBTargets: (_) => se_DynamoDBTargetList(_, context),
        HudiTargets: _json,
        IcebergTargets: _json,
        JdbcTargets: _json,
        MongoDBTargets: _json,
        S3Targets: _json,
    });
};
const se_CreateCrawlerRequest = (input, context) => {
    return take(input, {
        Classifiers: _json,
        Configuration: [],
        CrawlerSecurityConfiguration: [],
        DatabaseName: [],
        Description: [],
        LakeFormationConfiguration: _json,
        LineageConfiguration: _json,
        Name: [],
        RecrawlPolicy: _json,
        Role: [],
        Schedule: [],
        SchemaChangePolicy: _json,
        TablePrefix: [],
        Tags: _json,
        Targets: (_) => se_CrawlerTargets(_, context),
    });
};
const se_CreateJobRequest = (input, context) => {
    return take(input, {
        AllocatedCapacity: [],
        CodeGenConfigurationNodes: (_) => se_CodeGenConfigurationNodes(_, context),
        Command: _json,
        Connections: _json,
        DefaultArguments: _json,
        Description: [],
        ExecutionClass: [],
        ExecutionProperty: _json,
        GlueVersion: [],
        LogUri: [],
        MaxCapacity: __serializeFloat,
        MaxRetries: [],
        Name: [],
        NonOverridableArguments: _json,
        NotificationProperty: _json,
        NumberOfWorkers: [],
        Role: [],
        SecurityConfiguration: [],
        SourceControlDetails: _json,
        Tags: _json,
        Timeout: [],
        WorkerType: [],
    });
};
const se_CreateMLTransformRequest = (input, context) => {
    return take(input, {
        Description: [],
        GlueVersion: [],
        InputRecordTables: _json,
        MaxCapacity: __serializeFloat,
        MaxRetries: [],
        Name: [],
        NumberOfWorkers: [],
        Parameters: (_) => se_TransformParameters(_, context),
        Role: [],
        Tags: _json,
        Timeout: [],
        TransformEncryption: _json,
        WorkerType: [],
    });
};
const se_CreatePartitionRequest = (input, context) => {
    return take(input, {
        CatalogId: [],
        DatabaseName: [],
        PartitionInput: (_) => se_PartitionInput(_, context),
        TableName: [],
    });
};
const se_CreateSessionRequest = (input, context) => {
    return take(input, {
        Command: _json,
        Connections: _json,
        DefaultArguments: _json,
        Description: [],
        GlueVersion: [],
        Id: [],
        IdleTimeout: [],
        MaxCapacity: __serializeFloat,
        NumberOfWorkers: [],
        RequestOrigin: [],
        Role: [],
        SecurityConfiguration: [],
        Tags: _json,
        Timeout: [],
        WorkerType: [],
    });
};
const se_CreateTableRequest = (input, context) => {
    return take(input, {
        CatalogId: [],
        DatabaseName: [],
        OpenTableFormatInput: _json,
        PartitionIndexes: _json,
        TableInput: (_) => se_TableInput(_, context),
        TransactionId: [],
    });
};
const se_DataQualityResultFilterCriteria = (input, context) => {
    return take(input, {
        DataSource: _json,
        JobName: [],
        JobRunId: [],
        StartedAfter: (_) => Math.round(_.getTime() / 1000),
        StartedBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_DataQualityRuleRecommendationRunFilter = (input, context) => {
    return take(input, {
        DataSource: _json,
        StartedAfter: (_) => Math.round(_.getTime() / 1000),
        StartedBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_DataQualityRulesetEvaluationRunFilter = (input, context) => {
    return take(input, {
        DataSource: _json,
        StartedAfter: (_) => Math.round(_.getTime() / 1000),
        StartedBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_DataQualityRulesetFilterCriteria = (input, context) => {
    return take(input, {
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        Description: [],
        LastModifiedAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedBefore: (_) => Math.round(_.getTime() / 1000),
        Name: [],
        TargetTable: _json,
    });
};
const se_DateColumnStatisticsData = (input, context) => {
    return take(input, {
        MaximumValue: (_) => Math.round(_.getTime() / 1000),
        MinimumValue: (_) => Math.round(_.getTime() / 1000),
        NumberOfDistinctValues: [],
        NumberOfNulls: [],
    });
};
const se_DecimalColumnStatisticsData = (input, context) => {
    return take(input, {
        MaximumValue: (_) => se_DecimalNumber(_, context),
        MinimumValue: (_) => se_DecimalNumber(_, context),
        NumberOfDistinctValues: [],
        NumberOfNulls: [],
    });
};
const se_DecimalNumber = (input, context) => {
    return take(input, {
        Scale: [],
        UnscaledValue: context.base64Encoder,
    });
};
const se_DirectKafkaSource = (input, context) => {
    return take(input, {
        DataPreviewOptions: _json,
        DetectSchema: [],
        Name: [],
        StreamingOptions: (_) => se_KafkaStreamingSourceOptions(_, context),
        WindowSize: [],
    });
};
const se_DirectKinesisSource = (input, context) => {
    return take(input, {
        DataPreviewOptions: _json,
        DetectSchema: [],
        Name: [],
        StreamingOptions: (_) => se_KinesisStreamingSourceOptions(_, context),
        WindowSize: [],
    });
};
const se_DoubleColumnStatisticsData = (input, context) => {
    return take(input, {
        MaximumValue: __serializeFloat,
        MinimumValue: __serializeFloat,
        NumberOfDistinctValues: [],
        NumberOfNulls: [],
    });
};
const se_DynamoDBTarget = (input, context) => {
    return take(input, {
        Path: [],
        scanAll: [],
        scanRate: __serializeFloat,
    });
};
const se_DynamoDBTargetList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DynamoDBTarget(entry, context);
    });
};
const se_FindMatchesParameters = (input, context) => {
    return take(input, {
        AccuracyCostTradeoff: __serializeFloat,
        EnforceProvidedLabels: [],
        PrecisionRecallTradeoff: __serializeFloat,
        PrimaryKeyColumnName: [],
    });
};
const se_GetMLTaskRunsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_TaskRunFilterCriteria(_, context),
        MaxResults: [],
        NextToken: [],
        Sort: _json,
        TransformId: [],
    });
};
const se_GetMLTransformsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_TransformFilterCriteria(_, context),
        MaxResults: [],
        NextToken: [],
        Sort: _json,
    });
};
const se_GetPartitionsRequest = (input, context) => {
    return take(input, {
        CatalogId: [],
        DatabaseName: [],
        ExcludeColumnSchema: [],
        Expression: [],
        MaxResults: [],
        NextToken: [],
        QueryAsOfTime: (_) => Math.round(_.getTime() / 1000),
        Segment: _json,
        TableName: [],
        TransactionId: [],
    });
};
const se_GetTableRequest = (input, context) => {
    return take(input, {
        CatalogId: [],
        DatabaseName: [],
        Name: [],
        QueryAsOfTime: (_) => Math.round(_.getTime() / 1000),
        TransactionId: [],
    });
};
const se_GetTablesRequest = (input, context) => {
    return take(input, {
        CatalogId: [],
        DatabaseName: [],
        Expression: [],
        MaxResults: [],
        NextToken: [],
        QueryAsOfTime: (_) => Math.round(_.getTime() / 1000),
        TransactionId: [],
    });
};
const se_GetUnfilteredPartitionMetadataRequest = (input, context) => {
    return take(input, {
        AuditContext: _json,
        CatalogId: [],
        DatabaseName: [],
        PartitionValues: _json,
        QuerySessionContext: (_) => se_QuerySessionContext(_, context),
        Region: [],
        SupportedPermissionTypes: _json,
        TableName: [],
    });
};
const se_GetUnfilteredPartitionsMetadataRequest = (input, context) => {
    return take(input, {
        AuditContext: _json,
        CatalogId: [],
        DatabaseName: [],
        Expression: [],
        MaxResults: [],
        NextToken: [],
        QuerySessionContext: (_) => se_QuerySessionContext(_, context),
        Region: [],
        Segment: _json,
        SupportedPermissionTypes: _json,
        TableName: [],
    });
};
const se_GetUnfilteredTableMetadataRequest = (input, context) => {
    return take(input, {
        AuditContext: _json,
        CatalogId: [],
        DatabaseName: [],
        Name: [],
        ParentResourceArn: [],
        Permissions: _json,
        QuerySessionContext: (_) => se_QuerySessionContext(_, context),
        Region: [],
        RootResourceArn: [],
        SupportedDialect: _json,
        SupportedPermissionTypes: _json,
    });
};
const se_JobUpdate = (input, context) => {
    return take(input, {
        AllocatedCapacity: [],
        CodeGenConfigurationNodes: (_) => se_CodeGenConfigurationNodes(_, context),
        Command: _json,
        Connections: _json,
        DefaultArguments: _json,
        Description: [],
        ExecutionClass: [],
        ExecutionProperty: _json,
        GlueVersion: [],
        LogUri: [],
        MaxCapacity: __serializeFloat,
        MaxRetries: [],
        NonOverridableArguments: _json,
        NotificationProperty: _json,
        NumberOfWorkers: [],
        Role: [],
        SecurityConfiguration: [],
        SourceControlDetails: _json,
        Timeout: [],
        WorkerType: [],
    });
};
const se_KafkaStreamingSourceOptions = (input, context) => {
    return take(input, {
        AddRecordTimestamp: [],
        Assign: [],
        BootstrapServers: [],
        Classification: [],
        ConnectionName: [],
        Delimiter: [],
        EmitConsumerLagMetrics: [],
        EndingOffsets: [],
        IncludeHeaders: [],
        MaxOffsetsPerTrigger: [],
        MinPartitions: [],
        NumRetries: [],
        PollTimeoutMs: [],
        RetryIntervalMs: [],
        SecurityProtocol: [],
        StartingOffsets: [],
        StartingTimestamp: (_) => _.toISOString().split(".")[0] + "Z",
        SubscribePattern: [],
        TopicName: [],
    });
};
const se_KinesisStreamingSourceOptions = (input, context) => {
    return take(input, {
        AddIdleTimeBetweenReads: [],
        AddRecordTimestamp: [],
        AvoidEmptyBatches: [],
        Classification: [],
        Delimiter: [],
        DescribeShardInterval: [],
        EmitConsumerLagMetrics: [],
        EndpointUrl: [],
        IdleTimeBetweenReadsInMs: [],
        MaxFetchRecordsPerShard: [],
        MaxFetchTimeInMs: [],
        MaxRecordPerRead: [],
        MaxRetryIntervalMs: [],
        NumRetries: [],
        RetryIntervalMs: [],
        RoleArn: [],
        RoleSessionName: [],
        StartingPosition: [],
        StartingTimestamp: (_) => _.toISOString().split(".")[0] + "Z",
        StreamArn: [],
        StreamName: [],
    });
};
const se_ListDataQualityResultsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_DataQualityResultFilterCriteria(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListDataQualityRuleRecommendationRunsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_DataQualityRuleRecommendationRunFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListDataQualityRulesetEvaluationRunsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_DataQualityRulesetEvaluationRunFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListDataQualityRulesetsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_DataQualityRulesetFilterCriteria(_, context),
        MaxResults: [],
        NextToken: [],
        Tags: _json,
    });
};
const se_ListMLTransformsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_TransformFilterCriteria(_, context),
        MaxResults: [],
        NextToken: [],
        Sort: _json,
        Tags: _json,
    });
};
const se_Mapping = (input, context) => {
    return take(input, {
        Children: (_) => se_Mappings(_, context),
        Dropped: [],
        FromPath: _json,
        FromType: [],
        ToKey: [],
        ToType: [],
    });
};
const se_Mappings = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Mapping(entry, context);
    });
};
const se_PartitionInput = (input, context) => {
    return take(input, {
        LastAccessTime: (_) => Math.round(_.getTime() / 1000),
        LastAnalyzedTime: (_) => Math.round(_.getTime() / 1000),
        Parameters: _json,
        StorageDescriptor: _json,
        Values: _json,
    });
};
const se_PartitionInputList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PartitionInput(entry, context);
    });
};
const se_PIIDetection = (input, context) => {
    return take(input, {
        EntityTypesToDetect: _json,
        Inputs: _json,
        MaskValue: [],
        Name: [],
        OutputColumnName: [],
        PiiType: [],
        SampleFraction: __serializeFloat,
        ThresholdFraction: __serializeFloat,
    });
};
const se_QuerySessionContext = (input, context) => {
    return take(input, {
        AdditionalContext: _json,
        ClusterId: [],
        QueryAuthorizationId: [],
        QueryId: [],
        QueryStartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_Spigot = (input, context) => {
    return take(input, {
        Inputs: _json,
        Name: [],
        Path: [],
        Prob: __serializeFloat,
        Topk: [],
    });
};
const se_StartColumnStatisticsTaskRunRequest = (input, context) => {
    return take(input, {
        CatalogID: [],
        ColumnNameList: _json,
        DatabaseName: [],
        Role: [],
        SampleSize: __serializeFloat,
        SecurityConfiguration: [],
        TableName: [],
    });
};
const se_StartJobRunRequest = (input, context) => {
    return take(input, {
        AllocatedCapacity: [],
        Arguments: _json,
        ExecutionClass: [],
        JobName: [],
        JobRunId: [],
        MaxCapacity: __serializeFloat,
        NotificationProperty: _json,
        NumberOfWorkers: [],
        SecurityConfiguration: [],
        Timeout: [],
        WorkerType: [],
    });
};
const se_StringColumnStatisticsData = (input, context) => {
    return take(input, {
        AverageLength: __serializeFloat,
        MaximumLength: [],
        NumberOfDistinctValues: [],
        NumberOfNulls: [],
    });
};
const se_TableInput = (input, context) => {
    return take(input, {
        Description: [],
        LastAccessTime: (_) => Math.round(_.getTime() / 1000),
        LastAnalyzedTime: (_) => Math.round(_.getTime() / 1000),
        Name: [],
        Owner: [],
        Parameters: _json,
        PartitionKeys: _json,
        Retention: [],
        StorageDescriptor: _json,
        TableType: [],
        TargetTable: _json,
        ViewExpandedText: [],
        ViewOriginalText: [],
    });
};
const se_TaskRunFilterCriteria = (input, context) => {
    return take(input, {
        StartedAfter: (_) => Math.round(_.getTime() / 1000),
        StartedBefore: (_) => Math.round(_.getTime() / 1000),
        Status: [],
        TaskRunType: [],
    });
};
const se_TransformFilterCriteria = (input, context) => {
    return take(input, {
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        GlueVersion: [],
        LastModifiedAfter: (_) => Math.round(_.getTime() / 1000),
        LastModifiedBefore: (_) => Math.round(_.getTime() / 1000),
        Name: [],
        Schema: _json,
        Status: [],
        TransformType: [],
    });
};
const se_TransformParameters = (input, context) => {
    return take(input, {
        FindMatchesParameters: (_) => se_FindMatchesParameters(_, context),
        TransformType: [],
    });
};
const se_UpdateColumnStatisticsForPartitionRequest = (input, context) => {
    return take(input, {
        CatalogId: [],
        ColumnStatisticsList: (_) => se_UpdateColumnStatisticsList(_, context),
        DatabaseName: [],
        PartitionValues: _json,
        TableName: [],
    });
};
const se_UpdateColumnStatisticsForTableRequest = (input, context) => {
    return take(input, {
        CatalogId: [],
        ColumnStatisticsList: (_) => se_UpdateColumnStatisticsList(_, context),
        DatabaseName: [],
        TableName: [],
    });
};
const se_UpdateColumnStatisticsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ColumnStatistics(entry, context);
    });
};
const se_UpdateCrawlerRequest = (input, context) => {
    return take(input, {
        Classifiers: _json,
        Configuration: [],
        CrawlerSecurityConfiguration: [],
        DatabaseName: [],
        Description: [],
        LakeFormationConfiguration: _json,
        LineageConfiguration: _json,
        Name: [],
        RecrawlPolicy: _json,
        Role: [],
        Schedule: [],
        SchemaChangePolicy: _json,
        TablePrefix: [],
        Targets: (_) => se_CrawlerTargets(_, context),
    });
};
const se_UpdateJobRequest = (input, context) => {
    return take(input, {
        JobName: [],
        JobUpdate: (_) => se_JobUpdate(_, context),
    });
};
const se_UpdateMLTransformRequest = (input, context) => {
    return take(input, {
        Description: [],
        GlueVersion: [],
        MaxCapacity: __serializeFloat,
        MaxRetries: [],
        Name: [],
        NumberOfWorkers: [],
        Parameters: (_) => se_TransformParameters(_, context),
        Role: [],
        Timeout: [],
        TransformId: [],
        WorkerType: [],
    });
};
const se_UpdatePartitionRequest = (input, context) => {
    return take(input, {
        CatalogId: [],
        DatabaseName: [],
        PartitionInput: (_) => se_PartitionInput(_, context),
        PartitionValueList: _json,
        TableName: [],
    });
};
const se_UpdateTableRequest = (input, context) => {
    return take(input, {
        CatalogId: [],
        DatabaseName: [],
        SkipArchive: [],
        TableInput: (_) => se_TableInput(_, context),
        TransactionId: [],
        VersionId: [],
    });
};
const de_ApplyMapping = (output, context) => {
    return take(output, {
        Inputs: _json,
        Mapping: (_) => de_Mappings(_, context),
        Name: __expectString,
    });
};
const de_BatchGetBlueprintsResponse = (output, context) => {
    return take(output, {
        Blueprints: (_) => de_Blueprints(_, context),
        MissingBlueprints: _json,
    });
};
const de_BatchGetCrawlersResponse = (output, context) => {
    return take(output, {
        Crawlers: (_) => de_CrawlerList(_, context),
        CrawlersNotFound: _json,
    });
};
const de_BatchGetDataQualityResultResponse = (output, context) => {
    return take(output, {
        Results: (_) => de_DataQualityResultsList(_, context),
        ResultsNotFound: _json,
    });
};
const de_BatchGetDevEndpointsResponse = (output, context) => {
    return take(output, {
        DevEndpoints: (_) => de_DevEndpointList(_, context),
        DevEndpointsNotFound: _json,
    });
};
const de_BatchGetJobsResponse = (output, context) => {
    return take(output, {
        Jobs: (_) => de_JobList(_, context),
        JobsNotFound: _json,
    });
};
const de_BatchGetPartitionResponse = (output, context) => {
    return take(output, {
        Partitions: (_) => de_PartitionList(_, context),
        UnprocessedKeys: _json,
    });
};
const de_BatchGetTableOptimizerResponse = (output, context) => {
    return take(output, {
        Failures: _json,
        TableOptimizers: (_) => de_BatchTableOptimizers(_, context),
    });
};
const de_BatchGetWorkflowsResponse = (output, context) => {
    return take(output, {
        MissingWorkflows: _json,
        Workflows: (_) => de_Workflows(_, context),
    });
};
const de_BatchTableOptimizer = (output, context) => {
    return take(output, {
        catalogId: __expectString,
        databaseName: __expectString,
        tableName: __expectString,
        tableOptimizer: (_) => de_TableOptimizer(_, context),
    });
};
const de_BatchTableOptimizers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchTableOptimizer(entry, context);
    });
    return retVal;
};
const de_BinaryColumnStatisticsData = (output, context) => {
    return take(output, {
        AverageLength: __limitedParseDouble,
        MaximumLength: __expectLong,
        NumberOfNulls: __expectLong,
    });
};
const de_Blueprint = (output, context) => {
    return take(output, {
        BlueprintLocation: __expectString,
        BlueprintServiceLocation: __expectString,
        CreatedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        ErrorMessage: __expectString,
        LastActiveDefinition: (_) => de_LastActiveDefinition(_, context),
        LastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        ParameterSpec: __expectString,
        Status: __expectString,
    });
};
const de_BlueprintRun = (output, context) => {
    return take(output, {
        BlueprintName: __expectString,
        CompletedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ErrorMessage: __expectString,
        Parameters: __expectString,
        RoleArn: __expectString,
        RollbackErrorMessage: __expectString,
        RunId: __expectString,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
        WorkflowName: __expectString,
    });
};
const de_BlueprintRuns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BlueprintRun(entry, context);
    });
    return retVal;
};
const de_Blueprints = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Blueprint(entry, context);
    });
    return retVal;
};
const de_CatalogImportStatus = (output, context) => {
    return take(output, {
        ImportCompleted: __expectBoolean,
        ImportTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ImportedBy: __expectString,
    });
};
const de_CatalogKafkaSource = (output, context) => {
    return take(output, {
        DataPreviewOptions: _json,
        Database: __expectString,
        DetectSchema: __expectBoolean,
        Name: __expectString,
        StreamingOptions: (_) => de_KafkaStreamingSourceOptions(_, context),
        Table: __expectString,
        WindowSize: __expectInt32,
    });
};
const de_CatalogKinesisSource = (output, context) => {
    return take(output, {
        DataPreviewOptions: _json,
        Database: __expectString,
        DetectSchema: __expectBoolean,
        Name: __expectString,
        StreamingOptions: (_) => de_KinesisStreamingSourceOptions(_, context),
        Table: __expectString,
        WindowSize: __expectInt32,
    });
};
const de_Classifier = (output, context) => {
    return take(output, {
        CsvClassifier: (_) => de_CsvClassifier(_, context),
        GrokClassifier: (_) => de_GrokClassifier(_, context),
        JsonClassifier: (_) => de_JsonClassifier(_, context),
        XMLClassifier: (_) => de_XMLClassifier(_, context),
    });
};
const de_ClassifierList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Classifier(entry, context);
    });
    return retVal;
};
const de_CodeGenConfigurationNode = (output, context) => {
    return take(output, {
        Aggregate: _json,
        AmazonRedshiftSource: _json,
        AmazonRedshiftTarget: _json,
        ApplyMapping: (_) => de_ApplyMapping(_, context),
        AthenaConnectorSource: _json,
        CatalogDeltaSource: _json,
        CatalogHudiSource: _json,
        CatalogKafkaSource: (_) => de_CatalogKafkaSource(_, context),
        CatalogKinesisSource: (_) => de_CatalogKinesisSource(_, context),
        CatalogSource: _json,
        CatalogTarget: _json,
        ConnectorDataSource: _json,
        ConnectorDataTarget: _json,
        CustomCode: _json,
        DirectJDBCSource: _json,
        DirectKafkaSource: (_) => de_DirectKafkaSource(_, context),
        DirectKinesisSource: (_) => de_DirectKinesisSource(_, context),
        DropDuplicates: _json,
        DropFields: _json,
        DropNullFields: _json,
        DynamicTransform: _json,
        DynamoDBCatalogSource: _json,
        EvaluateDataQuality: _json,
        EvaluateDataQualityMultiFrame: _json,
        FillMissingValues: _json,
        Filter: _json,
        GovernedCatalogSource: _json,
        GovernedCatalogTarget: _json,
        JDBCConnectorSource: _json,
        JDBCConnectorTarget: _json,
        Join: _json,
        Merge: _json,
        MicrosoftSQLServerCatalogSource: _json,
        MicrosoftSQLServerCatalogTarget: _json,
        MySQLCatalogSource: _json,
        MySQLCatalogTarget: _json,
        OracleSQLCatalogSource: _json,
        OracleSQLCatalogTarget: _json,
        PIIDetection: (_) => de_PIIDetection(_, context),
        PostgreSQLCatalogSource: _json,
        PostgreSQLCatalogTarget: _json,
        Recipe: _json,
        RedshiftSource: _json,
        RedshiftTarget: _json,
        RelationalCatalogSource: _json,
        RenameField: _json,
        S3CatalogDeltaSource: _json,
        S3CatalogHudiSource: _json,
        S3CatalogSource: _json,
        S3CatalogTarget: _json,
        S3CsvSource: _json,
        S3DeltaCatalogTarget: _json,
        S3DeltaDirectTarget: _json,
        S3DeltaSource: _json,
        S3DirectTarget: _json,
        S3GlueParquetTarget: _json,
        S3HudiCatalogTarget: _json,
        S3HudiDirectTarget: _json,
        S3HudiSource: _json,
        S3JsonSource: _json,
        S3ParquetSource: _json,
        SelectFields: _json,
        SelectFromCollection: _json,
        SnowflakeSource: _json,
        SnowflakeTarget: _json,
        SparkConnectorSource: _json,
        SparkConnectorTarget: _json,
        SparkSQL: _json,
        Spigot: (_) => de_Spigot(_, context),
        SplitFields: _json,
        Union: _json,
    });
};
const de_CodeGenConfigurationNodes = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_CodeGenConfigurationNode(value, context);
        return acc;
    }, {});
};
const de_ColumnImportance = (output, context) => {
    return take(output, {
        ColumnName: __expectString,
        Importance: __limitedParseDouble,
    });
};
const de_ColumnImportanceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ColumnImportance(entry, context);
    });
    return retVal;
};
const de_ColumnStatistics = (output, context) => {
    return take(output, {
        AnalyzedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ColumnName: __expectString,
        ColumnType: __expectString,
        StatisticsData: (_) => de_ColumnStatisticsData(_, context),
    });
};
const de_ColumnStatisticsData = (output, context) => {
    return take(output, {
        BinaryColumnStatisticsData: (_) => de_BinaryColumnStatisticsData(_, context),
        BooleanColumnStatisticsData: _json,
        DateColumnStatisticsData: (_) => de_DateColumnStatisticsData(_, context),
        DecimalColumnStatisticsData: (_) => de_DecimalColumnStatisticsData(_, context),
        DoubleColumnStatisticsData: (_) => de_DoubleColumnStatisticsData(_, context),
        LongColumnStatisticsData: _json,
        StringColumnStatisticsData: (_) => de_StringColumnStatisticsData(_, context),
        Type: __expectString,
    });
};
const de_ColumnStatisticsError = (output, context) => {
    return take(output, {
        ColumnStatistics: (_) => de_ColumnStatistics(_, context),
        Error: _json,
    });
};
const de_ColumnStatisticsErrors = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ColumnStatisticsError(entry, context);
    });
    return retVal;
};
const de_ColumnStatisticsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ColumnStatistics(entry, context);
    });
    return retVal;
};
const de_ColumnStatisticsTaskRun = (output, context) => {
    return take(output, {
        CatalogID: __expectString,
        ColumnNameList: _json,
        ColumnStatisticsTaskRunId: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CustomerId: __expectString,
        DPUSeconds: __limitedParseDouble,
        DatabaseName: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ErrorMessage: __expectString,
        LastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NumberOfWorkers: __expectInt32,
        Role: __expectString,
        SampleSize: __limitedParseDouble,
        SecurityConfiguration: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        TableName: __expectString,
        WorkerType: __expectString,
    });
};
const de_ColumnStatisticsTaskRunsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ColumnStatisticsTaskRun(entry, context);
    });
    return retVal;
};
const de_Connection = (output, context) => {
    return take(output, {
        ConnectionProperties: _json,
        ConnectionType: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LastUpdatedBy: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MatchCriteria: _json,
        Name: __expectString,
        PhysicalConnectionRequirements: _json,
    });
};
const de_ConnectionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Connection(entry, context);
    });
    return retVal;
};
const de_Crawl = (output, context) => {
    return take(output, {
        CompletedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ErrorMessage: __expectString,
        LogGroup: __expectString,
        LogStream: __expectString,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
    });
};
const de_Crawler = (output, context) => {
    return take(output, {
        Classifiers: _json,
        Configuration: __expectString,
        CrawlElapsedTime: __expectLong,
        CrawlerSecurityConfiguration: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatabaseName: __expectString,
        Description: __expectString,
        LakeFormationConfiguration: _json,
        LastCrawl: (_) => de_LastCrawlInfo(_, context),
        LastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LineageConfiguration: _json,
        Name: __expectString,
        RecrawlPolicy: _json,
        Role: __expectString,
        Schedule: _json,
        SchemaChangePolicy: _json,
        State: __expectString,
        TablePrefix: __expectString,
        Targets: (_) => de_CrawlerTargets(_, context),
        Version: __expectLong,
    });
};
const de_CrawlerHistory = (output, context) => {
    return take(output, {
        CrawlId: __expectString,
        DPUHour: __limitedParseDouble,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ErrorMessage: __expectString,
        LogGroup: __expectString,
        LogStream: __expectString,
        MessagePrefix: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
        Summary: __expectString,
    });
};
const de_CrawlerHistoryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CrawlerHistory(entry, context);
    });
    return retVal;
};
const de_CrawlerList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Crawler(entry, context);
    });
    return retVal;
};
const de_CrawlerMetrics = (output, context) => {
    return take(output, {
        CrawlerName: __expectString,
        LastRuntimeSeconds: __limitedParseDouble,
        MedianRuntimeSeconds: __limitedParseDouble,
        StillEstimating: __expectBoolean,
        TablesCreated: __expectInt32,
        TablesDeleted: __expectInt32,
        TablesUpdated: __expectInt32,
        TimeLeftSeconds: __limitedParseDouble,
    });
};
const de_CrawlerMetricsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CrawlerMetrics(entry, context);
    });
    return retVal;
};
const de_CrawlerNodeDetails = (output, context) => {
    return take(output, {
        Crawls: (_) => de_CrawlList(_, context),
    });
};
const de_CrawlerTargets = (output, context) => {
    return take(output, {
        CatalogTargets: _json,
        DeltaTargets: _json,
        DynamoDBTargets: (_) => de_DynamoDBTargetList(_, context),
        HudiTargets: _json,
        IcebergTargets: _json,
        JdbcTargets: _json,
        MongoDBTargets: _json,
        S3Targets: _json,
    });
};
const de_CrawlList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Crawl(entry, context);
    });
    return retVal;
};
const de_CreateDevEndpointResponse = (output, context) => {
    return take(output, {
        Arguments: _json,
        AvailabilityZone: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndpointName: __expectString,
        ExtraJarsS3Path: __expectString,
        ExtraPythonLibsS3Path: __expectString,
        FailureReason: __expectString,
        GlueVersion: __expectString,
        NumberOfNodes: __expectInt32,
        NumberOfWorkers: __expectInt32,
        RoleArn: __expectString,
        SecurityConfiguration: __expectString,
        SecurityGroupIds: _json,
        Status: __expectString,
        SubnetId: __expectString,
        VpcId: __expectString,
        WorkerType: __expectString,
        YarnEndpointAddress: __expectString,
        ZeppelinRemoteSparkInterpreterPort: __expectInt32,
    });
};
const de_CreateSecurityConfigurationResponse = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
    });
};
const de_CreateSessionResponse = (output, context) => {
    return take(output, {
        Session: (_) => de_Session(_, context),
    });
};
const de_CsvClassifier = (output, context) => {
    return take(output, {
        AllowSingleColumn: __expectBoolean,
        ContainsHeader: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CustomDatatypeConfigured: __expectBoolean,
        CustomDatatypes: _json,
        Delimiter: __expectString,
        DisableValueTrimming: __expectBoolean,
        Header: _json,
        LastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        QuoteSymbol: __expectString,
        Serde: __expectString,
        Version: __expectLong,
    });
};
const de_Database = (output, context) => {
    return take(output, {
        CatalogId: __expectString,
        CreateTableDefaultPermissions: _json,
        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        FederatedDatabase: _json,
        LocationUri: __expectString,
        Name: __expectString,
        Parameters: _json,
        TargetDatabase: _json,
    });
};
const de_DatabaseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Database(entry, context);
    });
    return retVal;
};
const de_DataQualityAnalyzerResult = (output, context) => {
    return take(output, {
        Description: __expectString,
        EvaluatedMetrics: (_) => de_EvaluatedMetricsMap(_, context),
        EvaluationMessage: __expectString,
        Name: __expectString,
    });
};
const de_DataQualityAnalyzerResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityAnalyzerResult(entry, context);
    });
    return retVal;
};
const de_DataQualityMetricValues = (output, context) => {
    return take(output, {
        ActualValue: __limitedParseDouble,
        ExpectedValue: __limitedParseDouble,
        LowerLimit: __limitedParseDouble,
        UpperLimit: __limitedParseDouble,
    });
};
const de_DataQualityObservation = (output, context) => {
    return take(output, {
        Description: __expectString,
        MetricBasedObservation: (_) => de_MetricBasedObservation(_, context),
    });
};
const de_DataQualityObservations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityObservation(entry, context);
    });
    return retVal;
};
const de_DataQualityResult = (output, context) => {
    return take(output, {
        AnalyzerResults: (_) => de_DataQualityAnalyzerResults(_, context),
        CompletedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSource: _json,
        EvaluationContext: __expectString,
        JobName: __expectString,
        JobRunId: __expectString,
        Observations: (_) => de_DataQualityObservations(_, context),
        ResultId: __expectString,
        RuleResults: (_) => de_DataQualityRuleResults(_, context),
        RulesetEvaluationRunId: __expectString,
        RulesetName: __expectString,
        Score: __limitedParseDouble,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DataQualityResultDescription = (output, context) => {
    return take(output, {
        DataSource: _json,
        JobName: __expectString,
        JobRunId: __expectString,
        ResultId: __expectString,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DataQualityResultDescriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityResultDescription(entry, context);
    });
    return retVal;
};
const de_DataQualityResultsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityResult(entry, context);
    });
    return retVal;
};
const de_DataQualityRuleRecommendationRunDescription = (output, context) => {
    return take(output, {
        DataSource: _json,
        RunId: __expectString,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
};
const de_DataQualityRuleRecommendationRunList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityRuleRecommendationRunDescription(entry, context);
    });
    return retVal;
};
const de_DataQualityRuleResult = (output, context) => {
    return take(output, {
        Description: __expectString,
        EvaluatedMetrics: (_) => de_EvaluatedMetricsMap(_, context),
        EvaluationMessage: __expectString,
        Name: __expectString,
        Result: __expectString,
    });
};
const de_DataQualityRuleResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityRuleResult(entry, context);
    });
    return retVal;
};
const de_DataQualityRulesetEvaluationRunDescription = (output, context) => {
    return take(output, {
        DataSource: _json,
        RunId: __expectString,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
};
const de_DataQualityRulesetEvaluationRunList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityRulesetEvaluationRunDescription(entry, context);
    });
    return retVal;
};
const de_DataQualityRulesetList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityRulesetListDetails(entry, context);
    });
    return retVal;
};
const de_DataQualityRulesetListDetails = (output, context) => {
    return take(output, {
        CreatedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        RecommendationRunId: __expectString,
        RuleCount: __expectInt32,
        TargetTable: _json,
    });
};
const de_DateColumnStatisticsData = (output, context) => {
    return take(output, {
        MaximumValue: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MinimumValue: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NumberOfDistinctValues: __expectLong,
        NumberOfNulls: __expectLong,
    });
};
const de_DecimalColumnStatisticsData = (output, context) => {
    return take(output, {
        MaximumValue: (_) => de_DecimalNumber(_, context),
        MinimumValue: (_) => de_DecimalNumber(_, context),
        NumberOfDistinctValues: __expectLong,
        NumberOfNulls: __expectLong,
    });
};
const de_DecimalNumber = (output, context) => {
    return take(output, {
        Scale: __expectInt32,
        UnscaledValue: context.base64Decoder,
    });
};
const de_DevEndpoint = (output, context) => {
    return take(output, {
        Arguments: _json,
        AvailabilityZone: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndpointName: __expectString,
        ExtraJarsS3Path: __expectString,
        ExtraPythonLibsS3Path: __expectString,
        FailureReason: __expectString,
        GlueVersion: __expectString,
        LastModifiedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdateStatus: __expectString,
        NumberOfNodes: __expectInt32,
        NumberOfWorkers: __expectInt32,
        PrivateAddress: __expectString,
        PublicAddress: __expectString,
        PublicKey: __expectString,
        PublicKeys: _json,
        RoleArn: __expectString,
        SecurityConfiguration: __expectString,
        SecurityGroupIds: _json,
        Status: __expectString,
        SubnetId: __expectString,
        VpcId: __expectString,
        WorkerType: __expectString,
        YarnEndpointAddress: __expectString,
        ZeppelinRemoteSparkInterpreterPort: __expectInt32,
    });
};
const de_DevEndpointList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DevEndpoint(entry, context);
    });
    return retVal;
};
const de_DirectKafkaSource = (output, context) => {
    return take(output, {
        DataPreviewOptions: _json,
        DetectSchema: __expectBoolean,
        Name: __expectString,
        StreamingOptions: (_) => de_KafkaStreamingSourceOptions(_, context),
        WindowSize: __expectInt32,
    });
};
const de_DirectKinesisSource = (output, context) => {
    return take(output, {
        DataPreviewOptions: _json,
        DetectSchema: __expectBoolean,
        Name: __expectString,
        StreamingOptions: (_) => de_KinesisStreamingSourceOptions(_, context),
        WindowSize: __expectInt32,
    });
};
const de_DoubleColumnStatisticsData = (output, context) => {
    return take(output, {
        MaximumValue: __limitedParseDouble,
        MinimumValue: __limitedParseDouble,
        NumberOfDistinctValues: __expectLong,
        NumberOfNulls: __expectLong,
    });
};
const de_DynamoDBTarget = (output, context) => {
    return take(output, {
        Path: __expectString,
        scanAll: __expectBoolean,
        scanRate: __limitedParseDouble,
    });
};
const de_DynamoDBTargetList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DynamoDBTarget(entry, context);
    });
    return retVal;
};
const de_EvaluatedMetricsMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __limitedParseDouble(value);
        return acc;
    }, {});
};
const de_EvaluationMetrics = (output, context) => {
    return take(output, {
        FindMatchesMetrics: (_) => de_FindMatchesMetrics(_, context),
        TransformType: __expectString,
    });
};
const de_FindMatchesMetrics = (output, context) => {
    return take(output, {
        AreaUnderPRCurve: __limitedParseDouble,
        ColumnImportances: (_) => de_ColumnImportanceList(_, context),
        ConfusionMatrix: _json,
        F1: __limitedParseDouble,
        Precision: __limitedParseDouble,
        Recall: __limitedParseDouble,
    });
};
const de_FindMatchesParameters = (output, context) => {
    return take(output, {
        AccuracyCostTradeoff: __limitedParseDouble,
        EnforceProvidedLabels: __expectBoolean,
        PrecisionRecallTradeoff: __limitedParseDouble,
        PrimaryKeyColumnName: __expectString,
    });
};
const de_GetBlueprintResponse = (output, context) => {
    return take(output, {
        Blueprint: (_) => de_Blueprint(_, context),
    });
};
const de_GetBlueprintRunResponse = (output, context) => {
    return take(output, {
        BlueprintRun: (_) => de_BlueprintRun(_, context),
    });
};
const de_GetBlueprintRunsResponse = (output, context) => {
    return take(output, {
        BlueprintRuns: (_) => de_BlueprintRuns(_, context),
        NextToken: __expectString,
    });
};
const de_GetCatalogImportStatusResponse = (output, context) => {
    return take(output, {
        ImportStatus: (_) => de_CatalogImportStatus(_, context),
    });
};
const de_GetClassifierResponse = (output, context) => {
    return take(output, {
        Classifier: (_) => de_Classifier(_, context),
    });
};
const de_GetClassifiersResponse = (output, context) => {
    return take(output, {
        Classifiers: (_) => de_ClassifierList(_, context),
        NextToken: __expectString,
    });
};
const de_GetColumnStatisticsForPartitionResponse = (output, context) => {
    return take(output, {
        ColumnStatisticsList: (_) => de_ColumnStatisticsList(_, context),
        Errors: _json,
    });
};
const de_GetColumnStatisticsForTableResponse = (output, context) => {
    return take(output, {
        ColumnStatisticsList: (_) => de_ColumnStatisticsList(_, context),
        Errors: _json,
    });
};
const de_GetColumnStatisticsTaskRunResponse = (output, context) => {
    return take(output, {
        ColumnStatisticsTaskRun: (_) => de_ColumnStatisticsTaskRun(_, context),
    });
};
const de_GetColumnStatisticsTaskRunsResponse = (output, context) => {
    return take(output, {
        ColumnStatisticsTaskRuns: (_) => de_ColumnStatisticsTaskRunsList(_, context),
        NextToken: __expectString,
    });
};
const de_GetConnectionResponse = (output, context) => {
    return take(output, {
        Connection: (_) => de_Connection(_, context),
    });
};
const de_GetConnectionsResponse = (output, context) => {
    return take(output, {
        ConnectionList: (_) => de_ConnectionList(_, context),
        NextToken: __expectString,
    });
};
const de_GetCrawlerMetricsResponse = (output, context) => {
    return take(output, {
        CrawlerMetricsList: (_) => de_CrawlerMetricsList(_, context),
        NextToken: __expectString,
    });
};
const de_GetCrawlerResponse = (output, context) => {
    return take(output, {
        Crawler: (_) => de_Crawler(_, context),
    });
};
const de_GetCrawlersResponse = (output, context) => {
    return take(output, {
        Crawlers: (_) => de_CrawlerList(_, context),
        NextToken: __expectString,
    });
};
const de_GetDatabaseResponse = (output, context) => {
    return take(output, {
        Database: (_) => de_Database(_, context),
    });
};
const de_GetDatabasesResponse = (output, context) => {
    return take(output, {
        DatabaseList: (_) => de_DatabaseList(_, context),
        NextToken: __expectString,
    });
};
const de_GetDataQualityResultResponse = (output, context) => {
    return take(output, {
        AnalyzerResults: (_) => de_DataQualityAnalyzerResults(_, context),
        CompletedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSource: _json,
        EvaluationContext: __expectString,
        JobName: __expectString,
        JobRunId: __expectString,
        Observations: (_) => de_DataQualityObservations(_, context),
        ResultId: __expectString,
        RuleResults: (_) => de_DataQualityRuleResults(_, context),
        RulesetEvaluationRunId: __expectString,
        RulesetName: __expectString,
        Score: __limitedParseDouble,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_GetDataQualityRuleRecommendationRunResponse = (output, context) => {
    return take(output, {
        CompletedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedRulesetName: __expectString,
        DataSource: _json,
        ErrorString: __expectString,
        ExecutionTime: __expectInt32,
        LastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NumberOfWorkers: __expectInt32,
        RecommendedRuleset: __expectString,
        Role: __expectString,
        RunId: __expectString,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        Timeout: __expectInt32,
    });
};
const de_GetDataQualityRulesetEvaluationRunResponse = (output, context) => {
    return take(output, {
        AdditionalDataSources: _json,
        AdditionalRunOptions: _json,
        CompletedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSource: _json,
        ErrorString: __expectString,
        ExecutionTime: __expectInt32,
        LastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NumberOfWorkers: __expectInt32,
        ResultIds: _json,
        Role: __expectString,
        RulesetNames: _json,
        RunId: __expectString,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        Timeout: __expectInt32,
    });
};
const de_GetDataQualityRulesetResponse = (output, context) => {
    return take(output, {
        CreatedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        RecommendationRunId: __expectString,
        Ruleset: __expectString,
        TargetTable: _json,
    });
};
const de_GetDevEndpointResponse = (output, context) => {
    return take(output, {
        DevEndpoint: (_) => de_DevEndpoint(_, context),
    });
};
const de_GetDevEndpointsResponse = (output, context) => {
    return take(output, {
        DevEndpoints: (_) => de_DevEndpointList(_, context),
        NextToken: __expectString,
    });
};
const de_GetJobResponse = (output, context) => {
    return take(output, {
        Job: (_) => de_Job(_, context),
    });
};
const de_GetJobRunResponse = (output, context) => {
    return take(output, {
        JobRun: (_) => de_JobRun(_, context),
    });
};
const de_GetJobRunsResponse = (output, context) => {
    return take(output, {
        JobRuns: (_) => de_JobRunList(_, context),
        NextToken: __expectString,
    });
};
const de_GetJobsResponse = (output, context) => {
    return take(output, {
        Jobs: (_) => de_JobList(_, context),
        NextToken: __expectString,
    });
};
const de_GetMLTaskRunResponse = (output, context) => {
    return take(output, {
        CompletedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ErrorString: __expectString,
        ExecutionTime: __expectInt32,
        LastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogGroupName: __expectString,
        Properties: _json,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        TaskRunId: __expectString,
        TransformId: __expectString,
    });
};
const de_GetMLTaskRunsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TaskRuns: (_) => de_TaskRunList(_, context),
    });
};
const de_GetMLTransformResponse = (output, context) => {
    return take(output, {
        CreatedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        EvaluationMetrics: (_) => de_EvaluationMetrics(_, context),
        GlueVersion: __expectString,
        InputRecordTables: _json,
        LabelCount: __expectInt32,
        LastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MaxCapacity: __limitedParseDouble,
        MaxRetries: __expectInt32,
        Name: __expectString,
        NumberOfWorkers: __expectInt32,
        Parameters: (_) => de_TransformParameters(_, context),
        Role: __expectString,
        Schema: _json,
        Status: __expectString,
        Timeout: __expectInt32,
        TransformEncryption: _json,
        TransformId: __expectString,
        WorkerType: __expectString,
    });
};
const de_GetMLTransformsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Transforms: (_) => de_TransformList(_, context),
    });
};
const de_GetPartitionResponse = (output, context) => {
    return take(output, {
        Partition: (_) => de_Partition(_, context),
    });
};
const de_GetPartitionsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Partitions: (_) => de_PartitionList(_, context),
    });
};
const de_GetResourcePoliciesResponse = (output, context) => {
    return take(output, {
        GetResourcePoliciesResponseList: (_) => de_GetResourcePoliciesResponseList(_, context),
        NextToken: __expectString,
    });
};
const de_GetResourcePoliciesResponseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GluePolicy(entry, context);
    });
    return retVal;
};
const de_GetResourcePolicyResponse = (output, context) => {
    return take(output, {
        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PolicyHash: __expectString,
        PolicyInJson: __expectString,
        UpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_GetSecurityConfigurationResponse = (output, context) => {
    return take(output, {
        SecurityConfiguration: (_) => de_SecurityConfiguration(_, context),
    });
};
const de_GetSecurityConfigurationsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        SecurityConfigurations: (_) => de_SecurityConfigurationList(_, context),
    });
};
const de_GetSessionResponse = (output, context) => {
    return take(output, {
        Session: (_) => de_Session(_, context),
    });
};
const de_GetStatementResponse = (output, context) => {
    return take(output, {
        Statement: (_) => de_Statement(_, context),
    });
};
const de_GetTableOptimizerResponse = (output, context) => {
    return take(output, {
        CatalogId: __expectString,
        DatabaseName: __expectString,
        TableName: __expectString,
        TableOptimizer: (_) => de_TableOptimizer(_, context),
    });
};
const de_GetTableResponse = (output, context) => {
    return take(output, {
        Table: (_) => de_Table(_, context),
    });
};
const de_GetTablesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TableList: (_) => de_TableList(_, context),
    });
};
const de_GetTableVersionResponse = (output, context) => {
    return take(output, {
        TableVersion: (_) => de_TableVersion(_, context),
    });
};
const de_GetTableVersionsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TableVersion(entry, context);
    });
    return retVal;
};
const de_GetTableVersionsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TableVersions: (_) => de_GetTableVersionsList(_, context),
    });
};
const de_GetUnfilteredPartitionMetadataResponse = (output, context) => {
    return take(output, {
        AuthorizedColumns: _json,
        IsRegisteredWithLakeFormation: __expectBoolean,
        Partition: (_) => de_Partition(_, context),
    });
};
const de_GetUnfilteredPartitionsMetadataResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        UnfilteredPartitions: (_) => de_UnfilteredPartitionList(_, context),
    });
};
const de_GetUnfilteredTableMetadataResponse = (output, context) => {
    return take(output, {
        AuthorizedColumns: _json,
        CellFilters: _json,
        IsMultiDialectView: __expectBoolean,
        IsProtected: __expectBoolean,
        IsRegisteredWithLakeFormation: __expectBoolean,
        Permissions: _json,
        QueryAuthorizationId: __expectString,
        ResourceArn: __expectString,
        RowFilter: __expectString,
        Table: (_) => de_Table(_, context),
    });
};
const de_GetUserDefinedFunctionResponse = (output, context) => {
    return take(output, {
        UserDefinedFunction: (_) => de_UserDefinedFunction(_, context),
    });
};
const de_GetUserDefinedFunctionsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        UserDefinedFunctions: (_) => de_UserDefinedFunctionList(_, context),
    });
};
const de_GetWorkflowResponse = (output, context) => {
    return take(output, {
        Workflow: (_) => de_Workflow(_, context),
    });
};
const de_GetWorkflowRunResponse = (output, context) => {
    return take(output, {
        Run: (_) => de_WorkflowRun(_, context),
    });
};
const de_GetWorkflowRunsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Runs: (_) => de_WorkflowRuns(_, context),
    });
};
const de_GluePolicy = (output, context) => {
    return take(output, {
        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PolicyHash: __expectString,
        PolicyInJson: __expectString,
        UpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_GrokClassifier = (output, context) => {
    return take(output, {
        Classification: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CustomPatterns: __expectString,
        GrokPattern: __expectString,
        LastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Version: __expectLong,
    });
};
const de_Job = (output, context) => {
    return take(output, {
        AllocatedCapacity: __expectInt32,
        CodeGenConfigurationNodes: (_) => de_CodeGenConfigurationNodes(_, context),
        Command: _json,
        Connections: _json,
        CreatedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultArguments: _json,
        Description: __expectString,
        ExecutionClass: __expectString,
        ExecutionProperty: _json,
        GlueVersion: __expectString,
        LastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogUri: __expectString,
        MaxCapacity: __limitedParseDouble,
        MaxRetries: __expectInt32,
        Name: __expectString,
        NonOverridableArguments: _json,
        NotificationProperty: _json,
        NumberOfWorkers: __expectInt32,
        Role: __expectString,
        SecurityConfiguration: __expectString,
        SourceControlDetails: _json,
        Timeout: __expectInt32,
        WorkerType: __expectString,
    });
};
const de_JobList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Job(entry, context);
    });
    return retVal;
};
const de_JobNodeDetails = (output, context) => {
    return take(output, {
        JobRuns: (_) => de_JobRunList(_, context),
    });
};
const de_JobRun = (output, context) => {
    return take(output, {
        AllocatedCapacity: __expectInt32,
        Arguments: _json,
        Attempt: __expectInt32,
        CompletedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DPUSeconds: __limitedParseDouble,
        ErrorMessage: __expectString,
        ExecutionClass: __expectString,
        ExecutionTime: __expectInt32,
        GlueVersion: __expectString,
        Id: __expectString,
        JobName: __expectString,
        JobRunState: __expectString,
        LastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogGroupName: __expectString,
        MaxCapacity: __limitedParseDouble,
        NotificationProperty: _json,
        NumberOfWorkers: __expectInt32,
        PredecessorRuns: _json,
        PreviousRunId: __expectString,
        SecurityConfiguration: __expectString,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Timeout: __expectInt32,
        TriggerName: __expectString,
        WorkerType: __expectString,
    });
};
const de_JobRunList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobRun(entry, context);
    });
    return retVal;
};
const de_JsonClassifier = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        JsonPath: __expectString,
        LastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Version: __expectLong,
    });
};
const de_KafkaStreamingSourceOptions = (output, context) => {
    return take(output, {
        AddRecordTimestamp: __expectString,
        Assign: __expectString,
        BootstrapServers: __expectString,
        Classification: __expectString,
        ConnectionName: __expectString,
        Delimiter: __expectString,
        EmitConsumerLagMetrics: __expectString,
        EndingOffsets: __expectString,
        IncludeHeaders: __expectBoolean,
        MaxOffsetsPerTrigger: __expectLong,
        MinPartitions: __expectInt32,
        NumRetries: __expectInt32,
        PollTimeoutMs: __expectLong,
        RetryIntervalMs: __expectLong,
        SecurityProtocol: __expectString,
        StartingOffsets: __expectString,
        StartingTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SubscribePattern: __expectString,
        TopicName: __expectString,
    });
};
const de_KinesisStreamingSourceOptions = (output, context) => {
    return take(output, {
        AddIdleTimeBetweenReads: __expectBoolean,
        AddRecordTimestamp: __expectString,
        AvoidEmptyBatches: __expectBoolean,
        Classification: __expectString,
        Delimiter: __expectString,
        DescribeShardInterval: __expectLong,
        EmitConsumerLagMetrics: __expectString,
        EndpointUrl: __expectString,
        IdleTimeBetweenReadsInMs: __expectLong,
        MaxFetchRecordsPerShard: __expectLong,
        MaxFetchTimeInMs: __expectLong,
        MaxRecordPerRead: __expectLong,
        MaxRetryIntervalMs: __expectLong,
        NumRetries: __expectInt32,
        RetryIntervalMs: __expectLong,
        RoleArn: __expectString,
        RoleSessionName: __expectString,
        StartingPosition: __expectString,
        StartingTimestamp: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        StreamArn: __expectString,
        StreamName: __expectString,
    });
};
const de_LastActiveDefinition = (output, context) => {
    return take(output, {
        BlueprintLocation: __expectString,
        BlueprintServiceLocation: __expectString,
        Description: __expectString,
        LastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ParameterSpec: __expectString,
    });
};
const de_LastCrawlInfo = (output, context) => {
    return take(output, {
        ErrorMessage: __expectString,
        LogGroup: __expectString,
        LogStream: __expectString,
        MessagePrefix: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
};
const de_ListCrawlsResponse = (output, context) => {
    return take(output, {
        Crawls: (_) => de_CrawlerHistoryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListDataQualityResultsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Results: (_) => de_DataQualityResultDescriptionList(_, context),
    });
};
const de_ListDataQualityRuleRecommendationRunsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Runs: (_) => de_DataQualityRuleRecommendationRunList(_, context),
    });
};
const de_ListDataQualityRulesetEvaluationRunsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Runs: (_) => de_DataQualityRulesetEvaluationRunList(_, context),
    });
};
const de_ListDataQualityRulesetsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Rulesets: (_) => de_DataQualityRulesetList(_, context),
    });
};
const de_ListSessionsResponse = (output, context) => {
    return take(output, {
        Ids: _json,
        NextToken: __expectString,
        Sessions: (_) => de_SessionList(_, context),
    });
};
const de_ListStatementsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Statements: (_) => de_StatementList(_, context),
    });
};
const de_ListTableOptimizerRunsResponse = (output, context) => {
    return take(output, {
        CatalogId: __expectString,
        DatabaseName: __expectString,
        NextToken: __expectString,
        TableName: __expectString,
        TableOptimizerRuns: (_) => de_TableOptimizerRuns(_, context),
    });
};
const de_Mapping = (output, context) => {
    return take(output, {
        Children: (_) => de_Mappings(_, context),
        Dropped: __expectBoolean,
        FromPath: _json,
        FromType: __expectString,
        ToKey: __expectString,
        ToType: __expectString,
    });
};
const de_Mappings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Mapping(entry, context);
    });
    return retVal;
};
const de_MetricBasedObservation = (output, context) => {
    return take(output, {
        MetricName: __expectString,
        MetricValues: (_) => de_DataQualityMetricValues(_, context),
        NewRules: _json,
    });
};
const de_MLTransform = (output, context) => {
    return take(output, {
        CreatedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        EvaluationMetrics: (_) => de_EvaluationMetrics(_, context),
        GlueVersion: __expectString,
        InputRecordTables: _json,
        LabelCount: __expectInt32,
        LastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MaxCapacity: __limitedParseDouble,
        MaxRetries: __expectInt32,
        Name: __expectString,
        NumberOfWorkers: __expectInt32,
        Parameters: (_) => de_TransformParameters(_, context),
        Role: __expectString,
        Schema: _json,
        Status: __expectString,
        Timeout: __expectInt32,
        TransformEncryption: _json,
        TransformId: __expectString,
        WorkerType: __expectString,
    });
};
const de_Node = (output, context) => {
    return take(output, {
        CrawlerDetails: (_) => de_CrawlerNodeDetails(_, context),
        JobDetails: (_) => de_JobNodeDetails(_, context),
        Name: __expectString,
        TriggerDetails: _json,
        Type: __expectString,
        UniqueId: __expectString,
    });
};
const de_NodeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Node(entry, context);
    });
    return retVal;
};
const de_Partition = (output, context) => {
    return take(output, {
        CatalogId: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatabaseName: __expectString,
        LastAccessTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastAnalyzedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Parameters: _json,
        StorageDescriptor: _json,
        TableName: __expectString,
        Values: _json,
    });
};
const de_PartitionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Partition(entry, context);
    });
    return retVal;
};
const de_PIIDetection = (output, context) => {
    return take(output, {
        EntityTypesToDetect: _json,
        Inputs: _json,
        MaskValue: __expectString,
        Name: __expectString,
        OutputColumnName: __expectString,
        PiiType: __expectString,
        SampleFraction: __limitedParseDouble,
        ThresholdFraction: __limitedParseDouble,
    });
};
const de_SearchTablesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TableList: (_) => de_TableList(_, context),
    });
};
const de_SecurityConfiguration = (output, context) => {
    return take(output, {
        CreatedTimeStamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EncryptionConfiguration: _json,
        Name: __expectString,
    });
};
const de_SecurityConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityConfiguration(entry, context);
    });
    return retVal;
};
const de_Session = (output, context) => {
    return take(output, {
        Command: _json,
        CompletedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Connections: _json,
        CreatedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DPUSeconds: __limitedParseDouble,
        DefaultArguments: _json,
        Description: __expectString,
        ErrorMessage: __expectString,
        ExecutionTime: __limitedParseDouble,
        GlueVersion: __expectString,
        Id: __expectString,
        IdleTimeout: __expectInt32,
        MaxCapacity: __limitedParseDouble,
        NumberOfWorkers: __expectInt32,
        Progress: __limitedParseDouble,
        Role: __expectString,
        SecurityConfiguration: __expectString,
        Status: __expectString,
        WorkerType: __expectString,
    });
};
const de_SessionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Session(entry, context);
    });
    return retVal;
};
const de_Spigot = (output, context) => {
    return take(output, {
        Inputs: _json,
        Name: __expectString,
        Path: __expectString,
        Prob: __limitedParseDouble,
        Topk: __expectInt32,
    });
};
const de_Statement = (output, context) => {
    return take(output, {
        Code: __expectString,
        CompletedOn: __expectLong,
        Id: __expectInt32,
        Output: _json,
        Progress: __limitedParseDouble,
        StartedOn: __expectLong,
        State: __expectString,
    });
};
const de_StatementList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Statement(entry, context);
    });
    return retVal;
};
const de_StringColumnStatisticsData = (output, context) => {
    return take(output, {
        AverageLength: __limitedParseDouble,
        MaximumLength: __expectLong,
        NumberOfDistinctValues: __expectLong,
        NumberOfNulls: __expectLong,
    });
};
const de_Table = (output, context) => {
    return take(output, {
        CatalogId: __expectString,
        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: __expectString,
        DatabaseName: __expectString,
        Description: __expectString,
        FederatedTable: _json,
        IsMultiDialectView: __expectBoolean,
        IsRegisteredWithLakeFormation: __expectBoolean,
        LastAccessTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastAnalyzedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Owner: __expectString,
        Parameters: _json,
        PartitionKeys: _json,
        Retention: __expectInt32,
        StorageDescriptor: _json,
        TableType: __expectString,
        TargetTable: _json,
        UpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VersionId: __expectString,
        ViewDefinition: _json,
        ViewExpandedText: __expectString,
        ViewOriginalText: __expectString,
    });
};
const de_TableList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Table(entry, context);
    });
    return retVal;
};
const de_TableOptimizer = (output, context) => {
    return take(output, {
        configuration: _json,
        lastRun: (_) => de_TableOptimizerRun(_, context),
        type: __expectString,
    });
};
const de_TableOptimizerRun = (output, context) => {
    return take(output, {
        endTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        error: __expectString,
        eventType: __expectString,
        metrics: _json,
        startTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_TableOptimizerRuns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TableOptimizerRun(entry, context);
    });
    return retVal;
};
const de_TableVersion = (output, context) => {
    return take(output, {
        Table: (_) => de_Table(_, context),
        VersionId: __expectString,
    });
};
const de_TaskRun = (output, context) => {
    return take(output, {
        CompletedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ErrorString: __expectString,
        ExecutionTime: __expectInt32,
        LastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogGroupName: __expectString,
        Properties: _json,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        TaskRunId: __expectString,
        TransformId: __expectString,
    });
};
const de_TaskRunList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TaskRun(entry, context);
    });
    return retVal;
};
const de_TransformList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MLTransform(entry, context);
    });
    return retVal;
};
const de_TransformParameters = (output, context) => {
    return take(output, {
        FindMatchesParameters: (_) => de_FindMatchesParameters(_, context),
        TransformType: __expectString,
    });
};
const de_UnfilteredPartition = (output, context) => {
    return take(output, {
        AuthorizedColumns: _json,
        IsRegisteredWithLakeFormation: __expectBoolean,
        Partition: (_) => de_Partition(_, context),
    });
};
const de_UnfilteredPartitionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnfilteredPartition(entry, context);
    });
    return retVal;
};
const de_UpdateColumnStatisticsForPartitionResponse = (output, context) => {
    return take(output, {
        Errors: (_) => de_ColumnStatisticsErrors(_, context),
    });
};
const de_UpdateColumnStatisticsForTableResponse = (output, context) => {
    return take(output, {
        Errors: (_) => de_ColumnStatisticsErrors(_, context),
    });
};
const de_UserDefinedFunction = (output, context) => {
    return take(output, {
        CatalogId: __expectString,
        ClassName: __expectString,
        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatabaseName: __expectString,
        FunctionName: __expectString,
        OwnerName: __expectString,
        OwnerType: __expectString,
        ResourceUris: _json,
    });
};
const de_UserDefinedFunctionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserDefinedFunction(entry, context);
    });
    return retVal;
};
const de_Workflow = (output, context) => {
    return take(output, {
        BlueprintDetails: _json,
        CreatedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultRunProperties: _json,
        Description: __expectString,
        Graph: (_) => de_WorkflowGraph(_, context),
        LastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastRun: (_) => de_WorkflowRun(_, context),
        MaxConcurrentRuns: __expectInt32,
        Name: __expectString,
    });
};
const de_WorkflowGraph = (output, context) => {
    return take(output, {
        Edges: _json,
        Nodes: (_) => de_NodeList(_, context),
    });
};
const de_WorkflowRun = (output, context) => {
    return take(output, {
        CompletedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ErrorMessage: __expectString,
        Graph: (_) => de_WorkflowGraph(_, context),
        Name: __expectString,
        PreviousRunId: __expectString,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartingEventBatchCondition: _json,
        Statistics: _json,
        Status: __expectString,
        WorkflowRunId: __expectString,
        WorkflowRunProperties: _json,
    });
};
const de_WorkflowRuns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorkflowRun(entry, context);
    });
    return retVal;
};
const de_Workflows = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Workflow(entry, context);
    });
    return retVal;
};
const de_XMLClassifier = (output, context) => {
    return take(output, {
        Classification: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        RowTag: __expectString,
        Version: __expectLong,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSGlue.${operation}`,
    };
}
