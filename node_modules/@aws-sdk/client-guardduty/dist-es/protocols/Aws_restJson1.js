import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { GuardDutyServiceException as __BaseException } from "../models/GuardDutyServiceException";
import { AccessDeniedException, BadRequestException, ConflictException, InternalServerErrorException, } from "../models/models_0";
export const se_AcceptAdministratorInvitationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/administrator");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        administratorId: [, , `AdministratorId`],
        invitationId: [, , `InvitationId`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AcceptInvitationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/master");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        invitationId: [, , `InvitationId`],
        masterId: [, , `MasterId`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ArchiveFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/findings/archive");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        findingIds: [, (_) => _json(_), `FindingIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDetectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken(), `ClientToken`],
        dataSources: [, (_) => se_DataSourceConfigurations(_, context), `DataSources`],
        enable: [, , `Enable`],
        features: [, (_) => se_DetectorFeatureConfigurations(_, context), `Features`],
        findingPublishingFrequency: [, , `FindingPublishingFrequency`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFilterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/filter");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        action: [, , `Action`],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken(), `ClientToken`],
        description: [, , `Description`],
        findingCriteria: [, (_) => se_FindingCriteria(_, context), `FindingCriteria`],
        name: [, , `Name`],
        rank: [, , `Rank`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateIPSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/ipset");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        activate: [, , `Activate`],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken(), `ClientToken`],
        format: [, , `Format`],
        location: [, , `Location`],
        name: [, , `Name`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/member");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        accountDetails: [, (_) => se_AccountDetails(_, context), `AccountDetails`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePublishingDestinationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/publishingDestination");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken(), `ClientToken`],
        destinationProperties: [, (_) => se_DestinationProperties(_, context), `DestinationProperties`],
        destinationType: [, , `DestinationType`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSampleFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/findings/create");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        findingTypes: [, (_) => _json(_), `FindingTypes`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateThreatIntelSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/threatintelset");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        activate: [, , `Activate`],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken(), `ClientToken`],
        format: [, , `Format`],
        location: [, , `Location`],
        name: [, , `Name`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeclineInvitationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/invitation/decline");
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `AccountIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteDetectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteFilterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/filter/{FilterName}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    b.p("FilterName", () => input.FilterName, "{FilterName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteInvitationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/invitation/delete");
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `AccountIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteIPSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/ipset/{IpSetId}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    b.p("IpSetId", () => input.IpSetId, "{IpSetId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/member/delete");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `AccountIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeletePublishingDestinationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/publishingDestination/{DestinationId}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    b.p("DestinationId", () => input.DestinationId, "{DestinationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteThreatIntelSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/threatintelset/{ThreatIntelSetId}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    b.p("ThreatIntelSetId", () => input.ThreatIntelSetId, "{ThreatIntelSetId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeMalwareScansCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/malware-scans");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        filterCriteria: [, (_) => se_FilterCriteria(_, context), `FilterCriteria`],
        maxResults: [, , `MaxResults`],
        nextToken: [, , `NextToken`],
        sortCriteria: [, (_) => se_SortCriteria(_, context), `SortCriteria`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeOrganizationConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/admin");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribePublishingDestinationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/publishingDestination/{DestinationId}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    b.p("DestinationId", () => input.DestinationId, "{DestinationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DisableOrganizationAdminAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/admin/disable");
    let body;
    body = JSON.stringify(take(input, {
        adminAccountId: [, , `AdminAccountId`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateFromAdministratorAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/administrator/disassociate");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateFromMasterAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/master/disassociate");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/member/disassociate");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `AccountIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_EnableOrganizationAdminAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/admin/enable");
    let body;
    body = JSON.stringify(take(input, {
        adminAccountId: [, , `AdminAccountId`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetAdministratorAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/administrator");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCoverageStatisticsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/coverage/statistics");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        filterCriteria: [, (_) => se_CoverageFilterCriteria(_, context), `FilterCriteria`],
        statisticsType: [, (_) => _json(_), `StatisticsType`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetDetectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFilterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/filter/{FilterName}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    b.p("FilterName", () => input.FilterName, "{FilterName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/findings/get");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        findingIds: [, (_) => _json(_), `FindingIds`],
        sortCriteria: [, (_) => se_SortCriteria(_, context), `SortCriteria`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetFindingsStatisticsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/findings/statistics");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        findingCriteria: [, (_) => se_FindingCriteria(_, context), `FindingCriteria`],
        findingStatisticTypes: [, (_) => _json(_), `FindingStatisticTypes`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetInvitationsCountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/invitation/count");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetIPSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/ipset/{IpSetId}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    b.p("IpSetId", () => input.IpSetId, "{IpSetId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMalwareScanSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/malware-scan-settings");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMasterAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/master");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMemberDetectorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/member/detector/get");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `AccountIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/member/get");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `AccountIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetOrganizationStatisticsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/statistics");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRemainingFreeTrialDaysCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/freeTrial/daysRemaining");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `AccountIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetThreatIntelSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/threatintelset/{ThreatIntelSetId}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    b.p("ThreatIntelSetId", () => input.ThreatIntelSetId, "{ThreatIntelSetId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetUsageStatisticsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/usage/statistics");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [, , `MaxResults`],
        nextToken: [, , `NextToken`],
        unit: [, , `Unit`],
        usageCriteria: [, (_) => se_UsageCriteria(_, context), `UsageCriteria`],
        usageStatisticsType: [, , `UsageStatisticType`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_InviteMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/member/invite");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `AccountIds`],
        disableEmailNotification: [, , `DisableEmailNotification`],
        message: [, , `Message`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListCoverageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/coverage");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        filterCriteria: [, (_) => se_CoverageFilterCriteria(_, context), `FilterCriteria`],
        maxResults: [, , `MaxResults`],
        nextToken: [, , `NextToken`],
        sortCriteria: [, (_) => se_CoverageSortCriteria(_, context), `SortCriteria`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListDetectorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFiltersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/filter");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/findings");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        findingCriteria: [, (_) => se_FindingCriteria(_, context), `FindingCriteria`],
        maxResults: [, , `MaxResults`],
        nextToken: [, , `NextToken`],
        sortCriteria: [, (_) => se_SortCriteria(_, context), `SortCriteria`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListInvitationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/invitation");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListIPSetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/ipset");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/member");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_oA]: [, input[_OA]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListOrganizationAdminAccountsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/admin");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPublishingDestinationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/publishingDestination");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListThreatIntelSetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/detector/{DetectorId}/threatintelset");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_StartMalwareScanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/malware-scan/start");
    let body;
    body = JSON.stringify(take(input, {
        resourceArn: [, , `ResourceArn`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartMonitoringMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/member/start");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `AccountIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopMonitoringMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/member/stop");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `AccountIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UnarchiveFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/findings/unarchive");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        findingIds: [, (_) => _json(_), `FindingIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateDetectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        dataSources: [, (_) => se_DataSourceConfigurations(_, context), `DataSources`],
        enable: [, , `Enable`],
        features: [, (_) => se_DetectorFeatureConfigurations(_, context), `Features`],
        findingPublishingFrequency: [, , `FindingPublishingFrequency`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateFilterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/filter/{FilterName}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    b.p("FilterName", () => input.FilterName, "{FilterName}", false);
    let body;
    body = JSON.stringify(take(input, {
        action: [, , `Action`],
        description: [, , `Description`],
        findingCriteria: [, (_) => se_FindingCriteria(_, context), `FindingCriteria`],
        rank: [, , `Rank`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateFindingsFeedbackCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/findings/feedback");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        comments: [, , `Comments`],
        feedback: [, , `Feedback`],
        findingIds: [, (_) => _json(_), `FindingIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateIPSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/ipset/{IpSetId}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    b.p("IpSetId", () => input.IpSetId, "{IpSetId}", false);
    let body;
    body = JSON.stringify(take(input, {
        activate: [, , `Activate`],
        location: [, , `Location`],
        name: [, , `Name`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateMalwareScanSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/malware-scan-settings");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ebsSnapshotPreservation: [, , `EbsSnapshotPreservation`],
        scanResourceCriteria: [, (_) => se_ScanResourceCriteria(_, context), `ScanResourceCriteria`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateMemberDetectorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/member/detector/update");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `AccountIds`],
        dataSources: [, (_) => se_DataSourceConfigurations(_, context), `DataSources`],
        features: [, (_) => se_MemberFeaturesConfigurations(_, context), `Features`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateOrganizationConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/admin");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        autoEnable: [, , `AutoEnable`],
        autoEnableOrganizationMembers: [, , `AutoEnableOrganizationMembers`],
        dataSources: [, (_) => se_OrganizationDataSourceConfigurations(_, context), `DataSources`],
        features: [, (_) => se_OrganizationFeaturesConfigurations(_, context), `Features`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdatePublishingDestinationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/publishingDestination/{DestinationId}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    b.p("DestinationId", () => input.DestinationId, "{DestinationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        destinationProperties: [, (_) => se_DestinationProperties(_, context), `DestinationProperties`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateThreatIntelSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/detector/{DetectorId}/threatintelset/{ThreatIntelSetId}");
    b.p("DetectorId", () => input.DetectorId, "{DetectorId}", false);
    b.p("ThreatIntelSetId", () => input.ThreatIntelSetId, "{ThreatIntelSetId}", false);
    let body;
    body = JSON.stringify(take(input, {
        activate: [, , `Activate`],
        location: [, , `Location`],
        name: [, , `Name`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_AcceptAdministratorInvitationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AcceptInvitationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_ArchiveFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateDetectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DetectorId: [, __expectString, `detectorId`],
        UnprocessedDataSources: [, (_) => de_UnprocessedDataSourcesResult(_, context), `unprocessedDataSources`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFilterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: [, __expectString, `name`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateIPSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IpSetId: [, __expectString, `ipSetId`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePublishingDestinationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DestinationId: [, __expectString, `destinationId`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSampleFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateThreatIntelSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ThreatIntelSetId: [, __expectString, `threatIntelSetId`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeclineInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteDetectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteFilterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteIPSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeletePublishingDestinationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteThreatIntelSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeMalwareScansCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: [, __expectString, `nextToken`],
        Scans: [, (_) => de_Scans(_, context), `scans`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeOrganizationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AutoEnable: [, __expectBoolean, `autoEnable`],
        AutoEnableOrganizationMembers: [, __expectString, `autoEnableOrganizationMembers`],
        DataSources: [, (_) => de_OrganizationDataSourceConfigurationsResult(_, context), `dataSources`],
        Features: [, (_) => de_OrganizationFeaturesConfigurationsResults(_, context), `features`],
        MemberAccountLimitReached: [, __expectBoolean, `memberAccountLimitReached`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribePublishingDestinationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DestinationId: [, __expectString, `destinationId`],
        DestinationProperties: [, (_) => de_DestinationProperties(_, context), `destinationProperties`],
        DestinationType: [, __expectString, `destinationType`],
        PublishingFailureStartTimestamp: [, __expectLong, `publishingFailureStartTimestamp`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisableOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateFromAdministratorAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateFromMasterAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_EnableOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetAdministratorAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Administrator: [, (_) => de_Administrator(_, context), `administrator`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCoverageStatisticsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoverageStatistics: [, (_) => de_CoverageStatistics(_, context), `coverageStatistics`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDetectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreatedAt: [, __expectString, `createdAt`],
        DataSources: [, (_) => de_DataSourceConfigurationsResult(_, context), `dataSources`],
        Features: [, (_) => de_DetectorFeatureConfigurationsResults(_, context), `features`],
        FindingPublishingFrequency: [, __expectString, `findingPublishingFrequency`],
        ServiceRole: [, __expectString, `serviceRole`],
        Status: [, __expectString, `status`],
        Tags: [, _json, `tags`],
        UpdatedAt: [, __expectString, `updatedAt`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFilterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Action: [, __expectString, `action`],
        Description: [, __expectString, `description`],
        FindingCriteria: [, (_) => de_FindingCriteria(_, context), `findingCriteria`],
        Name: [, __expectString, `name`],
        Rank: [, __expectInt32, `rank`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Findings: [, (_) => de_Findings(_, context), `findings`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFindingsStatisticsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FindingStatistics: [, (_) => de_FindingStatistics(_, context), `findingStatistics`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetInvitationsCountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InvitationsCount: [, __expectInt32, `invitationsCount`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetIPSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Format: [, __expectString, `format`],
        Location: [, __expectString, `location`],
        Name: [, __expectString, `name`],
        Status: [, __expectString, `status`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMalwareScanSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EbsSnapshotPreservation: [, __expectString, `ebsSnapshotPreservation`],
        ScanResourceCriteria: [, (_) => de_ScanResourceCriteria(_, context), `scanResourceCriteria`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMasterAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Master: [, (_) => de_Master(_, context), `master`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMemberDetectorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MemberDataSourceConfigurations: [, (_) => de_MemberDataSourceConfigurations(_, context), `members`],
        UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Members: [, (_) => de_Members(_, context), `members`],
        UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetOrganizationStatisticsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        OrganizationDetails: [, (_) => de_OrganizationDetails(_, context), `organizationDetails`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRemainingFreeTrialDaysCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Accounts: [, (_) => de_AccountFreeTrialInfos(_, context), `accounts`],
        UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetThreatIntelSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Format: [, __expectString, `format`],
        Location: [, __expectString, `location`],
        Name: [, __expectString, `name`],
        Status: [, __expectString, `status`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetUsageStatisticsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: [, __expectString, `nextToken`],
        UsageStatistics: [, (_) => de_UsageStatistics(_, context), `usageStatistics`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_InviteMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCoverageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: [, __expectString, `nextToken`],
        Resources: [, (_) => de_CoverageResources(_, context), `resources`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDetectorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DetectorIds: [, _json, `detectorIds`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFiltersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FilterNames: [, _json, `filterNames`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FindingIds: [, _json, `findingIds`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Invitations: [, (_) => de_Invitations(_, context), `invitations`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListIPSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IpSetIds: [, _json, `ipSetIds`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Members: [, (_) => de_Members(_, context), `members`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListOrganizationAdminAccountsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AdminAccounts: [, (_) => de_AdminAccounts(_, context), `adminAccounts`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPublishingDestinationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Destinations: [, (_) => de_Destinations(_, context), `destinations`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListThreatIntelSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: [, __expectString, `nextToken`],
        ThreatIntelSetIds: [, _json, `threatIntelSetIds`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartMalwareScanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ScanId: [, __expectString, `scanId`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartMonitoringMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopMonitoringMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UnarchiveFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDetectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateFilterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: [, __expectString, `name`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateFindingsFeedbackCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateIPSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateMalwareScanSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateMemberDetectorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: [, (_) => de_UnprocessedAccounts(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateOrganizationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdatePublishingDestinationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateThreatIntelSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.guardduty#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.guardduty#InternalServerErrorException":
            throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.guardduty#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.guardduty#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
        Type: [, __expectString, `__type`],
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
        Type: [, __expectString, `__type`],
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
        Type: [, __expectString, `__type`],
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
        Type: [, __expectString, `__type`],
    });
    Object.assign(contents, doc);
    const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_AccountDetail = (input, context) => {
    return take(input, {
        accountId: [, , `AccountId`],
        email: [, , `Email`],
    });
};
const se_AccountDetails = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AccountDetail(entry, context);
    });
};
const se_Condition = (input, context) => {
    return take(input, {
        eq: [, _json, `Eq`],
        equals: [, _json, `Equals`],
        greaterThan: [, , `GreaterThan`],
        greaterThanOrEqual: [, , `GreaterThanOrEqual`],
        gt: [, , `Gt`],
        gte: [, , `Gte`],
        lessThan: [, , `LessThan`],
        lessThanOrEqual: [, , `LessThanOrEqual`],
        lt: [, , `Lt`],
        lte: [, , `Lte`],
        neq: [, _json, `Neq`],
        notEquals: [, _json, `NotEquals`],
    });
};
const se_CoverageFilterCondition = (input, context) => {
    return take(input, {
        equals: [, _json, `Equals`],
        notEquals: [, _json, `NotEquals`],
    });
};
const se_CoverageFilterCriteria = (input, context) => {
    return take(input, {
        filterCriterion: [, (_) => se_CoverageFilterCriterionList(_, context), `FilterCriterion`],
    });
};
const se_CoverageFilterCriterion = (input, context) => {
    return take(input, {
        criterionKey: [, , `CriterionKey`],
        filterCondition: [, (_) => se_CoverageFilterCondition(_, context), `FilterCondition`],
    });
};
const se_CoverageFilterCriterionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CoverageFilterCriterion(entry, context);
    });
};
const se_CoverageSortCriteria = (input, context) => {
    return take(input, {
        attributeName: [, , `AttributeName`],
        orderBy: [, , `OrderBy`],
    });
};
const se_Criterion = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_Condition(value, context);
        return acc;
    }, {});
};
const se_DataSourceConfigurations = (input, context) => {
    return take(input, {
        kubernetes: [, (_) => se_KubernetesConfiguration(_, context), `Kubernetes`],
        malwareProtection: [, (_) => se_MalwareProtectionConfiguration(_, context), `MalwareProtection`],
        s3Logs: [, (_) => se_S3LogsConfiguration(_, context), `S3Logs`],
    });
};
const se_DestinationProperties = (input, context) => {
    return take(input, {
        destinationArn: [, , `DestinationArn`],
        kmsKeyArn: [, , `KmsKeyArn`],
    });
};
const se_DetectorAdditionalConfiguration = (input, context) => {
    return take(input, {
        name: [, , `Name`],
        status: [, , `Status`],
    });
};
const se_DetectorAdditionalConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DetectorAdditionalConfiguration(entry, context);
    });
};
const se_DetectorFeatureConfiguration = (input, context) => {
    return take(input, {
        additionalConfiguration: [, (_) => se_DetectorAdditionalConfigurations(_, context), `AdditionalConfiguration`],
        name: [, , `Name`],
        status: [, , `Status`],
    });
};
const se_DetectorFeatureConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DetectorFeatureConfiguration(entry, context);
    });
};
const se_FilterCondition = (input, context) => {
    return take(input, {
        equalsValue: [, , `EqualsValue`],
        greaterThan: [, , `GreaterThan`],
        lessThan: [, , `LessThan`],
    });
};
const se_FilterCriteria = (input, context) => {
    return take(input, {
        filterCriterion: [, (_) => se_FilterCriterionList(_, context), `FilterCriterion`],
    });
};
const se_FilterCriterion = (input, context) => {
    return take(input, {
        criterionKey: [, , `CriterionKey`],
        filterCondition: [, (_) => se_FilterCondition(_, context), `FilterCondition`],
    });
};
const se_FilterCriterionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FilterCriterion(entry, context);
    });
};
const se_FindingCriteria = (input, context) => {
    return take(input, {
        criterion: [, (_) => se_Criterion(_, context), `Criterion`],
    });
};
const se_KubernetesAuditLogsConfiguration = (input, context) => {
    return take(input, {
        enable: [, , `Enable`],
    });
};
const se_KubernetesConfiguration = (input, context) => {
    return take(input, {
        auditLogs: [, (_) => se_KubernetesAuditLogsConfiguration(_, context), `AuditLogs`],
    });
};
const se_MalwareProtectionConfiguration = (input, context) => {
    return take(input, {
        scanEc2InstanceWithFindings: [, (_) => se_ScanEc2InstanceWithFindings(_, context), `ScanEc2InstanceWithFindings`],
    });
};
const se_MapEquals = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ScanConditionPair(entry, context);
    });
};
const se_MemberAdditionalConfiguration = (input, context) => {
    return take(input, {
        name: [, , `Name`],
        status: [, , `Status`],
    });
};
const se_MemberAdditionalConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MemberAdditionalConfiguration(entry, context);
    });
};
const se_MemberFeaturesConfiguration = (input, context) => {
    return take(input, {
        additionalConfiguration: [, (_) => se_MemberAdditionalConfigurations(_, context), `AdditionalConfiguration`],
        name: [, , `Name`],
        status: [, , `Status`],
    });
};
const se_MemberFeaturesConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MemberFeaturesConfiguration(entry, context);
    });
};
const se_OrganizationAdditionalConfiguration = (input, context) => {
    return take(input, {
        autoEnable: [, , `AutoEnable`],
        name: [, , `Name`],
    });
};
const se_OrganizationAdditionalConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_OrganizationAdditionalConfiguration(entry, context);
    });
};
const se_OrganizationDataSourceConfigurations = (input, context) => {
    return take(input, {
        kubernetes: [, (_) => se_OrganizationKubernetesConfiguration(_, context), `Kubernetes`],
        malwareProtection: [, (_) => se_OrganizationMalwareProtectionConfiguration(_, context), `MalwareProtection`],
        s3Logs: [, (_) => se_OrganizationS3LogsConfiguration(_, context), `S3Logs`],
    });
};
const se_OrganizationEbsVolumes = (input, context) => {
    return take(input, {
        autoEnable: [, , `AutoEnable`],
    });
};
const se_OrganizationFeatureConfiguration = (input, context) => {
    return take(input, {
        additionalConfiguration: [, (_) => se_OrganizationAdditionalConfigurations(_, context), `AdditionalConfiguration`],
        autoEnable: [, , `AutoEnable`],
        name: [, , `Name`],
    });
};
const se_OrganizationFeaturesConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_OrganizationFeatureConfiguration(entry, context);
    });
};
const se_OrganizationKubernetesAuditLogsConfiguration = (input, context) => {
    return take(input, {
        autoEnable: [, , `AutoEnable`],
    });
};
const se_OrganizationKubernetesConfiguration = (input, context) => {
    return take(input, {
        auditLogs: [, (_) => se_OrganizationKubernetesAuditLogsConfiguration(_, context), `AuditLogs`],
    });
};
const se_OrganizationMalwareProtectionConfiguration = (input, context) => {
    return take(input, {
        scanEc2InstanceWithFindings: [
            ,
            (_) => se_OrganizationScanEc2InstanceWithFindings(_, context),
            `ScanEc2InstanceWithFindings`,
        ],
    });
};
const se_OrganizationS3LogsConfiguration = (input, context) => {
    return take(input, {
        autoEnable: [, , `AutoEnable`],
    });
};
const se_OrganizationScanEc2InstanceWithFindings = (input, context) => {
    return take(input, {
        ebsVolumes: [, (_) => se_OrganizationEbsVolumes(_, context), `EbsVolumes`],
    });
};
const se_S3LogsConfiguration = (input, context) => {
    return take(input, {
        enable: [, , `Enable`],
    });
};
const se_ScanCondition = (input, context) => {
    return take(input, {
        mapEquals: [, (_) => se_MapEquals(_, context), `MapEquals`],
    });
};
const se_ScanConditionPair = (input, context) => {
    return take(input, {
        key: [, , `Key`],
        value: [, , `Value`],
    });
};
const se_ScanCriterion = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ScanCondition(value, context);
        return acc;
    }, {});
};
const se_ScanEc2InstanceWithFindings = (input, context) => {
    return take(input, {
        ebsVolumes: [, , `EbsVolumes`],
    });
};
const se_ScanResourceCriteria = (input, context) => {
    return take(input, {
        exclude: [, (_) => se_ScanCriterion(_, context), `Exclude`],
        include: [, (_) => se_ScanCriterion(_, context), `Include`],
    });
};
const se_SortCriteria = (input, context) => {
    return take(input, {
        attributeName: [, , `AttributeName`],
        orderBy: [, , `OrderBy`],
    });
};
const se_UsageCriteria = (input, context) => {
    return take(input, {
        accountIds: [, _json, `AccountIds`],
        dataSources: [, _json, `DataSources`],
        features: [, _json, `Features`],
        resources: [, _json, `Resources`],
    });
};
const de_AccessControlList = (output, context) => {
    return take(output, {
        AllowsPublicReadAccess: [, __expectBoolean, `allowsPublicReadAccess`],
        AllowsPublicWriteAccess: [, __expectBoolean, `allowsPublicWriteAccess`],
    });
};
const de_AccessKeyDetails = (output, context) => {
    return take(output, {
        AccessKeyId: [, __expectString, `accessKeyId`],
        PrincipalId: [, __expectString, `principalId`],
        UserName: [, __expectString, `userName`],
        UserType: [, __expectString, `userType`],
    });
};
const de_AccountFreeTrialInfo = (output, context) => {
    return take(output, {
        AccountId: [, __expectString, `accountId`],
        DataSources: [, (_) => de_DataSourcesFreeTrial(_, context), `dataSources`],
        Features: [, (_) => de_FreeTrialFeatureConfigurationsResults(_, context), `features`],
    });
};
const de_AccountFreeTrialInfos = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccountFreeTrialInfo(entry, context);
    });
    return retVal;
};
const de_AccountLevelPermissions = (output, context) => {
    return take(output, {
        BlockPublicAccess: [, (_) => de_BlockPublicAccess(_, context), `blockPublicAccess`],
    });
};
const de_Action = (output, context) => {
    return take(output, {
        ActionType: [, __expectString, `actionType`],
        AwsApiCallAction: [, (_) => de_AwsApiCallAction(_, context), `awsApiCallAction`],
        DnsRequestAction: [, (_) => de_DnsRequestAction(_, context), `dnsRequestAction`],
        KubernetesApiCallAction: [, (_) => de_KubernetesApiCallAction(_, context), `kubernetesApiCallAction`],
        KubernetesPermissionCheckedDetails: [
            ,
            (_) => de_KubernetesPermissionCheckedDetails(_, context),
            `kubernetesPermissionCheckedDetails`,
        ],
        KubernetesRoleBindingDetails: [
            ,
            (_) => de_KubernetesRoleBindingDetails(_, context),
            `kubernetesRoleBindingDetails`,
        ],
        KubernetesRoleDetails: [, (_) => de_KubernetesRoleDetails(_, context), `kubernetesRoleDetails`],
        NetworkConnectionAction: [, (_) => de_NetworkConnectionAction(_, context), `networkConnectionAction`],
        PortProbeAction: [, (_) => de_PortProbeAction(_, context), `portProbeAction`],
        RdsLoginAttemptAction: [, (_) => de_RdsLoginAttemptAction(_, context), `rdsLoginAttemptAction`],
    });
};
const de_AddonDetails = (output, context) => {
    return take(output, {
        AddonStatus: [, __expectString, `addonStatus`],
        AddonVersion: [, __expectString, `addonVersion`],
    });
};
const de_AdminAccount = (output, context) => {
    return take(output, {
        AdminAccountId: [, __expectString, `adminAccountId`],
        AdminStatus: [, __expectString, `adminStatus`],
    });
};
const de_AdminAccounts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AdminAccount(entry, context);
    });
    return retVal;
};
const de_Administrator = (output, context) => {
    return take(output, {
        AccountId: [, __expectString, `accountId`],
        InvitationId: [, __expectString, `invitationId`],
        InvitedAt: [, __expectString, `invitedAt`],
        RelationshipStatus: [, __expectString, `relationshipStatus`],
    });
};
const de_AgentDetails = (output, context) => {
    return take(output, {
        Version: [, __expectString, `version`],
    });
};
const de_Anomaly = (output, context) => {
    return take(output, {
        Profiles: [, (_) => de_AnomalyProfiles(_, context), `profiles`],
        Unusual: [, (_) => de_AnomalyUnusual(_, context), `unusual`],
    });
};
const de_AnomalyObject = (output, context) => {
    return take(output, {
        Observations: [, (_) => de_Observations(_, context), `observations`],
        ProfileSubtype: [, __expectString, `profileSubtype`],
        ProfileType: [, __expectString, `profileType`],
    });
};
const de_AnomalyProfileFeatureObjects = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnomalyObject(entry, context);
    });
    return retVal;
};
const de_AnomalyProfileFeatures = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AnomalyProfileFeatureObjects(value, context);
        return acc;
    }, {});
};
const de_AnomalyProfiles = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AnomalyProfileFeatures(value, context);
        return acc;
    }, {});
};
const de_AnomalyUnusual = (output, context) => {
    return take(output, {
        Behavior: [, (_) => de_Behavior(_, context), `behavior`],
    });
};
const de_AnomalyUnusualBehaviorFeature = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AnomalyObject(value, context);
        return acc;
    }, {});
};
const de_AwsApiCallAction = (output, context) => {
    return take(output, {
        AffectedResources: [, _json, `affectedResources`],
        Api: [, __expectString, `api`],
        CallerType: [, __expectString, `callerType`],
        DomainDetails: [, (_) => de_DomainDetails(_, context), `domainDetails`],
        ErrorCode: [, __expectString, `errorCode`],
        RemoteAccountDetails: [, (_) => de_RemoteAccountDetails(_, context), `remoteAccountDetails`],
        RemoteIpDetails: [, (_) => de_RemoteIpDetails(_, context), `remoteIpDetails`],
        ServiceName: [, __expectString, `serviceName`],
        UserAgent: [, __expectString, `userAgent`],
    });
};
const de_Behavior = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AnomalyUnusualBehaviorFeature(value, context);
        return acc;
    }, {});
};
const de_BlockPublicAccess = (output, context) => {
    return take(output, {
        BlockPublicAcls: [, __expectBoolean, `blockPublicAcls`],
        BlockPublicPolicy: [, __expectBoolean, `blockPublicPolicy`],
        IgnorePublicAcls: [, __expectBoolean, `ignorePublicAcls`],
        RestrictPublicBuckets: [, __expectBoolean, `restrictPublicBuckets`],
    });
};
const de_BucketLevelPermissions = (output, context) => {
    return take(output, {
        AccessControlList: [, (_) => de_AccessControlList(_, context), `accessControlList`],
        BlockPublicAccess: [, (_) => de_BlockPublicAccess(_, context), `blockPublicAccess`],
        BucketPolicy: [, (_) => de_BucketPolicy(_, context), `bucketPolicy`],
    });
};
const de_BucketPolicy = (output, context) => {
    return take(output, {
        AllowsPublicReadAccess: [, __expectBoolean, `allowsPublicReadAccess`],
        AllowsPublicWriteAccess: [, __expectBoolean, `allowsPublicWriteAccess`],
    });
};
const de_City = (output, context) => {
    return take(output, {
        CityName: [, __expectString, `cityName`],
    });
};
const de_CloudTrailConfigurationResult = (output, context) => {
    return take(output, {
        Status: [, __expectString, `status`],
    });
};
const de_Condition = (output, context) => {
    return take(output, {
        Eq: [, _json, `eq`],
        Equals: [, _json, `equals`],
        GreaterThan: [, __expectLong, `greaterThan`],
        GreaterThanOrEqual: [, __expectLong, `greaterThanOrEqual`],
        Gt: [, __expectInt32, `gt`],
        Gte: [, __expectInt32, `gte`],
        LessThan: [, __expectLong, `lessThan`],
        LessThanOrEqual: [, __expectLong, `lessThanOrEqual`],
        Lt: [, __expectInt32, `lt`],
        Lte: [, __expectInt32, `lte`],
        Neq: [, _json, `neq`],
        NotEquals: [, _json, `notEquals`],
    });
};
const de_Container = (output, context) => {
    return take(output, {
        ContainerRuntime: [, __expectString, `containerRuntime`],
        Id: [, __expectString, `id`],
        Image: [, __expectString, `image`],
        ImagePrefix: [, __expectString, `imagePrefix`],
        Name: [, __expectString, `name`],
        SecurityContext: [, (_) => de_SecurityContext(_, context), `securityContext`],
        VolumeMounts: [, (_) => de_VolumeMounts(_, context), `volumeMounts`],
    });
};
const de_ContainerInstanceDetails = (output, context) => {
    return take(output, {
        CompatibleContainerInstances: [, __expectLong, `compatibleContainerInstances`],
        CoveredContainerInstances: [, __expectLong, `coveredContainerInstances`],
    });
};
const de_Containers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Container(entry, context);
    });
    return retVal;
};
const de_Country = (output, context) => {
    return take(output, {
        CountryCode: [, __expectString, `countryCode`],
        CountryName: [, __expectString, `countryName`],
    });
};
const de_CoverageEc2InstanceDetails = (output, context) => {
    return take(output, {
        AgentDetails: [, (_) => de_AgentDetails(_, context), `agentDetails`],
        ClusterArn: [, __expectString, `clusterArn`],
        InstanceId: [, __expectString, `instanceId`],
        InstanceType: [, __expectString, `instanceType`],
        ManagementType: [, __expectString, `managementType`],
    });
};
const de_CoverageEcsClusterDetails = (output, context) => {
    return take(output, {
        ClusterName: [, __expectString, `clusterName`],
        ContainerInstanceDetails: [, (_) => de_ContainerInstanceDetails(_, context), `containerInstanceDetails`],
        FargateDetails: [, (_) => de_FargateDetails(_, context), `fargateDetails`],
    });
};
const de_CoverageEksClusterDetails = (output, context) => {
    return take(output, {
        AddonDetails: [, (_) => de_AddonDetails(_, context), `addonDetails`],
        ClusterName: [, __expectString, `clusterName`],
        CompatibleNodes: [, __expectLong, `compatibleNodes`],
        CoveredNodes: [, __expectLong, `coveredNodes`],
        ManagementType: [, __expectString, `managementType`],
    });
};
const de_CoverageResource = (output, context) => {
    return take(output, {
        AccountId: [, __expectString, `accountId`],
        CoverageStatus: [, __expectString, `coverageStatus`],
        DetectorId: [, __expectString, `detectorId`],
        Issue: [, __expectString, `issue`],
        ResourceDetails: [, (_) => de_CoverageResourceDetails(_, context), `resourceDetails`],
        ResourceId: [, __expectString, `resourceId`],
        UpdatedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `updatedAt`],
    });
};
const de_CoverageResourceDetails = (output, context) => {
    return take(output, {
        Ec2InstanceDetails: [, (_) => de_CoverageEc2InstanceDetails(_, context), `ec2InstanceDetails`],
        EcsClusterDetails: [, (_) => de_CoverageEcsClusterDetails(_, context), `ecsClusterDetails`],
        EksClusterDetails: [, (_) => de_CoverageEksClusterDetails(_, context), `eksClusterDetails`],
        ResourceType: [, __expectString, `resourceType`],
    });
};
const de_CoverageResources = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CoverageResource(entry, context);
    });
    return retVal;
};
const de_CoverageStatistics = (output, context) => {
    return take(output, {
        CountByCoverageStatus: [, _json, `countByCoverageStatus`],
        CountByResourceType: [, _json, `countByResourceType`],
    });
};
const de_Criterion = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_Condition(value, context);
        return acc;
    }, {});
};
const de_DataSourceConfigurationsResult = (output, context) => {
    return take(output, {
        CloudTrail: [, (_) => de_CloudTrailConfigurationResult(_, context), `cloudTrail`],
        DNSLogs: [, (_) => de_DNSLogsConfigurationResult(_, context), `dnsLogs`],
        FlowLogs: [, (_) => de_FlowLogsConfigurationResult(_, context), `flowLogs`],
        Kubernetes: [, (_) => de_KubernetesConfigurationResult(_, context), `kubernetes`],
        MalwareProtection: [, (_) => de_MalwareProtectionConfigurationResult(_, context), `malwareProtection`],
        S3Logs: [, (_) => de_S3LogsConfigurationResult(_, context), `s3Logs`],
    });
};
const de_DataSourceFreeTrial = (output, context) => {
    return take(output, {
        FreeTrialDaysRemaining: [, __expectInt32, `freeTrialDaysRemaining`],
    });
};
const de_DataSourcesFreeTrial = (output, context) => {
    return take(output, {
        CloudTrail: [, (_) => de_DataSourceFreeTrial(_, context), `cloudTrail`],
        DnsLogs: [, (_) => de_DataSourceFreeTrial(_, context), `dnsLogs`],
        FlowLogs: [, (_) => de_DataSourceFreeTrial(_, context), `flowLogs`],
        Kubernetes: [, (_) => de_KubernetesDataSourceFreeTrial(_, context), `kubernetes`],
        MalwareProtection: [, (_) => de_MalwareProtectionDataSourceFreeTrial(_, context), `malwareProtection`],
        S3Logs: [, (_) => de_DataSourceFreeTrial(_, context), `s3Logs`],
    });
};
const de_DefaultServerSideEncryption = (output, context) => {
    return take(output, {
        EncryptionType: [, __expectString, `encryptionType`],
        KmsMasterKeyArn: [, __expectString, `kmsMasterKeyArn`],
    });
};
const de_Destination = (output, context) => {
    return take(output, {
        DestinationId: [, __expectString, `destinationId`],
        DestinationType: [, __expectString, `destinationType`],
        Status: [, __expectString, `status`],
    });
};
const de_DestinationProperties = (output, context) => {
    return take(output, {
        DestinationArn: [, __expectString, `destinationArn`],
        KmsKeyArn: [, __expectString, `kmsKeyArn`],
    });
};
const de_Destinations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Destination(entry, context);
    });
    return retVal;
};
const de_Detection = (output, context) => {
    return take(output, {
        Anomaly: [, (_) => de_Anomaly(_, context), `anomaly`],
    });
};
const de_DetectorAdditionalConfigurationResult = (output, context) => {
    return take(output, {
        Name: [, __expectString, `name`],
        Status: [, __expectString, `status`],
        UpdatedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `updatedAt`],
    });
};
const de_DetectorAdditionalConfigurationResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DetectorAdditionalConfigurationResult(entry, context);
    });
    return retVal;
};
const de_DetectorFeatureConfigurationResult = (output, context) => {
    return take(output, {
        AdditionalConfiguration: [
            ,
            (_) => de_DetectorAdditionalConfigurationResults(_, context),
            `additionalConfiguration`,
        ],
        Name: [, __expectString, `name`],
        Status: [, __expectString, `status`],
        UpdatedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `updatedAt`],
    });
};
const de_DetectorFeatureConfigurationsResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DetectorFeatureConfigurationResult(entry, context);
    });
    return retVal;
};
const de_DNSLogsConfigurationResult = (output, context) => {
    return take(output, {
        Status: [, __expectString, `status`],
    });
};
const de_DnsRequestAction = (output, context) => {
    return take(output, {
        Blocked: [, __expectBoolean, `blocked`],
        Domain: [, __expectString, `domain`],
        DomainWithSuffix: [, __expectString, `domainWithSuffix`],
        Protocol: [, __expectString, `protocol`],
    });
};
const de_DomainDetails = (output, context) => {
    return take(output, {
        Domain: [, __expectString, `domain`],
    });
};
const de_EbsVolumeDetails = (output, context) => {
    return take(output, {
        ScannedVolumeDetails: [, (_) => de_VolumeDetails(_, context), `scannedVolumeDetails`],
        SkippedVolumeDetails: [, (_) => de_VolumeDetails(_, context), `skippedVolumeDetails`],
    });
};
const de_EbsVolumeScanDetails = (output, context) => {
    return take(output, {
        ScanCompletedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `scanCompletedAt`],
        ScanDetections: [, (_) => de_ScanDetections(_, context), `scanDetections`],
        ScanId: [, __expectString, `scanId`],
        ScanStartedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `scanStartedAt`],
        ScanType: [, __expectString, `scanType`],
        Sources: [, _json, `sources`],
        TriggerFindingId: [, __expectString, `triggerFindingId`],
    });
};
const de_EbsVolumesResult = (output, context) => {
    return take(output, {
        Reason: [, __expectString, `reason`],
        Status: [, __expectString, `status`],
    });
};
const de_EcsClusterDetails = (output, context) => {
    return take(output, {
        ActiveServicesCount: [, __expectInt32, `activeServicesCount`],
        Arn: [, __expectString, `arn`],
        Name: [, __expectString, `name`],
        RegisteredContainerInstancesCount: [, __expectInt32, `registeredContainerInstancesCount`],
        RunningTasksCount: [, __expectInt32, `runningTasksCount`],
        Status: [, __expectString, `status`],
        Tags: [, (_) => de_Tags(_, context), `tags`],
        TaskDetails: [, (_) => de_EcsTaskDetails(_, context), `taskDetails`],
    });
};
const de_EcsTaskDetails = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        Containers: [, (_) => de_Containers(_, context), `containers`],
        DefinitionArn: [, __expectString, `definitionArn`],
        Group: [, __expectString, `group`],
        StartedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `startedAt`],
        StartedBy: [, __expectString, `startedBy`],
        Tags: [, (_) => de_Tags(_, context), `tags`],
        TaskCreatedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `createdAt`],
        Version: [, __expectString, `version`],
        Volumes: [, (_) => de_Volumes(_, context), `volumes`],
    });
};
const de_EksClusterDetails = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `createdAt`],
        Name: [, __expectString, `name`],
        Status: [, __expectString, `status`],
        Tags: [, (_) => de_Tags(_, context), `tags`],
        VpcId: [, __expectString, `vpcId`],
    });
};
const de_Evidence = (output, context) => {
    return take(output, {
        ThreatIntelligenceDetails: [, (_) => de_ThreatIntelligenceDetails(_, context), `threatIntelligenceDetails`],
    });
};
const de_FargateDetails = (output, context) => {
    return take(output, {
        Issues: [, _json, `issues`],
        ManagementType: [, __expectString, `managementType`],
    });
};
const de_FilePaths = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScanFilePath(entry, context);
    });
    return retVal;
};
const de_Finding = (output, context) => {
    return take(output, {
        AccountId: [, __expectString, `accountId`],
        Arn: [, __expectString, `arn`],
        Confidence: [, __limitedParseDouble, `confidence`],
        CreatedAt: [, __expectString, `createdAt`],
        Description: [, __expectString, `description`],
        Id: [, __expectString, `id`],
        Partition: [, __expectString, `partition`],
        Region: [, __expectString, `region`],
        Resource: [, (_) => de_Resource(_, context), `resource`],
        SchemaVersion: [, __expectString, `schemaVersion`],
        Service: [, (_) => de_Service(_, context), `service`],
        Severity: [, __limitedParseDouble, `severity`],
        Title: [, __expectString, `title`],
        Type: [, __expectString, `type`],
        UpdatedAt: [, __expectString, `updatedAt`],
    });
};
const de_FindingCriteria = (output, context) => {
    return take(output, {
        Criterion: [, (_) => de_Criterion(_, context), `criterion`],
    });
};
const de_Findings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Finding(entry, context);
    });
    return retVal;
};
const de_FindingStatistics = (output, context) => {
    return take(output, {
        CountBySeverity: [, _json, `countBySeverity`],
    });
};
const de_FlowLogsConfigurationResult = (output, context) => {
    return take(output, {
        Status: [, __expectString, `status`],
    });
};
const de_FreeTrialFeatureConfigurationResult = (output, context) => {
    return take(output, {
        FreeTrialDaysRemaining: [, __expectInt32, `freeTrialDaysRemaining`],
        Name: [, __expectString, `name`],
    });
};
const de_FreeTrialFeatureConfigurationsResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FreeTrialFeatureConfigurationResult(entry, context);
    });
    return retVal;
};
const de_GeoLocation = (output, context) => {
    return take(output, {
        Lat: [, __limitedParseDouble, `lat`],
        Lon: [, __limitedParseDouble, `lon`],
    });
};
const de_HighestSeverityThreatDetails = (output, context) => {
    return take(output, {
        Count: [, __expectInt32, `count`],
        Severity: [, __expectString, `severity`],
        ThreatName: [, __expectString, `threatName`],
    });
};
const de_HostPath = (output, context) => {
    return take(output, {
        Path: [, __expectString, `path`],
    });
};
const de_IamInstanceProfile = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        Id: [, __expectString, `id`],
    });
};
const de_ImpersonatedUser = (output, context) => {
    return take(output, {
        Groups: [, _json, `groups`],
        Username: [, __expectString, `username`],
    });
};
const de_InstanceDetails = (output, context) => {
    return take(output, {
        AvailabilityZone: [, __expectString, `availabilityZone`],
        IamInstanceProfile: [, (_) => de_IamInstanceProfile(_, context), `iamInstanceProfile`],
        ImageDescription: [, __expectString, `imageDescription`],
        ImageId: [, __expectString, `imageId`],
        InstanceId: [, __expectString, `instanceId`],
        InstanceState: [, __expectString, `instanceState`],
        InstanceType: [, __expectString, `instanceType`],
        LaunchTime: [, __expectString, `launchTime`],
        NetworkInterfaces: [, (_) => de_NetworkInterfaces(_, context), `networkInterfaces`],
        OutpostArn: [, __expectString, `outpostArn`],
        Platform: [, __expectString, `platform`],
        ProductCodes: [, (_) => de_ProductCodes(_, context), `productCodes`],
        Tags: [, (_) => de_Tags(_, context), `tags`],
    });
};
const de_Invitation = (output, context) => {
    return take(output, {
        AccountId: [, __expectString, `accountId`],
        InvitationId: [, __expectString, `invitationId`],
        InvitedAt: [, __expectString, `invitedAt`],
        RelationshipStatus: [, __expectString, `relationshipStatus`],
    });
};
const de_Invitations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Invitation(entry, context);
    });
    return retVal;
};
const de_KubernetesApiCallAction = (output, context) => {
    return take(output, {
        Namespace: [, __expectString, `namespace`],
        Parameters: [, __expectString, `parameters`],
        RemoteIpDetails: [, (_) => de_RemoteIpDetails(_, context), `remoteIpDetails`],
        RequestUri: [, __expectString, `requestUri`],
        Resource: [, __expectString, `resource`],
        ResourceName: [, __expectString, `resourceName`],
        SourceIps: [, _json, `sourceIps`],
        StatusCode: [, __expectInt32, `statusCode`],
        Subresource: [, __expectString, `subresource`],
        UserAgent: [, __expectString, `userAgent`],
        Verb: [, __expectString, `verb`],
    });
};
const de_KubernetesAuditLogsConfigurationResult = (output, context) => {
    return take(output, {
        Status: [, __expectString, `status`],
    });
};
const de_KubernetesConfigurationResult = (output, context) => {
    return take(output, {
        AuditLogs: [, (_) => de_KubernetesAuditLogsConfigurationResult(_, context), `auditLogs`],
    });
};
const de_KubernetesDataSourceFreeTrial = (output, context) => {
    return take(output, {
        AuditLogs: [, (_) => de_DataSourceFreeTrial(_, context), `auditLogs`],
    });
};
const de_KubernetesDetails = (output, context) => {
    return take(output, {
        KubernetesUserDetails: [, (_) => de_KubernetesUserDetails(_, context), `kubernetesUserDetails`],
        KubernetesWorkloadDetails: [, (_) => de_KubernetesWorkloadDetails(_, context), `kubernetesWorkloadDetails`],
    });
};
const de_KubernetesPermissionCheckedDetails = (output, context) => {
    return take(output, {
        Allowed: [, __expectBoolean, `allowed`],
        Namespace: [, __expectString, `namespace`],
        Resource: [, __expectString, `resource`],
        Verb: [, __expectString, `verb`],
    });
};
const de_KubernetesRoleBindingDetails = (output, context) => {
    return take(output, {
        Kind: [, __expectString, `kind`],
        Name: [, __expectString, `name`],
        RoleRefKind: [, __expectString, `roleRefKind`],
        RoleRefName: [, __expectString, `roleRefName`],
        Uid: [, __expectString, `uid`],
    });
};
const de_KubernetesRoleDetails = (output, context) => {
    return take(output, {
        Kind: [, __expectString, `kind`],
        Name: [, __expectString, `name`],
        Uid: [, __expectString, `uid`],
    });
};
const de_KubernetesUserDetails = (output, context) => {
    return take(output, {
        Groups: [, _json, `groups`],
        ImpersonatedUser: [, (_) => de_ImpersonatedUser(_, context), `impersonatedUser`],
        SessionName: [, _json, `sessionName`],
        Uid: [, __expectString, `uid`],
        Username: [, __expectString, `username`],
    });
};
const de_KubernetesWorkloadDetails = (output, context) => {
    return take(output, {
        Containers: [, (_) => de_Containers(_, context), `containers`],
        HostIPC: [, __expectBoolean, `hostIPC`],
        HostNetwork: [, __expectBoolean, `hostNetwork`],
        HostPID: [, __expectBoolean, `hostPID`],
        Name: [, __expectString, `name`],
        Namespace: [, __expectString, `namespace`],
        ServiceAccountName: [, __expectString, `serviceAccountName`],
        Type: [, __expectString, `type`],
        Uid: [, __expectString, `uid`],
        Volumes: [, (_) => de_Volumes(_, context), `volumes`],
    });
};
const de_LambdaDetails = (output, context) => {
    return take(output, {
        Description: [, __expectString, `description`],
        FunctionArn: [, __expectString, `functionArn`],
        FunctionName: [, __expectString, `functionName`],
        FunctionVersion: [, __expectString, `functionVersion`],
        LastModifiedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `lastModifiedAt`],
        RevisionId: [, __expectString, `revisionId`],
        Role: [, __expectString, `role`],
        Tags: [, (_) => de_Tags(_, context), `tags`],
        VpcConfig: [, (_) => de_VpcConfig(_, context), `vpcConfig`],
    });
};
const de_Lineage = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LineageObject(entry, context);
    });
    return retVal;
};
const de_LineageObject = (output, context) => {
    return take(output, {
        Euid: [, __expectInt32, `euid`],
        ExecutablePath: [, __expectString, `executablePath`],
        Name: [, __expectString, `name`],
        NamespacePid: [, __expectInt32, `namespacePid`],
        ParentUuid: [, __expectString, `parentUuid`],
        Pid: [, __expectInt32, `pid`],
        StartTime: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `startTime`],
        UserId: [, __expectInt32, `userId`],
        Uuid: [, __expectString, `uuid`],
    });
};
const de_LocalIpDetails = (output, context) => {
    return take(output, {
        IpAddressV4: [, __expectString, `ipAddressV4`],
        IpAddressV6: [, __expectString, `ipAddressV6`],
    });
};
const de_LocalPortDetails = (output, context) => {
    return take(output, {
        Port: [, __expectInt32, `port`],
        PortName: [, __expectString, `portName`],
    });
};
const de_LoginAttribute = (output, context) => {
    return take(output, {
        Application: [, __expectString, `application`],
        FailedLoginAttempts: [, __expectInt32, `failedLoginAttempts`],
        SuccessfulLoginAttempts: [, __expectInt32, `successfulLoginAttempts`],
        User: [, __expectString, `user`],
    });
};
const de_LoginAttributes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LoginAttribute(entry, context);
    });
    return retVal;
};
const de_MalwareProtectionConfigurationResult = (output, context) => {
    return take(output, {
        ScanEc2InstanceWithFindings: [
            ,
            (_) => de_ScanEc2InstanceWithFindingsResult(_, context),
            `scanEc2InstanceWithFindings`,
        ],
        ServiceRole: [, __expectString, `serviceRole`],
    });
};
const de_MalwareProtectionDataSourceFreeTrial = (output, context) => {
    return take(output, {
        ScanEc2InstanceWithFindings: [, (_) => de_DataSourceFreeTrial(_, context), `scanEc2InstanceWithFindings`],
    });
};
const de_MapEquals = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScanConditionPair(entry, context);
    });
    return retVal;
};
const de_Master = (output, context) => {
    return take(output, {
        AccountId: [, __expectString, `accountId`],
        InvitationId: [, __expectString, `invitationId`],
        InvitedAt: [, __expectString, `invitedAt`],
        RelationshipStatus: [, __expectString, `relationshipStatus`],
    });
};
const de_Member = (output, context) => {
    return take(output, {
        AccountId: [, __expectString, `accountId`],
        AdministratorId: [, __expectString, `administratorId`],
        DetectorId: [, __expectString, `detectorId`],
        Email: [, __expectString, `email`],
        InvitedAt: [, __expectString, `invitedAt`],
        MasterId: [, __expectString, `masterId`],
        RelationshipStatus: [, __expectString, `relationshipStatus`],
        UpdatedAt: [, __expectString, `updatedAt`],
    });
};
const de_MemberAdditionalConfigurationResult = (output, context) => {
    return take(output, {
        Name: [, __expectString, `name`],
        Status: [, __expectString, `status`],
        UpdatedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `updatedAt`],
    });
};
const de_MemberAdditionalConfigurationResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MemberAdditionalConfigurationResult(entry, context);
    });
    return retVal;
};
const de_MemberDataSourceConfiguration = (output, context) => {
    return take(output, {
        AccountId: [, __expectString, `accountId`],
        DataSources: [, (_) => de_DataSourceConfigurationsResult(_, context), `dataSources`],
        Features: [, (_) => de_MemberFeaturesConfigurationsResults(_, context), `features`],
    });
};
const de_MemberDataSourceConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MemberDataSourceConfiguration(entry, context);
    });
    return retVal;
};
const de_MemberFeaturesConfigurationResult = (output, context) => {
    return take(output, {
        AdditionalConfiguration: [
            ,
            (_) => de_MemberAdditionalConfigurationResults(_, context),
            `additionalConfiguration`,
        ],
        Name: [, __expectString, `name`],
        Status: [, __expectString, `status`],
        UpdatedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `updatedAt`],
    });
};
const de_MemberFeaturesConfigurationsResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MemberFeaturesConfigurationResult(entry, context);
    });
    return retVal;
};
const de_Members = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Member(entry, context);
    });
    return retVal;
};
const de_NetworkConnectionAction = (output, context) => {
    return take(output, {
        Blocked: [, __expectBoolean, `blocked`],
        ConnectionDirection: [, __expectString, `connectionDirection`],
        LocalIpDetails: [, (_) => de_LocalIpDetails(_, context), `localIpDetails`],
        LocalPortDetails: [, (_) => de_LocalPortDetails(_, context), `localPortDetails`],
        Protocol: [, __expectString, `protocol`],
        RemoteIpDetails: [, (_) => de_RemoteIpDetails(_, context), `remoteIpDetails`],
        RemotePortDetails: [, (_) => de_RemotePortDetails(_, context), `remotePortDetails`],
    });
};
const de_NetworkInterface = (output, context) => {
    return take(output, {
        Ipv6Addresses: [, _json, `ipv6Addresses`],
        NetworkInterfaceId: [, __expectString, `networkInterfaceId`],
        PrivateDnsName: [, __expectString, `privateDnsName`],
        PrivateIpAddress: [, __expectString, `privateIpAddress`],
        PrivateIpAddresses: [, (_) => de_PrivateIpAddresses(_, context), `privateIpAddresses`],
        PublicDnsName: [, __expectString, `publicDnsName`],
        PublicIp: [, __expectString, `publicIp`],
        SecurityGroups: [, (_) => de_SecurityGroups(_, context), `securityGroups`],
        SubnetId: [, __expectString, `subnetId`],
        VpcId: [, __expectString, `vpcId`],
    });
};
const de_NetworkInterfaces = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInterface(entry, context);
    });
    return retVal;
};
const de_Observations = (output, context) => {
    return take(output, {
        Text: [, _json, `text`],
    });
};
const de_Organization = (output, context) => {
    return take(output, {
        Asn: [, __expectString, `asn`],
        AsnOrg: [, __expectString, `asnOrg`],
        Isp: [, __expectString, `isp`],
        Org: [, __expectString, `org`],
    });
};
const de_OrganizationAdditionalConfigurationResult = (output, context) => {
    return take(output, {
        AutoEnable: [, __expectString, `autoEnable`],
        Name: [, __expectString, `name`],
    });
};
const de_OrganizationAdditionalConfigurationResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OrganizationAdditionalConfigurationResult(entry, context);
    });
    return retVal;
};
const de_OrganizationDataSourceConfigurationsResult = (output, context) => {
    return take(output, {
        Kubernetes: [, (_) => de_OrganizationKubernetesConfigurationResult(_, context), `kubernetes`],
        MalwareProtection: [
            ,
            (_) => de_OrganizationMalwareProtectionConfigurationResult(_, context),
            `malwareProtection`,
        ],
        S3Logs: [, (_) => de_OrganizationS3LogsConfigurationResult(_, context), `s3Logs`],
    });
};
const de_OrganizationDetails = (output, context) => {
    return take(output, {
        OrganizationStatistics: [, (_) => de_OrganizationStatistics(_, context), `organizationStatistics`],
        UpdatedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `updatedAt`],
    });
};
const de_OrganizationEbsVolumesResult = (output, context) => {
    return take(output, {
        AutoEnable: [, __expectBoolean, `autoEnable`],
    });
};
const de_OrganizationFeatureConfigurationResult = (output, context) => {
    return take(output, {
        AdditionalConfiguration: [
            ,
            (_) => de_OrganizationAdditionalConfigurationResults(_, context),
            `additionalConfiguration`,
        ],
        AutoEnable: [, __expectString, `autoEnable`],
        Name: [, __expectString, `name`],
    });
};
const de_OrganizationFeaturesConfigurationsResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OrganizationFeatureConfigurationResult(entry, context);
    });
    return retVal;
};
const de_OrganizationFeatureStatistics = (output, context) => {
    return take(output, {
        AdditionalConfiguration: [
            ,
            (_) => de_OrganizationFeatureStatisticsAdditionalConfigurations(_, context),
            `additionalConfiguration`,
        ],
        EnabledAccountsCount: [, __expectInt32, `enabledAccountsCount`],
        Name: [, __expectString, `name`],
    });
};
const de_OrganizationFeatureStatisticsAdditionalConfiguration = (output, context) => {
    return take(output, {
        EnabledAccountsCount: [, __expectInt32, `enabledAccountsCount`],
        Name: [, __expectString, `name`],
    });
};
const de_OrganizationFeatureStatisticsAdditionalConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OrganizationFeatureStatisticsAdditionalConfiguration(entry, context);
    });
    return retVal;
};
const de_OrganizationFeatureStatisticsResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OrganizationFeatureStatistics(entry, context);
    });
    return retVal;
};
const de_OrganizationKubernetesAuditLogsConfigurationResult = (output, context) => {
    return take(output, {
        AutoEnable: [, __expectBoolean, `autoEnable`],
    });
};
const de_OrganizationKubernetesConfigurationResult = (output, context) => {
    return take(output, {
        AuditLogs: [, (_) => de_OrganizationKubernetesAuditLogsConfigurationResult(_, context), `auditLogs`],
    });
};
const de_OrganizationMalwareProtectionConfigurationResult = (output, context) => {
    return take(output, {
        ScanEc2InstanceWithFindings: [
            ,
            (_) => de_OrganizationScanEc2InstanceWithFindingsResult(_, context),
            `scanEc2InstanceWithFindings`,
        ],
    });
};
const de_OrganizationS3LogsConfigurationResult = (output, context) => {
    return take(output, {
        AutoEnable: [, __expectBoolean, `autoEnable`],
    });
};
const de_OrganizationScanEc2InstanceWithFindingsResult = (output, context) => {
    return take(output, {
        EbsVolumes: [, (_) => de_OrganizationEbsVolumesResult(_, context), `ebsVolumes`],
    });
};
const de_OrganizationStatistics = (output, context) => {
    return take(output, {
        ActiveAccountsCount: [, __expectInt32, `activeAccountsCount`],
        CountByFeature: [, (_) => de_OrganizationFeatureStatisticsResults(_, context), `countByFeature`],
        EnabledAccountsCount: [, __expectInt32, `enabledAccountsCount`],
        MemberAccountsCount: [, __expectInt32, `memberAccountsCount`],
        TotalAccountsCount: [, __expectInt32, `totalAccountsCount`],
    });
};
const de_Owner = (output, context) => {
    return take(output, {
        Id: [, __expectString, `id`],
    });
};
const de_PermissionConfiguration = (output, context) => {
    return take(output, {
        AccountLevelPermissions: [, (_) => de_AccountLevelPermissions(_, context), `accountLevelPermissions`],
        BucketLevelPermissions: [, (_) => de_BucketLevelPermissions(_, context), `bucketLevelPermissions`],
    });
};
const de_PortProbeAction = (output, context) => {
    return take(output, {
        Blocked: [, __expectBoolean, `blocked`],
        PortProbeDetails: [, (_) => de_PortProbeDetails(_, context), `portProbeDetails`],
    });
};
const de_PortProbeDetail = (output, context) => {
    return take(output, {
        LocalIpDetails: [, (_) => de_LocalIpDetails(_, context), `localIpDetails`],
        LocalPortDetails: [, (_) => de_LocalPortDetails(_, context), `localPortDetails`],
        RemoteIpDetails: [, (_) => de_RemoteIpDetails(_, context), `remoteIpDetails`],
    });
};
const de_PortProbeDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PortProbeDetail(entry, context);
    });
    return retVal;
};
const de_PrivateIpAddressDetails = (output, context) => {
    return take(output, {
        PrivateDnsName: [, __expectString, `privateDnsName`],
        PrivateIpAddress: [, __expectString, `privateIpAddress`],
    });
};
const de_PrivateIpAddresses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrivateIpAddressDetails(entry, context);
    });
    return retVal;
};
const de_ProcessDetails = (output, context) => {
    return take(output, {
        Euid: [, __expectInt32, `euid`],
        ExecutablePath: [, __expectString, `executablePath`],
        ExecutableSha256: [, __expectString, `executableSha256`],
        Lineage: [, (_) => de_Lineage(_, context), `lineage`],
        Name: [, __expectString, `name`],
        NamespacePid: [, __expectInt32, `namespacePid`],
        ParentUuid: [, __expectString, `parentUuid`],
        Pid: [, __expectInt32, `pid`],
        Pwd: [, __expectString, `pwd`],
        StartTime: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `startTime`],
        User: [, __expectString, `user`],
        UserId: [, __expectInt32, `userId`],
        Uuid: [, __expectString, `uuid`],
    });
};
const de_ProductCode = (output, context) => {
    return take(output, {
        Code: [, __expectString, `productCodeId`],
        ProductType: [, __expectString, `productCodeType`],
    });
};
const de_ProductCodes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProductCode(entry, context);
    });
    return retVal;
};
const de_PublicAccess = (output, context) => {
    return take(output, {
        EffectivePermission: [, __expectString, `effectivePermission`],
        PermissionConfiguration: [, (_) => de_PermissionConfiguration(_, context), `permissionConfiguration`],
    });
};
const de_RdsDbInstanceDetails = (output, context) => {
    return take(output, {
        DbClusterIdentifier: [, __expectString, `dbClusterIdentifier`],
        DbInstanceArn: [, __expectString, `dbInstanceArn`],
        DbInstanceIdentifier: [, __expectString, `dbInstanceIdentifier`],
        Engine: [, __expectString, `engine`],
        EngineVersion: [, __expectString, `engineVersion`],
        Tags: [, (_) => de_Tags(_, context), `tags`],
    });
};
const de_RdsDbUserDetails = (output, context) => {
    return take(output, {
        Application: [, __expectString, `application`],
        AuthMethod: [, __expectString, `authMethod`],
        Database: [, __expectString, `database`],
        Ssl: [, __expectString, `ssl`],
        User: [, __expectString, `user`],
    });
};
const de_RdsLoginAttemptAction = (output, context) => {
    return take(output, {
        LoginAttributes: (_) => de_LoginAttributes(_, context),
        RemoteIpDetails: [, (_) => de_RemoteIpDetails(_, context), `remoteIpDetails`],
    });
};
const de_RemoteAccountDetails = (output, context) => {
    return take(output, {
        AccountId: [, __expectString, `accountId`],
        Affiliated: [, __expectBoolean, `affiliated`],
    });
};
const de_RemoteIpDetails = (output, context) => {
    return take(output, {
        City: [, (_) => de_City(_, context), `city`],
        Country: [, (_) => de_Country(_, context), `country`],
        GeoLocation: [, (_) => de_GeoLocation(_, context), `geoLocation`],
        IpAddressV4: [, __expectString, `ipAddressV4`],
        IpAddressV6: [, __expectString, `ipAddressV6`],
        Organization: [, (_) => de_Organization(_, context), `organization`],
    });
};
const de_RemotePortDetails = (output, context) => {
    return take(output, {
        Port: [, __expectInt32, `port`],
        PortName: [, __expectString, `portName`],
    });
};
const de_Resource = (output, context) => {
    return take(output, {
        AccessKeyDetails: [, (_) => de_AccessKeyDetails(_, context), `accessKeyDetails`],
        ContainerDetails: [, (_) => de_Container(_, context), `containerDetails`],
        EbsVolumeDetails: [, (_) => de_EbsVolumeDetails(_, context), `ebsVolumeDetails`],
        EcsClusterDetails: [, (_) => de_EcsClusterDetails(_, context), `ecsClusterDetails`],
        EksClusterDetails: [, (_) => de_EksClusterDetails(_, context), `eksClusterDetails`],
        InstanceDetails: [, (_) => de_InstanceDetails(_, context), `instanceDetails`],
        KubernetesDetails: [, (_) => de_KubernetesDetails(_, context), `kubernetesDetails`],
        LambdaDetails: [, (_) => de_LambdaDetails(_, context), `lambdaDetails`],
        RdsDbInstanceDetails: [, (_) => de_RdsDbInstanceDetails(_, context), `rdsDbInstanceDetails`],
        RdsDbUserDetails: [, (_) => de_RdsDbUserDetails(_, context), `rdsDbUserDetails`],
        ResourceType: [, __expectString, `resourceType`],
        S3BucketDetails: [, (_) => de_S3BucketDetails(_, context), `s3BucketDetails`],
    });
};
const de_ResourceDetails = (output, context) => {
    return take(output, {
        InstanceArn: [, __expectString, `instanceArn`],
    });
};
const de_RuntimeContext = (output, context) => {
    return take(output, {
        AddressFamily: [, __expectString, `addressFamily`],
        CommandLineExample: [, __expectString, `commandLineExample`],
        FileSystemType: [, __expectString, `fileSystemType`],
        Flags: [, _json, `flags`],
        IanaProtocolNumber: [, __expectInt32, `ianaProtocolNumber`],
        LdPreloadValue: [, __expectString, `ldPreloadValue`],
        LibraryPath: [, __expectString, `libraryPath`],
        MemoryRegions: [, _json, `memoryRegions`],
        ModifiedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `modifiedAt`],
        ModifyingProcess: [, (_) => de_ProcessDetails(_, context), `modifyingProcess`],
        ModuleFilePath: [, __expectString, `moduleFilePath`],
        ModuleName: [, __expectString, `moduleName`],
        ModuleSha256: [, __expectString, `moduleSha256`],
        MountSource: [, __expectString, `mountSource`],
        MountTarget: [, __expectString, `mountTarget`],
        ReleaseAgentPath: [, __expectString, `releaseAgentPath`],
        RuncBinaryPath: [, __expectString, `runcBinaryPath`],
        ScriptPath: [, __expectString, `scriptPath`],
        ServiceName: [, __expectString, `serviceName`],
        ShellHistoryFilePath: [, __expectString, `shellHistoryFilePath`],
        SocketPath: [, __expectString, `socketPath`],
        TargetProcess: [, (_) => de_ProcessDetails(_, context), `targetProcess`],
        ThreatFilePath: [, __expectString, `threatFilePath`],
        ToolCategory: [, __expectString, `toolCategory`],
        ToolName: [, __expectString, `toolName`],
    });
};
const de_RuntimeDetails = (output, context) => {
    return take(output, {
        Context: [, (_) => de_RuntimeContext(_, context), `context`],
        Process: [, (_) => de_ProcessDetails(_, context), `process`],
    });
};
const de_S3BucketDetail = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        CreatedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `createdAt`],
        DefaultServerSideEncryption: [
            ,
            (_) => de_DefaultServerSideEncryption(_, context),
            `defaultServerSideEncryption`,
        ],
        Name: [, __expectString, `name`],
        Owner: [, (_) => de_Owner(_, context), `owner`],
        PublicAccess: [, (_) => de_PublicAccess(_, context), `publicAccess`],
        Tags: [, (_) => de_Tags(_, context), `tags`],
        Type: [, __expectString, `type`],
    });
};
const de_S3BucketDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_S3BucketDetail(entry, context);
    });
    return retVal;
};
const de_S3LogsConfigurationResult = (output, context) => {
    return take(output, {
        Status: [, __expectString, `status`],
    });
};
const de_Scan = (output, context) => {
    return take(output, {
        AccountId: [, __expectString, `accountId`],
        AdminDetectorId: [, __expectString, `adminDetectorId`],
        AttachedVolumes: [, (_) => de_VolumeDetails(_, context), `attachedVolumes`],
        DetectorId: [, __expectString, `detectorId`],
        FailureReason: [, __expectString, `failureReason`],
        FileCount: [, __expectLong, `fileCount`],
        ResourceDetails: [, (_) => de_ResourceDetails(_, context), `resourceDetails`],
        ScanEndTime: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `scanEndTime`],
        ScanId: [, __expectString, `scanId`],
        ScanResultDetails: [, (_) => de_ScanResultDetails(_, context), `scanResultDetails`],
        ScanStartTime: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `scanStartTime`],
        ScanStatus: [, __expectString, `scanStatus`],
        ScanType: [, __expectString, `scanType`],
        TotalBytes: [, __expectLong, `totalBytes`],
        TriggerDetails: [, (_) => de_TriggerDetails(_, context), `triggerDetails`],
    });
};
const de_ScanCondition = (output, context) => {
    return take(output, {
        MapEquals: [, (_) => de_MapEquals(_, context), `mapEquals`],
    });
};
const de_ScanConditionPair = (output, context) => {
    return take(output, {
        Key: [, __expectString, `key`],
        Value: [, __expectString, `value`],
    });
};
const de_ScanCriterion = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ScanCondition(value, context);
        return acc;
    }, {});
};
const de_ScanDetections = (output, context) => {
    return take(output, {
        HighestSeverityThreatDetails: [
            ,
            (_) => de_HighestSeverityThreatDetails(_, context),
            `highestSeverityThreatDetails`,
        ],
        ScannedItemCount: [, (_) => de_ScannedItemCount(_, context), `scannedItemCount`],
        ThreatDetectedByName: [, (_) => de_ThreatDetectedByName(_, context), `threatDetectedByName`],
        ThreatsDetectedItemCount: [, (_) => de_ThreatsDetectedItemCount(_, context), `threatsDetectedItemCount`],
    });
};
const de_ScanEc2InstanceWithFindingsResult = (output, context) => {
    return take(output, {
        EbsVolumes: [, (_) => de_EbsVolumesResult(_, context), `ebsVolumes`],
    });
};
const de_ScanFilePath = (output, context) => {
    return take(output, {
        FileName: [, __expectString, `fileName`],
        FilePath: [, __expectString, `filePath`],
        Hash: [, __expectString, `hash`],
        VolumeArn: [, __expectString, `volumeArn`],
    });
};
const de_ScannedItemCount = (output, context) => {
    return take(output, {
        Files: [, __expectInt32, `files`],
        TotalGb: [, __expectInt32, `totalGb`],
        Volumes: [, __expectInt32, `volumes`],
    });
};
const de_ScanResourceCriteria = (output, context) => {
    return take(output, {
        Exclude: [, (_) => de_ScanCriterion(_, context), `exclude`],
        Include: [, (_) => de_ScanCriterion(_, context), `include`],
    });
};
const de_ScanResultDetails = (output, context) => {
    return take(output, {
        ScanResult: [, __expectString, `scanResult`],
    });
};
const de_Scans = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Scan(entry, context);
    });
    return retVal;
};
const de_ScanThreatName = (output, context) => {
    return take(output, {
        FilePaths: [, (_) => de_FilePaths(_, context), `filePaths`],
        ItemCount: [, __expectInt32, `itemCount`],
        Name: [, __expectString, `name`],
        Severity: [, __expectString, `severity`],
    });
};
const de_ScanThreatNames = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScanThreatName(entry, context);
    });
    return retVal;
};
const de_SecurityContext = (output, context) => {
    return take(output, {
        AllowPrivilegeEscalation: [, __expectBoolean, `allowPrivilegeEscalation`],
        Privileged: [, __expectBoolean, `privileged`],
    });
};
const de_SecurityGroup = (output, context) => {
    return take(output, {
        GroupId: [, __expectString, `groupId`],
        GroupName: [, __expectString, `groupName`],
    });
};
const de_SecurityGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityGroup(entry, context);
    });
    return retVal;
};
const de_Service = (output, context) => {
    return take(output, {
        Action: [, (_) => de_Action(_, context), `action`],
        AdditionalInfo: [, (_) => de_ServiceAdditionalInfo(_, context), `additionalInfo`],
        Archived: [, __expectBoolean, `archived`],
        Count: [, __expectInt32, `count`],
        Detection: [, (_) => de_Detection(_, context), `detection`],
        DetectorId: [, __expectString, `detectorId`],
        EbsVolumeScanDetails: [, (_) => de_EbsVolumeScanDetails(_, context), `ebsVolumeScanDetails`],
        EventFirstSeen: [, __expectString, `eventFirstSeen`],
        EventLastSeen: [, __expectString, `eventLastSeen`],
        Evidence: [, (_) => de_Evidence(_, context), `evidence`],
        FeatureName: [, __expectString, `featureName`],
        ResourceRole: [, __expectString, `resourceRole`],
        RuntimeDetails: [, (_) => de_RuntimeDetails(_, context), `runtimeDetails`],
        ServiceName: [, __expectString, `serviceName`],
        UserFeedback: [, __expectString, `userFeedback`],
    });
};
const de_ServiceAdditionalInfo = (output, context) => {
    return take(output, {
        Type: [, __expectString, `type`],
        Value: [, __expectString, `value`],
    });
};
const de_Tag = (output, context) => {
    return take(output, {
        Key: [, __expectString, `key`],
        Value: [, __expectString, `value`],
    });
};
const de_Tags = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry, context);
    });
    return retVal;
};
const de_ThreatDetectedByName = (output, context) => {
    return take(output, {
        ItemCount: [, __expectInt32, `itemCount`],
        Shortened: [, __expectBoolean, `shortened`],
        ThreatNames: [, (_) => de_ScanThreatNames(_, context), `threatNames`],
        UniqueThreatNameCount: [, __expectInt32, `uniqueThreatNameCount`],
    });
};
const de_ThreatIntelligenceDetail = (output, context) => {
    return take(output, {
        ThreatFileSha256: [, __expectString, `threatFileSha256`],
        ThreatListName: [, __expectString, `threatListName`],
        ThreatNames: [, _json, `threatNames`],
    });
};
const de_ThreatIntelligenceDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ThreatIntelligenceDetail(entry, context);
    });
    return retVal;
};
const de_ThreatsDetectedItemCount = (output, context) => {
    return take(output, {
        Files: [, __expectInt32, `files`],
    });
};
const de_Total = (output, context) => {
    return take(output, {
        Amount: [, __expectString, `amount`],
        Unit: [, __expectString, `unit`],
    });
};
const de_TriggerDetails = (output, context) => {
    return take(output, {
        Description: [, __expectString, `description`],
        GuardDutyFindingId: [, __expectString, `guardDutyFindingId`],
    });
};
const de_UnprocessedAccount = (output, context) => {
    return take(output, {
        AccountId: [, __expectString, `accountId`],
        Result: [, __expectString, `result`],
    });
};
const de_UnprocessedAccounts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnprocessedAccount(entry, context);
    });
    return retVal;
};
const de_UnprocessedDataSourcesResult = (output, context) => {
    return take(output, {
        MalwareProtection: [, (_) => de_MalwareProtectionConfigurationResult(_, context), `malwareProtection`],
    });
};
const de_UsageAccountResult = (output, context) => {
    return take(output, {
        AccountId: [, __expectString, `accountId`],
        Total: [, (_) => de_Total(_, context), `total`],
    });
};
const de_UsageAccountResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UsageAccountResult(entry, context);
    });
    return retVal;
};
const de_UsageDataSourceResult = (output, context) => {
    return take(output, {
        DataSource: [, __expectString, `dataSource`],
        Total: [, (_) => de_Total(_, context), `total`],
    });
};
const de_UsageDataSourceResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UsageDataSourceResult(entry, context);
    });
    return retVal;
};
const de_UsageFeatureResult = (output, context) => {
    return take(output, {
        Feature: [, __expectString, `feature`],
        Total: [, (_) => de_Total(_, context), `total`],
    });
};
const de_UsageFeatureResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UsageFeatureResult(entry, context);
    });
    return retVal;
};
const de_UsageResourceResult = (output, context) => {
    return take(output, {
        Resource: [, __expectString, `resource`],
        Total: [, (_) => de_Total(_, context), `total`],
    });
};
const de_UsageResourceResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UsageResourceResult(entry, context);
    });
    return retVal;
};
const de_UsageStatistics = (output, context) => {
    return take(output, {
        SumByAccount: [, (_) => de_UsageAccountResultList(_, context), `sumByAccount`],
        SumByDataSource: [, (_) => de_UsageDataSourceResultList(_, context), `sumByDataSource`],
        SumByFeature: [, (_) => de_UsageFeatureResultList(_, context), `sumByFeature`],
        SumByResource: [, (_) => de_UsageResourceResultList(_, context), `sumByResource`],
        TopAccountsByFeature: [, (_) => de_UsageTopAccountsResultList(_, context), `topAccountsByFeature`],
        TopResources: [, (_) => de_UsageResourceResultList(_, context), `topResources`],
    });
};
const de_UsageTopAccountResult = (output, context) => {
    return take(output, {
        AccountId: [, __expectString, `accountId`],
        Total: [, (_) => de_Total(_, context), `total`],
    });
};
const de_UsageTopAccountsByFeatureList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UsageTopAccountResult(entry, context);
    });
    return retVal;
};
const de_UsageTopAccountsResult = (output, context) => {
    return take(output, {
        Accounts: [, (_) => de_UsageTopAccountsByFeatureList(_, context), `accounts`],
        Feature: [, __expectString, `feature`],
    });
};
const de_UsageTopAccountsResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UsageTopAccountsResult(entry, context);
    });
    return retVal;
};
const de_Volume = (output, context) => {
    return take(output, {
        HostPath: [, (_) => de_HostPath(_, context), `hostPath`],
        Name: [, __expectString, `name`],
    });
};
const de_VolumeDetail = (output, context) => {
    return take(output, {
        DeviceName: [, __expectString, `deviceName`],
        EncryptionType: [, __expectString, `encryptionType`],
        KmsKeyArn: [, __expectString, `kmsKeyArn`],
        SnapshotArn: [, __expectString, `snapshotArn`],
        VolumeArn: [, __expectString, `volumeArn`],
        VolumeSizeInGB: [, __expectInt32, `volumeSizeInGB`],
        VolumeType: [, __expectString, `volumeType`],
    });
};
const de_VolumeDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeDetail(entry, context);
    });
    return retVal;
};
const de_VolumeMount = (output, context) => {
    return take(output, {
        MountPath: [, __expectString, `mountPath`],
        Name: [, __expectString, `name`],
    });
};
const de_VolumeMounts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeMount(entry, context);
    });
    return retVal;
};
const de_Volumes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Volume(entry, context);
    });
    return retVal;
};
const de_VpcConfig = (output, context) => {
    return take(output, {
        SecurityGroups: [, (_) => de_SecurityGroups(_, context), `securityGroups`],
        SubnetIds: [, _json, `subnetIds`],
        VpcId: [, __expectString, `vpcId`],
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _MR = "MaxResults";
const _NT = "NextToken";
const _OA = "OnlyAssociated";
const _TK = "TagKeys";
const _mR = "maxResults";
const _nT = "nextToken";
const _oA = "onlyAssociated";
const _tK = "tagKeys";
