import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { GuardDutyServiceException as __BaseException } from "./GuardDutyServiceException";
export interface AcceptAdministratorInvitationRequest {
  DetectorId: string | undefined;
  AdministratorId: string | undefined;
  InvitationId: string | undefined;
}
export interface AcceptAdministratorInvitationResponse {}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  Message?: string;
  Type?: string;
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export declare class InternalServerErrorException extends __BaseException {
  readonly name: "InternalServerErrorException";
  readonly $fault: "server";
  Message?: string;
  Type?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>
  );
}
export interface AcceptInvitationRequest {
  DetectorId: string | undefined;
  MasterId: string | undefined;
  InvitationId: string | undefined;
}
export interface AcceptInvitationResponse {}
export interface AccessControlList {
  AllowsPublicReadAccess?: boolean;
  AllowsPublicWriteAccess?: boolean;
}
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  Type?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface AccessKeyDetails {
  AccessKeyId?: string;
  PrincipalId?: string;
  UserName?: string;
  UserType?: string;
}
export interface AccountDetail {
  AccountId: string | undefined;
  Email: string | undefined;
}
export interface DataSourceFreeTrial {
  FreeTrialDaysRemaining?: number;
}
export interface KubernetesDataSourceFreeTrial {
  AuditLogs?: DataSourceFreeTrial;
}
export interface MalwareProtectionDataSourceFreeTrial {
  ScanEc2InstanceWithFindings?: DataSourceFreeTrial;
}
export interface DataSourcesFreeTrial {
  CloudTrail?: DataSourceFreeTrial;
  DnsLogs?: DataSourceFreeTrial;
  FlowLogs?: DataSourceFreeTrial;
  S3Logs?: DataSourceFreeTrial;
  Kubernetes?: KubernetesDataSourceFreeTrial;
  MalwareProtection?: MalwareProtectionDataSourceFreeTrial;
}
export declare const FreeTrialFeatureResult: {
  readonly CLOUD_TRAIL: "CLOUD_TRAIL";
  readonly DNS_LOGS: "DNS_LOGS";
  readonly EBS_MALWARE_PROTECTION: "EBS_MALWARE_PROTECTION";
  readonly EC2_RUNTIME_MONITORING: "EC2_RUNTIME_MONITORING";
  readonly EKS_AUDIT_LOGS: "EKS_AUDIT_LOGS";
  readonly EKS_RUNTIME_MONITORING: "EKS_RUNTIME_MONITORING";
  readonly FARGATE_RUNTIME_MONITORING: "FARGATE_RUNTIME_MONITORING";
  readonly FLOW_LOGS: "FLOW_LOGS";
  readonly LAMBDA_NETWORK_LOGS: "LAMBDA_NETWORK_LOGS";
  readonly RDS_LOGIN_EVENTS: "RDS_LOGIN_EVENTS";
  readonly S3_DATA_EVENTS: "S3_DATA_EVENTS";
};
export type FreeTrialFeatureResult =
  (typeof FreeTrialFeatureResult)[keyof typeof FreeTrialFeatureResult];
export interface FreeTrialFeatureConfigurationResult {
  Name?: FreeTrialFeatureResult;
  FreeTrialDaysRemaining?: number;
}
export interface AccountFreeTrialInfo {
  AccountId?: string;
  DataSources?: DataSourcesFreeTrial;
  Features?: FreeTrialFeatureConfigurationResult[];
}
export interface BlockPublicAccess {
  IgnorePublicAcls?: boolean;
  RestrictPublicBuckets?: boolean;
  BlockPublicAcls?: boolean;
  BlockPublicPolicy?: boolean;
}
export interface AccountLevelPermissions {
  BlockPublicAccess?: BlockPublicAccess;
}
export interface DomainDetails {
  Domain?: string;
}
export interface RemoteAccountDetails {
  AccountId?: string;
  Affiliated?: boolean;
}
export interface City {
  CityName?: string;
}
export interface Country {
  CountryCode?: string;
  CountryName?: string;
}
export interface GeoLocation {
  Lat?: number;
  Lon?: number;
}
export interface Organization {
  Asn?: string;
  AsnOrg?: string;
  Isp?: string;
  Org?: string;
}
export interface RemoteIpDetails {
  City?: City;
  Country?: Country;
  GeoLocation?: GeoLocation;
  IpAddressV4?: string;
  IpAddressV6?: string;
  Organization?: Organization;
}
export interface AwsApiCallAction {
  Api?: string;
  CallerType?: string;
  DomainDetails?: DomainDetails;
  ErrorCode?: string;
  UserAgent?: string;
  RemoteIpDetails?: RemoteIpDetails;
  ServiceName?: string;
  RemoteAccountDetails?: RemoteAccountDetails;
  AffectedResources?: Record<string, string>;
}
export interface DnsRequestAction {
  Domain?: string;
  Protocol?: string;
  Blocked?: boolean;
  DomainWithSuffix?: string;
}
export interface KubernetesApiCallAction {
  RequestUri?: string;
  Verb?: string;
  SourceIps?: string[];
  UserAgent?: string;
  RemoteIpDetails?: RemoteIpDetails;
  StatusCode?: number;
  Parameters?: string;
  Resource?: string;
  Subresource?: string;
  Namespace?: string;
  ResourceName?: string;
}
export interface KubernetesPermissionCheckedDetails {
  Verb?: string;
  Resource?: string;
  Namespace?: string;
  Allowed?: boolean;
}
export interface KubernetesRoleBindingDetails {
  Kind?: string;
  Name?: string;
  Uid?: string;
  RoleRefName?: string;
  RoleRefKind?: string;
}
export interface KubernetesRoleDetails {
  Kind?: string;
  Name?: string;
  Uid?: string;
}
export interface LocalIpDetails {
  IpAddressV4?: string;
  IpAddressV6?: string;
}
export interface LocalPortDetails {
  Port?: number;
  PortName?: string;
}
export interface RemotePortDetails {
  Port?: number;
  PortName?: string;
}
export interface NetworkConnectionAction {
  Blocked?: boolean;
  ConnectionDirection?: string;
  LocalPortDetails?: LocalPortDetails;
  Protocol?: string;
  LocalIpDetails?: LocalIpDetails;
  RemoteIpDetails?: RemoteIpDetails;
  RemotePortDetails?: RemotePortDetails;
}
export interface PortProbeDetail {
  LocalPortDetails?: LocalPortDetails;
  LocalIpDetails?: LocalIpDetails;
  RemoteIpDetails?: RemoteIpDetails;
}
export interface PortProbeAction {
  Blocked?: boolean;
  PortProbeDetails?: PortProbeDetail[];
}
export interface LoginAttribute {
  User?: string;
  Application?: string;
  FailedLoginAttempts?: number;
  SuccessfulLoginAttempts?: number;
}
export interface RdsLoginAttemptAction {
  RemoteIpDetails?: RemoteIpDetails;
  LoginAttributes?: LoginAttribute[];
}
export interface Action {
  ActionType?: string;
  AwsApiCallAction?: AwsApiCallAction;
  DnsRequestAction?: DnsRequestAction;
  NetworkConnectionAction?: NetworkConnectionAction;
  PortProbeAction?: PortProbeAction;
  KubernetesApiCallAction?: KubernetesApiCallAction;
  RdsLoginAttemptAction?: RdsLoginAttemptAction;
  KubernetesPermissionCheckedDetails?: KubernetesPermissionCheckedDetails;
  KubernetesRoleBindingDetails?: KubernetesRoleBindingDetails;
  KubernetesRoleDetails?: KubernetesRoleDetails;
}
export interface AddonDetails {
  AddonVersion?: string;
  AddonStatus?: string;
}
export declare const AdminStatus: {
  readonly DISABLE_IN_PROGRESS: "DISABLE_IN_PROGRESS";
  readonly ENABLED: "ENABLED";
};
export type AdminStatus = (typeof AdminStatus)[keyof typeof AdminStatus];
export interface AdminAccount {
  AdminAccountId?: string;
  AdminStatus?: AdminStatus;
}
export interface Administrator {
  AccountId?: string;
  InvitationId?: string;
  RelationshipStatus?: string;
  InvitedAt?: string;
}
export interface AgentDetails {
  Version?: string;
}
export interface Observations {
  Text?: string[];
}
export declare const ProfileSubtype: {
  readonly FREQUENT: "FREQUENT";
  readonly INFREQUENT: "INFREQUENT";
  readonly RARE: "RARE";
  readonly UNSEEN: "UNSEEN";
};
export type ProfileSubtype =
  (typeof ProfileSubtype)[keyof typeof ProfileSubtype];
export declare const ProfileType: {
  readonly FREQUENCY: "FREQUENCY";
};
export type ProfileType = (typeof ProfileType)[keyof typeof ProfileType];
export interface AnomalyObject {
  ProfileType?: ProfileType;
  ProfileSubtype?: ProfileSubtype;
  Observations?: Observations;
}
export interface AnomalyUnusual {
  Behavior?: Record<string, Record<string, AnomalyObject>>;
}
export interface Anomaly {
  Profiles?: Record<string, Record<string, AnomalyObject[]>>;
  Unusual?: AnomalyUnusual;
}
export interface ArchiveFindingsRequest {
  DetectorId: string | undefined;
  FindingIds: string[] | undefined;
}
export interface ArchiveFindingsResponse {}
export declare const AutoEnableMembers: {
  readonly ALL: "ALL";
  readonly NEW: "NEW";
  readonly NONE: "NONE";
};
export type AutoEnableMembers =
  (typeof AutoEnableMembers)[keyof typeof AutoEnableMembers];
export interface BucketPolicy {
  AllowsPublicReadAccess?: boolean;
  AllowsPublicWriteAccess?: boolean;
}
export interface BucketLevelPermissions {
  AccessControlList?: AccessControlList;
  BucketPolicy?: BucketPolicy;
  BlockPublicAccess?: BlockPublicAccess;
}
export declare const DataSourceStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type DataSourceStatus =
  (typeof DataSourceStatus)[keyof typeof DataSourceStatus];
export interface CloudTrailConfigurationResult {
  Status: DataSourceStatus | undefined;
}
export interface Condition {
  Eq?: string[];
  Neq?: string[];
  Gt?: number;
  Gte?: number;
  Lt?: number;
  Lte?: number;
  Equals?: string[];
  NotEquals?: string[];
  GreaterThan?: number;
  GreaterThanOrEqual?: number;
  LessThan?: number;
  LessThanOrEqual?: number;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  Type?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface SecurityContext {
  Privileged?: boolean;
  AllowPrivilegeEscalation?: boolean;
}
export interface VolumeMount {
  Name?: string;
  MountPath?: string;
}
export interface Container {
  ContainerRuntime?: string;
  Id?: string;
  Name?: string;
  Image?: string;
  ImagePrefix?: string;
  VolumeMounts?: VolumeMount[];
  SecurityContext?: SecurityContext;
}
export interface ContainerInstanceDetails {
  CoveredContainerInstances?: number;
  CompatibleContainerInstances?: number;
}
export declare const CoverageStatus: {
  readonly HEALTHY: "HEALTHY";
  readonly UNHEALTHY: "UNHEALTHY";
};
export type CoverageStatus =
  (typeof CoverageStatus)[keyof typeof CoverageStatus];
export declare const ResourceType: {
  readonly EC2: "EC2";
  readonly ECS: "ECS";
  readonly EKS: "EKS";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export declare const ManagementType: {
  readonly AUTO_MANAGED: "AUTO_MANAGED";
  readonly DISABLED: "DISABLED";
  readonly MANUAL: "MANUAL";
};
export type ManagementType =
  (typeof ManagementType)[keyof typeof ManagementType];
export interface CoverageEc2InstanceDetails {
  InstanceId?: string;
  InstanceType?: string;
  ClusterArn?: string;
  AgentDetails?: AgentDetails;
  ManagementType?: ManagementType;
}
export interface FargateDetails {
  Issues?: string[];
  ManagementType?: ManagementType;
}
export interface CoverageEcsClusterDetails {
  ClusterName?: string;
  FargateDetails?: FargateDetails;
  ContainerInstanceDetails?: ContainerInstanceDetails;
}
export interface CoverageEksClusterDetails {
  ClusterName?: string;
  CoveredNodes?: number;
  CompatibleNodes?: number;
  AddonDetails?: AddonDetails;
  ManagementType?: ManagementType;
}
export interface CoverageFilterCondition {
  Equals?: string[];
  NotEquals?: string[];
}
export declare const CoverageFilterCriterionKey: {
  readonly ACCOUNT_ID: "ACCOUNT_ID";
  readonly ADDON_VERSION: "ADDON_VERSION";
  readonly AGENT_VERSION: "AGENT_VERSION";
  readonly CLUSTER_ARN: "CLUSTER_ARN";
  readonly CLUSTER_NAME: "CLUSTER_NAME";
  readonly COVERAGE_STATUS: "COVERAGE_STATUS";
  readonly ECS_CLUSTER_NAME: "ECS_CLUSTER_NAME";
  readonly EKS_CLUSTER_NAME: "EKS_CLUSTER_NAME";
  readonly INSTANCE_ID: "INSTANCE_ID";
  readonly MANAGEMENT_TYPE: "MANAGEMENT_TYPE";
  readonly RESOURCE_TYPE: "RESOURCE_TYPE";
};
export type CoverageFilterCriterionKey =
  (typeof CoverageFilterCriterionKey)[keyof typeof CoverageFilterCriterionKey];
export interface CoverageFilterCriterion {
  CriterionKey?: CoverageFilterCriterionKey;
  FilterCondition?: CoverageFilterCondition;
}
export interface CoverageFilterCriteria {
  FilterCriterion?: CoverageFilterCriterion[];
}
export interface CoverageResourceDetails {
  EksClusterDetails?: CoverageEksClusterDetails;
  ResourceType?: ResourceType;
  EcsClusterDetails?: CoverageEcsClusterDetails;
  Ec2InstanceDetails?: CoverageEc2InstanceDetails;
}
export interface CoverageResource {
  ResourceId?: string;
  DetectorId?: string;
  AccountId?: string;
  ResourceDetails?: CoverageResourceDetails;
  CoverageStatus?: CoverageStatus;
  Issue?: string;
  UpdatedAt?: Date;
}
export declare const CoverageSortKey: {
  readonly ACCOUNT_ID: "ACCOUNT_ID";
  readonly ADDON_VERSION: "ADDON_VERSION";
  readonly CLUSTER_NAME: "CLUSTER_NAME";
  readonly COVERAGE_STATUS: "COVERAGE_STATUS";
  readonly ECS_CLUSTER_NAME: "ECS_CLUSTER_NAME";
  readonly EKS_CLUSTER_NAME: "EKS_CLUSTER_NAME";
  readonly INSTANCE_ID: "INSTANCE_ID";
  readonly ISSUE: "ISSUE";
  readonly UPDATED_AT: "UPDATED_AT";
};
export type CoverageSortKey =
  (typeof CoverageSortKey)[keyof typeof CoverageSortKey];
export declare const OrderBy: {
  readonly ASC: "ASC";
  readonly DESC: "DESC";
};
export type OrderBy = (typeof OrderBy)[keyof typeof OrderBy];
export interface CoverageSortCriteria {
  AttributeName?: CoverageSortKey;
  OrderBy?: OrderBy;
}
export interface CoverageStatistics {
  CountByResourceType?: Partial<Record<ResourceType, number>>;
  CountByCoverageStatus?: Partial<Record<CoverageStatus, number>>;
}
export declare const CoverageStatisticsType: {
  readonly COUNT_BY_COVERAGE_STATUS: "COUNT_BY_COVERAGE_STATUS";
  readonly COUNT_BY_RESOURCE_TYPE: "COUNT_BY_RESOURCE_TYPE";
};
export type CoverageStatisticsType =
  (typeof CoverageStatisticsType)[keyof typeof CoverageStatisticsType];
export interface KubernetesAuditLogsConfiguration {
  Enable: boolean | undefined;
}
export interface KubernetesConfiguration {
  AuditLogs: KubernetesAuditLogsConfiguration | undefined;
}
export interface ScanEc2InstanceWithFindings {
  EbsVolumes?: boolean;
}
export interface MalwareProtectionConfiguration {
  ScanEc2InstanceWithFindings?: ScanEc2InstanceWithFindings;
}
export interface S3LogsConfiguration {
  Enable: boolean | undefined;
}
export interface DataSourceConfigurations {
  S3Logs?: S3LogsConfiguration;
  Kubernetes?: KubernetesConfiguration;
  MalwareProtection?: MalwareProtectionConfiguration;
}
export declare const FeatureAdditionalConfiguration: {
  readonly EC2_AGENT_MANAGEMENT: "EC2_AGENT_MANAGEMENT";
  readonly ECS_FARGATE_AGENT_MANAGEMENT: "ECS_FARGATE_AGENT_MANAGEMENT";
  readonly EKS_ADDON_MANAGEMENT: "EKS_ADDON_MANAGEMENT";
};
export type FeatureAdditionalConfiguration =
  (typeof FeatureAdditionalConfiguration)[keyof typeof FeatureAdditionalConfiguration];
export declare const FeatureStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type FeatureStatus = (typeof FeatureStatus)[keyof typeof FeatureStatus];
export interface DetectorAdditionalConfiguration {
  Name?: FeatureAdditionalConfiguration;
  Status?: FeatureStatus;
}
export declare const DetectorFeature: {
  readonly EBS_MALWARE_PROTECTION: "EBS_MALWARE_PROTECTION";
  readonly EKS_AUDIT_LOGS: "EKS_AUDIT_LOGS";
  readonly EKS_RUNTIME_MONITORING: "EKS_RUNTIME_MONITORING";
  readonly LAMBDA_NETWORK_LOGS: "LAMBDA_NETWORK_LOGS";
  readonly RDS_LOGIN_EVENTS: "RDS_LOGIN_EVENTS";
  readonly RUNTIME_MONITORING: "RUNTIME_MONITORING";
  readonly S3_DATA_EVENTS: "S3_DATA_EVENTS";
};
export type DetectorFeature =
  (typeof DetectorFeature)[keyof typeof DetectorFeature];
export interface DetectorFeatureConfiguration {
  Name?: DetectorFeature;
  Status?: FeatureStatus;
  AdditionalConfiguration?: DetectorAdditionalConfiguration[];
}
export declare const FindingPublishingFrequency: {
  readonly FIFTEEN_MINUTES: "FIFTEEN_MINUTES";
  readonly ONE_HOUR: "ONE_HOUR";
  readonly SIX_HOURS: "SIX_HOURS";
};
export type FindingPublishingFrequency =
  (typeof FindingPublishingFrequency)[keyof typeof FindingPublishingFrequency];
export interface CreateDetectorRequest {
  Enable: boolean | undefined;
  ClientToken?: string;
  FindingPublishingFrequency?: FindingPublishingFrequency;
  DataSources?: DataSourceConfigurations;
  Tags?: Record<string, string>;
  Features?: DetectorFeatureConfiguration[];
}
export interface EbsVolumesResult {
  Status?: DataSourceStatus;
  Reason?: string;
}
export interface ScanEc2InstanceWithFindingsResult {
  EbsVolumes?: EbsVolumesResult;
}
export interface MalwareProtectionConfigurationResult {
  ScanEc2InstanceWithFindings?: ScanEc2InstanceWithFindingsResult;
  ServiceRole?: string;
}
export interface UnprocessedDataSourcesResult {
  MalwareProtection?: MalwareProtectionConfigurationResult;
}
export interface CreateDetectorResponse {
  DetectorId?: string;
  UnprocessedDataSources?: UnprocessedDataSourcesResult;
}
export declare const FilterAction: {
  readonly ARCHIVE: "ARCHIVE";
  readonly NOOP: "NOOP";
};
export type FilterAction = (typeof FilterAction)[keyof typeof FilterAction];
export interface FindingCriteria {
  Criterion?: Record<string, Condition>;
}
export interface CreateFilterRequest {
  DetectorId: string | undefined;
  Name: string | undefined;
  Description?: string;
  Action?: FilterAction;
  Rank?: number;
  FindingCriteria: FindingCriteria | undefined;
  ClientToken?: string;
  Tags?: Record<string, string>;
}
export interface CreateFilterResponse {
  Name: string | undefined;
}
export declare const IpSetFormat: {
  readonly ALIEN_VAULT: "ALIEN_VAULT";
  readonly FIRE_EYE: "FIRE_EYE";
  readonly OTX_CSV: "OTX_CSV";
  readonly PROOF_POINT: "PROOF_POINT";
  readonly STIX: "STIX";
  readonly TXT: "TXT";
};
export type IpSetFormat = (typeof IpSetFormat)[keyof typeof IpSetFormat];
export interface CreateIPSetRequest {
  DetectorId: string | undefined;
  Name: string | undefined;
  Format: IpSetFormat | undefined;
  Location: string | undefined;
  Activate: boolean | undefined;
  ClientToken?: string;
  Tags?: Record<string, string>;
}
export interface CreateIPSetResponse {
  IpSetId: string | undefined;
}
export interface CreateMembersRequest {
  DetectorId: string | undefined;
  AccountDetails: AccountDetail[] | undefined;
}
export interface UnprocessedAccount {
  AccountId: string | undefined;
  Result: string | undefined;
}
export interface CreateMembersResponse {
  UnprocessedAccounts: UnprocessedAccount[] | undefined;
}
export interface DestinationProperties {
  DestinationArn?: string;
  KmsKeyArn?: string;
}
export declare const DestinationType: {
  readonly S3: "S3";
};
export type DestinationType =
  (typeof DestinationType)[keyof typeof DestinationType];
export interface CreatePublishingDestinationRequest {
  DetectorId: string | undefined;
  DestinationType: DestinationType | undefined;
  DestinationProperties: DestinationProperties | undefined;
  ClientToken?: string;
}
export interface CreatePublishingDestinationResponse {
  DestinationId: string | undefined;
}
export interface CreateSampleFindingsRequest {
  DetectorId: string | undefined;
  FindingTypes?: string[];
}
export interface CreateSampleFindingsResponse {}
export declare const ThreatIntelSetFormat: {
  readonly ALIEN_VAULT: "ALIEN_VAULT";
  readonly FIRE_EYE: "FIRE_EYE";
  readonly OTX_CSV: "OTX_CSV";
  readonly PROOF_POINT: "PROOF_POINT";
  readonly STIX: "STIX";
  readonly TXT: "TXT";
};
export type ThreatIntelSetFormat =
  (typeof ThreatIntelSetFormat)[keyof typeof ThreatIntelSetFormat];
export interface CreateThreatIntelSetRequest {
  DetectorId: string | undefined;
  Name: string | undefined;
  Format: ThreatIntelSetFormat | undefined;
  Location: string | undefined;
  Activate: boolean | undefined;
  ClientToken?: string;
  Tags?: Record<string, string>;
}
export interface CreateThreatIntelSetResponse {
  ThreatIntelSetId: string | undefined;
}
export declare const CriterionKey: {
  readonly ACCOUNT_ID: "ACCOUNT_ID";
  readonly EC2_INSTANCE_ARN: "EC2_INSTANCE_ARN";
  readonly GUARDDUTY_FINDING_ID: "GUARDDUTY_FINDING_ID";
  readonly SCAN_ID: "SCAN_ID";
  readonly SCAN_START_TIME: "SCAN_START_TIME";
  readonly SCAN_STATUS: "SCAN_STATUS";
  readonly SCAN_TYPE: "SCAN_TYPE";
};
export type CriterionKey = (typeof CriterionKey)[keyof typeof CriterionKey];
export declare const DataSource: {
  readonly CLOUD_TRAIL: "CLOUD_TRAIL";
  readonly DNS_LOGS: "DNS_LOGS";
  readonly EC2_MALWARE_SCAN: "EC2_MALWARE_SCAN";
  readonly FLOW_LOGS: "FLOW_LOGS";
  readonly KUBERNETES_AUDIT_LOGS: "KUBERNETES_AUDIT_LOGS";
  readonly S3_LOGS: "S3_LOGS";
};
export type DataSource = (typeof DataSource)[keyof typeof DataSource];
export interface DNSLogsConfigurationResult {
  Status: DataSourceStatus | undefined;
}
export interface FlowLogsConfigurationResult {
  Status: DataSourceStatus | undefined;
}
export interface KubernetesAuditLogsConfigurationResult {
  Status: DataSourceStatus | undefined;
}
export interface KubernetesConfigurationResult {
  AuditLogs: KubernetesAuditLogsConfigurationResult | undefined;
}
export interface S3LogsConfigurationResult {
  Status: DataSourceStatus | undefined;
}
export interface DataSourceConfigurationsResult {
  CloudTrail: CloudTrailConfigurationResult | undefined;
  DNSLogs: DNSLogsConfigurationResult | undefined;
  FlowLogs: FlowLogsConfigurationResult | undefined;
  S3Logs: S3LogsConfigurationResult | undefined;
  Kubernetes?: KubernetesConfigurationResult;
  MalwareProtection?: MalwareProtectionConfigurationResult;
}
export interface DeclineInvitationsRequest {
  AccountIds: string[] | undefined;
}
export interface DeclineInvitationsResponse {
  UnprocessedAccounts: UnprocessedAccount[] | undefined;
}
export interface DefaultServerSideEncryption {
  EncryptionType?: string;
  KmsMasterKeyArn?: string;
}
export interface DeleteDetectorRequest {
  DetectorId: string | undefined;
}
export interface DeleteDetectorResponse {}
export interface DeleteFilterRequest {
  DetectorId: string | undefined;
  FilterName: string | undefined;
}
export interface DeleteFilterResponse {}
export interface DeleteInvitationsRequest {
  AccountIds: string[] | undefined;
}
export interface DeleteInvitationsResponse {
  UnprocessedAccounts: UnprocessedAccount[] | undefined;
}
export interface DeleteIPSetRequest {
  DetectorId: string | undefined;
  IpSetId: string | undefined;
}
export interface DeleteIPSetResponse {}
export interface DeleteMembersRequest {
  DetectorId: string | undefined;
  AccountIds: string[] | undefined;
}
export interface DeleteMembersResponse {
  UnprocessedAccounts: UnprocessedAccount[] | undefined;
}
export interface DeletePublishingDestinationRequest {
  DetectorId: string | undefined;
  DestinationId: string | undefined;
}
export interface DeletePublishingDestinationResponse {}
export interface DeleteThreatIntelSetRequest {
  DetectorId: string | undefined;
  ThreatIntelSetId: string | undefined;
}
export interface DeleteThreatIntelSetResponse {}
export interface FilterCondition {
  EqualsValue?: string;
  GreaterThan?: number;
  LessThan?: number;
}
export interface FilterCriterion {
  CriterionKey?: CriterionKey;
  FilterCondition?: FilterCondition;
}
export interface FilterCriteria {
  FilterCriterion?: FilterCriterion[];
}
export interface SortCriteria {
  AttributeName?: string;
  OrderBy?: OrderBy;
}
export interface DescribeMalwareScansRequest {
  DetectorId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  FilterCriteria?: FilterCriteria;
  SortCriteria?: SortCriteria;
}
export interface VolumeDetail {
  VolumeArn?: string;
  VolumeType?: string;
  DeviceName?: string;
  VolumeSizeInGB?: number;
  EncryptionType?: string;
  SnapshotArn?: string;
  KmsKeyArn?: string;
}
export interface ResourceDetails {
  InstanceArn?: string;
}
export declare const ScanResult: {
  readonly CLEAN: "CLEAN";
  readonly INFECTED: "INFECTED";
};
export type ScanResult = (typeof ScanResult)[keyof typeof ScanResult];
export interface ScanResultDetails {
  ScanResult?: ScanResult;
}
export declare const ScanStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly RUNNING: "RUNNING";
  readonly SKIPPED: "SKIPPED";
};
export type ScanStatus = (typeof ScanStatus)[keyof typeof ScanStatus];
export declare const ScanType: {
  readonly GUARDDUTY_INITIATED: "GUARDDUTY_INITIATED";
  readonly ON_DEMAND: "ON_DEMAND";
};
export type ScanType = (typeof ScanType)[keyof typeof ScanType];
export interface TriggerDetails {
  GuardDutyFindingId?: string;
  Description?: string;
}
export interface Scan {
  DetectorId?: string;
  AdminDetectorId?: string;
  ScanId?: string;
  ScanStatus?: ScanStatus;
  FailureReason?: string;
  ScanStartTime?: Date;
  ScanEndTime?: Date;
  TriggerDetails?: TriggerDetails;
  ResourceDetails?: ResourceDetails;
  ScanResultDetails?: ScanResultDetails;
  AccountId?: string;
  TotalBytes?: number;
  FileCount?: number;
  AttachedVolumes?: VolumeDetail[];
  ScanType?: ScanType;
}
export interface DescribeMalwareScansResponse {
  Scans: Scan[] | undefined;
  NextToken?: string;
}
export interface DescribeOrganizationConfigurationRequest {
  DetectorId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface OrganizationKubernetesAuditLogsConfigurationResult {
  AutoEnable: boolean | undefined;
}
export interface OrganizationKubernetesConfigurationResult {
  AuditLogs: OrganizationKubernetesAuditLogsConfigurationResult | undefined;
}
export interface OrganizationEbsVolumesResult {
  AutoEnable?: boolean;
}
export interface OrganizationScanEc2InstanceWithFindingsResult {
  EbsVolumes?: OrganizationEbsVolumesResult;
}
export interface OrganizationMalwareProtectionConfigurationResult {
  ScanEc2InstanceWithFindings?: OrganizationScanEc2InstanceWithFindingsResult;
}
export interface OrganizationS3LogsConfigurationResult {
  AutoEnable: boolean | undefined;
}
export interface OrganizationDataSourceConfigurationsResult {
  S3Logs: OrganizationS3LogsConfigurationResult | undefined;
  Kubernetes?: OrganizationKubernetesConfigurationResult;
  MalwareProtection?: OrganizationMalwareProtectionConfigurationResult;
}
export declare const OrgFeatureStatus: {
  readonly ALL: "ALL";
  readonly NEW: "NEW";
  readonly NONE: "NONE";
};
export type OrgFeatureStatus =
  (typeof OrgFeatureStatus)[keyof typeof OrgFeatureStatus];
export declare const OrgFeatureAdditionalConfiguration: {
  readonly EC2_AGENT_MANAGEMENT: "EC2_AGENT_MANAGEMENT";
  readonly ECS_FARGATE_AGENT_MANAGEMENT: "ECS_FARGATE_AGENT_MANAGEMENT";
  readonly EKS_ADDON_MANAGEMENT: "EKS_ADDON_MANAGEMENT";
};
export type OrgFeatureAdditionalConfiguration =
  (typeof OrgFeatureAdditionalConfiguration)[keyof typeof OrgFeatureAdditionalConfiguration];
export interface OrganizationAdditionalConfigurationResult {
  Name?: OrgFeatureAdditionalConfiguration;
  AutoEnable?: OrgFeatureStatus;
}
export declare const OrgFeature: {
  readonly EBS_MALWARE_PROTECTION: "EBS_MALWARE_PROTECTION";
  readonly EKS_AUDIT_LOGS: "EKS_AUDIT_LOGS";
  readonly EKS_RUNTIME_MONITORING: "EKS_RUNTIME_MONITORING";
  readonly LAMBDA_NETWORK_LOGS: "LAMBDA_NETWORK_LOGS";
  readonly RDS_LOGIN_EVENTS: "RDS_LOGIN_EVENTS";
  readonly RUNTIME_MONITORING: "RUNTIME_MONITORING";
  readonly S3_DATA_EVENTS: "S3_DATA_EVENTS";
};
export type OrgFeature = (typeof OrgFeature)[keyof typeof OrgFeature];
export interface OrganizationFeatureConfigurationResult {
  Name?: OrgFeature;
  AutoEnable?: OrgFeatureStatus;
  AdditionalConfiguration?: OrganizationAdditionalConfigurationResult[];
}
export interface DescribeOrganizationConfigurationResponse {
  AutoEnable?: boolean;
  MemberAccountLimitReached: boolean | undefined;
  DataSources?: OrganizationDataSourceConfigurationsResult;
  Features?: OrganizationFeatureConfigurationResult[];
  NextToken?: string;
  AutoEnableOrganizationMembers?: AutoEnableMembers;
}
export interface DescribePublishingDestinationRequest {
  DetectorId: string | undefined;
  DestinationId: string | undefined;
}
export declare const PublishingStatus: {
  readonly PENDING_VERIFICATION: "PENDING_VERIFICATION";
  readonly PUBLISHING: "PUBLISHING";
  readonly STOPPED: "STOPPED";
  readonly UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY: "UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY";
};
export type PublishingStatus =
  (typeof PublishingStatus)[keyof typeof PublishingStatus];
export interface DescribePublishingDestinationResponse {
  DestinationId: string | undefined;
  DestinationType: DestinationType | undefined;
  Status: PublishingStatus | undefined;
  PublishingFailureStartTimestamp: number | undefined;
  DestinationProperties: DestinationProperties | undefined;
}
export interface Destination {
  DestinationId: string | undefined;
  DestinationType: DestinationType | undefined;
  Status: PublishingStatus | undefined;
}
export interface Detection {
  Anomaly?: Anomaly;
}
export interface DetectorAdditionalConfigurationResult {
  Name?: FeatureAdditionalConfiguration;
  Status?: FeatureStatus;
  UpdatedAt?: Date;
}
export declare const DetectorFeatureResult: {
  readonly CLOUD_TRAIL: "CLOUD_TRAIL";
  readonly DNS_LOGS: "DNS_LOGS";
  readonly EBS_MALWARE_PROTECTION: "EBS_MALWARE_PROTECTION";
  readonly EKS_AUDIT_LOGS: "EKS_AUDIT_LOGS";
  readonly EKS_RUNTIME_MONITORING: "EKS_RUNTIME_MONITORING";
  readonly FLOW_LOGS: "FLOW_LOGS";
  readonly LAMBDA_NETWORK_LOGS: "LAMBDA_NETWORK_LOGS";
  readonly RDS_LOGIN_EVENTS: "RDS_LOGIN_EVENTS";
  readonly RUNTIME_MONITORING: "RUNTIME_MONITORING";
  readonly S3_DATA_EVENTS: "S3_DATA_EVENTS";
};
export type DetectorFeatureResult =
  (typeof DetectorFeatureResult)[keyof typeof DetectorFeatureResult];
export interface DetectorFeatureConfigurationResult {
  Name?: DetectorFeatureResult;
  Status?: FeatureStatus;
  UpdatedAt?: Date;
  AdditionalConfiguration?: DetectorAdditionalConfigurationResult[];
}
export declare const DetectorStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type DetectorStatus =
  (typeof DetectorStatus)[keyof typeof DetectorStatus];
export interface DisableOrganizationAdminAccountRequest {
  AdminAccountId: string | undefined;
}
export interface DisableOrganizationAdminAccountResponse {}
export interface DisassociateFromAdministratorAccountRequest {
  DetectorId: string | undefined;
}
export interface DisassociateFromAdministratorAccountResponse {}
export interface DisassociateFromMasterAccountRequest {
  DetectorId: string | undefined;
}
export interface DisassociateFromMasterAccountResponse {}
export interface DisassociateMembersRequest {
  DetectorId: string | undefined;
  AccountIds: string[] | undefined;
}
export interface DisassociateMembersResponse {
  UnprocessedAccounts: UnprocessedAccount[] | undefined;
}
export declare const EbsSnapshotPreservation: {
  readonly NO_RETENTION: "NO_RETENTION";
  readonly RETENTION_WITH_FINDING: "RETENTION_WITH_FINDING";
};
export type EbsSnapshotPreservation =
  (typeof EbsSnapshotPreservation)[keyof typeof EbsSnapshotPreservation];
export interface EbsVolumeDetails {
  ScannedVolumeDetails?: VolumeDetail[];
  SkippedVolumeDetails?: VolumeDetail[];
}
export interface HighestSeverityThreatDetails {
  Severity?: string;
  ThreatName?: string;
  Count?: number;
}
export interface ScannedItemCount {
  TotalGb?: number;
  Files?: number;
  Volumes?: number;
}
export interface ScanFilePath {
  FilePath?: string;
  VolumeArn?: string;
  Hash?: string;
  FileName?: string;
}
export interface ScanThreatName {
  Name?: string;
  Severity?: string;
  ItemCount?: number;
  FilePaths?: ScanFilePath[];
}
export interface ThreatDetectedByName {
  ItemCount?: number;
  UniqueThreatNameCount?: number;
  Shortened?: boolean;
  ThreatNames?: ScanThreatName[];
}
export interface ThreatsDetectedItemCount {
  Files?: number;
}
export interface ScanDetections {
  ScannedItemCount?: ScannedItemCount;
  ThreatsDetectedItemCount?: ThreatsDetectedItemCount;
  HighestSeverityThreatDetails?: HighestSeverityThreatDetails;
  ThreatDetectedByName?: ThreatDetectedByName;
}
export interface EbsVolumeScanDetails {
  ScanId?: string;
  ScanStartedAt?: Date;
  ScanCompletedAt?: Date;
  TriggerFindingId?: string;
  Sources?: string[];
  ScanDetections?: ScanDetections;
  ScanType?: ScanType;
}
export interface Tag {
  Key?: string;
  Value?: string;
}
export interface HostPath {
  Path?: string;
}
export interface Volume {
  Name?: string;
  HostPath?: HostPath;
}
export interface EcsTaskDetails {
  Arn?: string;
  DefinitionArn?: string;
  Version?: string;
  TaskCreatedAt?: Date;
  StartedAt?: Date;
  StartedBy?: string;
  Tags?: Tag[];
  Volumes?: Volume[];
  Containers?: Container[];
  Group?: string;
}
export interface EcsClusterDetails {
  Name?: string;
  Arn?: string;
  Status?: string;
  ActiveServicesCount?: number;
  RegisteredContainerInstancesCount?: number;
  RunningTasksCount?: number;
  Tags?: Tag[];
  TaskDetails?: EcsTaskDetails;
}
export interface EksClusterDetails {
  Name?: string;
  Arn?: string;
  VpcId?: string;
  Status?: string;
  Tags?: Tag[];
  CreatedAt?: Date;
}
export interface EnableOrganizationAdminAccountRequest {
  AdminAccountId: string | undefined;
}
export interface EnableOrganizationAdminAccountResponse {}
export interface ThreatIntelligenceDetail {
  ThreatListName?: string;
  ThreatNames?: string[];
  ThreatFileSha256?: string;
}
export interface Evidence {
  ThreatIntelligenceDetails?: ThreatIntelligenceDetail[];
}
export declare const Feedback: {
  readonly NOT_USEFUL: "NOT_USEFUL";
  readonly USEFUL: "USEFUL";
};
export type Feedback = (typeof Feedback)[keyof typeof Feedback];
export interface IamInstanceProfile {
  Arn?: string;
  Id?: string;
}
export interface PrivateIpAddressDetails {
  PrivateDnsName?: string;
  PrivateIpAddress?: string;
}
export interface SecurityGroup {
  GroupId?: string;
  GroupName?: string;
}
export interface NetworkInterface {
  Ipv6Addresses?: string[];
  NetworkInterfaceId?: string;
  PrivateDnsName?: string;
  PrivateIpAddress?: string;
  PrivateIpAddresses?: PrivateIpAddressDetails[];
  PublicDnsName?: string;
  PublicIp?: string;
  SecurityGroups?: SecurityGroup[];
  SubnetId?: string;
  VpcId?: string;
}
export interface ProductCode {
  Code?: string;
  ProductType?: string;
}
export interface InstanceDetails {
  AvailabilityZone?: string;
  IamInstanceProfile?: IamInstanceProfile;
  ImageDescription?: string;
  ImageId?: string;
  InstanceId?: string;
  InstanceState?: string;
  InstanceType?: string;
  OutpostArn?: string;
  LaunchTime?: string;
  NetworkInterfaces?: NetworkInterface[];
  Platform?: string;
  ProductCodes?: ProductCode[];
  Tags?: Tag[];
}
export interface ImpersonatedUser {
  Username?: string;
  Groups?: string[];
}
export interface KubernetesUserDetails {
  Username?: string;
  Uid?: string;
  Groups?: string[];
  SessionName?: string[];
  ImpersonatedUser?: ImpersonatedUser;
}
export interface KubernetesWorkloadDetails {
  Name?: string;
  Type?: string;
  Uid?: string;
  Namespace?: string;
  HostNetwork?: boolean;
  Containers?: Container[];
  Volumes?: Volume[];
  ServiceAccountName?: string;
  HostIPC?: boolean;
  HostPID?: boolean;
}
export interface KubernetesDetails {
  KubernetesUserDetails?: KubernetesUserDetails;
  KubernetesWorkloadDetails?: KubernetesWorkloadDetails;
}
export interface VpcConfig {
  SubnetIds?: string[];
  VpcId?: string;
  SecurityGroups?: SecurityGroup[];
}
export interface LambdaDetails {
  FunctionArn?: string;
  FunctionName?: string;
  Description?: string;
  LastModifiedAt?: Date;
  RevisionId?: string;
  FunctionVersion?: string;
  Role?: string;
  VpcConfig?: VpcConfig;
  Tags?: Tag[];
}
export interface RdsDbInstanceDetails {
  DbInstanceIdentifier?: string;
  Engine?: string;
  EngineVersion?: string;
  DbClusterIdentifier?: string;
  DbInstanceArn?: string;
  Tags?: Tag[];
}
export interface RdsDbUserDetails {
  User?: string;
  Application?: string;
  Database?: string;
  Ssl?: string;
  AuthMethod?: string;
}
export interface Owner {
  Id?: string;
}
export interface PermissionConfiguration {
  BucketLevelPermissions?: BucketLevelPermissions;
  AccountLevelPermissions?: AccountLevelPermissions;
}
export interface PublicAccess {
  PermissionConfiguration?: PermissionConfiguration;
  EffectivePermission?: string;
}
export interface S3BucketDetail {
  Arn?: string;
  Name?: string;
  Type?: string;
  CreatedAt?: Date;
  Owner?: Owner;
  Tags?: Tag[];
  DefaultServerSideEncryption?: DefaultServerSideEncryption;
  PublicAccess?: PublicAccess;
}
export interface Resource {
  AccessKeyDetails?: AccessKeyDetails;
  S3BucketDetails?: S3BucketDetail[];
  InstanceDetails?: InstanceDetails;
  EksClusterDetails?: EksClusterDetails;
  KubernetesDetails?: KubernetesDetails;
  ResourceType?: string;
  EbsVolumeDetails?: EbsVolumeDetails;
  EcsClusterDetails?: EcsClusterDetails;
  ContainerDetails?: Container;
  RdsDbInstanceDetails?: RdsDbInstanceDetails;
  RdsDbUserDetails?: RdsDbUserDetails;
  LambdaDetails?: LambdaDetails;
}
export interface ServiceAdditionalInfo {
  Value?: string;
  Type?: string;
}
export interface LineageObject {
  StartTime?: Date;
  NamespacePid?: number;
  UserId?: number;
  Name?: string;
  Pid?: number;
  Uuid?: string;
  ExecutablePath?: string;
  Euid?: number;
  ParentUuid?: string;
}
export interface ProcessDetails {
  Name?: string;
  ExecutablePath?: string;
  ExecutableSha256?: string;
  NamespacePid?: number;
  Pwd?: string;
  Pid?: number;
  StartTime?: Date;
  Uuid?: string;
  ParentUuid?: string;
  User?: string;
  UserId?: number;
  Euid?: number;
  Lineage?: LineageObject[];
}
export interface RuntimeContext {
  ModifyingProcess?: ProcessDetails;
  ModifiedAt?: Date;
  ScriptPath?: string;
  LibraryPath?: string;
  LdPreloadValue?: string;
  SocketPath?: string;
  RuncBinaryPath?: string;
  ReleaseAgentPath?: string;
  MountSource?: string;
  MountTarget?: string;
  FileSystemType?: string;
  Flags?: string[];
  ModuleName?: string;
  ModuleFilePath?: string;
  ModuleSha256?: string;
  ShellHistoryFilePath?: string;
  TargetProcess?: ProcessDetails;
  AddressFamily?: string;
  IanaProtocolNumber?: number;
  MemoryRegions?: string[];
  ToolName?: string;
  ToolCategory?: string;
  ServiceName?: string;
  CommandLineExample?: string;
  ThreatFilePath?: string;
}
export interface RuntimeDetails {
  Process?: ProcessDetails;
  Context?: RuntimeContext;
}
export interface Service {
  Action?: Action;
  Evidence?: Evidence;
  Archived?: boolean;
  Count?: number;
  DetectorId?: string;
  EventFirstSeen?: string;
  EventLastSeen?: string;
  ResourceRole?: string;
  ServiceName?: string;
  UserFeedback?: string;
  AdditionalInfo?: ServiceAdditionalInfo;
  FeatureName?: string;
  EbsVolumeScanDetails?: EbsVolumeScanDetails;
  RuntimeDetails?: RuntimeDetails;
  Detection?: Detection;
}
export interface Finding {
  AccountId: string | undefined;
  Arn: string | undefined;
  Confidence?: number;
  CreatedAt: string | undefined;
  Description?: string;
  Id: string | undefined;
  Partition?: string;
  Region: string | undefined;
  Resource: Resource | undefined;
  SchemaVersion: string | undefined;
  Service?: Service;
  Severity: number | undefined;
  Title?: string;
  Type: string | undefined;
  UpdatedAt: string | undefined;
}
export interface FindingStatistics {
  CountBySeverity?: Record<string, number>;
}
export declare const FindingStatisticType: {
  readonly COUNT_BY_SEVERITY: "COUNT_BY_SEVERITY";
};
export type FindingStatisticType =
  (typeof FindingStatisticType)[keyof typeof FindingStatisticType];
export interface GetAdministratorAccountRequest {
  DetectorId: string | undefined;
}
export interface GetAdministratorAccountResponse {
  Administrator: Administrator | undefined;
}
export interface GetCoverageStatisticsRequest {
  DetectorId: string | undefined;
  FilterCriteria?: CoverageFilterCriteria;
  StatisticsType: CoverageStatisticsType[] | undefined;
}
export interface GetCoverageStatisticsResponse {
  CoverageStatistics?: CoverageStatistics;
}
export interface GetDetectorRequest {
  DetectorId: string | undefined;
}
export interface GetDetectorResponse {
  CreatedAt?: string;
  FindingPublishingFrequency?: FindingPublishingFrequency;
  ServiceRole: string | undefined;
  Status: DetectorStatus | undefined;
  UpdatedAt?: string;
  DataSources?: DataSourceConfigurationsResult;
  Tags?: Record<string, string>;
  Features?: DetectorFeatureConfigurationResult[];
}
export interface GetFilterRequest {
  DetectorId: string | undefined;
  FilterName: string | undefined;
}
export interface GetFilterResponse {
  Name: string | undefined;
  Description?: string;
  Action: FilterAction | undefined;
  Rank?: number;
  FindingCriteria: FindingCriteria | undefined;
  Tags?: Record<string, string>;
}
export interface GetFindingsRequest {
  DetectorId: string | undefined;
  FindingIds: string[] | undefined;
  SortCriteria?: SortCriteria;
}
export interface GetFindingsResponse {
  Findings: Finding[] | undefined;
}
export interface GetFindingsStatisticsRequest {
  DetectorId: string | undefined;
  FindingStatisticTypes: FindingStatisticType[] | undefined;
  FindingCriteria?: FindingCriteria;
}
export interface GetFindingsStatisticsResponse {
  FindingStatistics: FindingStatistics | undefined;
}
export interface GetInvitationsCountRequest {}
export interface GetInvitationsCountResponse {
  InvitationsCount?: number;
}
export interface GetIPSetRequest {
  DetectorId: string | undefined;
  IpSetId: string | undefined;
}
export declare const IpSetStatus: {
  readonly ACTIVATING: "ACTIVATING";
  readonly ACTIVE: "ACTIVE";
  readonly DEACTIVATING: "DEACTIVATING";
  readonly DELETED: "DELETED";
  readonly DELETE_PENDING: "DELETE_PENDING";
  readonly ERROR: "ERROR";
  readonly INACTIVE: "INACTIVE";
};
export type IpSetStatus = (typeof IpSetStatus)[keyof typeof IpSetStatus];
export interface GetIPSetResponse {
  Name: string | undefined;
  Format: IpSetFormat | undefined;
  Location: string | undefined;
  Status: IpSetStatus | undefined;
  Tags?: Record<string, string>;
}
export interface GetMalwareScanSettingsRequest {
  DetectorId: string | undefined;
}
export declare const ScanCriterionKey: {
  readonly EC2_INSTANCE_TAG: "EC2_INSTANCE_TAG";
};
export type ScanCriterionKey =
  (typeof ScanCriterionKey)[keyof typeof ScanCriterionKey];
export interface ScanConditionPair {
  Key: string | undefined;
  Value?: string;
}
export interface ScanCondition {
  MapEquals: ScanConditionPair[] | undefined;
}
export interface ScanResourceCriteria {
  Include?: Partial<Record<ScanCriterionKey, ScanCondition>>;
  Exclude?: Partial<Record<ScanCriterionKey, ScanCondition>>;
}
export interface GetMalwareScanSettingsResponse {
  ScanResourceCriteria?: ScanResourceCriteria;
  EbsSnapshotPreservation?: EbsSnapshotPreservation;
}
export interface GetMasterAccountRequest {
  DetectorId: string | undefined;
}
export interface Master {
  AccountId?: string;
  InvitationId?: string;
  RelationshipStatus?: string;
  InvitedAt?: string;
}
export interface GetMasterAccountResponse {
  Master: Master | undefined;
}
export interface GetMemberDetectorsRequest {
  DetectorId: string | undefined;
  AccountIds: string[] | undefined;
}
export interface MemberAdditionalConfigurationResult {
  Name?: OrgFeatureAdditionalConfiguration;
  Status?: FeatureStatus;
  UpdatedAt?: Date;
}
export interface MemberFeaturesConfigurationResult {
  Name?: OrgFeature;
  Status?: FeatureStatus;
  UpdatedAt?: Date;
  AdditionalConfiguration?: MemberAdditionalConfigurationResult[];
}
export interface MemberDataSourceConfiguration {
  AccountId: string | undefined;
  DataSources?: DataSourceConfigurationsResult;
  Features?: MemberFeaturesConfigurationResult[];
}
export interface GetMemberDetectorsResponse {
  MemberDataSourceConfigurations: MemberDataSourceConfiguration[] | undefined;
  UnprocessedAccounts: UnprocessedAccount[] | undefined;
}
export interface GetMembersRequest {
  DetectorId: string | undefined;
  AccountIds: string[] | undefined;
}
export interface Member {
  AccountId: string | undefined;
  DetectorId?: string;
  MasterId: string | undefined;
  Email: string | undefined;
  RelationshipStatus: string | undefined;
  InvitedAt?: string;
  UpdatedAt: string | undefined;
  AdministratorId?: string;
}
export interface GetMembersResponse {
  Members: Member[] | undefined;
  UnprocessedAccounts: UnprocessedAccount[] | undefined;
}
export interface OrganizationFeatureStatisticsAdditionalConfiguration {
  Name?: OrgFeatureAdditionalConfiguration;
  EnabledAccountsCount?: number;
}
export interface OrganizationFeatureStatistics {
  Name?: OrgFeature;
  EnabledAccountsCount?: number;
  AdditionalConfiguration?: OrganizationFeatureStatisticsAdditionalConfiguration[];
}
export interface OrganizationStatistics {
  TotalAccountsCount?: number;
  MemberAccountsCount?: number;
  ActiveAccountsCount?: number;
  EnabledAccountsCount?: number;
  CountByFeature?: OrganizationFeatureStatistics[];
}
export interface OrganizationDetails {
  UpdatedAt?: Date;
  OrganizationStatistics?: OrganizationStatistics;
}
export interface GetOrganizationStatisticsResponse {
  OrganizationDetails?: OrganizationDetails;
}
export interface GetRemainingFreeTrialDaysRequest {
  DetectorId: string | undefined;
  AccountIds?: string[];
}
export interface GetRemainingFreeTrialDaysResponse {
  Accounts?: AccountFreeTrialInfo[];
  UnprocessedAccounts?: UnprocessedAccount[];
}
export interface GetThreatIntelSetRequest {
  DetectorId: string | undefined;
  ThreatIntelSetId: string | undefined;
}
export declare const ThreatIntelSetStatus: {
  readonly ACTIVATING: "ACTIVATING";
  readonly ACTIVE: "ACTIVE";
  readonly DEACTIVATING: "DEACTIVATING";
  readonly DELETED: "DELETED";
  readonly DELETE_PENDING: "DELETE_PENDING";
  readonly ERROR: "ERROR";
  readonly INACTIVE: "INACTIVE";
};
export type ThreatIntelSetStatus =
  (typeof ThreatIntelSetStatus)[keyof typeof ThreatIntelSetStatus];
export interface GetThreatIntelSetResponse {
  Name: string | undefined;
  Format: ThreatIntelSetFormat | undefined;
  Location: string | undefined;
  Status: ThreatIntelSetStatus | undefined;
  Tags?: Record<string, string>;
}
export declare const UsageFeature: {
  readonly CLOUD_TRAIL: "CLOUD_TRAIL";
  readonly DNS_LOGS: "DNS_LOGS";
  readonly EBS_MALWARE_PROTECTION: "EBS_MALWARE_PROTECTION";
  readonly EC2_RUNTIME_MONITORING: "EC2_RUNTIME_MONITORING";
  readonly EKS_AUDIT_LOGS: "EKS_AUDIT_LOGS";
  readonly EKS_RUNTIME_MONITORING: "EKS_RUNTIME_MONITORING";
  readonly FARGATE_RUNTIME_MONITORING: "FARGATE_RUNTIME_MONITORING";
  readonly FLOW_LOGS: "FLOW_LOGS";
  readonly LAMBDA_NETWORK_LOGS: "LAMBDA_NETWORK_LOGS";
  readonly RDS_DBI_PROTECTION_PROVISIONED: "RDS_DBI_PROTECTION_PROVISIONED";
  readonly RDS_DBI_PROTECTION_SERVERLESS: "RDS_DBI_PROTECTION_SERVERLESS";
  readonly RDS_LOGIN_EVENTS: "RDS_LOGIN_EVENTS";
  readonly S3_DATA_EVENTS: "S3_DATA_EVENTS";
};
export type UsageFeature = (typeof UsageFeature)[keyof typeof UsageFeature];
export interface UsageCriteria {
  AccountIds?: string[];
  DataSources?: DataSource[];
  Resources?: string[];
  Features?: UsageFeature[];
}
export declare const UsageStatisticType: {
  readonly SUM_BY_ACCOUNT: "SUM_BY_ACCOUNT";
  readonly SUM_BY_DATA_SOURCE: "SUM_BY_DATA_SOURCE";
  readonly SUM_BY_FEATURES: "SUM_BY_FEATURES";
  readonly SUM_BY_RESOURCE: "SUM_BY_RESOURCE";
  readonly TOP_ACCOUNTS_BY_FEATURE: "TOP_ACCOUNTS_BY_FEATURE";
  readonly TOP_RESOURCES: "TOP_RESOURCES";
};
export type UsageStatisticType =
  (typeof UsageStatisticType)[keyof typeof UsageStatisticType];
export interface GetUsageStatisticsRequest {
  DetectorId: string | undefined;
  UsageStatisticType: UsageStatisticType | undefined;
  UsageCriteria: UsageCriteria | undefined;
  Unit?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface Total {
  Amount?: string;
  Unit?: string;
}
export interface UsageAccountResult {
  AccountId?: string;
  Total?: Total;
}
export interface UsageDataSourceResult {
  DataSource?: DataSource;
  Total?: Total;
}
export interface UsageFeatureResult {
  Feature?: UsageFeature;
  Total?: Total;
}
export interface UsageResourceResult {
  Resource?: string;
  Total?: Total;
}
export interface UsageTopAccountResult {
  AccountId?: string;
  Total?: Total;
}
export interface UsageTopAccountsResult {
  Feature?: UsageFeature;
  Accounts?: UsageTopAccountResult[];
}
export interface UsageStatistics {
  SumByAccount?: UsageAccountResult[];
  TopAccountsByFeature?: UsageTopAccountsResult[];
  SumByDataSource?: UsageDataSourceResult[];
  SumByResource?: UsageResourceResult[];
  TopResources?: UsageResourceResult[];
  SumByFeature?: UsageFeatureResult[];
}
export interface GetUsageStatisticsResponse {
  UsageStatistics?: UsageStatistics;
  NextToken?: string;
}
export interface InviteMembersRequest {
  DetectorId: string | undefined;
  AccountIds: string[] | undefined;
  DisableEmailNotification?: boolean;
  Message?: string;
}
export interface InviteMembersResponse {
  UnprocessedAccounts: UnprocessedAccount[] | undefined;
}
export interface ListCoverageRequest {
  DetectorId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  FilterCriteria?: CoverageFilterCriteria;
  SortCriteria?: CoverageSortCriteria;
}
export interface ListCoverageResponse {
  Resources: CoverageResource[] | undefined;
  NextToken?: string;
}
export declare const AccountDetailFilterSensitiveLog: (
  obj: AccountDetail
) => any;
export declare const RemoteIpDetailsFilterSensitiveLog: (
  obj: RemoteIpDetails
) => any;
export declare const AwsApiCallActionFilterSensitiveLog: (
  obj: AwsApiCallAction
) => any;
export declare const KubernetesApiCallActionFilterSensitiveLog: (
  obj: KubernetesApiCallAction
) => any;
export declare const LocalIpDetailsFilterSensitiveLog: (
  obj: LocalIpDetails
) => any;
export declare const NetworkConnectionActionFilterSensitiveLog: (
  obj: NetworkConnectionAction
) => any;
export declare const PortProbeDetailFilterSensitiveLog: (
  obj: PortProbeDetail
) => any;
export declare const PortProbeActionFilterSensitiveLog: (
  obj: PortProbeAction
) => any;
export declare const RdsLoginAttemptActionFilterSensitiveLog: (
  obj: RdsLoginAttemptAction
) => any;
export declare const ActionFilterSensitiveLog: (obj: Action) => any;
export declare const CreateMembersRequestFilterSensitiveLog: (
  obj: CreateMembersRequest
) => any;
export declare const PrivateIpAddressDetailsFilterSensitiveLog: (
  obj: PrivateIpAddressDetails
) => any;
export declare const NetworkInterfaceFilterSensitiveLog: (
  obj: NetworkInterface
) => any;
export declare const InstanceDetailsFilterSensitiveLog: (
  obj: InstanceDetails
) => any;
export declare const ResourceFilterSensitiveLog: (obj: Resource) => any;
export declare const ServiceFilterSensitiveLog: (obj: Service) => any;
export declare const FindingFilterSensitiveLog: (obj: Finding) => any;
export declare const GetFindingsResponseFilterSensitiveLog: (
  obj: GetFindingsResponse
) => any;
export declare const MemberFilterSensitiveLog: (obj: Member) => any;
export declare const GetMembersResponseFilterSensitiveLog: (
  obj: GetMembersResponse
) => any;
