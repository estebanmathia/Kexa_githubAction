import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { CalculatedFieldFilterSensitiveLog, ColumnConfigurationFilterSensitiveLog, ParameterDeclarationFilterSensitiveLog, } from "./models_0";
import { GaugeChartVisualFilterSensitiveLog, HistogramVisualFilterSensitiveLog, InsightVisualFilterSensitiveLog, KPIVisualFilterSensitiveLog, ScatterPlotVisualFilterSensitiveLog, } from "./models_1";
import { QuickSightServiceException as __BaseException } from "./QuickSightServiceException";
export const WordCloudWordPadding = {
    LARGE: "LARGE",
    MEDIUM: "MEDIUM",
    NONE: "NONE",
    SMALL: "SMALL",
};
export const WordCloudWordScaling = {
    EMPHASIZE: "EMPHASIZE",
    NORMAL: "NORMAL",
};
export const AnalysisFilterAttribute = {
    ANALYSIS_NAME: "ANALYSIS_NAME",
    DIRECT_QUICKSIGHT_OWNER: "DIRECT_QUICKSIGHT_OWNER",
    DIRECT_QUICKSIGHT_SOLE_OWNER: "DIRECT_QUICKSIGHT_SOLE_OWNER",
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER: "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
    QUICKSIGHT_OWNER: "QUICKSIGHT_OWNER",
    QUICKSIGHT_USER: "QUICKSIGHT_USER",
    QUICKSIGHT_VIEWER_OR_OWNER: "QUICKSIGHT_VIEWER_OR_OWNER",
};
export const FilterOperator = {
    StringEquals: "StringEquals",
    StringLike: "StringLike",
};
export const SnapshotFileFormatType = {
    CSV: "CSV",
    EXCEL: "EXCEL",
    PDF: "PDF",
};
export const SnapshotFileSheetSelectionScope = {
    ALL_VISUALS: "ALL_VISUALS",
    SELECTED_VISUALS: "SELECTED_VISUALS",
};
export const AssetBundleExportJobAnalysisPropertyToOverride = {
    NAME: "Name",
};
export const AssetBundleExportJobDashboardPropertyToOverride = {
    NAME: "Name",
};
export const AssetBundleExportJobDataSetPropertyToOverride = {
    NAME: "Name",
};
export const AssetBundleExportJobDataSourcePropertyToOverride = {
    CATALOG: "Catalog",
    CLUSTER_ID: "ClusterId",
    DATABASE: "Database",
    DATA_SET_NAME: "DataSetName",
    DISABLE_SSL: "DisableSsl",
    DOMAIN: "Domain",
    HOST: "Host",
    INSTANCE_ID: "InstanceId",
    MANIFEST_FILE_LOCATION: "ManifestFileLocation",
    NAME: "Name",
    PASSWORD: "Password",
    PORT: "Port",
    PRODUCT_TYPE: "ProductType",
    ROLE_ARN: "RoleArn",
    SECRET_ARN: "SecretArn",
    USERNAME: "Username",
    WAREHOUSE: "Warehouse",
    WORK_GROUP: "WorkGroup",
};
export const AssetBundleExportJobRefreshSchedulePropertyToOverride = {
    START_AFTER_DATE_TIME: "StartAfterDateTime",
};
export const AssetBundleExportJobThemePropertyToOverride = {
    NAME: "Name",
};
export const AssetBundleExportJobVPCConnectionPropertyToOverride = {
    DNS_RESOLVERS: "DnsResolvers",
    NAME: "Name",
    ROLE_ARN: "RoleArn",
};
export const AssetBundleExportFormat = {
    CLOUDFORMATION_JSON: "CLOUDFORMATION_JSON",
    QUICKSIGHT_JSON: "QUICKSIGHT_JSON",
};
export const AssetBundleExportJobStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED_FOR_IMMEDIATE_EXECUTION: "QUEUED_FOR_IMMEDIATE_EXECUTION",
    SUCCESSFUL: "SUCCESSFUL",
};
export const AssetBundleImportFailureAction = {
    DO_NOTHING: "DO_NOTHING",
    ROLLBACK: "ROLLBACK",
};
export const StarburstProductType = {
    ENTERPRISE: "ENTERPRISE",
    GALAXY: "GALAXY",
};
export var DataSourceParameters;
(function (DataSourceParameters) {
    DataSourceParameters.visit = (value, visitor) => {
        if (value.AmazonElasticsearchParameters !== undefined)
            return visitor.AmazonElasticsearchParameters(value.AmazonElasticsearchParameters);
        if (value.AthenaParameters !== undefined)
            return visitor.AthenaParameters(value.AthenaParameters);
        if (value.AuroraParameters !== undefined)
            return visitor.AuroraParameters(value.AuroraParameters);
        if (value.AuroraPostgreSqlParameters !== undefined)
            return visitor.AuroraPostgreSqlParameters(value.AuroraPostgreSqlParameters);
        if (value.AwsIotAnalyticsParameters !== undefined)
            return visitor.AwsIotAnalyticsParameters(value.AwsIotAnalyticsParameters);
        if (value.JiraParameters !== undefined)
            return visitor.JiraParameters(value.JiraParameters);
        if (value.MariaDbParameters !== undefined)
            return visitor.MariaDbParameters(value.MariaDbParameters);
        if (value.MySqlParameters !== undefined)
            return visitor.MySqlParameters(value.MySqlParameters);
        if (value.OracleParameters !== undefined)
            return visitor.OracleParameters(value.OracleParameters);
        if (value.PostgreSqlParameters !== undefined)
            return visitor.PostgreSqlParameters(value.PostgreSqlParameters);
        if (value.PrestoParameters !== undefined)
            return visitor.PrestoParameters(value.PrestoParameters);
        if (value.RdsParameters !== undefined)
            return visitor.RdsParameters(value.RdsParameters);
        if (value.RedshiftParameters !== undefined)
            return visitor.RedshiftParameters(value.RedshiftParameters);
        if (value.S3Parameters !== undefined)
            return visitor.S3Parameters(value.S3Parameters);
        if (value.ServiceNowParameters !== undefined)
            return visitor.ServiceNowParameters(value.ServiceNowParameters);
        if (value.SnowflakeParameters !== undefined)
            return visitor.SnowflakeParameters(value.SnowflakeParameters);
        if (value.SparkParameters !== undefined)
            return visitor.SparkParameters(value.SparkParameters);
        if (value.SqlServerParameters !== undefined)
            return visitor.SqlServerParameters(value.SqlServerParameters);
        if (value.TeradataParameters !== undefined)
            return visitor.TeradataParameters(value.TeradataParameters);
        if (value.TwitterParameters !== undefined)
            return visitor.TwitterParameters(value.TwitterParameters);
        if (value.AmazonOpenSearchParameters !== undefined)
            return visitor.AmazonOpenSearchParameters(value.AmazonOpenSearchParameters);
        if (value.ExasolParameters !== undefined)
            return visitor.ExasolParameters(value.ExasolParameters);
        if (value.DatabricksParameters !== undefined)
            return visitor.DatabricksParameters(value.DatabricksParameters);
        if (value.StarburstParameters !== undefined)
            return visitor.StarburstParameters(value.StarburstParameters);
        if (value.TrinoParameters !== undefined)
            return visitor.TrinoParameters(value.TrinoParameters);
        if (value.BigQueryParameters !== undefined)
            return visitor.BigQueryParameters(value.BigQueryParameters);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(DataSourceParameters || (DataSourceParameters = {}));
export const AssetBundleImportJobStatus = {
    FAILED: "FAILED",
    FAILED_ROLLBACK_COMPLETED: "FAILED_ROLLBACK_COMPLETED",
    FAILED_ROLLBACK_ERROR: "FAILED_ROLLBACK_ERROR",
    FAILED_ROLLBACK_IN_PROGRESS: "FAILED_ROLLBACK_IN_PROGRESS",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED_FOR_IMMEDIATE_EXECUTION: "QUEUED_FOR_IMMEDIATE_EXECUTION",
    SUCCESSFUL: "SUCCESSFUL",
};
export const AssignmentStatus = {
    DISABLED: "DISABLED",
    DRAFT: "DRAFT",
    ENABLED: "ENABLED",
};
export const AuthenticationMethodOption = {
    ACTIVE_DIRECTORY: "ACTIVE_DIRECTORY",
    IAM_AND_QUICKSIGHT: "IAM_AND_QUICKSIGHT",
    IAM_IDENTITY_CENTER: "IAM_IDENTITY_CENTER",
    IAM_ONLY: "IAM_ONLY",
};
export const ServiceType = {
    REDSHIFT: "REDSHIFT",
};
export const AuthorSpecifiedAggregation = {
    AVERAGE: "AVERAGE",
    COUNT: "COUNT",
    DISTINCT_COUNT: "DISTINCT_COUNT",
    MAX: "MAX",
    MEDIAN: "MEDIAN",
    MIN: "MIN",
    PERCENTILE: "PERCENTILE",
    STDEV: "STDEV",
    STDEVP: "STDEVP",
    SUM: "SUM",
    VAR: "VAR",
    VARP: "VARP",
};
export class InternalFailureException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalFailureException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export class InvalidParameterValueException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const ExceptionResourceType = {
    ACCOUNT_SETTINGS: "ACCOUNT_SETTINGS",
    DATA_SET: "DATA_SET",
    DATA_SOURCE: "DATA_SOURCE",
    GROUP: "GROUP",
    IAMPOLICY_ASSIGNMENT: "IAMPOLICY_ASSIGNMENT",
    INGESTION: "INGESTION",
    NAMESPACE: "NAMESPACE",
    USER: "USER",
    VPC_CONNECTION: "VPC_CONNECTION",
};
export class ResourceExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceExistsException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.RequestId = opts.RequestId;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.RequestId = opts.RequestId;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const ColumnDataType = {
    DATETIME: "DATETIME",
    DECIMAL: "DECIMAL",
    INTEGER: "INTEGER",
    STRING: "STRING",
};
export const ColumnDataSubType = {
    FIXED: "FIXED",
    FLOAT: "FLOAT",
};
export const CategoryFilterFunction = {
    CONTAINS: "CONTAINS",
    EXACT: "EXACT",
};
export const CategoryFilterType = {
    CUSTOM_FILTER: "CUSTOM_FILTER",
    CUSTOM_FILTER_LIST: "CUSTOM_FILTER_LIST",
    FILTER_LIST: "FILTER_LIST",
};
export const ColumnDataRole = {
    DIMENSION: "DIMENSION",
    MEASURE: "MEASURE",
};
export const GeoSpatialCountryCode = {
    US: "US",
};
export const ColumnOrderingType = {
    GREATER_IS_BETTER: "GREATER_IS_BETTER",
    LESSER_IS_BETTER: "LESSER_IS_BETTER",
    SPECIFIED: "SPECIFIED",
};
export const GeoSpatialDataRole = {
    CITY: "CITY",
    COUNTRY: "COUNTRY",
    COUNTY: "COUNTY",
    LATITUDE: "LATITUDE",
    LONGITUDE: "LONGITUDE",
    POSTCODE: "POSTCODE",
    STATE: "STATE",
};
export const ColumnTagName = {
    COLUMN_DESCRIPTION: "COLUMN_DESCRIPTION",
    COLUMN_GEOGRAPHIC_ROLE: "COLUMN_GEOGRAPHIC_ROLE",
};
export const UndefinedSpecifiedValueType = {
    LEAST: "LEAST",
    MOST: "MOST",
};
export class ConcurrentUpdatingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentUpdatingException",
            $fault: "server",
            ...opts,
        });
        this.name = "ConcurrentUpdatingException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ConcurrentUpdatingException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const ConstantType = {
    COLLECTIVE: "COLLECTIVE",
    RANGE: "RANGE",
    SINGULAR: "SINGULAR",
};
export class ResourceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ResourceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ResourceUnavailableException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.RequestId = opts.RequestId;
    }
}
export class PreconditionNotMetException extends __BaseException {
    constructor(opts) {
        super({
            name: "PreconditionNotMetException",
            $fault: "client",
            ...opts,
        });
        this.name = "PreconditionNotMetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PreconditionNotMetException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const ValidationStrategyMode = {
    LENIENT: "LENIENT",
    STRICT: "STRICT",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.RequestId = opts.RequestId;
    }
}
export class UnsupportedUserEditionException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedUserEditionException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedUserEditionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedUserEditionException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const DashboardUIState = {
    COLLAPSED: "COLLAPSED",
    EXPANDED: "EXPANDED",
};
export const DatasetParameterValueType = {
    MULTI_VALUED: "MULTI_VALUED",
    SINGLE_VALUED: "SINGLE_VALUED",
};
export const DataSetImportMode = {
    DIRECT_QUERY: "DIRECT_QUERY",
    SPICE: "SPICE",
};
export var TransformOperation;
(function (TransformOperation) {
    TransformOperation.visit = (value, visitor) => {
        if (value.ProjectOperation !== undefined)
            return visitor.ProjectOperation(value.ProjectOperation);
        if (value.FilterOperation !== undefined)
            return visitor.FilterOperation(value.FilterOperation);
        if (value.CreateColumnsOperation !== undefined)
            return visitor.CreateColumnsOperation(value.CreateColumnsOperation);
        if (value.RenameColumnOperation !== undefined)
            return visitor.RenameColumnOperation(value.RenameColumnOperation);
        if (value.CastColumnTypeOperation !== undefined)
            return visitor.CastColumnTypeOperation(value.CastColumnTypeOperation);
        if (value.TagColumnOperation !== undefined)
            return visitor.TagColumnOperation(value.TagColumnOperation);
        if (value.UntagColumnOperation !== undefined)
            return visitor.UntagColumnOperation(value.UntagColumnOperation);
        if (value.OverrideDatasetParameterOperation !== undefined)
            return visitor.OverrideDatasetParameterOperation(value.OverrideDatasetParameterOperation);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(TransformOperation || (TransformOperation = {}));
export const JoinType = {
    INNER: "INNER",
    LEFT: "LEFT",
    OUTER: "OUTER",
    RIGHT: "RIGHT",
};
export const InputColumnDataType = {
    BIT: "BIT",
    BOOLEAN: "BOOLEAN",
    DATETIME: "DATETIME",
    DECIMAL: "DECIMAL",
    INTEGER: "INTEGER",
    JSON: "JSON",
    STRING: "STRING",
};
export const FileFormat = {
    CLF: "CLF",
    CSV: "CSV",
    ELF: "ELF",
    JSON: "JSON",
    TSV: "TSV",
    XLSX: "XLSX",
};
export const TextQualifier = {
    DOUBLE_QUOTE: "DOUBLE_QUOTE",
    SINGLE_QUOTE: "SINGLE_QUOTE",
};
export var PhysicalTable;
(function (PhysicalTable) {
    PhysicalTable.visit = (value, visitor) => {
        if (value.RelationalTable !== undefined)
            return visitor.RelationalTable(value.RelationalTable);
        if (value.CustomSql !== undefined)
            return visitor.CustomSql(value.CustomSql);
        if (value.S3Source !== undefined)
            return visitor.S3Source(value.S3Source);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(PhysicalTable || (PhysicalTable = {}));
export const RowLevelPermissionFormatVersion = {
    VERSION_1: "VERSION_1",
    VERSION_2: "VERSION_2",
};
export const RowLevelPermissionPolicy = {
    DENY_ACCESS: "DENY_ACCESS",
    GRANT_ACCESS: "GRANT_ACCESS",
};
export const Status = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const DataSourceType = {
    ADOBE_ANALYTICS: "ADOBE_ANALYTICS",
    AMAZON_ELASTICSEARCH: "AMAZON_ELASTICSEARCH",
    AMAZON_OPENSEARCH: "AMAZON_OPENSEARCH",
    ATHENA: "ATHENA",
    AURORA: "AURORA",
    AURORA_POSTGRESQL: "AURORA_POSTGRESQL",
    AWS_IOT_ANALYTICS: "AWS_IOT_ANALYTICS",
    BIGQUERY: "BIGQUERY",
    DATABRICKS: "DATABRICKS",
    EXASOL: "EXASOL",
    GITHUB: "GITHUB",
    JIRA: "JIRA",
    MARIADB: "MARIADB",
    MYSQL: "MYSQL",
    ORACLE: "ORACLE",
    POSTGRESQL: "POSTGRESQL",
    PRESTO: "PRESTO",
    REDSHIFT: "REDSHIFT",
    S3: "S3",
    SALESFORCE: "SALESFORCE",
    SERVICENOW: "SERVICENOW",
    SNOWFLAKE: "SNOWFLAKE",
    SPARK: "SPARK",
    SQLSERVER: "SQLSERVER",
    STARBURST: "STARBURST",
    TERADATA: "TERADATA",
    TIMESTREAM: "TIMESTREAM",
    TRINO: "TRINO",
    TWITTER: "TWITTER",
};
export const FolderType = {
    RESTRICTED: "RESTRICTED",
    SHARED: "SHARED",
};
export const SharingModel = {
    ACCOUNT: "ACCOUNT",
    NAMESPACE: "NAMESPACE",
};
export const MemberType = {
    ANALYSIS: "ANALYSIS",
    DASHBOARD: "DASHBOARD",
    DATASET: "DATASET",
    DATASOURCE: "DATASOURCE",
    TOPIC: "TOPIC",
};
export const IngestionType = {
    FULL_REFRESH: "FULL_REFRESH",
    INCREMENTAL_REFRESH: "INCREMENTAL_REFRESH",
};
export const IngestionStatus = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    INITIALIZED: "INITIALIZED",
    QUEUED: "QUEUED",
    RUNNING: "RUNNING",
};
export const IdentityStore = {
    QUICKSIGHT: "QUICKSIGHT",
};
export const NamespaceStatus = {
    CREATED: "CREATED",
    CREATING: "CREATING",
    DELETING: "DELETING",
    NON_RETRYABLE_FAILURE: "NON_RETRYABLE_FAILURE",
    RETRYABLE_FAILURE: "RETRYABLE_FAILURE",
};
export const RefreshInterval = {
    DAILY: "DAILY",
    HOURLY: "HOURLY",
    MINUTE15: "MINUTE15",
    MINUTE30: "MINUTE30",
    MONTHLY: "MONTHLY",
    WEEKLY: "WEEKLY",
};
export const DayOfWeek = {
    FRIDAY: "FRIDAY",
    MONDAY: "MONDAY",
    SATURDAY: "SATURDAY",
    SUNDAY: "SUNDAY",
    THURSDAY: "THURSDAY",
    TUESDAY: "TUESDAY",
    WEDNESDAY: "WEDNESDAY",
};
export const Role = {
    ADMIN: "ADMIN",
    AUTHOR: "AUTHOR",
    READER: "READER",
};
export const WordCloudChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WordCloudVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const VisualFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.KPIVisual && { KPIVisual: KPIVisualFilterSensitiveLog(obj.KPIVisual) }),
    ...(obj.GaugeChartVisual && { GaugeChartVisual: GaugeChartVisualFilterSensitiveLog(obj.GaugeChartVisual) }),
    ...(obj.ScatterPlotVisual && { ScatterPlotVisual: ScatterPlotVisualFilterSensitiveLog(obj.ScatterPlotVisual) }),
    ...(obj.HistogramVisual && { HistogramVisual: HistogramVisualFilterSensitiveLog(obj.HistogramVisual) }),
    ...(obj.InsightVisual && { InsightVisual: InsightVisualFilterSensitiveLog(obj.InsightVisual) }),
});
export const SheetDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AnalysisDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CalculatedFields && {
        CalculatedFields: obj.CalculatedFields.map((item) => CalculatedFieldFilterSensitiveLog(item)),
    }),
    ...(obj.ParameterDeclarations && {
        ParameterDeclarations: obj.ParameterDeclarations.map((item) => ParameterDeclarationFilterSensitiveLog(item)),
    }),
    ...(obj.ColumnConfigurations && {
        ColumnConfigurations: obj.ColumnConfigurations.map((item) => ColumnConfigurationFilterSensitiveLog(item)),
    }),
});
export const SnapshotJobS3ResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.S3Uri && { S3Uri: SENSITIVE_STRING }),
});
export const SnapshotJobResultFileGroupFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.S3Results && { S3Results: obj.S3Results.map((item) => SnapshotJobS3ResultFilterSensitiveLog(item)) }),
});
export const AnonymousUserSnapshotJobResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AssetBundleImportJobDataSourceCredentialPairFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AssetBundleImportJobDataSourceCredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CredentialPair && { CredentialPair: SENSITIVE_STRING }),
});
export const AssetBundleImportJobDataSourceOverrideParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataSourceParameters && { DataSourceParameters: obj.DataSourceParameters }),
    ...(obj.Credentials && { Credentials: AssetBundleImportJobDataSourceCredentialsFilterSensitiveLog(obj.Credentials) }),
});
export const AssetBundleImportJobOverrideParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataSources && {
        DataSources: obj.DataSources.map((item) => AssetBundleImportJobDataSourceOverrideParametersFilterSensitiveLog(item)),
    }),
});
export const AssetBundleImportSourceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Body && { Body: SENSITIVE_STRING }),
});
export const AssetBundleImportSourceDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Body && { Body: SENSITIVE_STRING }),
});
export const CalculatedColumnFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Expression && { Expression: SENSITIVE_STRING }),
});
export const DateTimeParameterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: SENSITIVE_STRING }),
});
export const DecimalParameterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: SENSITIVE_STRING }),
});
export const IntegerParameterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: SENSITIVE_STRING }),
});
export const StringParameterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: SENSITIVE_STRING }),
});
export const _ParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.StringParameters && {
        StringParameters: obj.StringParameters.map((item) => StringParameterFilterSensitiveLog(item)),
    }),
    ...(obj.IntegerParameters && {
        IntegerParameters: obj.IntegerParameters.map((item) => IntegerParameterFilterSensitiveLog(item)),
    }),
    ...(obj.DecimalParameters && {
        DecimalParameters: obj.DecimalParameters.map((item) => DecimalParameterFilterSensitiveLog(item)),
    }),
    ...(obj.DateTimeParameters && {
        DateTimeParameters: obj.DateTimeParameters.map((item) => DateTimeParameterFilterSensitiveLog(item)),
    }),
});
export const CreateAnalysisRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Parameters && { Parameters: _ParametersFilterSensitiveLog(obj.Parameters) }),
});
export const CreateColumnsOperationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Columns && { Columns: obj.Columns.map((item) => CalculatedColumnFilterSensitiveLog(item)) }),
});
export const DashboardVersionDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CalculatedFields && {
        CalculatedFields: obj.CalculatedFields.map((item) => CalculatedFieldFilterSensitiveLog(item)),
    }),
    ...(obj.ParameterDeclarations && {
        ParameterDeclarations: obj.ParameterDeclarations.map((item) => ParameterDeclarationFilterSensitiveLog(item)),
    }),
    ...(obj.ColumnConfigurations && {
        ColumnConfigurations: obj.ColumnConfigurations.map((item) => ColumnConfigurationFilterSensitiveLog(item)),
    }),
});
export const CreateDashboardRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Parameters && { Parameters: _ParametersFilterSensitiveLog(obj.Parameters) }),
});
export const FilterOperationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionExpression && { ConditionExpression: SENSITIVE_STRING }),
});
export const TransformOperationFilterSensitiveLog = (obj) => {
    if (obj.ProjectOperation !== undefined)
        return { ProjectOperation: obj.ProjectOperation };
    if (obj.FilterOperation !== undefined)
        return { FilterOperation: FilterOperationFilterSensitiveLog(obj.FilterOperation) };
    if (obj.CreateColumnsOperation !== undefined)
        return { CreateColumnsOperation: CreateColumnsOperationFilterSensitiveLog(obj.CreateColumnsOperation) };
    if (obj.RenameColumnOperation !== undefined)
        return { RenameColumnOperation: obj.RenameColumnOperation };
    if (obj.CastColumnTypeOperation !== undefined)
        return { CastColumnTypeOperation: obj.CastColumnTypeOperation };
    if (obj.TagColumnOperation !== undefined)
        return { TagColumnOperation: obj.TagColumnOperation };
    if (obj.UntagColumnOperation !== undefined)
        return { UntagColumnOperation: obj.UntagColumnOperation };
    if (obj.OverrideDatasetParameterOperation !== undefined)
        return { OverrideDatasetParameterOperation: obj.OverrideDatasetParameterOperation };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const LogicalTableFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataTransforms && {
        DataTransforms: obj.DataTransforms.map((item) => TransformOperationFilterSensitiveLog(item)),
    }),
});
export const RowLevelPermissionTagRuleFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MatchAllValue && { MatchAllValue: SENSITIVE_STRING }),
});
export const RowLevelPermissionTagConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TagRules && { TagRules: obj.TagRules.map((item) => RowLevelPermissionTagRuleFilterSensitiveLog(item)) }),
});
export const CreateDataSetRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhysicalTableMap && {
        PhysicalTableMap: Object.entries(obj.PhysicalTableMap).reduce((acc, [key, value]) => ((acc[key] = value), acc), {}),
    }),
    ...(obj.LogicalTableMap && {
        LogicalTableMap: Object.entries(obj.LogicalTableMap).reduce((acc, [key, value]) => ((acc[key] = LogicalTableFilterSensitiveLog(value)), acc), {}),
    }),
    ...(obj.RowLevelPermissionTagConfiguration && {
        RowLevelPermissionTagConfiguration: RowLevelPermissionTagConfigurationFilterSensitiveLog(obj.RowLevelPermissionTagConfiguration),
    }),
});
export const DataSourceCredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CredentialPair && { CredentialPair: obj.CredentialPair }),
});
export const CreateDataSourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataSourceParameters && { DataSourceParameters: obj.DataSourceParameters }),
    ...(obj.Credentials && { Credentials: SENSITIVE_STRING }),
});
export const TemplateVersionDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CalculatedFields && {
        CalculatedFields: obj.CalculatedFields.map((item) => CalculatedFieldFilterSensitiveLog(item)),
    }),
    ...(obj.ParameterDeclarations && {
        ParameterDeclarations: obj.ParameterDeclarations.map((item) => ParameterDeclarationFilterSensitiveLog(item)),
    }),
    ...(obj.ColumnConfigurations && {
        ColumnConfigurations: obj.ColumnConfigurations.map((item) => ColumnConfigurationFilterSensitiveLog(item)),
    }),
});
export const CreateTemplateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
