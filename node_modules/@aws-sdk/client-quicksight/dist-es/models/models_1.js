import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { DataLabelOptionsFilterSensitiveLog, FormatConfigurationFilterSensitiveLog, MeasureFieldFilterSensitiveLog, NumberDisplayFormatConfigurationFilterSensitiveLog, PercentageDisplayFormatConfigurationFilterSensitiveLog, ReferenceLineFilterSensitiveLog, } from "./models_0";
export const BoxPlotFillStyle = {
    SOLID: "SOLID",
    TRANSPARENT: "TRANSPARENT",
};
export const SingleYAxisOption = {
    PRIMARY_Y_AXIS: "PRIMARY_Y_AXIS",
};
export const CustomContentType = {
    IMAGE: "IMAGE",
    OTHER_EMBEDDED_CONTENT: "OTHER_EMBEDDED_CONTENT",
};
export const CustomContentImageScalingConfiguration = {
    DO_NOT_SCALE: "DO_NOT_SCALE",
    FIT_TO_HEIGHT: "FIT_TO_HEIGHT",
    FIT_TO_WIDTH: "FIT_TO_WIDTH",
    SCALE_TO_VISUAL: "SCALE_TO_VISUAL",
};
export const BaseMapStyleType = {
    DARK_GRAY: "DARK_GRAY",
    IMAGERY: "IMAGERY",
    LIGHT_GRAY: "LIGHT_GRAY",
    STREET: "STREET",
};
export const MapZoomMode = {
    AUTO: "AUTO",
    MANUAL: "MANUAL",
};
export const FunnelChartMeasureDataLabelStyle = {
    PERCENTAGE_BY_FIRST_STAGE: "PERCENTAGE_BY_FIRST_STAGE",
    PERCENTAGE_BY_PREVIOUS_STAGE: "PERCENTAGE_BY_PREVIOUS_STAGE",
    VALUE_AND_PERCENTAGE_BY_FIRST_STAGE: "VALUE_AND_PERCENTAGE_BY_FIRST_STAGE",
    VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE: "VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE",
    VALUE_ONLY: "VALUE_ONLY",
};
export const ArcThicknessOptions = {
    LARGE: "LARGE",
    MEDIUM: "MEDIUM",
    SMALL: "SMALL",
};
export const ComparisonMethod = {
    DIFFERENCE: "DIFFERENCE",
    PERCENT: "PERCENT",
    PERCENT_DIFFERENCE: "PERCENT_DIFFERENCE",
};
export const PrimaryValueDisplayType = {
    ACTUAL: "ACTUAL",
    COMPARISON: "COMPARISON",
    HIDDEN: "HIDDEN",
};
export const ConditionalFormattingIconDisplayOption = {
    ICON_ONLY: "ICON_ONLY",
};
export const Icon = {
    ARROW_DOWN: "ARROW_DOWN",
    ARROW_DOWN_LEFT: "ARROW_DOWN_LEFT",
    ARROW_DOWN_RIGHT: "ARROW_DOWN_RIGHT",
    ARROW_LEFT: "ARROW_LEFT",
    ARROW_RIGHT: "ARROW_RIGHT",
    ARROW_UP: "ARROW_UP",
    ARROW_UP_LEFT: "ARROW_UP_LEFT",
    ARROW_UP_RIGHT: "ARROW_UP_RIGHT",
    CARET_DOWN: "CARET_DOWN",
    CARET_UP: "CARET_UP",
    CHECKMARK: "CHECKMARK",
    CIRCLE: "CIRCLE",
    FACE_DOWN: "FACE_DOWN",
    FACE_FLAT: "FACE_FLAT",
    FACE_UP: "FACE_UP",
    FLAG: "FLAG",
    MINUS: "MINUS",
    ONE_BAR: "ONE_BAR",
    PLUS: "PLUS",
    SQUARE: "SQUARE",
    THREE_BAR: "THREE_BAR",
    THUMBS_DOWN: "THUMBS_DOWN",
    THUMBS_UP: "THUMBS_UP",
    TRIANGLE: "TRIANGLE",
    TWO_BAR: "TWO_BAR",
    X: "X",
};
export const ConditionalFormattingIconSetType = {
    BARS: "BARS",
    CARET_UP_MINUS_DOWN: "CARET_UP_MINUS_DOWN",
    CHECK_X: "CHECK_X",
    FLAGS: "FLAGS",
    FOUR_COLOR_ARROW: "FOUR_COLOR_ARROW",
    FOUR_GRAY_ARROW: "FOUR_GRAY_ARROW",
    PLUS_MINUS: "PLUS_MINUS",
    THREE_CIRCLE: "THREE_CIRCLE",
    THREE_COLOR_ARROW: "THREE_COLOR_ARROW",
    THREE_GRAY_ARROW: "THREE_GRAY_ARROW",
    THREE_SHAPE: "THREE_SHAPE",
};
export const GeospatialSelectedPointStyle = {
    CLUSTER: "CLUSTER",
    HEATMAP: "HEATMAP",
    POINT: "POINT",
};
export const ColorFillType = {
    DISCRETE: "DISCRETE",
    GRADIENT: "GRADIENT",
};
export const HistogramBinType = {
    BIN_COUNT: "BIN_COUNT",
    BIN_WIDTH: "BIN_WIDTH",
};
export const ForecastComputationSeasonality = {
    AUTOMATIC: "AUTOMATIC",
    CUSTOM: "CUSTOM",
};
export const MaximumMinimumComputationType = {
    MAXIMUM: "MAXIMUM",
    MINIMUM: "MINIMUM",
};
export const TopBottomSortOrder = {
    ABSOLUTE_DIFFERENCE: "ABSOLUTE_DIFFERENCE",
    PERCENT_DIFFERENCE: "PERCENT_DIFFERENCE",
};
export const TopBottomComputationType = {
    BOTTOM: "BOTTOM",
    TOP: "TOP",
};
export const KPISparklineType = {
    AREA: "AREA",
    LINE: "LINE",
};
export const KPIVisualStandardLayoutType = {
    CLASSIC: "CLASSIC",
    VERTICAL: "VERTICAL",
};
export const LineInterpolation = {
    LINEAR: "LINEAR",
    SMOOTH: "SMOOTH",
    STEPPED: "STEPPED",
};
export const LineChartLineStyle = {
    DASHED: "DASHED",
    DOTTED: "DOTTED",
    SOLID: "SOLID",
};
export const LineChartMarkerShape = {
    CIRCLE: "CIRCLE",
    DIAMOND: "DIAMOND",
    ROUNDED_SQUARE: "ROUNDED_SQUARE",
    SQUARE: "SQUARE",
    TRIANGLE: "TRIANGLE",
};
export const MissingDataTreatmentOption = {
    INTERPOLATE: "INTERPOLATE",
    SHOW_AS_BLANK: "SHOW_AS_BLANK",
    SHOW_AS_ZERO: "SHOW_AS_ZERO",
};
export const LineChartType = {
    AREA: "AREA",
    LINE: "LINE",
    STACKED_AREA: "STACKED_AREA",
};
export const ArcThickness = {
    LARGE: "LARGE",
    MEDIUM: "MEDIUM",
    SMALL: "SMALL",
    WHOLE: "WHOLE",
};
export const PivotTableFieldCollapseState = {
    COLLAPSED: "COLLAPSED",
    EXPANDED: "EXPANDED",
};
export const TableBorderStyle = {
    NONE: "NONE",
    SOLID: "SOLID",
};
export const TextWrap = {
    NONE: "NONE",
    WRAP: "WRAP",
};
export const VerticalTextAlignment = {
    AUTO: "AUTO",
    BOTTOM: "BOTTOM",
    MIDDLE: "MIDDLE",
    TOP: "TOP",
};
export const PivotTableMetricPlacement = {
    COLUMN: "COLUMN",
    ROW: "ROW",
};
export const PivotTableRowsLayout = {
    HIERARCHY: "HIERARCHY",
    TABULAR: "TABULAR",
};
export const PivotTableSubtotalLevel = {
    ALL: "ALL",
    CUSTOM: "CUSTOM",
    LAST: "LAST",
};
export const StyledCellType = {
    METRIC_HEADER: "METRIC_HEADER",
    TOTAL: "TOTAL",
    VALUE: "VALUE",
};
export const TableTotalsPlacement = {
    AUTO: "AUTO",
    END: "END",
    START: "START",
};
export const TableTotalsScrollStatus = {
    PINNED: "PINNED",
    SCROLLED: "SCROLLED",
};
export const SimpleTotalAggregationFunction = {
    AVERAGE: "AVERAGE",
    DEFAULT: "DEFAULT",
    MAX: "MAX",
    MIN: "MIN",
    NONE: "NONE",
    SUM: "SUM",
};
export const PivotTableConditionalFormattingScopeRole = {
    FIELD: "FIELD",
    FIELD_TOTAL: "FIELD_TOTAL",
    GRAND_TOTAL: "GRAND_TOTAL",
};
export const RadarChartAxesRangeScale = {
    AUTO: "AUTO",
    INDEPENDENT: "INDEPENDENT",
    SHARED: "SHARED",
};
export const RadarChartShape = {
    CIRCLE: "CIRCLE",
    POLYGON: "POLYGON",
};
export const TableCellImageScalingConfiguration = {
    DO_NOT_SCALE: "DO_NOT_SCALE",
    FIT_TO_CELL_HEIGHT: "FIT_TO_CELL_HEIGHT",
    FIT_TO_CELL_WIDTH: "FIT_TO_CELL_WIDTH",
};
export const TableFieldIconSetType = {
    LINK: "LINK",
};
export const TableOrientation = {
    HORIZONTAL: "HORIZONTAL",
    VERTICAL: "VERTICAL",
};
export const WordCloudCloudLayout = {
    FLUID: "FLUID",
    NORMAL: "NORMAL",
};
export const WordCloudWordCasing = {
    EXISTING_CASE: "EXISTING_CASE",
    LOWER_CASE: "LOWER_CASE",
};
export const WordCloudWordOrientation = {
    HORIZONTAL: "HORIZONTAL",
    HORIZONTAL_AND_VERTICAL: "HORIZONTAL_AND_VERTICAL",
};
export const DataPathValueFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FieldValue && { FieldValue: SENSITIVE_STRING }),
});
export const DataPathColorFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Element && { Element: DataPathValueFilterSensitiveLog(obj.Element) }),
});
export const VisualPaletteFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ColorMap && { ColorMap: obj.ColorMap.map((item) => DataPathColorFilterSensitiveLog(item)) }),
});
export const BarChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
    ...(obj.ReferenceLines && {
        ReferenceLines: obj.ReferenceLines.map((item) => ReferenceLineFilterSensitiveLog(item)),
    }),
});
export const BarChartVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BoxPlotAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const BoxPlotFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BoxPlotChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ReferenceLines && {
        ReferenceLines: obj.ReferenceLines.map((item) => ReferenceLineFilterSensitiveLog(item)),
    }),
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const BoxPlotVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ComboChartAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BarValues && { BarValues: obj.BarValues.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
    ...(obj.LineValues && { LineValues: obj.LineValues.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const ComboChartFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ComboChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BarDataLabels && { BarDataLabels: DataLabelOptionsFilterSensitiveLog(obj.BarDataLabels) }),
    ...(obj.LineDataLabels && { LineDataLabels: DataLabelOptionsFilterSensitiveLog(obj.LineDataLabels) }),
    ...(obj.ReferenceLines && {
        ReferenceLines: obj.ReferenceLines.map((item) => ReferenceLineFilterSensitiveLog(item)),
    }),
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const ComboChartVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CustomContentVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const EmptyVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const FilledMapAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const FilledMapFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const FilledMapConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ConditionalFormattingGradientColorFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Expression && { Expression: SENSITIVE_STRING }),
});
export const ConditionalFormattingSolidColorFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Expression && { Expression: SENSITIVE_STRING }),
});
export const ConditionalFormattingColorFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Solid && { Solid: ConditionalFormattingSolidColorFilterSensitiveLog(obj.Solid) }),
    ...(obj.Gradient && { Gradient: ConditionalFormattingGradientColorFilterSensitiveLog(obj.Gradient) }),
});
export const ShapeConditionalFormatFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BackgroundColor && { BackgroundColor: ConditionalFormattingColorFilterSensitiveLog(obj.BackgroundColor) }),
});
export const FilledMapShapeConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Format && { Format: ShapeConditionalFormatFilterSensitiveLog(obj.Format) }),
});
export const FilledMapConditionalFormattingOptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Shape && { Shape: FilledMapShapeConditionalFormattingFilterSensitiveLog(obj.Shape) }),
});
export const FilledMapConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionalFormattingOptions && {
        ConditionalFormattingOptions: obj.ConditionalFormattingOptions.map((item) => FilledMapConditionalFormattingOptionFilterSensitiveLog(item)),
    }),
});
export const FilledMapVisualFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionalFormatting && {
        ConditionalFormatting: FilledMapConditionalFormattingFilterSensitiveLog(obj.ConditionalFormatting),
    }),
});
export const FunnelChartAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const FunnelChartFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const FunnelChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const FunnelChartVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GaugeChartFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
    ...(obj.TargetValues && { TargetValues: obj.TargetValues.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const ComparisonFormatConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.NumberDisplayFormatConfiguration && {
        NumberDisplayFormatConfiguration: NumberDisplayFormatConfigurationFilterSensitiveLog(obj.NumberDisplayFormatConfiguration),
    }),
    ...(obj.PercentageDisplayFormatConfiguration && {
        PercentageDisplayFormatConfiguration: PercentageDisplayFormatConfigurationFilterSensitiveLog(obj.PercentageDisplayFormatConfiguration),
    }),
});
export const ComparisonConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ComparisonFormat && {
        ComparisonFormat: ComparisonFormatConfigurationFilterSensitiveLog(obj.ComparisonFormat),
    }),
});
export const GaugeChartOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Comparison && { Comparison: ComparisonConfigurationFilterSensitiveLog(obj.Comparison) }),
});
export const GaugeChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FieldWells && { FieldWells: GaugeChartFieldWellsFilterSensitiveLog(obj.FieldWells) }),
    ...(obj.GaugeChartOptions && { GaugeChartOptions: GaugeChartOptionsFilterSensitiveLog(obj.GaugeChartOptions) }),
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const GaugeChartArcConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ForegroundColor && { ForegroundColor: ConditionalFormattingColorFilterSensitiveLog(obj.ForegroundColor) }),
});
export const ConditionalFormattingCustomIconConditionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Expression && { Expression: SENSITIVE_STRING }),
});
export const ConditionalFormattingIconSetFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Expression && { Expression: SENSITIVE_STRING }),
});
export const ConditionalFormattingIconFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.IconSet && { IconSet: ConditionalFormattingIconSetFilterSensitiveLog(obj.IconSet) }),
    ...(obj.CustomCondition && {
        CustomCondition: ConditionalFormattingCustomIconConditionFilterSensitiveLog(obj.CustomCondition),
    }),
});
export const GaugeChartPrimaryValueConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextColor && { TextColor: ConditionalFormattingColorFilterSensitiveLog(obj.TextColor) }),
    ...(obj.Icon && { Icon: ConditionalFormattingIconFilterSensitiveLog(obj.Icon) }),
});
export const GaugeChartConditionalFormattingOptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PrimaryValue && {
        PrimaryValue: GaugeChartPrimaryValueConditionalFormattingFilterSensitiveLog(obj.PrimaryValue),
    }),
    ...(obj.Arc && { Arc: GaugeChartArcConditionalFormattingFilterSensitiveLog(obj.Arc) }),
});
export const GaugeChartConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionalFormattingOptions && {
        ConditionalFormattingOptions: obj.ConditionalFormattingOptions.map((item) => GaugeChartConditionalFormattingOptionFilterSensitiveLog(item)),
    }),
});
export const GaugeChartVisualFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ChartConfiguration && {
        ChartConfiguration: GaugeChartConfigurationFilterSensitiveLog(obj.ChartConfiguration),
    }),
    ...(obj.ConditionalFormatting && {
        ConditionalFormatting: GaugeChartConditionalFormattingFilterSensitiveLog(obj.ConditionalFormatting),
    }),
});
export const GeospatialMapAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const GeospatialMapFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GeospatialMapConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const GeospatialMapVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const HeatMapAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const HeatMapFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const HeatMapConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
});
export const HeatMapVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const HistogramAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const HistogramFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.HistogramAggregatedFieldWells && {
        HistogramAggregatedFieldWells: HistogramAggregatedFieldWellsFilterSensitiveLog(obj.HistogramAggregatedFieldWells),
    }),
});
export const HistogramConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FieldWells && { FieldWells: HistogramFieldWellsFilterSensitiveLog(obj.FieldWells) }),
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const HistogramVisualFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ChartConfiguration && {
        ChartConfiguration: HistogramConfigurationFilterSensitiveLog(obj.ChartConfiguration),
    }),
});
export const ForecastComputationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: MeasureFieldFilterSensitiveLog(obj.Value) }),
});
export const GrowthRateComputationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: MeasureFieldFilterSensitiveLog(obj.Value) }),
});
export const MaximumMinimumComputationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: MeasureFieldFilterSensitiveLog(obj.Value) }),
});
export const MetricComparisonComputationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FromValue && { FromValue: MeasureFieldFilterSensitiveLog(obj.FromValue) }),
    ...(obj.TargetValue && { TargetValue: MeasureFieldFilterSensitiveLog(obj.TargetValue) }),
});
export const PeriodOverPeriodComputationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: MeasureFieldFilterSensitiveLog(obj.Value) }),
});
export const PeriodToDateComputationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: MeasureFieldFilterSensitiveLog(obj.Value) }),
});
export const TopBottomMoversComputationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: MeasureFieldFilterSensitiveLog(obj.Value) }),
});
export const TopBottomRankedComputationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: MeasureFieldFilterSensitiveLog(obj.Value) }),
});
export const TotalAggregationComputationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: MeasureFieldFilterSensitiveLog(obj.Value) }),
});
export const UniqueValuesComputationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ComputationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TopBottomRanked && { TopBottomRanked: TopBottomRankedComputationFilterSensitiveLog(obj.TopBottomRanked) }),
    ...(obj.TopBottomMovers && { TopBottomMovers: TopBottomMoversComputationFilterSensitiveLog(obj.TopBottomMovers) }),
    ...(obj.TotalAggregation && {
        TotalAggregation: TotalAggregationComputationFilterSensitiveLog(obj.TotalAggregation),
    }),
    ...(obj.MaximumMinimum && { MaximumMinimum: MaximumMinimumComputationFilterSensitiveLog(obj.MaximumMinimum) }),
    ...(obj.MetricComparison && {
        MetricComparison: MetricComparisonComputationFilterSensitiveLog(obj.MetricComparison),
    }),
    ...(obj.PeriodOverPeriod && {
        PeriodOverPeriod: PeriodOverPeriodComputationFilterSensitiveLog(obj.PeriodOverPeriod),
    }),
    ...(obj.PeriodToDate && { PeriodToDate: PeriodToDateComputationFilterSensitiveLog(obj.PeriodToDate) }),
    ...(obj.GrowthRate && { GrowthRate: GrowthRateComputationFilterSensitiveLog(obj.GrowthRate) }),
    ...(obj.Forecast && { Forecast: ForecastComputationFilterSensitiveLog(obj.Forecast) }),
});
export const InsightConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Computations && { Computations: obj.Computations.map((item) => ComputationFilterSensitiveLog(item)) }),
});
export const InsightVisualFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InsightConfiguration && {
        InsightConfiguration: InsightConfigurationFilterSensitiveLog(obj.InsightConfiguration),
    }),
});
export const KPIFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
    ...(obj.TargetValues && { TargetValues: obj.TargetValues.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const KPIOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Comparison && { Comparison: ComparisonConfigurationFilterSensitiveLog(obj.Comparison) }),
});
export const KPIConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FieldWells && { FieldWells: KPIFieldWellsFilterSensitiveLog(obj.FieldWells) }),
    ...(obj.KPIOptions && { KPIOptions: KPIOptionsFilterSensitiveLog(obj.KPIOptions) }),
});
export const KPIActualValueConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextColor && { TextColor: ConditionalFormattingColorFilterSensitiveLog(obj.TextColor) }),
    ...(obj.Icon && { Icon: ConditionalFormattingIconFilterSensitiveLog(obj.Icon) }),
});
export const KPIComparisonValueConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextColor && { TextColor: ConditionalFormattingColorFilterSensitiveLog(obj.TextColor) }),
    ...(obj.Icon && { Icon: ConditionalFormattingIconFilterSensitiveLog(obj.Icon) }),
});
export const KPIPrimaryValueConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextColor && { TextColor: ConditionalFormattingColorFilterSensitiveLog(obj.TextColor) }),
    ...(obj.Icon && { Icon: ConditionalFormattingIconFilterSensitiveLog(obj.Icon) }),
});
export const KPIProgressBarConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ForegroundColor && { ForegroundColor: ConditionalFormattingColorFilterSensitiveLog(obj.ForegroundColor) }),
});
export const KPIConditionalFormattingOptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PrimaryValue && { PrimaryValue: KPIPrimaryValueConditionalFormattingFilterSensitiveLog(obj.PrimaryValue) }),
    ...(obj.ProgressBar && { ProgressBar: KPIProgressBarConditionalFormattingFilterSensitiveLog(obj.ProgressBar) }),
    ...(obj.ActualValue && { ActualValue: KPIActualValueConditionalFormattingFilterSensitiveLog(obj.ActualValue) }),
    ...(obj.ComparisonValue && {
        ComparisonValue: KPIComparisonValueConditionalFormattingFilterSensitiveLog(obj.ComparisonValue),
    }),
});
export const KPIConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionalFormattingOptions && {
        ConditionalFormattingOptions: obj.ConditionalFormattingOptions.map((item) => KPIConditionalFormattingOptionFilterSensitiveLog(item)),
    }),
});
export const KPIVisualFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ChartConfiguration && { ChartConfiguration: KPIConfigurationFilterSensitiveLog(obj.ChartConfiguration) }),
    ...(obj.ConditionalFormatting && {
        ConditionalFormatting: KPIConditionalFormattingFilterSensitiveLog(obj.ConditionalFormatting),
    }),
});
export const LineChartAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const LineChartFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DataFieldSeriesItemFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FieldValue && { FieldValue: SENSITIVE_STRING }),
});
export const SeriesItemFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataFieldSeriesItem && {
        DataFieldSeriesItem: DataFieldSeriesItemFilterSensitiveLog(obj.DataFieldSeriesItem),
    }),
});
export const LineChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Series && { Series: obj.Series.map((item) => SeriesItemFilterSensitiveLog(item)) }),
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
    ...(obj.ReferenceLines && {
        ReferenceLines: obj.ReferenceLines.map((item) => ReferenceLineFilterSensitiveLog(item)),
    }),
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const LineChartVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PieChartAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const PieChartFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PieChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const PieChartVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PivotTableFieldCollapseStateTargetFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FieldDataPathValues && {
        FieldDataPathValues: obj.FieldDataPathValues.map((item) => DataPathValueFilterSensitiveLog(item)),
    }),
});
export const PivotTableFieldCollapseStateOptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Target && { Target: PivotTableFieldCollapseStateTargetFilterSensitiveLog(obj.Target) }),
});
export const PivotTableDataPathOptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataPathList && { DataPathList: obj.DataPathList.map((item) => DataPathValueFilterSensitiveLog(item)) }),
});
export const PivotTableFieldOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PivotTableAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const PivotTableFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DataPathSortFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SortPaths && { SortPaths: obj.SortPaths.map((item) => DataPathValueFilterSensitiveLog(item)) }),
});
export const PivotTableSortByFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataPath && { DataPath: DataPathSortFilterSensitiveLog(obj.DataPath) }),
});
export const PivotFieldSortOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SortBy && { SortBy: PivotTableSortByFilterSensitiveLog(obj.SortBy) }),
});
export const PivotTableSortConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PivotTableConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TextConditionalFormatFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BackgroundColor && { BackgroundColor: ConditionalFormattingColorFilterSensitiveLog(obj.BackgroundColor) }),
    ...(obj.TextColor && { TextColor: ConditionalFormattingColorFilterSensitiveLog(obj.TextColor) }),
    ...(obj.Icon && { Icon: ConditionalFormattingIconFilterSensitiveLog(obj.Icon) }),
});
export const PivotTableCellConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextFormat && { TextFormat: TextConditionalFormatFilterSensitiveLog(obj.TextFormat) }),
});
export const PivotTableConditionalFormattingOptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Cell && { Cell: PivotTableCellConditionalFormattingFilterSensitiveLog(obj.Cell) }),
});
export const PivotTableConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionalFormattingOptions && {
        ConditionalFormattingOptions: obj.ConditionalFormattingOptions.map((item) => PivotTableConditionalFormattingOptionFilterSensitiveLog(item)),
    }),
});
export const PivotTableVisualFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionalFormatting && {
        ConditionalFormatting: PivotTableConditionalFormattingFilterSensitiveLog(obj.ConditionalFormatting),
    }),
});
export const RadarChartAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const RadarChartFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RadarChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const RadarChartVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SankeyDiagramAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Weight && { Weight: obj.Weight.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const SankeyDiagramFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SankeyDiagramChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
});
export const SankeyDiagramVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ScatterPlotCategoricallyAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.XAxis && { XAxis: obj.XAxis.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
    ...(obj.YAxis && { YAxis: obj.YAxis.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
    ...(obj.Size && { Size: obj.Size.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const ScatterPlotUnaggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Size && { Size: obj.Size.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const ScatterPlotFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ScatterPlotCategoricallyAggregatedFieldWells && {
        ScatterPlotCategoricallyAggregatedFieldWells: ScatterPlotCategoricallyAggregatedFieldWellsFilterSensitiveLog(obj.ScatterPlotCategoricallyAggregatedFieldWells),
    }),
});
export const ScatterPlotConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FieldWells && { FieldWells: ScatterPlotFieldWellsFilterSensitiveLog(obj.FieldWells) }),
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const ScatterPlotVisualFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ChartConfiguration && {
        ChartConfiguration: ScatterPlotConfigurationFilterSensitiveLog(obj.ChartConfiguration),
    }),
});
export const TableAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const UnaggregatedFieldFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FormatConfiguration && {
        FormatConfiguration: FormatConfigurationFilterSensitiveLog(obj.FormatConfiguration),
    }),
});
export const TableUnaggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => UnaggregatedFieldFilterSensitiveLog(item)) }),
});
export const TableFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TableUnaggregatedFieldWells && {
        TableUnaggregatedFieldWells: TableUnaggregatedFieldWellsFilterSensitiveLog(obj.TableUnaggregatedFieldWells),
    }),
});
export const TableConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TableCellConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextFormat && { TextFormat: TextConditionalFormatFilterSensitiveLog(obj.TextFormat) }),
});
export const TableRowConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BackgroundColor && { BackgroundColor: ConditionalFormattingColorFilterSensitiveLog(obj.BackgroundColor) }),
    ...(obj.TextColor && { TextColor: ConditionalFormattingColorFilterSensitiveLog(obj.TextColor) }),
});
export const TableConditionalFormattingOptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Cell && { Cell: TableCellConditionalFormattingFilterSensitiveLog(obj.Cell) }),
    ...(obj.Row && { Row: TableRowConditionalFormattingFilterSensitiveLog(obj.Row) }),
});
export const TableConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionalFormattingOptions && {
        ConditionalFormattingOptions: obj.ConditionalFormattingOptions.map((item) => TableConditionalFormattingOptionFilterSensitiveLog(item)),
    }),
});
export const TableVisualFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionalFormatting && {
        ConditionalFormatting: TableConditionalFormattingFilterSensitiveLog(obj.ConditionalFormatting),
    }),
});
export const TreeMapAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Sizes && { Sizes: obj.Sizes.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
    ...(obj.Colors && { Colors: obj.Colors.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const TreeMapFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TreeMapConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
});
export const TreeMapVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WaterfallChartAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const WaterfallChartFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WaterfallChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const WaterfallVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WordCloudAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Size && { Size: obj.Size.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const WordCloudFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
