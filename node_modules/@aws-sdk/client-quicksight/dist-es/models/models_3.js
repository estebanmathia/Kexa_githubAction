import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { _ParametersFilterSensitiveLog, AssetBundleImportSourceDescriptionFilterSensitiveLog, LogicalTableFilterSensitiveLog, RowLevelPermissionTagConfigurationFilterSensitiveLog, } from "./models_2";
import { QuickSightServiceException as __BaseException } from "./QuickSightServiceException";
export const DefaultAggregation = {
    AVERAGE: "AVERAGE",
    COUNT: "COUNT",
    DISTINCT_COUNT: "DISTINCT_COUNT",
    MAX: "MAX",
    MEDIAN: "MEDIAN",
    MIN: "MIN",
    STDEV: "STDEV",
    STDEVP: "STDEVP",
    SUM: "SUM",
    VAR: "VAR",
    VARP: "VARP",
};
export const DisplayFormat = {
    AUTO: "AUTO",
    CURRENCY: "CURRENCY",
    DATE: "DATE",
    NUMBER: "NUMBER",
    PERCENT: "PERCENT",
    STRING: "STRING",
};
export const TopicNumericSeparatorSymbol = {
    COMMA: "COMMA",
    DOT: "DOT",
};
export const TopicTimeGranularity = {
    DAY: "DAY",
    HOUR: "HOUR",
    MINUTE: "MINUTE",
    MONTH: "MONTH",
    QUARTER: "QUARTER",
    SECOND: "SECOND",
    WEEK: "WEEK",
    YEAR: "YEAR",
};
export const FilterClass = {
    CONDITIONAL_VALUE_FILTER: "CONDITIONAL_VALUE_FILTER",
    ENFORCED_VALUE_FILTER: "ENFORCED_VALUE_FILTER",
    NAMED_VALUE_FILTER: "NAMED_VALUE_FILTER",
};
export const NamedFilterType = {
    CATEGORY_FILTER: "CATEGORY_FILTER",
    DATE_RANGE_FILTER: "DATE_RANGE_FILTER",
    NUMERIC_EQUALITY_FILTER: "NUMERIC_EQUALITY_FILTER",
    NUMERIC_RANGE_FILTER: "NUMERIC_RANGE_FILTER",
    RELATIVE_DATE_FILTER: "RELATIVE_DATE_FILTER",
};
export const NamedFilterAggType = {
    AVERAGE: "AVERAGE",
    COUNT: "COUNT",
    DISTINCT_COUNT: "DISTINCT_COUNT",
    MAX: "MAX",
    MEDIAN: "MEDIAN",
    MIN: "MIN",
    NO_AGGREGATION: "NO_AGGREGATION",
    STDEV: "STDEV",
    STDEVP: "STDEVP",
    SUM: "SUM",
    VAR: "VAR",
    VARP: "VARP",
};
export const TopicRelativeDateFilterFunction = {
    LAST: "LAST",
    NEXT: "NEXT",
    NOW: "NOW",
    PREVIOUS: "PREVIOUS",
    THIS: "THIS",
};
export const NamedEntityAggType = {
    AVERAGE: "AVERAGE",
    COUNT: "COUNT",
    CUSTOM: "CUSTOM",
    DISTINCT_COUNT: "DISTINCT_COUNT",
    MAX: "MAX",
    MEDIAN: "MEDIAN",
    MIN: "MIN",
    PERCENTILE: "PERCENTILE",
    STDEV: "STDEV",
    STDEVP: "STDEVP",
    SUM: "SUM",
    VAR: "VAR",
    VARP: "VARP",
};
export const PropertyRole = {
    ID: "ID",
    PRIMARY: "PRIMARY",
};
export const PropertyUsage = {
    DIMENSION: "DIMENSION",
    INHERIT: "INHERIT",
    MEASURE: "MEASURE",
};
export const TopicUserExperienceVersion = {
    LEGACY: "LEGACY",
    NEW_READER_EXPERIENCE: "NEW_READER_EXPERIENCE",
};
export const TopicScheduleType = {
    DAILY: "DAILY",
    HOURLY: "HOURLY",
    MONTHLY: "MONTHLY",
    WEEKLY: "WEEKLY",
};
export const VPCConnectionAvailabilityStatus = {
    AVAILABLE: "AVAILABLE",
    PARTIALLY_AVAILABLE: "PARTIALLY_AVAILABLE",
    UNAVAILABLE: "UNAVAILABLE",
};
export const VPCConnectionResourceStatus = {
    CREATION_FAILED: "CREATION_FAILED",
    CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS",
    CREATION_SUCCESSFUL: "CREATION_SUCCESSFUL",
    DELETED: "DELETED",
    DELETION_FAILED: "DELETION_FAILED",
    DELETION_IN_PROGRESS: "DELETION_IN_PROGRESS",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
    UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL",
};
export const DashboardErrorType = {
    ACCESS_DENIED: "ACCESS_DENIED",
    COLUMN_GEOGRAPHIC_ROLE_MISMATCH: "COLUMN_GEOGRAPHIC_ROLE_MISMATCH",
    COLUMN_REPLACEMENT_MISSING: "COLUMN_REPLACEMENT_MISSING",
    COLUMN_TYPE_MISMATCH: "COLUMN_TYPE_MISMATCH",
    DATA_SET_NOT_FOUND: "DATA_SET_NOT_FOUND",
    INTERNAL_FAILURE: "INTERNAL_FAILURE",
    PARAMETER_NOT_FOUND: "PARAMETER_NOT_FOUND",
    PARAMETER_TYPE_INVALID: "PARAMETER_TYPE_INVALID",
    PARAMETER_VALUE_INCOMPATIBLE: "PARAMETER_VALUE_INCOMPATIBLE",
    SOURCE_NOT_FOUND: "SOURCE_NOT_FOUND",
};
export const DashboardFilterAttribute = {
    DASHBOARD_NAME: "DASHBOARD_NAME",
    DIRECT_QUICKSIGHT_OWNER: "DIRECT_QUICKSIGHT_OWNER",
    DIRECT_QUICKSIGHT_SOLE_OWNER: "DIRECT_QUICKSIGHT_SOLE_OWNER",
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER: "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
    QUICKSIGHT_OWNER: "QUICKSIGHT_OWNER",
    QUICKSIGHT_USER: "QUICKSIGHT_USER",
    QUICKSIGHT_VIEWER_OR_OWNER: "QUICKSIGHT_VIEWER_OR_OWNER",
};
export const DataSetFilterAttribute = {
    DATASET_NAME: "DATASET_NAME",
    DIRECT_QUICKSIGHT_OWNER: "DIRECT_QUICKSIGHT_OWNER",
    DIRECT_QUICKSIGHT_SOLE_OWNER: "DIRECT_QUICKSIGHT_SOLE_OWNER",
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER: "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
    QUICKSIGHT_OWNER: "QUICKSIGHT_OWNER",
    QUICKSIGHT_VIEWER_OR_OWNER: "QUICKSIGHT_VIEWER_OR_OWNER",
};
export const LookbackWindowSizeUnit = {
    DAY: "DAY",
    HOUR: "HOUR",
    WEEK: "WEEK",
};
export const DataSourceErrorInfoType = {
    ACCESS_DENIED: "ACCESS_DENIED",
    CONFLICT: "CONFLICT",
    COPY_SOURCE_NOT_FOUND: "COPY_SOURCE_NOT_FOUND",
    ENGINE_VERSION_NOT_SUPPORTED: "ENGINE_VERSION_NOT_SUPPORTED",
    GENERIC_SQL_FAILURE: "GENERIC_SQL_FAILURE",
    TIMEOUT: "TIMEOUT",
    UNKNOWN: "UNKNOWN",
    UNKNOWN_HOST: "UNKNOWN_HOST",
};
export const DataSourceFilterAttribute = {
    DATASOURCE_NAME: "DATASOURCE_NAME",
    DIRECT_QUICKSIGHT_OWNER: "DIRECT_QUICKSIGHT_OWNER",
    DIRECT_QUICKSIGHT_SOLE_OWNER: "DIRECT_QUICKSIGHT_SOLE_OWNER",
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER: "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
};
export const SnapshotJobStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    QUEUED: "QUEUED",
    RUNNING: "RUNNING",
};
export class InvalidNextTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const IngestionErrorType = {
    ACCOUNT_CAPACITY_LIMIT_EXCEEDED: "ACCOUNT_CAPACITY_LIMIT_EXCEEDED",
    CONNECTION_FAILURE: "CONNECTION_FAILURE",
    CURSOR_NOT_ENABLED: "CURSOR_NOT_ENABLED",
    CUSTOMER_ERROR: "CUSTOMER_ERROR",
    DATA_SET_DELETED: "DATA_SET_DELETED",
    DATA_SET_NOT_SPICE: "DATA_SET_NOT_SPICE",
    DATA_SET_SIZE_LIMIT_EXCEEDED: "DATA_SET_SIZE_LIMIT_EXCEEDED",
    DATA_SOURCE_AUTH_FAILED: "DATA_SOURCE_AUTH_FAILED",
    DATA_SOURCE_CONNECTION_FAILED: "DATA_SOURCE_CONNECTION_FAILED",
    DATA_SOURCE_NOT_FOUND: "DATA_SOURCE_NOT_FOUND",
    DATA_TOLERANCE_EXCEPTION: "DATA_TOLERANCE_EXCEPTION",
    DUPLICATE_COLUMN_NAMES_FOUND: "DUPLICATE_COLUMN_NAMES_FOUND",
    ELASTICSEARCH_CURSOR_NOT_ENABLED: "ELASTICSEARCH_CURSOR_NOT_ENABLED",
    FAILURE_TO_ASSUME_ROLE: "FAILURE_TO_ASSUME_ROLE",
    FAILURE_TO_PROCESS_JSON_FILE: "FAILURE_TO_PROCESS_JSON_FILE",
    IAM_ROLE_NOT_AVAILABLE: "IAM_ROLE_NOT_AVAILABLE",
    INGESTION_CANCELED: "INGESTION_CANCELED",
    INGESTION_SUPERSEDED: "INGESTION_SUPERSEDED",
    INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR",
    INVALID_DATAPREP_SYNTAX: "INVALID_DATAPREP_SYNTAX",
    INVALID_DATA_SOURCE_CONFIG: "INVALID_DATA_SOURCE_CONFIG",
    INVALID_DATE_FORMAT: "INVALID_DATE_FORMAT",
    IOT_DATA_SET_FILE_EMPTY: "IOT_DATA_SET_FILE_EMPTY",
    IOT_FILE_NOT_FOUND: "IOT_FILE_NOT_FOUND",
    OAUTH_TOKEN_FAILURE: "OAUTH_TOKEN_FAILURE",
    PASSWORD_AUTHENTICATION_FAILURE: "PASSWORD_AUTHENTICATION_FAILURE",
    PERMISSION_DENIED: "PERMISSION_DENIED",
    PERMISSION_NOT_FOUND: "PERMISSION_NOT_FOUND",
    QUERY_TIMEOUT: "QUERY_TIMEOUT",
    REFRESH_SUPPRESSED_BY_EDIT: "REFRESH_SUPPRESSED_BY_EDIT",
    ROW_SIZE_LIMIT_EXCEEDED: "ROW_SIZE_LIMIT_EXCEEDED",
    S3_FILE_INACCESSIBLE: "S3_FILE_INACCESSIBLE",
    S3_MANIFEST_ERROR: "S3_MANIFEST_ERROR",
    S3_UPLOADED_FILE_DELETED: "S3_UPLOADED_FILE_DELETED",
    SOURCE_API_LIMIT_EXCEEDED_FAILURE: "SOURCE_API_LIMIT_EXCEEDED_FAILURE",
    SOURCE_RESOURCE_LIMIT_EXCEEDED: "SOURCE_RESOURCE_LIMIT_EXCEEDED",
    SPICE_TABLE_NOT_FOUND: "SPICE_TABLE_NOT_FOUND",
    SQL_EXCEPTION: "SQL_EXCEPTION",
    SQL_INVALID_PARAMETER_VALUE: "SQL_INVALID_PARAMETER_VALUE",
    SQL_NUMERIC_OVERFLOW: "SQL_NUMERIC_OVERFLOW",
    SQL_SCHEMA_MISMATCH_ERROR: "SQL_SCHEMA_MISMATCH_ERROR",
    SQL_TABLE_NOT_FOUND: "SQL_TABLE_NOT_FOUND",
    SSL_CERTIFICATE_VALIDATION_FAILURE: "SSL_CERTIFICATE_VALIDATION_FAILURE",
    UNRESOLVABLE_HOST: "UNRESOLVABLE_HOST",
    UNROUTABLE_HOST: "UNROUTABLE_HOST",
};
export const IngestionRequestSource = {
    MANUAL: "MANUAL",
    SCHEDULED: "SCHEDULED",
};
export const IngestionRequestType = {
    EDIT: "EDIT",
    FULL_REFRESH: "FULL_REFRESH",
    INCREMENTAL_REFRESH: "INCREMENTAL_REFRESH",
    INITIAL_INGESTION: "INITIAL_INGESTION",
};
export const NamespaceErrorType = {
    INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR",
    PERMISSION_DENIED: "PERMISSION_DENIED",
};
export const TemplateErrorType = {
    ACCESS_DENIED: "ACCESS_DENIED",
    DATA_SET_NOT_FOUND: "DATA_SET_NOT_FOUND",
    INTERNAL_FAILURE: "INTERNAL_FAILURE",
    SOURCE_NOT_FOUND: "SOURCE_NOT_FOUND",
};
export const ThemeType = {
    ALL: "ALL",
    CUSTOM: "CUSTOM",
    QUICKSIGHT: "QUICKSIGHT",
};
export const ThemeErrorType = {
    INTERNAL_FAILURE: "INTERNAL_FAILURE",
};
export const TopicRefreshStatus = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    INITIALIZED: "INITIALIZED",
    RUNNING: "RUNNING",
};
export const IdentityType = {
    IAM: "IAM",
    IAM_IDENTITY_CENTER: "IAM_IDENTITY_CENTER",
    QUICKSIGHT: "QUICKSIGHT",
};
export const UserRole = {
    ADMIN: "ADMIN",
    AUTHOR: "AUTHOR",
    READER: "READER",
    RESTRICTED_AUTHOR: "RESTRICTED_AUTHOR",
    RESTRICTED_READER: "RESTRICTED_READER",
};
export const NetworkInterfaceStatus = {
    ATTACHMENT_FAILED_ROLLBACK_FAILED: "ATTACHMENT_FAILED_ROLLBACK_FAILED",
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    CREATION_FAILED: "CREATION_FAILED",
    DELETED: "DELETED",
    DELETING: "DELETING",
    DELETION_FAILED: "DELETION_FAILED",
    DELETION_SCHEDULED: "DELETION_SCHEDULED",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATING: "UPDATING",
};
export class DomainNotWhitelistedException extends __BaseException {
    constructor(opts) {
        super({
            name: "DomainNotWhitelistedException",
            $fault: "client",
            ...opts,
        });
        this.name = "DomainNotWhitelistedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DomainNotWhitelistedException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const EmbeddingIdentityType = {
    ANONYMOUS: "ANONYMOUS",
    IAM: "IAM",
    QUICKSIGHT: "QUICKSIGHT",
};
export const FolderFilterAttribute = {
    DIRECT_QUICKSIGHT_OWNER: "DIRECT_QUICKSIGHT_OWNER",
    DIRECT_QUICKSIGHT_SOLE_OWNER: "DIRECT_QUICKSIGHT_SOLE_OWNER",
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER: "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
    FOLDER_NAME: "FOLDER_NAME",
    PARENT_FOLDER_ARN: "PARENT_FOLDER_ARN",
    QUICKSIGHT_OWNER: "QUICKSIGHT_OWNER",
    QUICKSIGHT_VIEWER_OR_OWNER: "QUICKSIGHT_VIEWER_OR_OWNER",
};
export class SessionLifetimeInMinutesInvalidException extends __BaseException {
    constructor(opts) {
        super({
            name: "SessionLifetimeInMinutesInvalidException",
            $fault: "client",
            ...opts,
        });
        this.name = "SessionLifetimeInMinutesInvalidException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SessionLifetimeInMinutesInvalidException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export class UnsupportedPricingPlanException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedPricingPlanException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedPricingPlanException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedPricingPlanException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export class QuickSightUserNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "QuickSightUserNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "QuickSightUserNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, QuickSightUserNotFoundException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export class IdentityTypeNotSupportedException extends __BaseException {
    constructor(opts) {
        super({
            name: "IdentityTypeNotSupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdentityTypeNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdentityTypeNotSupportedException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const GroupFilterAttribute = {
    GROUP_NAME: "GROUP_NAME",
};
export const GroupFilterOperator = {
    StartsWith: "StartsWith",
};
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const SemanticTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TruthyCellValue && { TruthyCellValue: SENSITIVE_STRING }),
    ...(obj.TruthyCellValueSynonyms && { TruthyCellValueSynonyms: SENSITIVE_STRING }),
    ...(obj.FalseyCellValue && { FalseyCellValue: SENSITIVE_STRING }),
    ...(obj.FalseyCellValueSynonyms && { FalseyCellValueSynonyms: SENSITIVE_STRING }),
});
export const TopicCalculatedFieldFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Expression && { Expression: SENSITIVE_STRING }),
    ...(obj.SemanticType && { SemanticType: SemanticTypeFilterSensitiveLog(obj.SemanticType) }),
});
export const TopicColumnFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SemanticType && { SemanticType: SemanticTypeFilterSensitiveLog(obj.SemanticType) }),
});
export const TopicCategoryFilterConstantFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TopicCategoryFilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Constant && { Constant: SENSITIVE_STRING }),
});
export const TopicRangeFilterConstantFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TopicDateRangeFilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Constant && { Constant: SENSITIVE_STRING }),
});
export const TopicSingularFilterConstantFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TopicNumericEqualityFilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Constant && { Constant: SENSITIVE_STRING }),
});
export const TopicNumericRangeFilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Constant && { Constant: SENSITIVE_STRING }),
});
export const TopicRelativeDateFilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Constant && { Constant: SENSITIVE_STRING }),
});
export const TopicFilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CategoryFilter && { CategoryFilter: TopicCategoryFilterFilterSensitiveLog(obj.CategoryFilter) }),
    ...(obj.NumericEqualityFilter && {
        NumericEqualityFilter: TopicNumericEqualityFilterFilterSensitiveLog(obj.NumericEqualityFilter),
    }),
    ...(obj.NumericRangeFilter && {
        NumericRangeFilter: TopicNumericRangeFilterFilterSensitiveLog(obj.NumericRangeFilter),
    }),
    ...(obj.DateRangeFilter && { DateRangeFilter: TopicDateRangeFilterFilterSensitiveLog(obj.DateRangeFilter) }),
    ...(obj.RelativeDateFilter && {
        RelativeDateFilter: TopicRelativeDateFilterFilterSensitiveLog(obj.RelativeDateFilter),
    }),
});
export const DatasetMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Filters && { Filters: obj.Filters.map((item) => TopicFilterFilterSensitiveLog(item)) }),
    ...(obj.Columns && { Columns: obj.Columns.map((item) => TopicColumnFilterSensitiveLog(item)) }),
    ...(obj.CalculatedFields && {
        CalculatedFields: obj.CalculatedFields.map((item) => TopicCalculatedFieldFilterSensitiveLog(item)),
    }),
});
export const TopicDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateTopicRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DataSetFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhysicalTableMap && {
        PhysicalTableMap: Object.entries(obj.PhysicalTableMap).reduce((acc, [key, value]) => ((acc[key] = value), acc), {}),
    }),
    ...(obj.LogicalTableMap && {
        LogicalTableMap: Object.entries(obj.LogicalTableMap).reduce((acc, [key, value]) => ((acc[key] = LogicalTableFilterSensitiveLog(value)), acc), {}),
    }),
    ...(obj.RowLevelPermissionTagConfiguration && {
        RowLevelPermissionTagConfiguration: RowLevelPermissionTagConfigurationFilterSensitiveLog(obj.RowLevelPermissionTagConfiguration),
    }),
});
export const DescribeAnalysisDefinitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeAssetBundleExportJobResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DownloadUrl && { DownloadUrl: SENSITIVE_STRING }),
});
export const DescribeAssetBundleImportJobResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AssetBundleImportSource && {
        AssetBundleImportSource: AssetBundleImportSourceDescriptionFilterSensitiveLog(obj.AssetBundleImportSource),
    }),
});
export const DescribeDashboardDefinitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SnapshotConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Parameters && { Parameters: _ParametersFilterSensitiveLog(obj.Parameters) }),
});
export const DescribeDashboardSnapshotJobResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SnapshotJobResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeDashboardSnapshotJobResultResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeDataSetResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataSet && { DataSet: DataSetFilterSensitiveLog(obj.DataSet) }),
});
export const DescribeTemplateDefinitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeTopicResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SessionTagFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: SENSITIVE_STRING }),
});
export const GenerateEmbedUrlForAnonymousUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SessionTags && { SessionTags: obj.SessionTags.map((item) => SessionTagFilterSensitiveLog(item)) }),
});
export const GenerateEmbedUrlForAnonymousUserResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmbedUrl && { EmbedUrl: SENSITIVE_STRING }),
});
export const GenerateEmbedUrlForRegisteredUserResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmbedUrl && { EmbedUrl: SENSITIVE_STRING }),
});
export const GetDashboardEmbedUrlResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmbedUrl && { EmbedUrl: SENSITIVE_STRING }),
});
export const GetSessionEmbedUrlResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmbedUrl && { EmbedUrl: SENSITIVE_STRING }),
});
