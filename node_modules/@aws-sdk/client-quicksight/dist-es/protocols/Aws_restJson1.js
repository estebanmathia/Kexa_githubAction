import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { AccessDeniedException, } from "../models/models_0";
import { ConcurrentUpdatingException, ConflictException, InternalFailureException, InvalidParameterValueException, LimitExceededException, PreconditionNotMetException, ResourceExistsException, ResourceNotFoundException, ResourceUnavailableException, ThrottlingException, TransformOperation, UnsupportedUserEditionException, } from "../models/models_2";
import { DomainNotWhitelistedException, IdentityTypeNotSupportedException, InvalidNextTokenException, InvalidRequestException, QuickSightUserNotFoundException, SessionLifetimeInMinutesInvalidException, UnsupportedPricingPlanException, } from "../models/models_3";
import { QuickSightServiceException as __BaseException } from "../models/QuickSightServiceException";
export const se_CancelIngestionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("IngestionId", () => input.IngestionId, "{IngestionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_CreateAccountCustomizationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/customizations");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_n]: [, input[_N]],
    });
    let body;
    body = JSON.stringify(take(input, {
        AccountCustomization: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreateAccountSubscriptionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/account/{AwsAccountId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AccountName: [],
        ActiveDirectoryName: [],
        AdminGroup: (_) => _json(_),
        AuthenticationMethod: [],
        AuthorGroup: (_) => _json(_),
        ContactNumber: [],
        DirectoryId: [],
        Edition: [],
        EmailAddress: [],
        FirstName: [],
        IAMIdentityCenterInstanceArn: [],
        LastName: [],
        NotificationEmail: [],
        ReaderGroup: (_) => _json(_),
        Realm: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAnalysisCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/analyses/{AnalysisId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("AnalysisId", () => input.AnalysisId, "{AnalysisId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Definition: (_) => se_AnalysisDefinition(_, context),
        FolderArns: (_) => _json(_),
        Name: [],
        Parameters: (_) => se__Parameters(_, context),
        Permissions: (_) => _json(_),
        SourceEntity: (_) => _json(_),
        Tags: (_) => _json(_),
        ThemeArn: [],
        ValidationStrategy: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDashboardCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DashboardPublishOptions: (_) => _json(_),
        Definition: (_) => se_DashboardVersionDefinition(_, context),
        FolderArns: (_) => _json(_),
        LinkEntities: (_) => _json(_),
        LinkSharingConfiguration: (_) => _json(_),
        Name: [],
        Parameters: (_) => se__Parameters(_, context),
        Permissions: (_) => _json(_),
        SourceEntity: (_) => _json(_),
        Tags: (_) => _json(_),
        ThemeArn: [],
        ValidationStrategy: (_) => _json(_),
        VersionDescription: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDataSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/data-sets");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ColumnGroups: (_) => _json(_),
        ColumnLevelPermissionRules: (_) => _json(_),
        DataSetId: [],
        DataSetUsageConfiguration: (_) => _json(_),
        DatasetParameters: (_) => se_DatasetParameterList(_, context),
        FieldFolders: (_) => _json(_),
        FolderArns: (_) => _json(_),
        ImportMode: [],
        LogicalTableMap: (_) => se_LogicalTableMap(_, context),
        Name: [],
        Permissions: (_) => _json(_),
        PhysicalTableMap: (_) => _json(_),
        RowLevelPermissionDataSet: (_) => _json(_),
        RowLevelPermissionTagConfiguration: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/data-sources");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Credentials: (_) => _json(_),
        DataSourceId: [],
        DataSourceParameters: (_) => _json(_),
        FolderArns: (_) => _json(_),
        Name: [],
        Permissions: (_) => _json(_),
        SslProperties: (_) => _json(_),
        Tags: (_) => _json(_),
        Type: [],
        VpcConnectionProperties: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFolderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/folders/{FolderId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("FolderId", () => input.FolderId, "{FolderId}", false);
    let body;
    body = JSON.stringify(take(input, {
        FolderType: [],
        Name: [],
        ParentFolderArn: [],
        Permissions: (_) => _json(_),
        SharingModel: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFolderMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/folders/{FolderId}/members/{MemberType}/{MemberId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("FolderId", () => input.FolderId, "{FolderId}", false);
    b.p("MemberId", () => input.MemberId, "{MemberId}", false);
    b.p("MemberType", () => input.MemberType, "{MemberType}", false);
    let body;
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/groups");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        GroupName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateGroupMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}");
    b.p("MemberName", () => input.MemberName, "{MemberName}", false);
    b.p("GroupName", () => input.GroupName, "{GroupName}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateIAMPolicyAssignmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    body = JSON.stringify(take(input, {
        AssignmentName: [],
        AssignmentStatus: [],
        Identities: (_) => _json(_),
        PolicyArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateIngestionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("IngestionId", () => input.IngestionId, "{IngestionId}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        IngestionType: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateNamespaceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        IdentityStore: [],
        Namespace: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRefreshScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Schedule: (_) => se_RefreshSchedule(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRoleMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/roles/{Role}/members/{MemberName}");
    b.p("MemberName", () => input.MemberName, "{MemberName}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    b.p("Role", () => input.Role, "{Role}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/templates/{TemplateId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Definition: (_) => se_TemplateVersionDefinition(_, context),
        Name: [],
        Permissions: (_) => _json(_),
        SourceEntity: (_) => _json(_),
        Tags: (_) => _json(_),
        ValidationStrategy: (_) => _json(_),
        VersionDescription: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateTemplateAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    b.p("AliasName", () => input.AliasName, "{AliasName}", false);
    let body;
    body = JSON.stringify(take(input, {
        TemplateVersionNumber: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateThemeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/themes/{ThemeId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("ThemeId", () => input.ThemeId, "{ThemeId}", false);
    let body;
    body = JSON.stringify(take(input, {
        BaseThemeId: [],
        Configuration: (_) => _json(_),
        Name: [],
        Permissions: (_) => _json(_),
        Tags: (_) => _json(_),
        VersionDescription: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateThemeAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("ThemeId", () => input.ThemeId, "{ThemeId}", false);
    b.p("AliasName", () => input.AliasName, "{AliasName}", false);
    let body;
    body = JSON.stringify(take(input, {
        ThemeVersionNumber: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateTopicCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/topics");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
        Topic: (_) => _json(_),
        TopicId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateTopicRefreshScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/topics/{TopicId}/schedules");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TopicId", () => input.TopicId, "{TopicId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DatasetArn: [],
        DatasetName: [],
        RefreshSchedule: (_) => se_TopicRefreshSchedule(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateVPCConnectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/vpc-connections");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DnsResolvers: (_) => _json(_),
        Name: [],
        RoleArn: [],
        SecurityGroupIds: (_) => _json(_),
        SubnetIds: (_) => _json(_),
        Tags: (_) => _json(_),
        VPCConnectionId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAccountCustomizationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/customizations");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_n]: [, input[_N]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteAccountSubscriptionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/account/{AwsAccountId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAnalysisCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/analyses/{AnalysisId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("AnalysisId", () => input.AnalysisId, "{AnalysisId}", false);
    const query = map({
        [_rwid]: [() => input.RecoveryWindowInDays !== void 0, () => input[_RWID].toString()],
        [_fdwr]: [() => input.ForceDeleteWithoutRecovery !== void 0, () => input[_FDWR].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteDashboardCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    const query = map({
        [_vn]: [() => input.VersionNumber !== void 0, () => input[_VN].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteDataSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDataSetRefreshPropertiesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-properties");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sources/{DataSourceId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSourceId", () => input.DataSourceId, "{DataSourceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteFolderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/folders/{FolderId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("FolderId", () => input.FolderId, "{FolderId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteFolderMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/folders/{FolderId}/members/{MemberType}/{MemberId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("FolderId", () => input.FolderId, "{FolderId}", false);
    b.p("MemberId", () => input.MemberId, "{MemberId}", false);
    b.p("MemberType", () => input.MemberType, "{MemberType}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}");
    b.p("GroupName", () => input.GroupName, "{GroupName}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteGroupMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}");
    b.p("MemberName", () => input.MemberName, "{MemberName}", false);
    b.p("GroupName", () => input.GroupName, "{GroupName}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteIAMPolicyAssignmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespace/{Namespace}/iam-policy-assignments/{AssignmentName}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("AssignmentName", () => input.AssignmentName, "{AssignmentName}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteIdentityPropagationConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/identity-propagation-config/{Service}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Service", () => input.Service, "{Service}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteNamespaceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRefreshScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules/{ScheduleId}");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("ScheduleId", () => input.ScheduleId, "{ScheduleId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRoleCustomPermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/roles/{Role}/custom-permission");
    b.p("Role", () => input.Role, "{Role}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRoleMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/roles/{Role}/members/{MemberName}");
    b.p("MemberName", () => input.MemberName, "{MemberName}", false);
    b.p("Role", () => input.Role, "{Role}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/templates/{TemplateId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    const query = map({
        [_vn]: [() => input.VersionNumber !== void 0, () => input[_VN].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteTemplateAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    b.p("AliasName", () => input.AliasName, "{AliasName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteThemeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/themes/{ThemeId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("ThemeId", () => input.ThemeId, "{ThemeId}", false);
    const query = map({
        [_vn]: [() => input.VersionNumber !== void 0, () => input[_VN].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteThemeAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("ThemeId", () => input.ThemeId, "{ThemeId}", false);
    b.p("AliasName", () => input.AliasName, "{AliasName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteTopicCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/topics/{TopicId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TopicId", () => input.TopicId, "{TopicId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteTopicRefreshScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/topics/{TopicId}/schedules/{DatasetId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TopicId", () => input.TopicId, "{TopicId}", false);
    b.p("DatasetId", () => input.DatasetId, "{DatasetId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}");
    b.p("UserName", () => input.UserName, "{UserName}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteUserByPrincipalIdCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/user-principals/{PrincipalId}");
    b.p("PrincipalId", () => input.PrincipalId, "{PrincipalId}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVPCConnectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/vpc-connections/{VPCConnectionId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("VPCConnectionId", () => input.VPCConnectionId, "{VPCConnectionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeAccountCustomizationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/customizations");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_n]: [, input[_N]],
        [_r]: [() => input.Resolved !== void 0, () => input[_R].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeAccountSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/settings");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeAccountSubscriptionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/account/{AwsAccountId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeAnalysisCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/analyses/{AnalysisId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("AnalysisId", () => input.AnalysisId, "{AnalysisId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeAnalysisDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/analyses/{AnalysisId}/definition");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("AnalysisId", () => input.AnalysisId, "{AnalysisId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeAnalysisPermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("AnalysisId", () => input.AnalysisId, "{AnalysisId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeAssetBundleExportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/asset-bundle-export-jobs/{AssetBundleExportJobId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("AssetBundleExportJobId", () => input.AssetBundleExportJobId, "{AssetBundleExportJobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeAssetBundleImportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/asset-bundle-import-jobs/{AssetBundleImportJobId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("AssetBundleImportJobId", () => input.AssetBundleImportJobId, "{AssetBundleImportJobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeDashboardCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    const query = map({
        [_vn]: [() => input.VersionNumber !== void 0, () => input[_VN].toString()],
        [_an]: [, input[_AN]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeDashboardDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}/definition");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    const query = map({
        [_vn]: [() => input.VersionNumber !== void 0, () => input[_VN].toString()],
        [_an]: [, input[_AN]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeDashboardPermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeDashboardSnapshotJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}/snapshot-jobs/{SnapshotJobId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    b.p("SnapshotJobId", () => input.SnapshotJobId, "{SnapshotJobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeDashboardSnapshotJobResultCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}/snapshot-jobs/{SnapshotJobId}/result");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    b.p("SnapshotJobId", () => input.SnapshotJobId, "{SnapshotJobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeDataSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeDataSetPermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeDataSetRefreshPropertiesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-properties");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sources/{DataSourceId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSourceId", () => input.DataSourceId, "{DataSourceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeDataSourcePermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSourceId", () => input.DataSourceId, "{DataSourceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeFolderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/folders/{FolderId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("FolderId", () => input.FolderId, "{FolderId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeFolderPermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/folders/{FolderId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("FolderId", () => input.FolderId, "{FolderId}", false);
    const query = map({
        [_n]: [, input[_N]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeFolderResolvedPermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/folders/{FolderId}/resolved-permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("FolderId", () => input.FolderId, "{FolderId}", false);
    const query = map({
        [_n]: [, input[_N]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}");
    b.p("GroupName", () => input.GroupName, "{GroupName}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeGroupMembershipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}");
    b.p("MemberName", () => input.MemberName, "{MemberName}", false);
    b.p("GroupName", () => input.GroupName, "{GroupName}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeIAMPolicyAssignmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("AssignmentName", () => input.AssignmentName, "{AssignmentName}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeIngestionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("IngestionId", () => input.IngestionId, "{IngestionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeIpRestrictionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/ip-restriction");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeNamespaceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeRefreshScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules/{ScheduleId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("ScheduleId", () => input.ScheduleId, "{ScheduleId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeRoleCustomPermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/roles/{Role}/custom-permission");
    b.p("Role", () => input.Role, "{Role}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/templates/{TemplateId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    const query = map({
        [_vn]: [() => input.VersionNumber !== void 0, () => input[_VN].toString()],
        [_an]: [, input[_AN]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeTemplateAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    b.p("AliasName", () => input.AliasName, "{AliasName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeTemplateDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/templates/{TemplateId}/definition");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    const query = map({
        [_vn]: [() => input.VersionNumber !== void 0, () => input[_VN].toString()],
        [_an]: [, input[_AN]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeTemplatePermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/templates/{TemplateId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeThemeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/themes/{ThemeId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("ThemeId", () => input.ThemeId, "{ThemeId}", false);
    const query = map({
        [_vn]: [() => input.VersionNumber !== void 0, () => input[_VN].toString()],
        [_an]: [, input[_AN]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeThemeAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("ThemeId", () => input.ThemeId, "{ThemeId}", false);
    b.p("AliasName", () => input.AliasName, "{AliasName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeThemePermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/themes/{ThemeId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("ThemeId", () => input.ThemeId, "{ThemeId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeTopicCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/topics/{TopicId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TopicId", () => input.TopicId, "{TopicId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeTopicPermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/topics/{TopicId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TopicId", () => input.TopicId, "{TopicId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeTopicRefreshCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/topics/{TopicId}/refresh/{RefreshId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TopicId", () => input.TopicId, "{TopicId}", false);
    b.p("RefreshId", () => input.RefreshId, "{RefreshId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeTopicRefreshScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/topics/{TopicId}/schedules/{DatasetId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TopicId", () => input.TopicId, "{TopicId}", false);
    b.p("DatasetId", () => input.DatasetId, "{DatasetId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}");
    b.p("UserName", () => input.UserName, "{UserName}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeVPCConnectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/vpc-connections/{VPCConnectionId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("VPCConnectionId", () => input.VPCConnectionId, "{VPCConnectionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GenerateEmbedUrlForAnonymousUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/embed-url/anonymous-user");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AllowedDomains: (_) => _json(_),
        AuthorizedResourceArns: (_) => _json(_),
        ExperienceConfiguration: (_) => _json(_),
        Namespace: [],
        SessionLifetimeInMinutes: [],
        SessionTags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GenerateEmbedUrlForRegisteredUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/embed-url/registered-user");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AllowedDomains: (_) => _json(_),
        ExperienceConfiguration: (_) => _json(_),
        SessionLifetimeInMinutes: [],
        UserArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetDashboardEmbedUrlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}/embed-url");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    const query = map({
        [_ct]: [, __expectNonNull(input[_IT], `IdentityType`)],
        [_sl]: [() => input.SessionLifetimeInMinutes !== void 0, () => input[_SLIM].toString()],
        [_urd]: [() => input.UndoRedoDisabled !== void 0, () => input[_URD].toString()],
        [_rd]: [() => input.ResetDisabled !== void 0, () => input[_RD].toString()],
        [_spe]: [() => input.StatePersistenceEnabled !== void 0, () => input[_SPE].toString()],
        [_ua]: [, input[_UA]],
        [_n]: [, input[_N]],
        [_adi]: [() => input.AdditionalDashboardIds !== void 0, () => (input[_ADI] || []).map((_entry) => _entry)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetSessionEmbedUrlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/session-embed-url");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_ep]: [, input[_EP]],
        [_sl]: [() => input.SessionLifetimeInMinutes !== void 0, () => input[_SLIM].toString()],
        [_ua]: [, input[_UA]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAnalysesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/analyses");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAssetBundleExportJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/asset-bundle-export-jobs");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAssetBundleImportJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/asset-bundle-import-jobs");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDashboardsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/dashboards");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDashboardVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDataSetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sets");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDataSourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sources");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFolderMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/folders/{FolderId}/members");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("FolderId", () => input.FolderId, "{FolderId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFoldersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/folders");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListGroupMembershipsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members");
    b.p("GroupName", () => input.GroupName, "{GroupName}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/groups");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListIAMPolicyAssignmentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/v2/iam-policy-assignments");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    const query = map({
        [_as]: [, input[_AS]],
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListIAMPolicyAssignmentsForUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/iam-policy-assignments");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("UserName", () => input.UserName, "{UserName}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListIdentityPropagationConfigsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/identity-propagation-config");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListIngestionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListNamespacesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRefreshSchedulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListRoleMembershipsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/roles/{Role}/members");
    b.p("Role", () => input.Role, "{Role}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resources/{ResourceArn}/tags");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListTemplateAliasesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/templates/{TemplateId}/aliases");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr_]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/templates");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr_]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTemplateVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/templates/{TemplateId}/versions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListThemeAliasesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/themes/{ThemeId}/aliases");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("ThemeId", () => input.ThemeId, "{ThemeId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr_]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListThemesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/themes");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListThemeVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/themes/{ThemeId}/versions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("ThemeId", () => input.ThemeId, "{ThemeId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTopicRefreshSchedulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/topics/{TopicId}/schedules");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TopicId", () => input.TopicId, "{TopicId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListTopicsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/topics");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListUserGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/groups");
    b.p("UserName", () => input.UserName, "{UserName}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListUsersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/users");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListVPCConnectionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/vpc-connections");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutDataSetRefreshPropertiesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-properties");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DataSetRefreshProperties: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_RegisterUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/users");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    body = JSON.stringify(take(input, {
        CustomFederationProviderUrl: [],
        CustomPermissionsName: [],
        Email: [],
        ExternalLoginFederationProviderType: [],
        ExternalLoginId: [],
        IamArn: [],
        IdentityType: [],
        SessionName: [],
        Tags: (_) => _json(_),
        UserName: [],
        UserRole: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RestoreAnalysisCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/restore/analyses/{AnalysisId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("AnalysisId", () => input.AnalysisId, "{AnalysisId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchAnalysesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/search/analyses");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchDashboardsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/search/dashboards");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchDataSetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/search/data-sets");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchDataSourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/search/data-sources");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchFoldersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/search/folders");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/groups-search");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_StartAssetBundleExportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/asset-bundle-export-jobs/export");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AssetBundleExportJobId: [],
        CloudFormationOverridePropertyConfiguration: (_) => _json(_),
        ExportFormat: [],
        IncludeAllDependencies: [],
        IncludePermissions: [],
        IncludeTags: [],
        ResourceArns: (_) => _json(_),
        ValidationStrategy: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartAssetBundleImportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/asset-bundle-import-jobs/import");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AssetBundleImportJobId: [],
        AssetBundleImportSource: (_) => se_AssetBundleImportSource(_, context),
        FailureAction: [],
        OverrideParameters: (_) => se_AssetBundleImportJobOverrideParameters(_, context),
        OverridePermissions: (_) => _json(_),
        OverrideTags: (_) => _json(_),
        OverrideValidationStrategy: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartDashboardSnapshotJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}/snapshot-jobs");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    let body;
    body = JSON.stringify(take(input, {
        SnapshotConfiguration: (_) => se_SnapshotConfiguration(_, context),
        SnapshotJobId: [],
        UserConfiguration: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/resources/{ResourceArn}/tags");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resources/{ResourceArn}/tags");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_k]: [__expectNonNull(input.TagKeys, `TagKeys`) != null, () => (input[_TK] || []).map((_entry) => _entry)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAccountCustomizationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/customizations");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    const query = map({
        [_n]: [, input[_N]],
    });
    let body;
    body = JSON.stringify(take(input, {
        AccountCustomization: (_) => _json(_),
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAccountSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/settings");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DefaultNamespace: [],
        NotificationEmail: [],
        TerminationProtectionEnabled: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAnalysisCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/analyses/{AnalysisId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("AnalysisId", () => input.AnalysisId, "{AnalysisId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Definition: (_) => se_AnalysisDefinition(_, context),
        Name: [],
        Parameters: (_) => se__Parameters(_, context),
        SourceEntity: (_) => _json(_),
        ThemeArn: [],
        ValidationStrategy: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAnalysisPermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("AnalysisId", () => input.AnalysisId, "{AnalysisId}", false);
    let body;
    body = JSON.stringify(take(input, {
        GrantPermissions: (_) => _json(_),
        RevokePermissions: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDashboardCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DashboardPublishOptions: (_) => _json(_),
        Definition: (_) => se_DashboardVersionDefinition(_, context),
        Name: [],
        Parameters: (_) => se__Parameters(_, context),
        SourceEntity: (_) => _json(_),
        ThemeArn: [],
        ValidationStrategy: (_) => _json(_),
        VersionDescription: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDashboardLinksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}/linked-entities");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    let body;
    body = JSON.stringify(take(input, {
        LinkEntities: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDashboardPermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    let body;
    body = JSON.stringify(take(input, {
        GrantLinkPermissions: (_) => _json(_),
        GrantPermissions: (_) => _json(_),
        RevokeLinkPermissions: (_) => _json(_),
        RevokePermissions: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDashboardPublishedVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions/{VersionNumber}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DashboardId", () => input.DashboardId, "{DashboardId}", false);
    b.p("VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDataSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ColumnGroups: (_) => _json(_),
        ColumnLevelPermissionRules: (_) => _json(_),
        DataSetUsageConfiguration: (_) => _json(_),
        DatasetParameters: (_) => se_DatasetParameterList(_, context),
        FieldFolders: (_) => _json(_),
        ImportMode: [],
        LogicalTableMap: (_) => se_LogicalTableMap(_, context),
        Name: [],
        PhysicalTableMap: (_) => _json(_),
        RowLevelPermissionDataSet: (_) => _json(_),
        RowLevelPermissionTagConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDataSetPermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    body = JSON.stringify(take(input, {
        GrantPermissions: (_) => _json(_),
        RevokePermissions: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/data-sources/{DataSourceId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSourceId", () => input.DataSourceId, "{DataSourceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Credentials: (_) => _json(_),
        DataSourceParameters: (_) => _json(_),
        Name: [],
        SslProperties: (_) => _json(_),
        VpcConnectionProperties: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDataSourcePermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("DataSourceId", () => input.DataSourceId, "{DataSourceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        GrantPermissions: (_) => _json(_),
        RevokePermissions: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateFolderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/folders/{FolderId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("FolderId", () => input.FolderId, "{FolderId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateFolderPermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/folders/{FolderId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("FolderId", () => input.FolderId, "{FolderId}", false);
    let body;
    body = JSON.stringify(take(input, {
        GrantPermissions: (_) => _json(_),
        RevokePermissions: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}");
    b.p("GroupName", () => input.GroupName, "{GroupName}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateIAMPolicyAssignmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("AssignmentName", () => input.AssignmentName, "{AssignmentName}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    body = JSON.stringify(take(input, {
        AssignmentStatus: [],
        Identities: (_) => _json(_),
        PolicyArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateIdentityPropagationConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/identity-propagation-config/{Service}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Service", () => input.Service, "{Service}", false);
    let body;
    body = JSON.stringify(take(input, {
        AuthorizedTargets: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateIpRestrictionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/ip-restriction");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Enabled: [],
        IpRestrictionRuleMap: (_) => _json(_),
        VpcEndpointIdRestrictionRuleMap: (_) => _json(_),
        VpcIdRestrictionRuleMap: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdatePublicSharingSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/public-sharing-settings");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        PublicSharingEnabled: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateRefreshScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Schedule: (_) => se_RefreshSchedule(_, context),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateRoleCustomPermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/roles/{Role}/custom-permission");
    b.p("Role", () => input.Role, "{Role}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    body = JSON.stringify(take(input, {
        CustomPermissionsName: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/templates/{TemplateId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Definition: (_) => se_TemplateVersionDefinition(_, context),
        Name: [],
        SourceEntity: (_) => _json(_),
        ValidationStrategy: (_) => _json(_),
        VersionDescription: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateTemplateAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    b.p("AliasName", () => input.AliasName, "{AliasName}", false);
    let body;
    body = JSON.stringify(take(input, {
        TemplateVersionNumber: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateTemplatePermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/templates/{TemplateId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    let body;
    body = JSON.stringify(take(input, {
        GrantPermissions: (_) => _json(_),
        RevokePermissions: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateThemeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/themes/{ThemeId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("ThemeId", () => input.ThemeId, "{ThemeId}", false);
    let body;
    body = JSON.stringify(take(input, {
        BaseThemeId: [],
        Configuration: (_) => _json(_),
        Name: [],
        VersionDescription: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateThemeAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("ThemeId", () => input.ThemeId, "{ThemeId}", false);
    b.p("AliasName", () => input.AliasName, "{AliasName}", false);
    let body;
    body = JSON.stringify(take(input, {
        ThemeVersionNumber: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateThemePermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/themes/{ThemeId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("ThemeId", () => input.ThemeId, "{ThemeId}", false);
    let body;
    body = JSON.stringify(take(input, {
        GrantPermissions: (_) => _json(_),
        RevokePermissions: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateTopicCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/topics/{TopicId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TopicId", () => input.TopicId, "{TopicId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Topic: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateTopicPermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/topics/{TopicId}/permissions");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TopicId", () => input.TopicId, "{TopicId}", false);
    let body;
    body = JSON.stringify(take(input, {
        GrantPermissions: (_) => _json(_),
        RevokePermissions: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateTopicRefreshScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/topics/{TopicId}/schedules/{DatasetId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("TopicId", () => input.TopicId, "{TopicId}", false);
    b.p("DatasetId", () => input.DatasetId, "{DatasetId}", false);
    let body;
    body = JSON.stringify(take(input, {
        RefreshSchedule: (_) => se_TopicRefreshSchedule(_, context),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}");
    b.p("UserName", () => input.UserName, "{UserName}", false);
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("Namespace", () => input.Namespace, "{Namespace}", false);
    let body;
    body = JSON.stringify(take(input, {
        CustomFederationProviderUrl: [],
        CustomPermissionsName: [],
        Email: [],
        ExternalLoginFederationProviderType: [],
        ExternalLoginId: [],
        Role: [],
        UnapplyCustomPermissions: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateVPCConnectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/{AwsAccountId}/vpc-connections/{VPCConnectionId}");
    b.p("AwsAccountId", () => input.AwsAccountId, "{AwsAccountId}", false);
    b.p("VPCConnectionId", () => input.VPCConnectionId, "{VPCConnectionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DnsResolvers: (_) => _json(_),
        Name: [],
        RoleArn: [],
        SecurityGroupIds: (_) => _json(_),
        SubnetIds: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_CancelIngestionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        IngestionId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateAccountCustomizationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccountCustomization: _json,
        Arn: __expectString,
        AwsAccountId: __expectString,
        Namespace: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateAccountSubscriptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        SignupResponse: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateAnalysisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnalysisId: __expectString,
        Arn: __expectString,
        CreationStatus: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateDashboardCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationStatus: __expectString,
        DashboardId: __expectString,
        RequestId: __expectString,
        VersionArn: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        DataSetId: __expectString,
        IngestionArn: __expectString,
        IngestionId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationStatus: __expectString,
        DataSourceId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateFolderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        FolderId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateFolderMembershipCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FolderMember: _json,
        RequestId: __expectString,
        Status: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Group: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateGroupMembershipCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GroupMember: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateIAMPolicyAssignmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssignmentId: __expectString,
        AssignmentName: __expectString,
        AssignmentStatus: __expectString,
        Identities: _json,
        PolicyArn: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateIngestionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        IngestionId: __expectString,
        IngestionStatus: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateNamespaceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CapacityRegion: __expectString,
        CreationStatus: __expectString,
        IdentityStore: __expectString,
        Name: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateRefreshScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        RequestId: __expectString,
        ScheduleId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateRoleMembershipCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationStatus: __expectString,
        RequestId: __expectString,
        TemplateId: __expectString,
        VersionArn: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateTemplateAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        TemplateAlias: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationStatus: __expectString,
        RequestId: __expectString,
        ThemeId: __expectString,
        VersionArn: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateThemeAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        ThemeAlias: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateTopicCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        RefreshArn: __expectString,
        RequestId: __expectString,
        TopicId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateTopicRefreshScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DatasetArn: __expectString,
        RequestId: __expectString,
        TopicArn: __expectString,
        TopicId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_CreateVPCConnectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AvailabilityStatus: __expectString,
        CreationStatus: __expectString,
        RequestId: __expectString,
        VPCConnectionId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteAccountCustomizationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteAccountSubscriptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteAnalysisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnalysisId: __expectString,
        Arn: __expectString,
        DeletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteDashboardCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        DashboardId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        DataSetId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteDataSetRefreshPropertiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        DataSourceId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteFolderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        FolderId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteFolderMembershipCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        Status: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteGroupMembershipCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteIAMPolicyAssignmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssignmentName: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteIdentityPropagationConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteNamespaceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteRefreshScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        RequestId: __expectString,
        ScheduleId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteRoleCustomPermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        Status: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteRoleMembershipCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        RequestId: __expectString,
        TemplateId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteTemplateAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AliasName: __expectString,
        Arn: __expectString,
        RequestId: __expectString,
        TemplateId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        RequestId: __expectString,
        ThemeId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteThemeAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AliasName: __expectString,
        Arn: __expectString,
        RequestId: __expectString,
        ThemeId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteTopicCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        RequestId: __expectString,
        TopicId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteTopicRefreshScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DatasetArn: __expectString,
        RequestId: __expectString,
        TopicArn: __expectString,
        TopicId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteUserByPrincipalIdCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DeleteVPCConnectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AvailabilityStatus: __expectString,
        DeletionStatus: __expectString,
        RequestId: __expectString,
        VPCConnectionId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeAccountCustomizationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccountCustomization: _json,
        Arn: __expectString,
        AwsAccountId: __expectString,
        Namespace: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeAccountSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccountSettings: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeAccountSubscriptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccountInfo: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeAnalysisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Analysis: (_) => de_Analysis(_, context),
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeAnalysisDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnalysisId: __expectString,
        Definition: (_) => de_AnalysisDefinition(_, context),
        Errors: _json,
        Name: __expectString,
        RequestId: __expectString,
        ResourceStatus: __expectString,
        ThemeArn: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeAnalysisPermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnalysisArn: __expectString,
        AnalysisId: __expectString,
        Permissions: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeAssetBundleExportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AssetBundleExportJobId: __expectString,
        AwsAccountId: __expectString,
        CloudFormationOverridePropertyConfiguration: _json,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DownloadUrl: __expectString,
        Errors: _json,
        ExportFormat: __expectString,
        IncludeAllDependencies: __expectBoolean,
        IncludePermissions: __expectBoolean,
        IncludeTags: __expectBoolean,
        JobStatus: __expectString,
        RequestId: __expectString,
        ResourceArns: _json,
        ValidationStrategy: _json,
        Warnings: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeAssetBundleImportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AssetBundleImportJobId: __expectString,
        AssetBundleImportSource: _json,
        AwsAccountId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Errors: _json,
        FailureAction: __expectString,
        JobStatus: __expectString,
        OverrideParameters: (_) => de_AssetBundleImportJobOverrideParameters(_, context),
        OverridePermissions: _json,
        OverrideTags: _json,
        OverrideValidationStrategy: _json,
        RequestId: __expectString,
        RollbackErrors: _json,
        Warnings: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeDashboardCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Dashboard: (_) => de_Dashboard(_, context),
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeDashboardDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DashboardId: __expectString,
        DashboardPublishOptions: _json,
        Definition: (_) => de_DashboardVersionDefinition(_, context),
        Errors: _json,
        Name: __expectString,
        RequestId: __expectString,
        ResourceStatus: __expectString,
        ThemeArn: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeDashboardPermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DashboardArn: __expectString,
        DashboardId: __expectString,
        LinkSharingConfiguration: _json,
        Permissions: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeDashboardSnapshotJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AwsAccountId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DashboardId: __expectString,
        JobStatus: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RequestId: __expectString,
        SnapshotConfiguration: (_) => de_SnapshotConfiguration(_, context),
        SnapshotJobId: __expectString,
        Status: __expectInt32,
        UserConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDashboardSnapshotJobResultCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ErrorInfo: _json,
        JobStatus: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RequestId: __expectString,
        Result: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DataSet: (_) => de_DataSet(_, context),
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeDataSetPermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DataSetArn: __expectString,
        DataSetId: __expectString,
        Permissions: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeDataSetRefreshPropertiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DataSetRefreshProperties: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DataSource: (_) => de_DataSource(_, context),
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeDataSourcePermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DataSourceArn: __expectString,
        DataSourceId: __expectString,
        Permissions: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeFolderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Folder: (_) => de_Folder(_, context),
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeFolderPermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        FolderId: __expectString,
        NextToken: __expectString,
        Permissions: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeFolderResolvedPermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        FolderId: __expectString,
        NextToken: __expectString,
        Permissions: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Group: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeGroupMembershipCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GroupMember: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeIAMPolicyAssignmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IAMPolicyAssignment: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeIngestionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Ingestion: (_) => de_Ingestion(_, context),
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeIpRestrictionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AwsAccountId: __expectString,
        Enabled: __expectBoolean,
        IpRestrictionRuleMap: _json,
        RequestId: __expectString,
        VpcEndpointIdRestrictionRuleMap: _json,
        VpcIdRestrictionRuleMap: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeNamespaceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Namespace: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeRefreshScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        RefreshSchedule: (_) => de_RefreshSchedule(_, context),
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeRoleCustomPermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CustomPermissionsName: __expectString,
        RequestId: __expectString,
        Status: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        Template: (_) => de_Template(_, context),
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeTemplateAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        TemplateAlias: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeTemplateDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Definition: (_) => de_TemplateVersionDefinition(_, context),
        Errors: _json,
        Name: __expectString,
        RequestId: __expectString,
        ResourceStatus: __expectString,
        TemplateId: __expectString,
        ThemeArn: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeTemplatePermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Permissions: _json,
        RequestId: __expectString,
        TemplateArn: __expectString,
        TemplateId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        Theme: (_) => de_Theme(_, context),
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeThemeAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        ThemeAlias: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeThemePermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Permissions: _json,
        RequestId: __expectString,
        ThemeArn: __expectString,
        ThemeId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeTopicCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        RequestId: __expectString,
        Topic: _json,
        TopicId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeTopicPermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Permissions: _json,
        RequestId: __expectString,
        TopicArn: __expectString,
        TopicId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeTopicRefreshCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RefreshDetails: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeTopicRefreshScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DatasetArn: __expectString,
        RefreshSchedule: (_) => de_TopicRefreshSchedule(_, context),
        RequestId: __expectString,
        TopicArn: __expectString,
        TopicId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        User: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_DescribeVPCConnectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        Status: __expectInt32,
        VPCConnection: (_) => de_VPCConnection(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GenerateEmbedUrlForAnonymousUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnonymousUserArn: __expectString,
        EmbedUrl: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_GenerateEmbedUrlForRegisteredUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EmbedUrl: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_GetDashboardEmbedUrlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EmbedUrl: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_GetSessionEmbedUrlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EmbedUrl: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListAnalysesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnalysisSummaryList: (_) => de_AnalysisSummaryList(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListAssetBundleExportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssetBundleExportJobSummaryList: (_) => de_AssetBundleExportJobSummaryList(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListAssetBundleImportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssetBundleImportJobSummaryList: (_) => de_AssetBundleImportJobSummaryList(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListDashboardsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DashboardSummaryList: (_) => de_DashboardSummaryList(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListDashboardVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DashboardVersionSummaryList: (_) => de_DashboardVersionSummaryList(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListDataSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DataSetSummaries: (_) => de_DataSetSummaryList(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListDataSourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DataSources: (_) => de_DataSourceList(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListFolderMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FolderMemberList: _json,
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListFoldersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FolderSummaryList: (_) => de_FolderSummaryList(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListGroupMembershipsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GroupMemberList: _json,
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GroupList: _json,
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListIAMPolicyAssignmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IAMPolicyAssignments: _json,
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListIAMPolicyAssignmentsForUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ActiveAssignments: _json,
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListIdentityPropagationConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RequestId: __expectString,
        Services: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListIngestionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Ingestions: (_) => de_Ingestions(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListNamespacesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Namespaces: _json,
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListRefreshSchedulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RefreshSchedules: (_) => de_RefreshSchedules(_, context),
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListRoleMembershipsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MembersList: _json,
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        Tags: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListTemplateAliasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RequestId: __expectString,
        TemplateAliasList: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RequestId: __expectString,
        TemplateSummaryList: (_) => de_TemplateSummaryList(_, context),
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListTemplateVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RequestId: __expectString,
        TemplateVersionSummaryList: (_) => de_TemplateVersionSummaryList(_, context),
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListThemeAliasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RequestId: __expectString,
        ThemeAliasList: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListThemesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RequestId: __expectString,
        ThemeSummaryList: (_) => de_ThemeSummaryList(_, context),
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListThemeVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RequestId: __expectString,
        ThemeVersionSummaryList: (_) => de_ThemeVersionSummaryList(_, context),
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListTopicRefreshSchedulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RefreshSchedules: (_) => de_TopicRefreshScheduleSummaries(_, context),
        RequestId: __expectString,
        TopicArn: __expectString,
        TopicId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListTopicsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RequestId: __expectString,
        TopicsSummaries: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListUserGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GroupList: _json,
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListUsersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RequestId: __expectString,
        UserList: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_ListVPCConnectionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RequestId: __expectString,
        VPCConnectionSummaries: (_) => de_VPCConnectionSummaryList(_, context),
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_PutDataSetRefreshPropertiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_RegisterUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        User: _json,
        UserInvitationUrl: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_RestoreAnalysisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnalysisId: __expectString,
        Arn: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_SearchAnalysesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnalysisSummaryList: (_) => de_AnalysisSummaryList(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_SearchDashboardsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DashboardSummaryList: (_) => de_DashboardSummaryList(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_SearchDataSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DataSetSummaries: (_) => de_DataSetSummaryList(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_SearchDataSourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DataSourceSummaries: (_) => de_DataSourceSummaryList(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_SearchFoldersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FolderSummaryList: (_) => de_FolderSummaryList(_, context),
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_SearchGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GroupList: _json,
        NextToken: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_StartAssetBundleExportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AssetBundleExportJobId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_StartAssetBundleImportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AssetBundleImportJobId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_StartDashboardSnapshotJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        RequestId: __expectString,
        SnapshotJobId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateAccountCustomizationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccountCustomization: _json,
        Arn: __expectString,
        AwsAccountId: __expectString,
        Namespace: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateAccountSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateAnalysisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnalysisId: __expectString,
        Arn: __expectString,
        RequestId: __expectString,
        UpdateStatus: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateAnalysisPermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnalysisArn: __expectString,
        AnalysisId: __expectString,
        Permissions: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateDashboardCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationStatus: __expectString,
        DashboardId: __expectString,
        RequestId: __expectString,
        Status: __expectInt32,
        VersionArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateDashboardLinksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DashboardArn: __expectString,
        LinkEntities: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateDashboardPermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DashboardArn: __expectString,
        DashboardId: __expectString,
        LinkSharingConfiguration: _json,
        Permissions: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateDashboardPublishedVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DashboardArn: __expectString,
        DashboardId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        DataSetId: __expectString,
        IngestionArn: __expectString,
        IngestionId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateDataSetPermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DataSetArn: __expectString,
        DataSetId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        DataSourceId: __expectString,
        RequestId: __expectString,
        UpdateStatus: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateDataSourcePermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DataSourceArn: __expectString,
        DataSourceId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateFolderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        FolderId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateFolderPermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        FolderId: __expectString,
        Permissions: _json,
        RequestId: __expectString,
        Status: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Group: _json,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateIAMPolicyAssignmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssignmentId: __expectString,
        AssignmentName: __expectString,
        AssignmentStatus: __expectString,
        Identities: _json,
        PolicyArn: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateIdentityPropagationConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateIpRestrictionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AwsAccountId: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdatePublicSharingSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateRefreshScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        RequestId: __expectString,
        ScheduleId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateRoleCustomPermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        Status: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationStatus: __expectString,
        RequestId: __expectString,
        TemplateId: __expectString,
        VersionArn: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateTemplateAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        TemplateAlias: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateTemplatePermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Permissions: _json,
        RequestId: __expectString,
        TemplateArn: __expectString,
        TemplateId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationStatus: __expectString,
        RequestId: __expectString,
        ThemeId: __expectString,
        VersionArn: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateThemeAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        ThemeAlias: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateThemePermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Permissions: _json,
        RequestId: __expectString,
        ThemeArn: __expectString,
        ThemeId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateTopicCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        RefreshArn: __expectString,
        RequestId: __expectString,
        TopicId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateTopicPermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Permissions: _json,
        RequestId: __expectString,
        TopicArn: __expectString,
        TopicId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateTopicRefreshScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DatasetArn: __expectString,
        RequestId: __expectString,
        TopicArn: __expectString,
        TopicId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RequestId: __expectString,
        User: _json,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
export const de_UpdateVPCConnectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AvailabilityStatus: __expectString,
        RequestId: __expectString,
        UpdateStatus: __expectString,
        VPCConnectionId: __expectString,
    });
    Object.assign(contents, doc);
    map(contents, {
        Status: [, output.statusCode],
    });
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.quicksight#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.quicksight#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.quicksight#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceExistsException":
        case "com.amazonaws.quicksight#ResourceExistsException":
            throw await de_ResourceExistsExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.quicksight#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.quicksight#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.quicksight#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.quicksight#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
        case "PreconditionNotMetException":
        case "com.amazonaws.quicksight#PreconditionNotMetException":
            throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.quicksight#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedUserEditionException":
        case "com.amazonaws.quicksight#UnsupportedUserEditionException":
            throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
        case "ConcurrentUpdatingException":
        case "com.amazonaws.quicksight#ConcurrentUpdatingException":
            throw await de_ConcurrentUpdatingExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.quicksight#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "SessionLifetimeInMinutesInvalidException":
        case "com.amazonaws.quicksight#SessionLifetimeInMinutesInvalidException":
            throw await de_SessionLifetimeInMinutesInvalidExceptionRes(parsedOutput, context);
        case "UnsupportedPricingPlanException":
        case "com.amazonaws.quicksight#UnsupportedPricingPlanException":
            throw await de_UnsupportedPricingPlanExceptionRes(parsedOutput, context);
        case "QuickSightUserNotFoundException":
        case "com.amazonaws.quicksight#QuickSightUserNotFoundException":
            throw await de_QuickSightUserNotFoundExceptionRes(parsedOutput, context);
        case "DomainNotWhitelistedException":
        case "com.amazonaws.quicksight#DomainNotWhitelistedException":
            throw await de_DomainNotWhitelistedExceptionRes(parsedOutput, context);
        case "IdentityTypeNotSupportedException":
        case "com.amazonaws.quicksight#IdentityTypeNotSupportedException":
            throw await de_IdentityTypeNotSupportedExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.quicksight#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConcurrentUpdatingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConcurrentUpdatingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_DomainNotWhitelistedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new DomainNotWhitelistedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_IdentityTypeNotSupportedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new IdentityTypeNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalFailureExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_PreconditionNotMetExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new PreconditionNotMetException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_QuickSightUserNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new QuickSightUserNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceExistsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceUnavailableExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_SessionLifetimeInMinutesInvalidExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new SessionLifetimeInMinutesInvalidException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnsupportedPricingPlanExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnsupportedPricingPlanException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnsupportedUserEditionExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnsupportedUserEditionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_AggregationFunction = (input, context) => {
    return take(input, {
        AttributeAggregationFunction: _json,
        CategoricalAggregationFunction: [],
        DateAggregationFunction: [],
        NumericalAggregationFunction: (_) => se_NumericalAggregationFunction(_, context),
    });
};
const se_AggregationSortConfiguration = (input, context) => {
    return take(input, {
        AggregationFunction: (_) => se_AggregationFunction(_, context),
        Column: _json,
        SortDirection: [],
    });
};
const se_AggregationSortConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AggregationSortConfiguration(entry, context);
    });
};
const se_AnalysisDefinition = (input, context) => {
    return take(input, {
        AnalysisDefaults: _json,
        CalculatedFields: _json,
        ColumnConfigurations: _json,
        DataSetIdentifierDeclarations: _json,
        FilterGroups: (_) => se_FilterGroupList(_, context),
        Options: _json,
        ParameterDeclarations: (_) => se_ParameterDeclarationList(_, context),
        Sheets: (_) => se_SheetDefinitionList(_, context),
    });
};
const se_ArcAxisConfiguration = (input, context) => {
    return take(input, {
        Range: (_) => se_ArcAxisDisplayRange(_, context),
        ReserveRange: [],
    });
};
const se_ArcAxisDisplayRange = (input, context) => {
    return take(input, {
        Max: __serializeFloat,
        Min: __serializeFloat,
    });
};
const se_ArcConfiguration = (input, context) => {
    return take(input, {
        ArcAngle: __serializeFloat,
        ArcThickness: [],
    });
};
const se_AssetBundleImportJobOverrideParameters = (input, context) => {
    return take(input, {
        Analyses: _json,
        Dashboards: _json,
        DataSets: _json,
        DataSources: _json,
        RefreshSchedules: (_) => se_AssetBundleImportJobRefreshScheduleOverrideParametersList(_, context),
        ResourceIdOverrideConfiguration: _json,
        Themes: _json,
        VPCConnections: _json,
    });
};
const se_AssetBundleImportJobRefreshScheduleOverrideParameters = (input, context) => {
    return take(input, {
        DataSetId: [],
        ScheduleId: [],
        StartAfterDateTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_AssetBundleImportJobRefreshScheduleOverrideParametersList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AssetBundleImportJobRefreshScheduleOverrideParameters(entry, context);
    });
};
const se_AssetBundleImportSource = (input, context) => {
    return take(input, {
        Body: context.base64Encoder,
        S3Uri: [],
    });
};
const se_AxisDataOptions = (input, context) => {
    return take(input, {
        DateAxisOptions: _json,
        NumericAxisOptions: (_) => se_NumericAxisOptions(_, context),
    });
};
const se_AxisDisplayMinMaxRange = (input, context) => {
    return take(input, {
        Maximum: __serializeFloat,
        Minimum: __serializeFloat,
    });
};
const se_AxisDisplayOptions = (input, context) => {
    return take(input, {
        AxisLineVisibility: [],
        AxisOffset: [],
        DataOptions: (_) => se_AxisDataOptions(_, context),
        GridLineVisibility: [],
        ScrollbarOptions: (_) => se_ScrollBarOptions(_, context),
        TickLabelOptions: (_) => se_AxisTickLabelOptions(_, context),
    });
};
const se_AxisDisplayRange = (input, context) => {
    return take(input, {
        DataDriven: _json,
        MinMax: (_) => se_AxisDisplayMinMaxRange(_, context),
    });
};
const se_AxisLinearScale = (input, context) => {
    return take(input, {
        StepCount: [],
        StepSize: __serializeFloat,
    });
};
const se_AxisLogarithmicScale = (input, context) => {
    return take(input, {
        Base: __serializeFloat,
    });
};
const se_AxisScale = (input, context) => {
    return take(input, {
        Linear: (_) => se_AxisLinearScale(_, context),
        Logarithmic: (_) => se_AxisLogarithmicScale(_, context),
    });
};
const se_AxisTickLabelOptions = (input, context) => {
    return take(input, {
        LabelOptions: _json,
        RotationAngle: __serializeFloat,
    });
};
const se_BarChartAggregatedFieldWells = (input, context) => {
    return take(input, {
        Category: _json,
        Colors: _json,
        SmallMultiples: _json,
        Values: (_) => se_MeasureFieldList(_, context),
    });
};
const se_BarChartConfiguration = (input, context) => {
    return take(input, {
        BarsArrangement: [],
        CategoryAxis: (_) => se_AxisDisplayOptions(_, context),
        CategoryLabelOptions: _json,
        ColorLabelOptions: _json,
        ContributionAnalysisDefaults: _json,
        DataLabels: _json,
        FieldWells: (_) => se_BarChartFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        Orientation: [],
        ReferenceLines: (_) => se_ReferenceLineList(_, context),
        SmallMultiplesOptions: _json,
        SortConfiguration: (_) => se_BarChartSortConfiguration(_, context),
        Tooltip: (_) => se_TooltipOptions(_, context),
        ValueAxis: (_) => se_AxisDisplayOptions(_, context),
        ValueLabelOptions: _json,
        VisualPalette: _json,
    });
};
const se_BarChartFieldWells = (input, context) => {
    return take(input, {
        BarChartAggregatedFieldWells: (_) => se_BarChartAggregatedFieldWells(_, context),
    });
};
const se_BarChartSortConfiguration = (input, context) => {
    return take(input, {
        CategoryItemsLimit: _json,
        CategorySort: (_) => se_FieldSortOptionsList(_, context),
        ColorItemsLimit: _json,
        ColorSort: (_) => se_FieldSortOptionsList(_, context),
        SmallMultiplesLimitConfiguration: _json,
        SmallMultiplesSort: (_) => se_FieldSortOptionsList(_, context),
    });
};
const se_BarChartVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_BarChartConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_BinWidthOptions = (input, context) => {
    return take(input, {
        BinCountLimit: [],
        Value: __serializeFloat,
    });
};
const se_BoxPlotAggregatedFieldWells = (input, context) => {
    return take(input, {
        GroupBy: _json,
        Values: (_) => se_BoxPlotMeasureFieldList(_, context),
    });
};
const se_BoxPlotChartConfiguration = (input, context) => {
    return take(input, {
        BoxPlotOptions: _json,
        CategoryAxis: (_) => se_AxisDisplayOptions(_, context),
        CategoryLabelOptions: _json,
        FieldWells: (_) => se_BoxPlotFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        PrimaryYAxisDisplayOptions: (_) => se_AxisDisplayOptions(_, context),
        PrimaryYAxisLabelOptions: _json,
        ReferenceLines: (_) => se_ReferenceLineList(_, context),
        SortConfiguration: (_) => se_BoxPlotSortConfiguration(_, context),
        Tooltip: (_) => se_TooltipOptions(_, context),
        VisualPalette: _json,
    });
};
const se_BoxPlotFieldWells = (input, context) => {
    return take(input, {
        BoxPlotAggregatedFieldWells: (_) => se_BoxPlotAggregatedFieldWells(_, context),
    });
};
const se_BoxPlotMeasureFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MeasureField(entry, context);
    });
};
const se_BoxPlotSortConfiguration = (input, context) => {
    return take(input, {
        CategorySort: (_) => se_FieldSortOptionsList(_, context),
        PaginationConfiguration: _json,
    });
};
const se_BoxPlotVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_BoxPlotChartConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_CategoryFilter = (input, context) => {
    return take(input, {
        Column: _json,
        Configuration: _json,
        DefaultFilterControlConfiguration: (_) => se_DefaultFilterControlConfiguration(_, context),
        FilterId: [],
    });
};
const se_ColorScale = (input, context) => {
    return take(input, {
        ColorFillType: [],
        Colors: (_) => se_ColorScaleColorList(_, context),
        NullValueColor: (_) => se_DataColor(_, context),
    });
};
const se_ColorScaleColorList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DataColor(entry, context);
    });
};
const se_ColumnHierarchy = (input, context) => {
    return take(input, {
        DateTimeHierarchy: (_) => se_DateTimeHierarchy(_, context),
        ExplicitHierarchy: (_) => se_ExplicitHierarchy(_, context),
        PredefinedHierarchy: (_) => se_PredefinedHierarchy(_, context),
    });
};
const se_ColumnHierarchyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ColumnHierarchy(entry, context);
    });
};
const se_ColumnSort = (input, context) => {
    return take(input, {
        AggregationFunction: (_) => se_AggregationFunction(_, context),
        Direction: [],
        SortBy: _json,
    });
};
const se_ColumnTooltipItem = (input, context) => {
    return take(input, {
        Aggregation: (_) => se_AggregationFunction(_, context),
        Column: _json,
        Label: [],
        TooltipTarget: [],
        Visibility: [],
    });
};
const se_ComboChartAggregatedFieldWells = (input, context) => {
    return take(input, {
        BarValues: (_) => se_MeasureFieldList(_, context),
        Category: _json,
        Colors: _json,
        LineValues: (_) => se_MeasureFieldList(_, context),
    });
};
const se_ComboChartConfiguration = (input, context) => {
    return take(input, {
        BarDataLabels: _json,
        BarsArrangement: [],
        CategoryAxis: (_) => se_AxisDisplayOptions(_, context),
        CategoryLabelOptions: _json,
        ColorLabelOptions: _json,
        FieldWells: (_) => se_ComboChartFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        LineDataLabels: _json,
        PrimaryYAxisDisplayOptions: (_) => se_AxisDisplayOptions(_, context),
        PrimaryYAxisLabelOptions: _json,
        ReferenceLines: (_) => se_ReferenceLineList(_, context),
        SecondaryYAxisDisplayOptions: (_) => se_AxisDisplayOptions(_, context),
        SecondaryYAxisLabelOptions: _json,
        SingleAxisOptions: _json,
        SortConfiguration: (_) => se_ComboChartSortConfiguration(_, context),
        Tooltip: (_) => se_TooltipOptions(_, context),
        VisualPalette: _json,
    });
};
const se_ComboChartFieldWells = (input, context) => {
    return take(input, {
        ComboChartAggregatedFieldWells: (_) => se_ComboChartAggregatedFieldWells(_, context),
    });
};
const se_ComboChartSortConfiguration = (input, context) => {
    return take(input, {
        CategoryItemsLimit: _json,
        CategorySort: (_) => se_FieldSortOptionsList(_, context),
        ColorItemsLimit: _json,
        ColorSort: (_) => se_FieldSortOptionsList(_, context),
    });
};
const se_ComboChartVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_ComboChartConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_Computation = (input, context) => {
    return take(input, {
        Forecast: (_) => se_ForecastComputation(_, context),
        GrowthRate: (_) => se_GrowthRateComputation(_, context),
        MaximumMinimum: (_) => se_MaximumMinimumComputation(_, context),
        MetricComparison: (_) => se_MetricComparisonComputation(_, context),
        PeriodOverPeriod: (_) => se_PeriodOverPeriodComputation(_, context),
        PeriodToDate: (_) => se_PeriodToDateComputation(_, context),
        TopBottomMovers: (_) => se_TopBottomMoversComputation(_, context),
        TopBottomRanked: (_) => se_TopBottomRankedComputation(_, context),
        TotalAggregation: (_) => se_TotalAggregationComputation(_, context),
        UniqueValues: _json,
    });
};
const se_ComputationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Computation(entry, context);
    });
};
const se_ConditionalFormattingColor = (input, context) => {
    return take(input, {
        Gradient: (_) => se_ConditionalFormattingGradientColor(_, context),
        Solid: _json,
    });
};
const se_ConditionalFormattingGradientColor = (input, context) => {
    return take(input, {
        Color: (_) => se_GradientColor(_, context),
        Expression: [],
    });
};
const se_CustomActionSetParametersOperation = (input, context) => {
    return take(input, {
        ParameterValueConfigurations: (_) => se_SetParameterValueConfigurationList(_, context),
    });
};
const se_CustomContentVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: _json,
        DataSetIdentifier: [],
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_CustomParameterValues = (input, context) => {
    return take(input, {
        DateTimeValues: (_) => se_DateTimeDefaultValueList(_, context),
        DecimalValues: (_) => se_DecimalDefaultValueList(_, context),
        IntegerValues: _json,
        StringValues: _json,
    });
};
const se_CustomValuesConfiguration = (input, context) => {
    return take(input, {
        CustomValues: (_) => se_CustomParameterValues(_, context),
        IncludeNullValue: [],
    });
};
const se_DashboardVersionDefinition = (input, context) => {
    return take(input, {
        AnalysisDefaults: _json,
        CalculatedFields: _json,
        ColumnConfigurations: _json,
        DataSetIdentifierDeclarations: _json,
        FilterGroups: (_) => se_FilterGroupList(_, context),
        Options: _json,
        ParameterDeclarations: (_) => se_ParameterDeclarationList(_, context),
        Sheets: (_) => se_SheetDefinitionList(_, context),
    });
};
const se_DataColor = (input, context) => {
    return take(input, {
        Color: [],
        DataValue: __serializeFloat,
    });
};
const se_DatasetParameter = (input, context) => {
    return take(input, {
        DateTimeDatasetParameter: (_) => se_DateTimeDatasetParameter(_, context),
        DecimalDatasetParameter: (_) => se_DecimalDatasetParameter(_, context),
        IntegerDatasetParameter: _json,
        StringDatasetParameter: _json,
    });
};
const se_DatasetParameterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DatasetParameter(entry, context);
    });
};
const se_DateTimeDatasetParameter = (input, context) => {
    return take(input, {
        DefaultValues: (_) => se_DateTimeDatasetParameterDefaultValues(_, context),
        Id: [],
        Name: [],
        TimeGranularity: [],
        ValueType: [],
    });
};
const se_DateTimeDatasetParameterDefaultValues = (input, context) => {
    return take(input, {
        StaticValues: (_) => se_DateTimeDatasetParameterValueList(_, context),
    });
};
const se_DateTimeDatasetParameterValueList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return Math.round(entry.getTime() / 1000);
    });
};
const se_DateTimeDefaultValueList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return Math.round(entry.getTime() / 1000);
    });
};
const se_DateTimeDefaultValues = (input, context) => {
    return take(input, {
        DynamicValue: _json,
        RollingDate: _json,
        StaticValues: (_) => se_DateTimeDefaultValueList(_, context),
    });
};
const se_DateTimeHierarchy = (input, context) => {
    return take(input, {
        DrillDownFilters: (_) => se_DrillDownFilterList(_, context),
        HierarchyId: [],
    });
};
const se_DateTimeParameter = (input, context) => {
    return take(input, {
        Name: [],
        Values: (_) => se_SensitiveTimestampList(_, context),
    });
};
const se_DateTimeParameterDeclaration = (input, context) => {
    return take(input, {
        DefaultValues: (_) => se_DateTimeDefaultValues(_, context),
        MappedDataSetParameters: _json,
        Name: [],
        TimeGranularity: [],
        ValueWhenUnset: (_) => se_DateTimeValueWhenUnsetConfiguration(_, context),
    });
};
const se_DateTimeParameterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DateTimeParameter(entry, context);
    });
};
const se_DateTimeValueWhenUnsetConfiguration = (input, context) => {
    return take(input, {
        CustomValue: (_) => Math.round(_.getTime() / 1000),
        ValueWhenUnsetOption: [],
    });
};
const se_DecimalDatasetParameter = (input, context) => {
    return take(input, {
        DefaultValues: (_) => se_DecimalDatasetParameterDefaultValues(_, context),
        Id: [],
        Name: [],
        ValueType: [],
    });
};
const se_DecimalDatasetParameterDefaultValues = (input, context) => {
    return take(input, {
        StaticValues: (_) => se_DecimalDatasetParameterValueList(_, context),
    });
};
const se_DecimalDatasetParameterValueList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return __serializeFloat(entry);
    });
};
const se_DecimalDefaultValueList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return __serializeFloat(entry);
    });
};
const se_DecimalDefaultValues = (input, context) => {
    return take(input, {
        DynamicValue: _json,
        StaticValues: (_) => se_DecimalDefaultValueList(_, context),
    });
};
const se_DecimalParameter = (input, context) => {
    return take(input, {
        Name: [],
        Values: (_) => se_SensitiveDoubleList(_, context),
    });
};
const se_DecimalParameterDeclaration = (input, context) => {
    return take(input, {
        DefaultValues: (_) => se_DecimalDefaultValues(_, context),
        MappedDataSetParameters: _json,
        Name: [],
        ParameterValueType: [],
        ValueWhenUnset: (_) => se_DecimalValueWhenUnsetConfiguration(_, context),
    });
};
const se_DecimalParameterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DecimalParameter(entry, context);
    });
};
const se_DecimalValueWhenUnsetConfiguration = (input, context) => {
    return take(input, {
        CustomValue: __serializeFloat,
        ValueWhenUnsetOption: [],
    });
};
const se_DefaultFilterControlConfiguration = (input, context) => {
    return take(input, {
        ControlOptions: (_) => se_DefaultFilterControlOptions(_, context),
        Title: [],
    });
};
const se_DefaultFilterControlOptions = (input, context) => {
    return take(input, {
        DefaultDateTimePickerOptions: _json,
        DefaultDropdownOptions: _json,
        DefaultListOptions: _json,
        DefaultRelativeDateTimeOptions: _json,
        DefaultSliderOptions: (_) => se_DefaultSliderControlOptions(_, context),
        DefaultTextAreaOptions: _json,
        DefaultTextFieldOptions: _json,
    });
};
const se_DefaultSliderControlOptions = (input, context) => {
    return take(input, {
        DisplayOptions: _json,
        MaximumValue: __serializeFloat,
        MinimumValue: __serializeFloat,
        StepSize: __serializeFloat,
        Type: [],
    });
};
const se_DestinationParameterValueConfiguration = (input, context) => {
    return take(input, {
        CustomValuesConfiguration: (_) => se_CustomValuesConfiguration(_, context),
        SelectAllValueOptions: [],
        SourceColumn: _json,
        SourceField: [],
        SourceParameterName: [],
    });
};
const se_DrillDownFilter = (input, context) => {
    return take(input, {
        CategoryFilter: _json,
        NumericEqualityFilter: (_) => se_NumericEqualityDrillDownFilter(_, context),
        TimeRangeFilter: (_) => se_TimeRangeDrillDownFilter(_, context),
    });
};
const se_DrillDownFilterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DrillDownFilter(entry, context);
    });
};
const se_EmptyVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        DataSetIdentifier: [],
        VisualId: [],
    });
};
const se_ExplicitHierarchy = (input, context) => {
    return take(input, {
        Columns: _json,
        DrillDownFilters: (_) => se_DrillDownFilterList(_, context),
        HierarchyId: [],
    });
};
const se_FieldBasedTooltip = (input, context) => {
    return take(input, {
        AggregationVisibility: [],
        TooltipFields: (_) => se_TooltipItemList(_, context),
        TooltipTitleType: [],
    });
};
const se_FieldSortOptions = (input, context) => {
    return take(input, {
        ColumnSort: (_) => se_ColumnSort(_, context),
        FieldSort: _json,
    });
};
const se_FieldSortOptionsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FieldSortOptions(entry, context);
    });
};
const se_FilledMapAggregatedFieldWells = (input, context) => {
    return take(input, {
        Geospatial: _json,
        Values: (_) => se_FilledMapMeasureFieldList(_, context),
    });
};
const se_FilledMapConditionalFormatting = (input, context) => {
    return take(input, {
        ConditionalFormattingOptions: (_) => se_FilledMapConditionalFormattingOptionList(_, context),
    });
};
const se_FilledMapConditionalFormattingOption = (input, context) => {
    return take(input, {
        Shape: (_) => se_FilledMapShapeConditionalFormatting(_, context),
    });
};
const se_FilledMapConditionalFormattingOptionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FilledMapConditionalFormattingOption(entry, context);
    });
};
const se_FilledMapConfiguration = (input, context) => {
    return take(input, {
        FieldWells: (_) => se_FilledMapFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        MapStyleOptions: _json,
        SortConfiguration: (_) => se_FilledMapSortConfiguration(_, context),
        Tooltip: (_) => se_TooltipOptions(_, context),
        WindowOptions: (_) => se_GeospatialWindowOptions(_, context),
    });
};
const se_FilledMapFieldWells = (input, context) => {
    return take(input, {
        FilledMapAggregatedFieldWells: (_) => se_FilledMapAggregatedFieldWells(_, context),
    });
};
const se_FilledMapMeasureFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MeasureField(entry, context);
    });
};
const se_FilledMapShapeConditionalFormatting = (input, context) => {
    return take(input, {
        FieldId: [],
        Format: (_) => se_ShapeConditionalFormat(_, context),
    });
};
const se_FilledMapSortConfiguration = (input, context) => {
    return take(input, {
        CategorySort: (_) => se_FieldSortOptionsList(_, context),
    });
};
const se_FilledMapVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_FilledMapConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        ConditionalFormatting: (_) => se_FilledMapConditionalFormatting(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_Filter = (input, context) => {
    return take(input, {
        CategoryFilter: (_) => se_CategoryFilter(_, context),
        NumericEqualityFilter: (_) => se_NumericEqualityFilter(_, context),
        NumericRangeFilter: (_) => se_NumericRangeFilter(_, context),
        RelativeDatesFilter: (_) => se_RelativeDatesFilter(_, context),
        TimeEqualityFilter: (_) => se_TimeEqualityFilter(_, context),
        TimeRangeFilter: (_) => se_TimeRangeFilter(_, context),
        TopBottomFilter: (_) => se_TopBottomFilter(_, context),
    });
};
const se_FilterControl = (input, context) => {
    return take(input, {
        CrossSheet: _json,
        DateTimePicker: _json,
        Dropdown: _json,
        List: _json,
        RelativeDateTime: _json,
        Slider: (_) => se_FilterSliderControl(_, context),
        TextArea: _json,
        TextField: _json,
    });
};
const se_FilterControlList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FilterControl(entry, context);
    });
};
const se_FilterGroup = (input, context) => {
    return take(input, {
        CrossDataset: [],
        FilterGroupId: [],
        Filters: (_) => se_FilterList(_, context),
        ScopeConfiguration: _json,
        Status: [],
    });
};
const se_FilterGroupList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FilterGroup(entry, context);
    });
};
const se_FilterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Filter(entry, context);
    });
};
const se_FilterSliderControl = (input, context) => {
    return take(input, {
        DisplayOptions: _json,
        FilterControlId: [],
        MaximumValue: __serializeFloat,
        MinimumValue: __serializeFloat,
        SourceFilterId: [],
        StepSize: __serializeFloat,
        Title: [],
        Type: [],
    });
};
const se_ForecastComputation = (input, context) => {
    return take(input, {
        ComputationId: [],
        CustomSeasonalityValue: [],
        LowerBoundary: __serializeFloat,
        Name: [],
        PeriodsBackward: [],
        PeriodsForward: [],
        PredictionInterval: [],
        Seasonality: [],
        Time: _json,
        UpperBoundary: __serializeFloat,
        Value: (_) => se_MeasureField(_, context),
    });
};
const se_ForecastConfiguration = (input, context) => {
    return take(input, {
        ForecastProperties: (_) => se_TimeBasedForecastProperties(_, context),
        Scenario: (_) => se_ForecastScenario(_, context),
    });
};
const se_ForecastConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ForecastConfiguration(entry, context);
    });
};
const se_ForecastScenario = (input, context) => {
    return take(input, {
        WhatIfPointScenario: (_) => se_WhatIfPointScenario(_, context),
        WhatIfRangeScenario: (_) => se_WhatIfRangeScenario(_, context),
    });
};
const se_FunnelChartAggregatedFieldWells = (input, context) => {
    return take(input, {
        Category: _json,
        Values: (_) => se_FunnelChartMeasureFieldList(_, context),
    });
};
const se_FunnelChartConfiguration = (input, context) => {
    return take(input, {
        CategoryLabelOptions: _json,
        DataLabelOptions: _json,
        FieldWells: (_) => se_FunnelChartFieldWells(_, context),
        Interactions: _json,
        SortConfiguration: (_) => se_FunnelChartSortConfiguration(_, context),
        Tooltip: (_) => se_TooltipOptions(_, context),
        ValueLabelOptions: _json,
        VisualPalette: _json,
    });
};
const se_FunnelChartFieldWells = (input, context) => {
    return take(input, {
        FunnelChartAggregatedFieldWells: (_) => se_FunnelChartAggregatedFieldWells(_, context),
    });
};
const se_FunnelChartMeasureFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MeasureField(entry, context);
    });
};
const se_FunnelChartSortConfiguration = (input, context) => {
    return take(input, {
        CategoryItemsLimit: _json,
        CategorySort: (_) => se_FieldSortOptionsList(_, context),
    });
};
const se_FunnelChartVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_FunnelChartConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_GaugeChartArcConditionalFormatting = (input, context) => {
    return take(input, {
        ForegroundColor: (_) => se_ConditionalFormattingColor(_, context),
    });
};
const se_GaugeChartConditionalFormatting = (input, context) => {
    return take(input, {
        ConditionalFormattingOptions: (_) => se_GaugeChartConditionalFormattingOptionList(_, context),
    });
};
const se_GaugeChartConditionalFormattingOption = (input, context) => {
    return take(input, {
        Arc: (_) => se_GaugeChartArcConditionalFormatting(_, context),
        PrimaryValue: (_) => se_GaugeChartPrimaryValueConditionalFormatting(_, context),
    });
};
const se_GaugeChartConditionalFormattingOptionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_GaugeChartConditionalFormattingOption(entry, context);
    });
};
const se_GaugeChartConfiguration = (input, context) => {
    return take(input, {
        DataLabels: _json,
        FieldWells: (_) => se_GaugeChartFieldWells(_, context),
        GaugeChartOptions: (_) => se_GaugeChartOptions(_, context),
        Interactions: _json,
        TooltipOptions: (_) => se_TooltipOptions(_, context),
        VisualPalette: _json,
    });
};
const se_GaugeChartFieldWells = (input, context) => {
    return take(input, {
        TargetValues: (_) => se_MeasureFieldList(_, context),
        Values: (_) => se_MeasureFieldList(_, context),
    });
};
const se_GaugeChartOptions = (input, context) => {
    return take(input, {
        Arc: (_) => se_ArcConfiguration(_, context),
        ArcAxis: (_) => se_ArcAxisConfiguration(_, context),
        Comparison: _json,
        PrimaryValueDisplayType: [],
        PrimaryValueFontConfiguration: _json,
    });
};
const se_GaugeChartPrimaryValueConditionalFormatting = (input, context) => {
    return take(input, {
        Icon: _json,
        TextColor: (_) => se_ConditionalFormattingColor(_, context),
    });
};
const se_GaugeChartVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_GaugeChartConfiguration(_, context),
        ConditionalFormatting: (_) => se_GaugeChartConditionalFormatting(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_GeospatialCoordinateBounds = (input, context) => {
    return take(input, {
        East: __serializeFloat,
        North: __serializeFloat,
        South: __serializeFloat,
        West: __serializeFloat,
    });
};
const se_GeospatialMapAggregatedFieldWells = (input, context) => {
    return take(input, {
        Colors: _json,
        Geospatial: _json,
        Values: (_) => se_MeasureFieldList(_, context),
    });
};
const se_GeospatialMapConfiguration = (input, context) => {
    return take(input, {
        FieldWells: (_) => se_GeospatialMapFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        MapStyleOptions: _json,
        PointStyleOptions: _json,
        Tooltip: (_) => se_TooltipOptions(_, context),
        VisualPalette: _json,
        WindowOptions: (_) => se_GeospatialWindowOptions(_, context),
    });
};
const se_GeospatialMapFieldWells = (input, context) => {
    return take(input, {
        GeospatialMapAggregatedFieldWells: (_) => se_GeospatialMapAggregatedFieldWells(_, context),
    });
};
const se_GeospatialMapVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_GeospatialMapConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_GeospatialWindowOptions = (input, context) => {
    return take(input, {
        Bounds: (_) => se_GeospatialCoordinateBounds(_, context),
        MapZoomMode: [],
    });
};
const se_GradientColor = (input, context) => {
    return take(input, {
        Stops: (_) => se_GradientStopList(_, context),
    });
};
const se_GradientStop = (input, context) => {
    return take(input, {
        Color: [],
        DataValue: __serializeFloat,
        GradientOffset: __serializeFloat,
    });
};
const se_GradientStopList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_GradientStop(entry, context);
    });
};
const se_GrowthRateComputation = (input, context) => {
    return take(input, {
        ComputationId: [],
        Name: [],
        PeriodSize: [],
        Time: _json,
        Value: (_) => se_MeasureField(_, context),
    });
};
const se_HeatMapAggregatedFieldWells = (input, context) => {
    return take(input, {
        Columns: _json,
        Rows: _json,
        Values: (_) => se_HeatMapMeasureFieldList(_, context),
    });
};
const se_HeatMapConfiguration = (input, context) => {
    return take(input, {
        ColorScale: (_) => se_ColorScale(_, context),
        ColumnLabelOptions: _json,
        DataLabels: _json,
        FieldWells: (_) => se_HeatMapFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        RowLabelOptions: _json,
        SortConfiguration: (_) => se_HeatMapSortConfiguration(_, context),
        Tooltip: (_) => se_TooltipOptions(_, context),
    });
};
const se_HeatMapFieldWells = (input, context) => {
    return take(input, {
        HeatMapAggregatedFieldWells: (_) => se_HeatMapAggregatedFieldWells(_, context),
    });
};
const se_HeatMapMeasureFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MeasureField(entry, context);
    });
};
const se_HeatMapSortConfiguration = (input, context) => {
    return take(input, {
        HeatMapColumnItemsLimitConfiguration: _json,
        HeatMapColumnSort: (_) => se_FieldSortOptionsList(_, context),
        HeatMapRowItemsLimitConfiguration: _json,
        HeatMapRowSort: (_) => se_FieldSortOptionsList(_, context),
    });
};
const se_HeatMapVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_HeatMapConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_HistogramAggregatedFieldWells = (input, context) => {
    return take(input, {
        Values: (_) => se_HistogramMeasureFieldList(_, context),
    });
};
const se_HistogramBinOptions = (input, context) => {
    return take(input, {
        BinCount: _json,
        BinWidth: (_) => se_BinWidthOptions(_, context),
        SelectedBinType: [],
        StartValue: __serializeFloat,
    });
};
const se_HistogramConfiguration = (input, context) => {
    return take(input, {
        BinOptions: (_) => se_HistogramBinOptions(_, context),
        DataLabels: _json,
        FieldWells: (_) => se_HistogramFieldWells(_, context),
        Interactions: _json,
        Tooltip: (_) => se_TooltipOptions(_, context),
        VisualPalette: _json,
        XAxisDisplayOptions: (_) => se_AxisDisplayOptions(_, context),
        XAxisLabelOptions: _json,
        YAxisDisplayOptions: (_) => se_AxisDisplayOptions(_, context),
    });
};
const se_HistogramFieldWells = (input, context) => {
    return take(input, {
        HistogramAggregatedFieldWells: (_) => se_HistogramAggregatedFieldWells(_, context),
    });
};
const se_HistogramMeasureFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MeasureField(entry, context);
    });
};
const se_HistogramVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_HistogramConfiguration(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_InsightConfiguration = (input, context) => {
    return take(input, {
        Computations: (_) => se_ComputationList(_, context),
        CustomNarrative: _json,
        Interactions: _json,
    });
};
const se_InsightVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        DataSetIdentifier: [],
        InsightConfiguration: (_) => se_InsightConfiguration(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_KPIActualValueConditionalFormatting = (input, context) => {
    return take(input, {
        Icon: _json,
        TextColor: (_) => se_ConditionalFormattingColor(_, context),
    });
};
const se_KPIComparisonValueConditionalFormatting = (input, context) => {
    return take(input, {
        Icon: _json,
        TextColor: (_) => se_ConditionalFormattingColor(_, context),
    });
};
const se_KPIConditionalFormatting = (input, context) => {
    return take(input, {
        ConditionalFormattingOptions: (_) => se_KPIConditionalFormattingOptionList(_, context),
    });
};
const se_KPIConditionalFormattingOption = (input, context) => {
    return take(input, {
        ActualValue: (_) => se_KPIActualValueConditionalFormatting(_, context),
        ComparisonValue: (_) => se_KPIComparisonValueConditionalFormatting(_, context),
        PrimaryValue: (_) => se_KPIPrimaryValueConditionalFormatting(_, context),
        ProgressBar: (_) => se_KPIProgressBarConditionalFormatting(_, context),
    });
};
const se_KPIConditionalFormattingOptionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_KPIConditionalFormattingOption(entry, context);
    });
};
const se_KPIConfiguration = (input, context) => {
    return take(input, {
        FieldWells: (_) => se_KPIFieldWells(_, context),
        Interactions: _json,
        KPIOptions: _json,
        SortConfiguration: (_) => se_KPISortConfiguration(_, context),
    });
};
const se_KPIFieldWells = (input, context) => {
    return take(input, {
        TargetValues: (_) => se_MeasureFieldList(_, context),
        TrendGroups: _json,
        Values: (_) => se_MeasureFieldList(_, context),
    });
};
const se_KPIPrimaryValueConditionalFormatting = (input, context) => {
    return take(input, {
        Icon: _json,
        TextColor: (_) => se_ConditionalFormattingColor(_, context),
    });
};
const se_KPIProgressBarConditionalFormatting = (input, context) => {
    return take(input, {
        ForegroundColor: (_) => se_ConditionalFormattingColor(_, context),
    });
};
const se_KPISortConfiguration = (input, context) => {
    return take(input, {
        TrendGroupSort: (_) => se_FieldSortOptionsList(_, context),
    });
};
const se_KPIVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_KPIConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        ConditionalFormatting: (_) => se_KPIConditionalFormatting(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_Layout = (input, context) => {
    return take(input, {
        Configuration: (_) => se_LayoutConfiguration(_, context),
    });
};
const se_LayoutConfiguration = (input, context) => {
    return take(input, {
        FreeFormLayout: _json,
        GridLayout: _json,
        SectionBasedLayout: (_) => se_SectionBasedLayoutConfiguration(_, context),
    });
};
const se_LayoutList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Layout(entry, context);
    });
};
const se_LineChartAggregatedFieldWells = (input, context) => {
    return take(input, {
        Category: _json,
        Colors: _json,
        SmallMultiples: _json,
        Values: (_) => se_MeasureFieldList(_, context),
    });
};
const se_LineChartConfiguration = (input, context) => {
    return take(input, {
        ContributionAnalysisDefaults: _json,
        DataLabels: _json,
        DefaultSeriesSettings: _json,
        FieldWells: (_) => se_LineChartFieldWells(_, context),
        ForecastConfigurations: (_) => se_ForecastConfigurationList(_, context),
        Interactions: _json,
        Legend: _json,
        PrimaryYAxisDisplayOptions: (_) => se_LineSeriesAxisDisplayOptions(_, context),
        PrimaryYAxisLabelOptions: _json,
        ReferenceLines: (_) => se_ReferenceLineList(_, context),
        SecondaryYAxisDisplayOptions: (_) => se_LineSeriesAxisDisplayOptions(_, context),
        SecondaryYAxisLabelOptions: _json,
        Series: _json,
        SingleAxisOptions: _json,
        SmallMultiplesOptions: _json,
        SortConfiguration: (_) => se_LineChartSortConfiguration(_, context),
        Tooltip: (_) => se_TooltipOptions(_, context),
        Type: [],
        VisualPalette: _json,
        XAxisDisplayOptions: (_) => se_AxisDisplayOptions(_, context),
        XAxisLabelOptions: _json,
    });
};
const se_LineChartFieldWells = (input, context) => {
    return take(input, {
        LineChartAggregatedFieldWells: (_) => se_LineChartAggregatedFieldWells(_, context),
    });
};
const se_LineChartSortConfiguration = (input, context) => {
    return take(input, {
        CategoryItemsLimitConfiguration: _json,
        CategorySort: (_) => se_FieldSortOptionsList(_, context),
        ColorItemsLimitConfiguration: _json,
        SmallMultiplesLimitConfiguration: _json,
        SmallMultiplesSort: (_) => se_FieldSortOptionsList(_, context),
    });
};
const se_LineChartVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_LineChartConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_LineSeriesAxisDisplayOptions = (input, context) => {
    return take(input, {
        AxisOptions: (_) => se_AxisDisplayOptions(_, context),
        MissingDataConfigurations: _json,
    });
};
const se_LogicalTable = (input, context) => {
    return take(input, {
        Alias: [],
        DataTransforms: (_) => se_TransformOperationList(_, context),
        Source: _json,
    });
};
const se_LogicalTableMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_LogicalTable(value, context);
        return acc;
    }, {});
};
const se_MaximumMinimumComputation = (input, context) => {
    return take(input, {
        ComputationId: [],
        Name: [],
        Time: _json,
        Type: [],
        Value: (_) => se_MeasureField(_, context),
    });
};
const se_MeasureField = (input, context) => {
    return take(input, {
        CalculatedMeasureField: _json,
        CategoricalMeasureField: _json,
        DateMeasureField: _json,
        NumericalMeasureField: (_) => se_NumericalMeasureField(_, context),
    });
};
const se_MeasureFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MeasureField(entry, context);
    });
};
const se_MetricComparisonComputation = (input, context) => {
    return take(input, {
        ComputationId: [],
        FromValue: (_) => se_MeasureField(_, context),
        Name: [],
        TargetValue: (_) => se_MeasureField(_, context),
        Time: _json,
    });
};
const se_NewDefaultValues = (input, context) => {
    return take(input, {
        DateTimeStaticValues: (_) => se_DateTimeDatasetParameterValueList(_, context),
        DecimalStaticValues: (_) => se_DecimalDatasetParameterValueList(_, context),
        IntegerStaticValues: _json,
        StringStaticValues: _json,
    });
};
const se_NumericalAggregationFunction = (input, context) => {
    return take(input, {
        PercentileAggregation: (_) => se_PercentileAggregation(_, context),
        SimpleNumericalAggregation: [],
    });
};
const se_NumericalMeasureField = (input, context) => {
    return take(input, {
        AggregationFunction: (_) => se_NumericalAggregationFunction(_, context),
        Column: _json,
        FieldId: [],
        FormatConfiguration: _json,
    });
};
const se_NumericAxisOptions = (input, context) => {
    return take(input, {
        Range: (_) => se_AxisDisplayRange(_, context),
        Scale: (_) => se_AxisScale(_, context),
    });
};
const se_NumericEqualityDrillDownFilter = (input, context) => {
    return take(input, {
        Column: _json,
        Value: __serializeFloat,
    });
};
const se_NumericEqualityFilter = (input, context) => {
    return take(input, {
        AggregationFunction: (_) => se_AggregationFunction(_, context),
        Column: _json,
        DefaultFilterControlConfiguration: (_) => se_DefaultFilterControlConfiguration(_, context),
        FilterId: [],
        MatchOperator: [],
        NullOption: [],
        ParameterName: [],
        SelectAllOptions: [],
        Value: __serializeFloat,
    });
};
const se_NumericRangeFilter = (input, context) => {
    return take(input, {
        AggregationFunction: (_) => se_AggregationFunction(_, context),
        Column: _json,
        DefaultFilterControlConfiguration: (_) => se_DefaultFilterControlConfiguration(_, context),
        FilterId: [],
        IncludeMaximum: [],
        IncludeMinimum: [],
        NullOption: [],
        RangeMaximum: (_) => se_NumericRangeFilterValue(_, context),
        RangeMinimum: (_) => se_NumericRangeFilterValue(_, context),
        SelectAllOptions: [],
    });
};
const se_NumericRangeFilterValue = (input, context) => {
    return take(input, {
        Parameter: [],
        StaticValue: __serializeFloat,
    });
};
const se_OverrideDatasetParameterOperation = (input, context) => {
    return take(input, {
        NewDefaultValues: (_) => se_NewDefaultValues(_, context),
        NewParameterName: [],
        ParameterName: [],
    });
};
const se_ParameterControl = (input, context) => {
    return take(input, {
        DateTimePicker: _json,
        Dropdown: _json,
        List: _json,
        Slider: (_) => se_ParameterSliderControl(_, context),
        TextArea: _json,
        TextField: _json,
    });
};
const se_ParameterControlList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ParameterControl(entry, context);
    });
};
const se_ParameterDeclaration = (input, context) => {
    return take(input, {
        DateTimeParameterDeclaration: (_) => se_DateTimeParameterDeclaration(_, context),
        DecimalParameterDeclaration: (_) => se_DecimalParameterDeclaration(_, context),
        IntegerParameterDeclaration: _json,
        StringParameterDeclaration: _json,
    });
};
const se_ParameterDeclarationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ParameterDeclaration(entry, context);
    });
};
const se__Parameters = (input, context) => {
    return take(input, {
        DateTimeParameters: (_) => se_DateTimeParameterList(_, context),
        DecimalParameters: (_) => se_DecimalParameterList(_, context),
        IntegerParameters: _json,
        StringParameters: _json,
    });
};
const se_ParameterSliderControl = (input, context) => {
    return take(input, {
        DisplayOptions: _json,
        MaximumValue: __serializeFloat,
        MinimumValue: __serializeFloat,
        ParameterControlId: [],
        SourceParameterName: [],
        StepSize: __serializeFloat,
        Title: [],
    });
};
const se_PercentileAggregation = (input, context) => {
    return take(input, {
        PercentileValue: __serializeFloat,
    });
};
const se_PercentVisibleRange = (input, context) => {
    return take(input, {
        From: __serializeFloat,
        To: __serializeFloat,
    });
};
const se_PeriodOverPeriodComputation = (input, context) => {
    return take(input, {
        ComputationId: [],
        Name: [],
        Time: _json,
        Value: (_) => se_MeasureField(_, context),
    });
};
const se_PeriodToDateComputation = (input, context) => {
    return take(input, {
        ComputationId: [],
        Name: [],
        PeriodTimeGranularity: [],
        Time: _json,
        Value: (_) => se_MeasureField(_, context),
    });
};
const se_PieChartAggregatedFieldWells = (input, context) => {
    return take(input, {
        Category: _json,
        SmallMultiples: _json,
        Values: (_) => se_MeasureFieldList(_, context),
    });
};
const se_PieChartConfiguration = (input, context) => {
    return take(input, {
        CategoryLabelOptions: _json,
        ContributionAnalysisDefaults: _json,
        DataLabels: _json,
        DonutOptions: _json,
        FieldWells: (_) => se_PieChartFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        SmallMultiplesOptions: _json,
        SortConfiguration: (_) => se_PieChartSortConfiguration(_, context),
        Tooltip: (_) => se_TooltipOptions(_, context),
        ValueLabelOptions: _json,
        VisualPalette: _json,
    });
};
const se_PieChartFieldWells = (input, context) => {
    return take(input, {
        PieChartAggregatedFieldWells: (_) => se_PieChartAggregatedFieldWells(_, context),
    });
};
const se_PieChartSortConfiguration = (input, context) => {
    return take(input, {
        CategoryItemsLimit: _json,
        CategorySort: (_) => se_FieldSortOptionsList(_, context),
        SmallMultiplesLimitConfiguration: _json,
        SmallMultiplesSort: (_) => se_FieldSortOptionsList(_, context),
    });
};
const se_PieChartVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_PieChartConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_PivotFieldSortOptions = (input, context) => {
    return take(input, {
        FieldId: [],
        SortBy: (_) => se_PivotTableSortBy(_, context),
    });
};
const se_PivotFieldSortOptionsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PivotFieldSortOptions(entry, context);
    });
};
const se_PivotMeasureFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MeasureField(entry, context);
    });
};
const se_PivotTableAggregatedFieldWells = (input, context) => {
    return take(input, {
        Columns: _json,
        Rows: _json,
        Values: (_) => se_PivotMeasureFieldList(_, context),
    });
};
const se_PivotTableCellConditionalFormatting = (input, context) => {
    return take(input, {
        FieldId: [],
        Scope: _json,
        Scopes: _json,
        TextFormat: (_) => se_TextConditionalFormat(_, context),
    });
};
const se_PivotTableConditionalFormatting = (input, context) => {
    return take(input, {
        ConditionalFormattingOptions: (_) => se_PivotTableConditionalFormattingOptionList(_, context),
    });
};
const se_PivotTableConditionalFormattingOption = (input, context) => {
    return take(input, {
        Cell: (_) => se_PivotTableCellConditionalFormatting(_, context),
    });
};
const se_PivotTableConditionalFormattingOptionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PivotTableConditionalFormattingOption(entry, context);
    });
};
const se_PivotTableConfiguration = (input, context) => {
    return take(input, {
        FieldOptions: _json,
        FieldWells: (_) => se_PivotTableFieldWells(_, context),
        Interactions: _json,
        PaginatedReportOptions: _json,
        SortConfiguration: (_) => se_PivotTableSortConfiguration(_, context),
        TableOptions: _json,
        TotalOptions: _json,
    });
};
const se_PivotTableFieldWells = (input, context) => {
    return take(input, {
        PivotTableAggregatedFieldWells: (_) => se_PivotTableAggregatedFieldWells(_, context),
    });
};
const se_PivotTableSortBy = (input, context) => {
    return take(input, {
        Column: (_) => se_ColumnSort(_, context),
        DataPath: _json,
        Field: _json,
    });
};
const se_PivotTableSortConfiguration = (input, context) => {
    return take(input, {
        FieldSortOptions: (_) => se_PivotFieldSortOptionsList(_, context),
    });
};
const se_PivotTableVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_PivotTableConfiguration(_, context),
        ConditionalFormatting: (_) => se_PivotTableConditionalFormatting(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_PredefinedHierarchy = (input, context) => {
    return take(input, {
        Columns: _json,
        DrillDownFilters: (_) => se_DrillDownFilterList(_, context),
        HierarchyId: [],
    });
};
const se_RadarChartAggregatedFieldWells = (input, context) => {
    return take(input, {
        Category: _json,
        Color: _json,
        Values: (_) => se_RadarChartValuesFieldList(_, context),
    });
};
const se_RadarChartConfiguration = (input, context) => {
    return take(input, {
        AlternateBandColorsVisibility: [],
        AlternateBandEvenColor: [],
        AlternateBandOddColor: [],
        AxesRangeScale: [],
        BaseSeriesSettings: _json,
        CategoryAxis: (_) => se_AxisDisplayOptions(_, context),
        CategoryLabelOptions: _json,
        ColorAxis: (_) => se_AxisDisplayOptions(_, context),
        ColorLabelOptions: _json,
        FieldWells: (_) => se_RadarChartFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        Shape: [],
        SortConfiguration: (_) => se_RadarChartSortConfiguration(_, context),
        StartAngle: __serializeFloat,
        VisualPalette: _json,
    });
};
const se_RadarChartFieldWells = (input, context) => {
    return take(input, {
        RadarChartAggregatedFieldWells: (_) => se_RadarChartAggregatedFieldWells(_, context),
    });
};
const se_RadarChartSortConfiguration = (input, context) => {
    return take(input, {
        CategoryItemsLimit: _json,
        CategorySort: (_) => se_FieldSortOptionsList(_, context),
        ColorItemsLimit: _json,
        ColorSort: (_) => se_FieldSortOptionsList(_, context),
    });
};
const se_RadarChartValuesFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MeasureField(entry, context);
    });
};
const se_RadarChartVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_RadarChartConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_ReferenceLine = (input, context) => {
    return take(input, {
        DataConfiguration: (_) => se_ReferenceLineDataConfiguration(_, context),
        LabelConfiguration: _json,
        Status: [],
        StyleConfiguration: _json,
    });
};
const se_ReferenceLineDataConfiguration = (input, context) => {
    return take(input, {
        AxisBinding: [],
        DynamicConfiguration: (_) => se_ReferenceLineDynamicDataConfiguration(_, context),
        SeriesType: [],
        StaticConfiguration: (_) => se_ReferenceLineStaticDataConfiguration(_, context),
    });
};
const se_ReferenceLineDynamicDataConfiguration = (input, context) => {
    return take(input, {
        Calculation: (_) => se_NumericalAggregationFunction(_, context),
        Column: _json,
        MeasureAggregationFunction: (_) => se_AggregationFunction(_, context),
    });
};
const se_ReferenceLineList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ReferenceLine(entry, context);
    });
};
const se_ReferenceLineStaticDataConfiguration = (input, context) => {
    return take(input, {
        Value: __serializeFloat,
    });
};
const se_RefreshSchedule = (input, context) => {
    return take(input, {
        Arn: [],
        RefreshType: [],
        ScheduleFrequency: _json,
        ScheduleId: [],
        StartAfterDateTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_RelativeDatesFilter = (input, context) => {
    return take(input, {
        AnchorDateConfiguration: _json,
        Column: _json,
        DefaultFilterControlConfiguration: (_) => se_DefaultFilterControlConfiguration(_, context),
        ExcludePeriodConfiguration: _json,
        FilterId: [],
        MinimumGranularity: [],
        NullOption: [],
        ParameterName: [],
        RelativeDateType: [],
        RelativeDateValue: [],
        TimeGranularity: [],
    });
};
const se_RowSortList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FieldSortOptions(entry, context);
    });
};
const se_SankeyDiagramAggregatedFieldWells = (input, context) => {
    return take(input, {
        Destination: _json,
        Source: _json,
        Weight: (_) => se_MeasureFieldList(_, context),
    });
};
const se_SankeyDiagramChartConfiguration = (input, context) => {
    return take(input, {
        DataLabels: _json,
        FieldWells: (_) => se_SankeyDiagramFieldWells(_, context),
        Interactions: _json,
        SortConfiguration: (_) => se_SankeyDiagramSortConfiguration(_, context),
    });
};
const se_SankeyDiagramFieldWells = (input, context) => {
    return take(input, {
        SankeyDiagramAggregatedFieldWells: (_) => se_SankeyDiagramAggregatedFieldWells(_, context),
    });
};
const se_SankeyDiagramSortConfiguration = (input, context) => {
    return take(input, {
        DestinationItemsLimit: _json,
        SourceItemsLimit: _json,
        WeightSort: (_) => se_FieldSortOptionsList(_, context),
    });
};
const se_SankeyDiagramVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_SankeyDiagramChartConfiguration(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_ScatterPlotCategoricallyAggregatedFieldWells = (input, context) => {
    return take(input, {
        Category: _json,
        Label: _json,
        Size: (_) => se_MeasureFieldList(_, context),
        XAxis: (_) => se_MeasureFieldList(_, context),
        YAxis: (_) => se_MeasureFieldList(_, context),
    });
};
const se_ScatterPlotConfiguration = (input, context) => {
    return take(input, {
        DataLabels: _json,
        FieldWells: (_) => se_ScatterPlotFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        SortConfiguration: _json,
        Tooltip: (_) => se_TooltipOptions(_, context),
        VisualPalette: _json,
        XAxisDisplayOptions: (_) => se_AxisDisplayOptions(_, context),
        XAxisLabelOptions: _json,
        YAxisDisplayOptions: (_) => se_AxisDisplayOptions(_, context),
        YAxisLabelOptions: _json,
    });
};
const se_ScatterPlotFieldWells = (input, context) => {
    return take(input, {
        ScatterPlotCategoricallyAggregatedFieldWells: (_) => se_ScatterPlotCategoricallyAggregatedFieldWells(_, context),
        ScatterPlotUnaggregatedFieldWells: (_) => se_ScatterPlotUnaggregatedFieldWells(_, context),
    });
};
const se_ScatterPlotUnaggregatedFieldWells = (input, context) => {
    return take(input, {
        Category: _json,
        Label: _json,
        Size: (_) => se_MeasureFieldList(_, context),
        XAxis: _json,
        YAxis: _json,
    });
};
const se_ScatterPlotVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_ScatterPlotConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_ScrollBarOptions = (input, context) => {
    return take(input, {
        Visibility: [],
        VisibleRange: (_) => se_VisibleRangeOptions(_, context),
    });
};
const se_SectionBasedLayoutConfiguration = (input, context) => {
    return take(input, {
        BodySections: _json,
        CanvasSizeOptions: _json,
        FooterSections: _json,
        HeaderSections: _json,
    });
};
const se_SensitiveDoubleList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return __serializeFloat(entry);
    });
};
const se_SensitiveTimestampList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return Math.round(entry.getTime() / 1000);
    });
};
const se_SetParameterValueConfiguration = (input, context) => {
    return take(input, {
        DestinationParameterName: [],
        Value: (_) => se_DestinationParameterValueConfiguration(_, context),
    });
};
const se_SetParameterValueConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SetParameterValueConfiguration(entry, context);
    });
};
const se_ShapeConditionalFormat = (input, context) => {
    return take(input, {
        BackgroundColor: (_) => se_ConditionalFormattingColor(_, context),
    });
};
const se_SheetDefinition = (input, context) => {
    return take(input, {
        ContentType: [],
        Description: [],
        FilterControls: (_) => se_FilterControlList(_, context),
        Layouts: (_) => se_LayoutList(_, context),
        Name: [],
        ParameterControls: (_) => se_ParameterControlList(_, context),
        SheetControlLayouts: _json,
        SheetId: [],
        TextBoxes: _json,
        Title: [],
        Visuals: (_) => se_VisualList(_, context),
    });
};
const se_SheetDefinitionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SheetDefinition(entry, context);
    });
};
const se_SnapshotConfiguration = (input, context) => {
    return take(input, {
        DestinationConfiguration: _json,
        FileGroups: _json,
        Parameters: (_) => se__Parameters(_, context),
    });
};
const se_TableAggregatedFieldWells = (input, context) => {
    return take(input, {
        GroupBy: _json,
        Values: (_) => se_MeasureFieldList(_, context),
    });
};
const se_TableCellConditionalFormatting = (input, context) => {
    return take(input, {
        FieldId: [],
        TextFormat: (_) => se_TextConditionalFormat(_, context),
    });
};
const se_TableConditionalFormatting = (input, context) => {
    return take(input, {
        ConditionalFormattingOptions: (_) => se_TableConditionalFormattingOptionList(_, context),
    });
};
const se_TableConditionalFormattingOption = (input, context) => {
    return take(input, {
        Cell: (_) => se_TableCellConditionalFormatting(_, context),
        Row: (_) => se_TableRowConditionalFormatting(_, context),
    });
};
const se_TableConditionalFormattingOptionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_TableConditionalFormattingOption(entry, context);
    });
};
const se_TableConfiguration = (input, context) => {
    return take(input, {
        FieldOptions: _json,
        FieldWells: (_) => se_TableFieldWells(_, context),
        Interactions: _json,
        PaginatedReportOptions: _json,
        SortConfiguration: (_) => se_TableSortConfiguration(_, context),
        TableInlineVisualizations: _json,
        TableOptions: _json,
        TotalOptions: _json,
    });
};
const se_TableFieldWells = (input, context) => {
    return take(input, {
        TableAggregatedFieldWells: (_) => se_TableAggregatedFieldWells(_, context),
        TableUnaggregatedFieldWells: _json,
    });
};
const se_TableRowConditionalFormatting = (input, context) => {
    return take(input, {
        BackgroundColor: (_) => se_ConditionalFormattingColor(_, context),
        TextColor: (_) => se_ConditionalFormattingColor(_, context),
    });
};
const se_TableSortConfiguration = (input, context) => {
    return take(input, {
        PaginationConfiguration: _json,
        RowSort: (_) => se_RowSortList(_, context),
    });
};
const se_TableVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_TableConfiguration(_, context),
        ConditionalFormatting: (_) => se_TableConditionalFormatting(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_TemplateVersionDefinition = (input, context) => {
    return take(input, {
        AnalysisDefaults: _json,
        CalculatedFields: _json,
        ColumnConfigurations: _json,
        DataSetConfigurations: _json,
        FilterGroups: (_) => se_FilterGroupList(_, context),
        Options: _json,
        ParameterDeclarations: (_) => se_ParameterDeclarationList(_, context),
        Sheets: (_) => se_SheetDefinitionList(_, context),
    });
};
const se_TextConditionalFormat = (input, context) => {
    return take(input, {
        BackgroundColor: (_) => se_ConditionalFormattingColor(_, context),
        Icon: _json,
        TextColor: (_) => se_ConditionalFormattingColor(_, context),
    });
};
const se_TimeBasedForecastProperties = (input, context) => {
    return take(input, {
        LowerBoundary: __serializeFloat,
        PeriodsBackward: [],
        PeriodsForward: [],
        PredictionInterval: [],
        Seasonality: [],
        UpperBoundary: __serializeFloat,
    });
};
const se_TimeEqualityFilter = (input, context) => {
    return take(input, {
        Column: _json,
        DefaultFilterControlConfiguration: (_) => se_DefaultFilterControlConfiguration(_, context),
        FilterId: [],
        ParameterName: [],
        RollingDate: _json,
        TimeGranularity: [],
        Value: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_TimeRangeDrillDownFilter = (input, context) => {
    return take(input, {
        Column: _json,
        RangeMaximum: (_) => Math.round(_.getTime() / 1000),
        RangeMinimum: (_) => Math.round(_.getTime() / 1000),
        TimeGranularity: [],
    });
};
const se_TimeRangeFilter = (input, context) => {
    return take(input, {
        Column: _json,
        DefaultFilterControlConfiguration: (_) => se_DefaultFilterControlConfiguration(_, context),
        ExcludePeriodConfiguration: _json,
        FilterId: [],
        IncludeMaximum: [],
        IncludeMinimum: [],
        NullOption: [],
        RangeMaximumValue: (_) => se_TimeRangeFilterValue(_, context),
        RangeMinimumValue: (_) => se_TimeRangeFilterValue(_, context),
        TimeGranularity: [],
    });
};
const se_TimeRangeFilterValue = (input, context) => {
    return take(input, {
        Parameter: [],
        RollingDate: _json,
        StaticValue: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_TooltipItem = (input, context) => {
    return take(input, {
        ColumnTooltipItem: (_) => se_ColumnTooltipItem(_, context),
        FieldTooltipItem: _json,
    });
};
const se_TooltipItemList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_TooltipItem(entry, context);
    });
};
const se_TooltipOptions = (input, context) => {
    return take(input, {
        FieldBasedTooltip: (_) => se_FieldBasedTooltip(_, context),
        SelectedTooltipType: [],
        TooltipVisibility: [],
    });
};
const se_TopBottomFilter = (input, context) => {
    return take(input, {
        AggregationSortConfigurations: (_) => se_AggregationSortConfigurationList(_, context),
        Column: _json,
        DefaultFilterControlConfiguration: (_) => se_DefaultFilterControlConfiguration(_, context),
        FilterId: [],
        Limit: [],
        ParameterName: [],
        TimeGranularity: [],
    });
};
const se_TopBottomMoversComputation = (input, context) => {
    return take(input, {
        Category: _json,
        ComputationId: [],
        MoverSize: [],
        Name: [],
        SortOrder: [],
        Time: _json,
        Type: [],
        Value: (_) => se_MeasureField(_, context),
    });
};
const se_TopBottomRankedComputation = (input, context) => {
    return take(input, {
        Category: _json,
        ComputationId: [],
        Name: [],
        ResultSize: [],
        Type: [],
        Value: (_) => se_MeasureField(_, context),
    });
};
const se_TopicRefreshSchedule = (input, context) => {
    return take(input, {
        BasedOnSpiceSchedule: [],
        IsEnabled: [],
        RepeatAt: [],
        StartingAt: (_) => Math.round(_.getTime() / 1000),
        Timezone: [],
        TopicScheduleType: [],
    });
};
const se_TotalAggregationComputation = (input, context) => {
    return take(input, {
        ComputationId: [],
        Name: [],
        Value: (_) => se_MeasureField(_, context),
    });
};
const se_TransformOperation = (input, context) => {
    return TransformOperation.visit(input, {
        CastColumnTypeOperation: (value) => ({ CastColumnTypeOperation: _json(value) }),
        CreateColumnsOperation: (value) => ({ CreateColumnsOperation: _json(value) }),
        FilterOperation: (value) => ({ FilterOperation: _json(value) }),
        OverrideDatasetParameterOperation: (value) => ({
            OverrideDatasetParameterOperation: se_OverrideDatasetParameterOperation(value, context),
        }),
        ProjectOperation: (value) => ({ ProjectOperation: _json(value) }),
        RenameColumnOperation: (value) => ({ RenameColumnOperation: _json(value) }),
        TagColumnOperation: (value) => ({ TagColumnOperation: _json(value) }),
        UntagColumnOperation: (value) => ({ UntagColumnOperation: _json(value) }),
        _: (name, value) => ({ name: value }),
    });
};
const se_TransformOperationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_TransformOperation(entry, context);
    });
};
const se_TreeMapAggregatedFieldWells = (input, context) => {
    return take(input, {
        Colors: (_) => se_TreeMapMeasureFieldList(_, context),
        Groups: _json,
        Sizes: (_) => se_TreeMapMeasureFieldList(_, context),
    });
};
const se_TreeMapConfiguration = (input, context) => {
    return take(input, {
        ColorLabelOptions: _json,
        ColorScale: (_) => se_ColorScale(_, context),
        DataLabels: _json,
        FieldWells: (_) => se_TreeMapFieldWells(_, context),
        GroupLabelOptions: _json,
        Interactions: _json,
        Legend: _json,
        SizeLabelOptions: _json,
        SortConfiguration: (_) => se_TreeMapSortConfiguration(_, context),
        Tooltip: (_) => se_TooltipOptions(_, context),
    });
};
const se_TreeMapFieldWells = (input, context) => {
    return take(input, {
        TreeMapAggregatedFieldWells: (_) => se_TreeMapAggregatedFieldWells(_, context),
    });
};
const se_TreeMapMeasureFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MeasureField(entry, context);
    });
};
const se_TreeMapSortConfiguration = (input, context) => {
    return take(input, {
        TreeMapGroupItemsLimitConfiguration: _json,
        TreeMapSort: (_) => se_FieldSortOptionsList(_, context),
    });
};
const se_TreeMapVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_TreeMapConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_VisibleRangeOptions = (input, context) => {
    return take(input, {
        PercentRange: (_) => se_PercentVisibleRange(_, context),
    });
};
const se_Visual = (input, context) => {
    return take(input, {
        BarChartVisual: (_) => se_BarChartVisual(_, context),
        BoxPlotVisual: (_) => se_BoxPlotVisual(_, context),
        ComboChartVisual: (_) => se_ComboChartVisual(_, context),
        CustomContentVisual: (_) => se_CustomContentVisual(_, context),
        EmptyVisual: (_) => se_EmptyVisual(_, context),
        FilledMapVisual: (_) => se_FilledMapVisual(_, context),
        FunnelChartVisual: (_) => se_FunnelChartVisual(_, context),
        GaugeChartVisual: (_) => se_GaugeChartVisual(_, context),
        GeospatialMapVisual: (_) => se_GeospatialMapVisual(_, context),
        HeatMapVisual: (_) => se_HeatMapVisual(_, context),
        HistogramVisual: (_) => se_HistogramVisual(_, context),
        InsightVisual: (_) => se_InsightVisual(_, context),
        KPIVisual: (_) => se_KPIVisual(_, context),
        LineChartVisual: (_) => se_LineChartVisual(_, context),
        PieChartVisual: (_) => se_PieChartVisual(_, context),
        PivotTableVisual: (_) => se_PivotTableVisual(_, context),
        RadarChartVisual: (_) => se_RadarChartVisual(_, context),
        SankeyDiagramVisual: (_) => se_SankeyDiagramVisual(_, context),
        ScatterPlotVisual: (_) => se_ScatterPlotVisual(_, context),
        TableVisual: (_) => se_TableVisual(_, context),
        TreeMapVisual: (_) => se_TreeMapVisual(_, context),
        WaterfallVisual: (_) => se_WaterfallVisual(_, context),
        WordCloudVisual: (_) => se_WordCloudVisual(_, context),
    });
};
const se_VisualCustomAction = (input, context) => {
    return take(input, {
        ActionOperations: (_) => se_VisualCustomActionOperationList(_, context),
        CustomActionId: [],
        Name: [],
        Status: [],
        Trigger: [],
    });
};
const se_VisualCustomActionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_VisualCustomAction(entry, context);
    });
};
const se_VisualCustomActionOperation = (input, context) => {
    return take(input, {
        FilterOperation: _json,
        NavigationOperation: _json,
        SetParametersOperation: (_) => se_CustomActionSetParametersOperation(_, context),
        URLOperation: _json,
    });
};
const se_VisualCustomActionOperationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_VisualCustomActionOperation(entry, context);
    });
};
const se_VisualList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Visual(entry, context);
    });
};
const se_WaterfallChartAggregatedFieldWells = (input, context) => {
    return take(input, {
        Breakdowns: _json,
        Categories: _json,
        Values: (_) => se_MeasureFieldList(_, context),
    });
};
const se_WaterfallChartConfiguration = (input, context) => {
    return take(input, {
        CategoryAxisDisplayOptions: (_) => se_AxisDisplayOptions(_, context),
        CategoryAxisLabelOptions: _json,
        ColorConfiguration: _json,
        DataLabels: _json,
        FieldWells: (_) => se_WaterfallChartFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        PrimaryYAxisDisplayOptions: (_) => se_AxisDisplayOptions(_, context),
        PrimaryYAxisLabelOptions: _json,
        SortConfiguration: (_) => se_WaterfallChartSortConfiguration(_, context),
        VisualPalette: _json,
        WaterfallChartOptions: _json,
    });
};
const se_WaterfallChartFieldWells = (input, context) => {
    return take(input, {
        WaterfallChartAggregatedFieldWells: (_) => se_WaterfallChartAggregatedFieldWells(_, context),
    });
};
const se_WaterfallChartSortConfiguration = (input, context) => {
    return take(input, {
        BreakdownItemsLimit: _json,
        CategorySort: (_) => se_FieldSortOptionsList(_, context),
    });
};
const se_WaterfallVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_WaterfallChartConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const se_WhatIfPointScenario = (input, context) => {
    return take(input, {
        Date: (_) => Math.round(_.getTime() / 1000),
        Value: __serializeFloat,
    });
};
const se_WhatIfRangeScenario = (input, context) => {
    return take(input, {
        EndDate: (_) => Math.round(_.getTime() / 1000),
        StartDate: (_) => Math.round(_.getTime() / 1000),
        Value: __serializeFloat,
    });
};
const se_WordCloudAggregatedFieldWells = (input, context) => {
    return take(input, {
        GroupBy: _json,
        Size: (_) => se_WordCloudMeasureFieldList(_, context),
    });
};
const se_WordCloudChartConfiguration = (input, context) => {
    return take(input, {
        CategoryLabelOptions: _json,
        FieldWells: (_) => se_WordCloudFieldWells(_, context),
        Interactions: _json,
        SortConfiguration: (_) => se_WordCloudSortConfiguration(_, context),
        WordCloudOptions: _json,
    });
};
const se_WordCloudFieldWells = (input, context) => {
    return take(input, {
        WordCloudAggregatedFieldWells: (_) => se_WordCloudAggregatedFieldWells(_, context),
    });
};
const se_WordCloudMeasureFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MeasureField(entry, context);
    });
};
const se_WordCloudSortConfiguration = (input, context) => {
    return take(input, {
        CategoryItemsLimit: _json,
        CategorySort: (_) => se_FieldSortOptionsList(_, context),
    });
};
const se_WordCloudVisual = (input, context) => {
    return take(input, {
        Actions: (_) => se_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => se_WordCloudChartConfiguration(_, context),
        ColumnHierarchies: (_) => se_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: [],
    });
};
const de_AggregationFunction = (output, context) => {
    return take(output, {
        AttributeAggregationFunction: _json,
        CategoricalAggregationFunction: __expectString,
        DateAggregationFunction: __expectString,
        NumericalAggregationFunction: (_) => de_NumericalAggregationFunction(_, context),
    });
};
const de_AggregationSortConfiguration = (output, context) => {
    return take(output, {
        AggregationFunction: (_) => de_AggregationFunction(_, context),
        Column: _json,
        SortDirection: __expectString,
    });
};
const de_AggregationSortConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AggregationSortConfiguration(entry, context);
    });
    return retVal;
};
const de_Analysis = (output, context) => {
    return take(output, {
        AnalysisId: __expectString,
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSetArns: _json,
        Errors: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Sheets: _json,
        Status: __expectString,
        ThemeArn: __expectString,
    });
};
const de_AnalysisDefinition = (output, context) => {
    return take(output, {
        AnalysisDefaults: _json,
        CalculatedFields: _json,
        ColumnConfigurations: _json,
        DataSetIdentifierDeclarations: _json,
        FilterGroups: (_) => de_FilterGroupList(_, context),
        Options: _json,
        ParameterDeclarations: (_) => de_ParameterDeclarationList(_, context),
        Sheets: (_) => de_SheetDefinitionList(_, context),
    });
};
const de_AnalysisSummary = (output, context) => {
    return take(output, {
        AnalysisId: __expectString,
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Status: __expectString,
    });
};
const de_AnalysisSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnalysisSummary(entry, context);
    });
    return retVal;
};
const de_ArcAxisConfiguration = (output, context) => {
    return take(output, {
        Range: (_) => de_ArcAxisDisplayRange(_, context),
        ReserveRange: __expectInt32,
    });
};
const de_ArcAxisDisplayRange = (output, context) => {
    return take(output, {
        Max: __limitedParseDouble,
        Min: __limitedParseDouble,
    });
};
const de_ArcConfiguration = (output, context) => {
    return take(output, {
        ArcAngle: __limitedParseDouble,
        ArcThickness: __expectString,
    });
};
const de_AssetBundleExportJobSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        AssetBundleExportJobId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ExportFormat: __expectString,
        IncludeAllDependencies: __expectBoolean,
        IncludePermissions: __expectBoolean,
        IncludeTags: __expectBoolean,
        JobStatus: __expectString,
    });
};
const de_AssetBundleExportJobSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssetBundleExportJobSummary(entry, context);
    });
    return retVal;
};
const de_AssetBundleImportJobOverrideParameters = (output, context) => {
    return take(output, {
        Analyses: _json,
        Dashboards: _json,
        DataSets: _json,
        DataSources: _json,
        RefreshSchedules: (_) => de_AssetBundleImportJobRefreshScheduleOverrideParametersList(_, context),
        ResourceIdOverrideConfiguration: _json,
        Themes: _json,
        VPCConnections: _json,
    });
};
const de_AssetBundleImportJobRefreshScheduleOverrideParameters = (output, context) => {
    return take(output, {
        DataSetId: __expectString,
        ScheduleId: __expectString,
        StartAfterDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AssetBundleImportJobRefreshScheduleOverrideParametersList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssetBundleImportJobRefreshScheduleOverrideParameters(entry, context);
    });
    return retVal;
};
const de_AssetBundleImportJobSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        AssetBundleImportJobId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureAction: __expectString,
        JobStatus: __expectString,
    });
};
const de_AssetBundleImportJobSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssetBundleImportJobSummary(entry, context);
    });
    return retVal;
};
const de_AxisDataOptions = (output, context) => {
    return take(output, {
        DateAxisOptions: _json,
        NumericAxisOptions: (_) => de_NumericAxisOptions(_, context),
    });
};
const de_AxisDisplayMinMaxRange = (output, context) => {
    return take(output, {
        Maximum: __limitedParseDouble,
        Minimum: __limitedParseDouble,
    });
};
const de_AxisDisplayOptions = (output, context) => {
    return take(output, {
        AxisLineVisibility: __expectString,
        AxisOffset: __expectString,
        DataOptions: (_) => de_AxisDataOptions(_, context),
        GridLineVisibility: __expectString,
        ScrollbarOptions: (_) => de_ScrollBarOptions(_, context),
        TickLabelOptions: (_) => de_AxisTickLabelOptions(_, context),
    });
};
const de_AxisDisplayRange = (output, context) => {
    return take(output, {
        DataDriven: _json,
        MinMax: (_) => de_AxisDisplayMinMaxRange(_, context),
    });
};
const de_AxisLinearScale = (output, context) => {
    return take(output, {
        StepCount: __expectInt32,
        StepSize: __limitedParseDouble,
    });
};
const de_AxisLogarithmicScale = (output, context) => {
    return take(output, {
        Base: __limitedParseDouble,
    });
};
const de_AxisScale = (output, context) => {
    return take(output, {
        Linear: (_) => de_AxisLinearScale(_, context),
        Logarithmic: (_) => de_AxisLogarithmicScale(_, context),
    });
};
const de_AxisTickLabelOptions = (output, context) => {
    return take(output, {
        LabelOptions: _json,
        RotationAngle: __limitedParseDouble,
    });
};
const de_BarChartAggregatedFieldWells = (output, context) => {
    return take(output, {
        Category: _json,
        Colors: _json,
        SmallMultiples: _json,
        Values: (_) => de_MeasureFieldList(_, context),
    });
};
const de_BarChartConfiguration = (output, context) => {
    return take(output, {
        BarsArrangement: __expectString,
        CategoryAxis: (_) => de_AxisDisplayOptions(_, context),
        CategoryLabelOptions: _json,
        ColorLabelOptions: _json,
        ContributionAnalysisDefaults: _json,
        DataLabels: _json,
        FieldWells: (_) => de_BarChartFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        Orientation: __expectString,
        ReferenceLines: (_) => de_ReferenceLineList(_, context),
        SmallMultiplesOptions: _json,
        SortConfiguration: (_) => de_BarChartSortConfiguration(_, context),
        Tooltip: (_) => de_TooltipOptions(_, context),
        ValueAxis: (_) => de_AxisDisplayOptions(_, context),
        ValueLabelOptions: _json,
        VisualPalette: _json,
    });
};
const de_BarChartFieldWells = (output, context) => {
    return take(output, {
        BarChartAggregatedFieldWells: (_) => de_BarChartAggregatedFieldWells(_, context),
    });
};
const de_BarChartSortConfiguration = (output, context) => {
    return take(output, {
        CategoryItemsLimit: _json,
        CategorySort: (_) => de_FieldSortOptionsList(_, context),
        ColorItemsLimit: _json,
        ColorSort: (_) => de_FieldSortOptionsList(_, context),
        SmallMultiplesLimitConfiguration: _json,
        SmallMultiplesSort: (_) => de_FieldSortOptionsList(_, context),
    });
};
const de_BarChartVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_BarChartConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_BinWidthOptions = (output, context) => {
    return take(output, {
        BinCountLimit: __expectLong,
        Value: __limitedParseDouble,
    });
};
const de_BoxPlotAggregatedFieldWells = (output, context) => {
    return take(output, {
        GroupBy: _json,
        Values: (_) => de_BoxPlotMeasureFieldList(_, context),
    });
};
const de_BoxPlotChartConfiguration = (output, context) => {
    return take(output, {
        BoxPlotOptions: _json,
        CategoryAxis: (_) => de_AxisDisplayOptions(_, context),
        CategoryLabelOptions: _json,
        FieldWells: (_) => de_BoxPlotFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        PrimaryYAxisDisplayOptions: (_) => de_AxisDisplayOptions(_, context),
        PrimaryYAxisLabelOptions: _json,
        ReferenceLines: (_) => de_ReferenceLineList(_, context),
        SortConfiguration: (_) => de_BoxPlotSortConfiguration(_, context),
        Tooltip: (_) => de_TooltipOptions(_, context),
        VisualPalette: _json,
    });
};
const de_BoxPlotFieldWells = (output, context) => {
    return take(output, {
        BoxPlotAggregatedFieldWells: (_) => de_BoxPlotAggregatedFieldWells(_, context),
    });
};
const de_BoxPlotMeasureFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MeasureField(entry, context);
    });
    return retVal;
};
const de_BoxPlotSortConfiguration = (output, context) => {
    return take(output, {
        CategorySort: (_) => de_FieldSortOptionsList(_, context),
        PaginationConfiguration: _json,
    });
};
const de_BoxPlotVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_BoxPlotChartConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_CategoryFilter = (output, context) => {
    return take(output, {
        Column: _json,
        Configuration: _json,
        DefaultFilterControlConfiguration: (_) => de_DefaultFilterControlConfiguration(_, context),
        FilterId: __expectString,
    });
};
const de_ColorScale = (output, context) => {
    return take(output, {
        ColorFillType: __expectString,
        Colors: (_) => de_ColorScaleColorList(_, context),
        NullValueColor: (_) => de_DataColor(_, context),
    });
};
const de_ColorScaleColorList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataColor(entry, context);
    });
    return retVal;
};
const de_ColumnHierarchy = (output, context) => {
    return take(output, {
        DateTimeHierarchy: (_) => de_DateTimeHierarchy(_, context),
        ExplicitHierarchy: (_) => de_ExplicitHierarchy(_, context),
        PredefinedHierarchy: (_) => de_PredefinedHierarchy(_, context),
    });
};
const de_ColumnHierarchyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ColumnHierarchy(entry, context);
    });
    return retVal;
};
const de_ColumnSort = (output, context) => {
    return take(output, {
        AggregationFunction: (_) => de_AggregationFunction(_, context),
        Direction: __expectString,
        SortBy: _json,
    });
};
const de_ColumnTooltipItem = (output, context) => {
    return take(output, {
        Aggregation: (_) => de_AggregationFunction(_, context),
        Column: _json,
        Label: __expectString,
        TooltipTarget: __expectString,
        Visibility: __expectString,
    });
};
const de_ComboChartAggregatedFieldWells = (output, context) => {
    return take(output, {
        BarValues: (_) => de_MeasureFieldList(_, context),
        Category: _json,
        Colors: _json,
        LineValues: (_) => de_MeasureFieldList(_, context),
    });
};
const de_ComboChartConfiguration = (output, context) => {
    return take(output, {
        BarDataLabels: _json,
        BarsArrangement: __expectString,
        CategoryAxis: (_) => de_AxisDisplayOptions(_, context),
        CategoryLabelOptions: _json,
        ColorLabelOptions: _json,
        FieldWells: (_) => de_ComboChartFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        LineDataLabels: _json,
        PrimaryYAxisDisplayOptions: (_) => de_AxisDisplayOptions(_, context),
        PrimaryYAxisLabelOptions: _json,
        ReferenceLines: (_) => de_ReferenceLineList(_, context),
        SecondaryYAxisDisplayOptions: (_) => de_AxisDisplayOptions(_, context),
        SecondaryYAxisLabelOptions: _json,
        SingleAxisOptions: _json,
        SortConfiguration: (_) => de_ComboChartSortConfiguration(_, context),
        Tooltip: (_) => de_TooltipOptions(_, context),
        VisualPalette: _json,
    });
};
const de_ComboChartFieldWells = (output, context) => {
    return take(output, {
        ComboChartAggregatedFieldWells: (_) => de_ComboChartAggregatedFieldWells(_, context),
    });
};
const de_ComboChartSortConfiguration = (output, context) => {
    return take(output, {
        CategoryItemsLimit: _json,
        CategorySort: (_) => de_FieldSortOptionsList(_, context),
        ColorItemsLimit: _json,
        ColorSort: (_) => de_FieldSortOptionsList(_, context),
    });
};
const de_ComboChartVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_ComboChartConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_Computation = (output, context) => {
    return take(output, {
        Forecast: (_) => de_ForecastComputation(_, context),
        GrowthRate: (_) => de_GrowthRateComputation(_, context),
        MaximumMinimum: (_) => de_MaximumMinimumComputation(_, context),
        MetricComparison: (_) => de_MetricComparisonComputation(_, context),
        PeriodOverPeriod: (_) => de_PeriodOverPeriodComputation(_, context),
        PeriodToDate: (_) => de_PeriodToDateComputation(_, context),
        TopBottomMovers: (_) => de_TopBottomMoversComputation(_, context),
        TopBottomRanked: (_) => de_TopBottomRankedComputation(_, context),
        TotalAggregation: (_) => de_TotalAggregationComputation(_, context),
        UniqueValues: _json,
    });
};
const de_ComputationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Computation(entry, context);
    });
    return retVal;
};
const de_ConditionalFormattingColor = (output, context) => {
    return take(output, {
        Gradient: (_) => de_ConditionalFormattingGradientColor(_, context),
        Solid: _json,
    });
};
const de_ConditionalFormattingGradientColor = (output, context) => {
    return take(output, {
        Color: (_) => de_GradientColor(_, context),
        Expression: __expectString,
    });
};
const de_CustomActionSetParametersOperation = (output, context) => {
    return take(output, {
        ParameterValueConfigurations: (_) => de_SetParameterValueConfigurationList(_, context),
    });
};
const de_CustomContentVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: _json,
        DataSetIdentifier: __expectString,
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_CustomParameterValues = (output, context) => {
    return take(output, {
        DateTimeValues: (_) => de_DateTimeDefaultValueList(_, context),
        DecimalValues: (_) => de_DecimalDefaultValueList(_, context),
        IntegerValues: _json,
        StringValues: _json,
    });
};
const de_CustomValuesConfiguration = (output, context) => {
    return take(output, {
        CustomValues: (_) => de_CustomParameterValues(_, context),
        IncludeNullValue: __expectBoolean,
    });
};
const de_Dashboard = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DashboardId: __expectString,
        LastPublishedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LinkEntities: _json,
        Name: __expectString,
        Version: (_) => de_DashboardVersion(_, context),
    });
};
const de_DashboardSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DashboardId: __expectString,
        LastPublishedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        PublishedVersionNumber: __expectLong,
    });
};
const de_DashboardSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DashboardSummary(entry, context);
    });
    return retVal;
};
const de_DashboardVersion = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSetArns: _json,
        Description: __expectString,
        Errors: _json,
        Sheets: _json,
        SourceEntityArn: __expectString,
        Status: __expectString,
        ThemeArn: __expectString,
        VersionNumber: __expectLong,
    });
};
const de_DashboardVersionDefinition = (output, context) => {
    return take(output, {
        AnalysisDefaults: _json,
        CalculatedFields: _json,
        ColumnConfigurations: _json,
        DataSetIdentifierDeclarations: _json,
        FilterGroups: (_) => de_FilterGroupList(_, context),
        Options: _json,
        ParameterDeclarations: (_) => de_ParameterDeclarationList(_, context),
        Sheets: (_) => de_SheetDefinitionList(_, context),
    });
};
const de_DashboardVersionSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        SourceEntityArn: __expectString,
        Status: __expectString,
        VersionNumber: __expectLong,
    });
};
const de_DashboardVersionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DashboardVersionSummary(entry, context);
    });
    return retVal;
};
const de_DataColor = (output, context) => {
    return take(output, {
        Color: __expectString,
        DataValue: __limitedParseDouble,
    });
};
const de_DataSet = (output, context) => {
    return take(output, {
        Arn: __expectString,
        ColumnGroups: _json,
        ColumnLevelPermissionRules: _json,
        ConsumedSpiceCapacityInBytes: __expectLong,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSetId: __expectString,
        DataSetUsageConfiguration: _json,
        DatasetParameters: (_) => de_DatasetParameterList(_, context),
        FieldFolders: _json,
        ImportMode: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogicalTableMap: (_) => de_LogicalTableMap(_, context),
        Name: __expectString,
        OutputColumns: _json,
        PhysicalTableMap: _json,
        RowLevelPermissionDataSet: _json,
        RowLevelPermissionTagConfiguration: _json,
    });
};
const de_DatasetParameter = (output, context) => {
    return take(output, {
        DateTimeDatasetParameter: (_) => de_DateTimeDatasetParameter(_, context),
        DecimalDatasetParameter: (_) => de_DecimalDatasetParameter(_, context),
        IntegerDatasetParameter: _json,
        StringDatasetParameter: _json,
    });
};
const de_DatasetParameterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetParameter(entry, context);
    });
    return retVal;
};
const de_DataSetSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        ColumnLevelPermissionRulesApplied: __expectBoolean,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSetId: __expectString,
        ImportMode: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        RowLevelPermissionDataSet: _json,
        RowLevelPermissionTagConfigurationApplied: __expectBoolean,
    });
};
const de_DataSetSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSetSummary(entry, context);
    });
    return retVal;
};
const de_DataSource = (output, context) => {
    return take(output, {
        AlternateDataSourceParameters: _json,
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSourceId: __expectString,
        DataSourceParameters: (_) => _json(__expectUnion(_)),
        ErrorInfo: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        SecretArn: __expectString,
        SslProperties: _json,
        Status: __expectString,
        Type: __expectString,
        VpcConnectionProperties: _json,
    });
};
const de_DataSourceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSource(entry, context);
    });
    return retVal;
};
const de_DataSourceSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSourceId: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Type: __expectString,
    });
};
const de_DataSourceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSourceSummary(entry, context);
    });
    return retVal;
};
const de_DateTimeDatasetParameter = (output, context) => {
    return take(output, {
        DefaultValues: (_) => de_DateTimeDatasetParameterDefaultValues(_, context),
        Id: __expectString,
        Name: __expectString,
        TimeGranularity: __expectString,
        ValueType: __expectString,
    });
};
const de_DateTimeDatasetParameterDefaultValues = (output, context) => {
    return take(output, {
        StaticValues: (_) => de_DateTimeDatasetParameterValueList(_, context),
    });
};
const de_DateTimeDatasetParameterValueList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectNonNull(__parseEpochTimestamp(__expectNumber(entry)));
    });
    return retVal;
};
const de_DateTimeDefaultValueList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectNonNull(__parseEpochTimestamp(__expectNumber(entry)));
    });
    return retVal;
};
const de_DateTimeDefaultValues = (output, context) => {
    return take(output, {
        DynamicValue: _json,
        RollingDate: _json,
        StaticValues: (_) => de_DateTimeDefaultValueList(_, context),
    });
};
const de_DateTimeHierarchy = (output, context) => {
    return take(output, {
        DrillDownFilters: (_) => de_DrillDownFilterList(_, context),
        HierarchyId: __expectString,
    });
};
const de_DateTimeParameter = (output, context) => {
    return take(output, {
        Name: __expectString,
        Values: (_) => de_SensitiveTimestampList(_, context),
    });
};
const de_DateTimeParameterDeclaration = (output, context) => {
    return take(output, {
        DefaultValues: (_) => de_DateTimeDefaultValues(_, context),
        MappedDataSetParameters: _json,
        Name: __expectString,
        TimeGranularity: __expectString,
        ValueWhenUnset: (_) => de_DateTimeValueWhenUnsetConfiguration(_, context),
    });
};
const de_DateTimeParameterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DateTimeParameter(entry, context);
    });
    return retVal;
};
const de_DateTimeValueWhenUnsetConfiguration = (output, context) => {
    return take(output, {
        CustomValue: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ValueWhenUnsetOption: __expectString,
    });
};
const de_DecimalDatasetParameter = (output, context) => {
    return take(output, {
        DefaultValues: (_) => de_DecimalDatasetParameterDefaultValues(_, context),
        Id: __expectString,
        Name: __expectString,
        ValueType: __expectString,
    });
};
const de_DecimalDatasetParameterDefaultValues = (output, context) => {
    return take(output, {
        StaticValues: (_) => de_DecimalDatasetParameterValueList(_, context),
    });
};
const de_DecimalDatasetParameterValueList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __limitedParseDouble(entry);
    });
    return retVal;
};
const de_DecimalDefaultValueList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __limitedParseDouble(entry);
    });
    return retVal;
};
const de_DecimalDefaultValues = (output, context) => {
    return take(output, {
        DynamicValue: _json,
        StaticValues: (_) => de_DecimalDefaultValueList(_, context),
    });
};
const de_DecimalParameter = (output, context) => {
    return take(output, {
        Name: __expectString,
        Values: (_) => de_SensitiveDoubleList(_, context),
    });
};
const de_DecimalParameterDeclaration = (output, context) => {
    return take(output, {
        DefaultValues: (_) => de_DecimalDefaultValues(_, context),
        MappedDataSetParameters: _json,
        Name: __expectString,
        ParameterValueType: __expectString,
        ValueWhenUnset: (_) => de_DecimalValueWhenUnsetConfiguration(_, context),
    });
};
const de_DecimalParameterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DecimalParameter(entry, context);
    });
    return retVal;
};
const de_DecimalValueWhenUnsetConfiguration = (output, context) => {
    return take(output, {
        CustomValue: __limitedParseDouble,
        ValueWhenUnsetOption: __expectString,
    });
};
const de_DefaultFilterControlConfiguration = (output, context) => {
    return take(output, {
        ControlOptions: (_) => de_DefaultFilterControlOptions(_, context),
        Title: __expectString,
    });
};
const de_DefaultFilterControlOptions = (output, context) => {
    return take(output, {
        DefaultDateTimePickerOptions: _json,
        DefaultDropdownOptions: _json,
        DefaultListOptions: _json,
        DefaultRelativeDateTimeOptions: _json,
        DefaultSliderOptions: (_) => de_DefaultSliderControlOptions(_, context),
        DefaultTextAreaOptions: _json,
        DefaultTextFieldOptions: _json,
    });
};
const de_DefaultSliderControlOptions = (output, context) => {
    return take(output, {
        DisplayOptions: _json,
        MaximumValue: __limitedParseDouble,
        MinimumValue: __limitedParseDouble,
        StepSize: __limitedParseDouble,
        Type: __expectString,
    });
};
const de_DestinationParameterValueConfiguration = (output, context) => {
    return take(output, {
        CustomValuesConfiguration: (_) => de_CustomValuesConfiguration(_, context),
        SelectAllValueOptions: __expectString,
        SourceColumn: _json,
        SourceField: __expectString,
        SourceParameterName: __expectString,
    });
};
const de_DrillDownFilter = (output, context) => {
    return take(output, {
        CategoryFilter: _json,
        NumericEqualityFilter: (_) => de_NumericEqualityDrillDownFilter(_, context),
        TimeRangeFilter: (_) => de_TimeRangeDrillDownFilter(_, context),
    });
};
const de_DrillDownFilterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DrillDownFilter(entry, context);
    });
    return retVal;
};
const de_EmptyVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        DataSetIdentifier: __expectString,
        VisualId: __expectString,
    });
};
const de_ExplicitHierarchy = (output, context) => {
    return take(output, {
        Columns: _json,
        DrillDownFilters: (_) => de_DrillDownFilterList(_, context),
        HierarchyId: __expectString,
    });
};
const de_FieldBasedTooltip = (output, context) => {
    return take(output, {
        AggregationVisibility: __expectString,
        TooltipFields: (_) => de_TooltipItemList(_, context),
        TooltipTitleType: __expectString,
    });
};
const de_FieldSortOptions = (output, context) => {
    return take(output, {
        ColumnSort: (_) => de_ColumnSort(_, context),
        FieldSort: _json,
    });
};
const de_FieldSortOptionsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FieldSortOptions(entry, context);
    });
    return retVal;
};
const de_FilledMapAggregatedFieldWells = (output, context) => {
    return take(output, {
        Geospatial: _json,
        Values: (_) => de_FilledMapMeasureFieldList(_, context),
    });
};
const de_FilledMapConditionalFormatting = (output, context) => {
    return take(output, {
        ConditionalFormattingOptions: (_) => de_FilledMapConditionalFormattingOptionList(_, context),
    });
};
const de_FilledMapConditionalFormattingOption = (output, context) => {
    return take(output, {
        Shape: (_) => de_FilledMapShapeConditionalFormatting(_, context),
    });
};
const de_FilledMapConditionalFormattingOptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FilledMapConditionalFormattingOption(entry, context);
    });
    return retVal;
};
const de_FilledMapConfiguration = (output, context) => {
    return take(output, {
        FieldWells: (_) => de_FilledMapFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        MapStyleOptions: _json,
        SortConfiguration: (_) => de_FilledMapSortConfiguration(_, context),
        Tooltip: (_) => de_TooltipOptions(_, context),
        WindowOptions: (_) => de_GeospatialWindowOptions(_, context),
    });
};
const de_FilledMapFieldWells = (output, context) => {
    return take(output, {
        FilledMapAggregatedFieldWells: (_) => de_FilledMapAggregatedFieldWells(_, context),
    });
};
const de_FilledMapMeasureFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MeasureField(entry, context);
    });
    return retVal;
};
const de_FilledMapShapeConditionalFormatting = (output, context) => {
    return take(output, {
        FieldId: __expectString,
        Format: (_) => de_ShapeConditionalFormat(_, context),
    });
};
const de_FilledMapSortConfiguration = (output, context) => {
    return take(output, {
        CategorySort: (_) => de_FieldSortOptionsList(_, context),
    });
};
const de_FilledMapVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_FilledMapConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        ConditionalFormatting: (_) => de_FilledMapConditionalFormatting(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_Filter = (output, context) => {
    return take(output, {
        CategoryFilter: (_) => de_CategoryFilter(_, context),
        NumericEqualityFilter: (_) => de_NumericEqualityFilter(_, context),
        NumericRangeFilter: (_) => de_NumericRangeFilter(_, context),
        RelativeDatesFilter: (_) => de_RelativeDatesFilter(_, context),
        TimeEqualityFilter: (_) => de_TimeEqualityFilter(_, context),
        TimeRangeFilter: (_) => de_TimeRangeFilter(_, context),
        TopBottomFilter: (_) => de_TopBottomFilter(_, context),
    });
};
const de_FilterControl = (output, context) => {
    return take(output, {
        CrossSheet: _json,
        DateTimePicker: _json,
        Dropdown: _json,
        List: _json,
        RelativeDateTime: _json,
        Slider: (_) => de_FilterSliderControl(_, context),
        TextArea: _json,
        TextField: _json,
    });
};
const de_FilterControlList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FilterControl(entry, context);
    });
    return retVal;
};
const de_FilterGroup = (output, context) => {
    return take(output, {
        CrossDataset: __expectString,
        FilterGroupId: __expectString,
        Filters: (_) => de_FilterList(_, context),
        ScopeConfiguration: _json,
        Status: __expectString,
    });
};
const de_FilterGroupList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FilterGroup(entry, context);
    });
    return retVal;
};
const de_FilterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Filter(entry, context);
    });
    return retVal;
};
const de_FilterSliderControl = (output, context) => {
    return take(output, {
        DisplayOptions: _json,
        FilterControlId: __expectString,
        MaximumValue: __limitedParseDouble,
        MinimumValue: __limitedParseDouble,
        SourceFilterId: __expectString,
        StepSize: __limitedParseDouble,
        Title: __expectString,
        Type: __expectString,
    });
};
const de_Folder = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FolderId: __expectString,
        FolderPath: _json,
        FolderType: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        SharingModel: __expectString,
    });
};
const de_FolderSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FolderId: __expectString,
        FolderType: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        SharingModel: __expectString,
    });
};
const de_FolderSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FolderSummary(entry, context);
    });
    return retVal;
};
const de_ForecastComputation = (output, context) => {
    return take(output, {
        ComputationId: __expectString,
        CustomSeasonalityValue: __expectInt32,
        LowerBoundary: __limitedParseDouble,
        Name: __expectString,
        PeriodsBackward: __expectInt32,
        PeriodsForward: __expectInt32,
        PredictionInterval: __expectInt32,
        Seasonality: __expectString,
        Time: _json,
        UpperBoundary: __limitedParseDouble,
        Value: (_) => de_MeasureField(_, context),
    });
};
const de_ForecastConfiguration = (output, context) => {
    return take(output, {
        ForecastProperties: (_) => de_TimeBasedForecastProperties(_, context),
        Scenario: (_) => de_ForecastScenario(_, context),
    });
};
const de_ForecastConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ForecastConfiguration(entry, context);
    });
    return retVal;
};
const de_ForecastScenario = (output, context) => {
    return take(output, {
        WhatIfPointScenario: (_) => de_WhatIfPointScenario(_, context),
        WhatIfRangeScenario: (_) => de_WhatIfRangeScenario(_, context),
    });
};
const de_FunnelChartAggregatedFieldWells = (output, context) => {
    return take(output, {
        Category: _json,
        Values: (_) => de_FunnelChartMeasureFieldList(_, context),
    });
};
const de_FunnelChartConfiguration = (output, context) => {
    return take(output, {
        CategoryLabelOptions: _json,
        DataLabelOptions: _json,
        FieldWells: (_) => de_FunnelChartFieldWells(_, context),
        Interactions: _json,
        SortConfiguration: (_) => de_FunnelChartSortConfiguration(_, context),
        Tooltip: (_) => de_TooltipOptions(_, context),
        ValueLabelOptions: _json,
        VisualPalette: _json,
    });
};
const de_FunnelChartFieldWells = (output, context) => {
    return take(output, {
        FunnelChartAggregatedFieldWells: (_) => de_FunnelChartAggregatedFieldWells(_, context),
    });
};
const de_FunnelChartMeasureFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MeasureField(entry, context);
    });
    return retVal;
};
const de_FunnelChartSortConfiguration = (output, context) => {
    return take(output, {
        CategoryItemsLimit: _json,
        CategorySort: (_) => de_FieldSortOptionsList(_, context),
    });
};
const de_FunnelChartVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_FunnelChartConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_GaugeChartArcConditionalFormatting = (output, context) => {
    return take(output, {
        ForegroundColor: (_) => de_ConditionalFormattingColor(_, context),
    });
};
const de_GaugeChartConditionalFormatting = (output, context) => {
    return take(output, {
        ConditionalFormattingOptions: (_) => de_GaugeChartConditionalFormattingOptionList(_, context),
    });
};
const de_GaugeChartConditionalFormattingOption = (output, context) => {
    return take(output, {
        Arc: (_) => de_GaugeChartArcConditionalFormatting(_, context),
        PrimaryValue: (_) => de_GaugeChartPrimaryValueConditionalFormatting(_, context),
    });
};
const de_GaugeChartConditionalFormattingOptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GaugeChartConditionalFormattingOption(entry, context);
    });
    return retVal;
};
const de_GaugeChartConfiguration = (output, context) => {
    return take(output, {
        DataLabels: _json,
        FieldWells: (_) => de_GaugeChartFieldWells(_, context),
        GaugeChartOptions: (_) => de_GaugeChartOptions(_, context),
        Interactions: _json,
        TooltipOptions: (_) => de_TooltipOptions(_, context),
        VisualPalette: _json,
    });
};
const de_GaugeChartFieldWells = (output, context) => {
    return take(output, {
        TargetValues: (_) => de_MeasureFieldList(_, context),
        Values: (_) => de_MeasureFieldList(_, context),
    });
};
const de_GaugeChartOptions = (output, context) => {
    return take(output, {
        Arc: (_) => de_ArcConfiguration(_, context),
        ArcAxis: (_) => de_ArcAxisConfiguration(_, context),
        Comparison: _json,
        PrimaryValueDisplayType: __expectString,
        PrimaryValueFontConfiguration: _json,
    });
};
const de_GaugeChartPrimaryValueConditionalFormatting = (output, context) => {
    return take(output, {
        Icon: _json,
        TextColor: (_) => de_ConditionalFormattingColor(_, context),
    });
};
const de_GaugeChartVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_GaugeChartConfiguration(_, context),
        ConditionalFormatting: (_) => de_GaugeChartConditionalFormatting(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_GeospatialCoordinateBounds = (output, context) => {
    return take(output, {
        East: __limitedParseDouble,
        North: __limitedParseDouble,
        South: __limitedParseDouble,
        West: __limitedParseDouble,
    });
};
const de_GeospatialMapAggregatedFieldWells = (output, context) => {
    return take(output, {
        Colors: _json,
        Geospatial: _json,
        Values: (_) => de_MeasureFieldList(_, context),
    });
};
const de_GeospatialMapConfiguration = (output, context) => {
    return take(output, {
        FieldWells: (_) => de_GeospatialMapFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        MapStyleOptions: _json,
        PointStyleOptions: _json,
        Tooltip: (_) => de_TooltipOptions(_, context),
        VisualPalette: _json,
        WindowOptions: (_) => de_GeospatialWindowOptions(_, context),
    });
};
const de_GeospatialMapFieldWells = (output, context) => {
    return take(output, {
        GeospatialMapAggregatedFieldWells: (_) => de_GeospatialMapAggregatedFieldWells(_, context),
    });
};
const de_GeospatialMapVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_GeospatialMapConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_GeospatialWindowOptions = (output, context) => {
    return take(output, {
        Bounds: (_) => de_GeospatialCoordinateBounds(_, context),
        MapZoomMode: __expectString,
    });
};
const de_GradientColor = (output, context) => {
    return take(output, {
        Stops: (_) => de_GradientStopList(_, context),
    });
};
const de_GradientStop = (output, context) => {
    return take(output, {
        Color: __expectString,
        DataValue: __limitedParseDouble,
        GradientOffset: __limitedParseDouble,
    });
};
const de_GradientStopList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GradientStop(entry, context);
    });
    return retVal;
};
const de_GrowthRateComputation = (output, context) => {
    return take(output, {
        ComputationId: __expectString,
        Name: __expectString,
        PeriodSize: __expectInt32,
        Time: _json,
        Value: (_) => de_MeasureField(_, context),
    });
};
const de_HeatMapAggregatedFieldWells = (output, context) => {
    return take(output, {
        Columns: _json,
        Rows: _json,
        Values: (_) => de_HeatMapMeasureFieldList(_, context),
    });
};
const de_HeatMapConfiguration = (output, context) => {
    return take(output, {
        ColorScale: (_) => de_ColorScale(_, context),
        ColumnLabelOptions: _json,
        DataLabels: _json,
        FieldWells: (_) => de_HeatMapFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        RowLabelOptions: _json,
        SortConfiguration: (_) => de_HeatMapSortConfiguration(_, context),
        Tooltip: (_) => de_TooltipOptions(_, context),
    });
};
const de_HeatMapFieldWells = (output, context) => {
    return take(output, {
        HeatMapAggregatedFieldWells: (_) => de_HeatMapAggregatedFieldWells(_, context),
    });
};
const de_HeatMapMeasureFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MeasureField(entry, context);
    });
    return retVal;
};
const de_HeatMapSortConfiguration = (output, context) => {
    return take(output, {
        HeatMapColumnItemsLimitConfiguration: _json,
        HeatMapColumnSort: (_) => de_FieldSortOptionsList(_, context),
        HeatMapRowItemsLimitConfiguration: _json,
        HeatMapRowSort: (_) => de_FieldSortOptionsList(_, context),
    });
};
const de_HeatMapVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_HeatMapConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_HistogramAggregatedFieldWells = (output, context) => {
    return take(output, {
        Values: (_) => de_HistogramMeasureFieldList(_, context),
    });
};
const de_HistogramBinOptions = (output, context) => {
    return take(output, {
        BinCount: _json,
        BinWidth: (_) => de_BinWidthOptions(_, context),
        SelectedBinType: __expectString,
        StartValue: __limitedParseDouble,
    });
};
const de_HistogramConfiguration = (output, context) => {
    return take(output, {
        BinOptions: (_) => de_HistogramBinOptions(_, context),
        DataLabels: _json,
        FieldWells: (_) => de_HistogramFieldWells(_, context),
        Interactions: _json,
        Tooltip: (_) => de_TooltipOptions(_, context),
        VisualPalette: _json,
        XAxisDisplayOptions: (_) => de_AxisDisplayOptions(_, context),
        XAxisLabelOptions: _json,
        YAxisDisplayOptions: (_) => de_AxisDisplayOptions(_, context),
    });
};
const de_HistogramFieldWells = (output, context) => {
    return take(output, {
        HistogramAggregatedFieldWells: (_) => de_HistogramAggregatedFieldWells(_, context),
    });
};
const de_HistogramMeasureFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MeasureField(entry, context);
    });
    return retVal;
};
const de_HistogramVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_HistogramConfiguration(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_Ingestion = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ErrorInfo: _json,
        IngestionId: __expectString,
        IngestionSizeInBytes: __expectLong,
        IngestionStatus: __expectString,
        IngestionTimeInSeconds: __expectLong,
        QueueInfo: _json,
        RequestSource: __expectString,
        RequestType: __expectString,
        RowInfo: _json,
    });
};
const de_Ingestions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ingestion(entry, context);
    });
    return retVal;
};
const de_InsightConfiguration = (output, context) => {
    return take(output, {
        Computations: (_) => de_ComputationList(_, context),
        CustomNarrative: _json,
        Interactions: _json,
    });
};
const de_InsightVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        DataSetIdentifier: __expectString,
        InsightConfiguration: (_) => de_InsightConfiguration(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_KPIActualValueConditionalFormatting = (output, context) => {
    return take(output, {
        Icon: _json,
        TextColor: (_) => de_ConditionalFormattingColor(_, context),
    });
};
const de_KPIComparisonValueConditionalFormatting = (output, context) => {
    return take(output, {
        Icon: _json,
        TextColor: (_) => de_ConditionalFormattingColor(_, context),
    });
};
const de_KPIConditionalFormatting = (output, context) => {
    return take(output, {
        ConditionalFormattingOptions: (_) => de_KPIConditionalFormattingOptionList(_, context),
    });
};
const de_KPIConditionalFormattingOption = (output, context) => {
    return take(output, {
        ActualValue: (_) => de_KPIActualValueConditionalFormatting(_, context),
        ComparisonValue: (_) => de_KPIComparisonValueConditionalFormatting(_, context),
        PrimaryValue: (_) => de_KPIPrimaryValueConditionalFormatting(_, context),
        ProgressBar: (_) => de_KPIProgressBarConditionalFormatting(_, context),
    });
};
const de_KPIConditionalFormattingOptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KPIConditionalFormattingOption(entry, context);
    });
    return retVal;
};
const de_KPIConfiguration = (output, context) => {
    return take(output, {
        FieldWells: (_) => de_KPIFieldWells(_, context),
        Interactions: _json,
        KPIOptions: _json,
        SortConfiguration: (_) => de_KPISortConfiguration(_, context),
    });
};
const de_KPIFieldWells = (output, context) => {
    return take(output, {
        TargetValues: (_) => de_MeasureFieldList(_, context),
        TrendGroups: _json,
        Values: (_) => de_MeasureFieldList(_, context),
    });
};
const de_KPIPrimaryValueConditionalFormatting = (output, context) => {
    return take(output, {
        Icon: _json,
        TextColor: (_) => de_ConditionalFormattingColor(_, context),
    });
};
const de_KPIProgressBarConditionalFormatting = (output, context) => {
    return take(output, {
        ForegroundColor: (_) => de_ConditionalFormattingColor(_, context),
    });
};
const de_KPISortConfiguration = (output, context) => {
    return take(output, {
        TrendGroupSort: (_) => de_FieldSortOptionsList(_, context),
    });
};
const de_KPIVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_KPIConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        ConditionalFormatting: (_) => de_KPIConditionalFormatting(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_Layout = (output, context) => {
    return take(output, {
        Configuration: (_) => de_LayoutConfiguration(_, context),
    });
};
const de_LayoutConfiguration = (output, context) => {
    return take(output, {
        FreeFormLayout: _json,
        GridLayout: _json,
        SectionBasedLayout: (_) => de_SectionBasedLayoutConfiguration(_, context),
    });
};
const de_LayoutList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Layout(entry, context);
    });
    return retVal;
};
const de_LineChartAggregatedFieldWells = (output, context) => {
    return take(output, {
        Category: _json,
        Colors: _json,
        SmallMultiples: _json,
        Values: (_) => de_MeasureFieldList(_, context),
    });
};
const de_LineChartConfiguration = (output, context) => {
    return take(output, {
        ContributionAnalysisDefaults: _json,
        DataLabels: _json,
        DefaultSeriesSettings: _json,
        FieldWells: (_) => de_LineChartFieldWells(_, context),
        ForecastConfigurations: (_) => de_ForecastConfigurationList(_, context),
        Interactions: _json,
        Legend: _json,
        PrimaryYAxisDisplayOptions: (_) => de_LineSeriesAxisDisplayOptions(_, context),
        PrimaryYAxisLabelOptions: _json,
        ReferenceLines: (_) => de_ReferenceLineList(_, context),
        SecondaryYAxisDisplayOptions: (_) => de_LineSeriesAxisDisplayOptions(_, context),
        SecondaryYAxisLabelOptions: _json,
        Series: _json,
        SingleAxisOptions: _json,
        SmallMultiplesOptions: _json,
        SortConfiguration: (_) => de_LineChartSortConfiguration(_, context),
        Tooltip: (_) => de_TooltipOptions(_, context),
        Type: __expectString,
        VisualPalette: _json,
        XAxisDisplayOptions: (_) => de_AxisDisplayOptions(_, context),
        XAxisLabelOptions: _json,
    });
};
const de_LineChartFieldWells = (output, context) => {
    return take(output, {
        LineChartAggregatedFieldWells: (_) => de_LineChartAggregatedFieldWells(_, context),
    });
};
const de_LineChartSortConfiguration = (output, context) => {
    return take(output, {
        CategoryItemsLimitConfiguration: _json,
        CategorySort: (_) => de_FieldSortOptionsList(_, context),
        ColorItemsLimitConfiguration: _json,
        SmallMultiplesLimitConfiguration: _json,
        SmallMultiplesSort: (_) => de_FieldSortOptionsList(_, context),
    });
};
const de_LineChartVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_LineChartConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_LineSeriesAxisDisplayOptions = (output, context) => {
    return take(output, {
        AxisOptions: (_) => de_AxisDisplayOptions(_, context),
        MissingDataConfigurations: _json,
    });
};
const de_LogicalTable = (output, context) => {
    return take(output, {
        Alias: __expectString,
        DataTransforms: (_) => de_TransformOperationList(_, context),
        Source: _json,
    });
};
const de_LogicalTableMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_LogicalTable(value, context);
        return acc;
    }, {});
};
const de_MaximumMinimumComputation = (output, context) => {
    return take(output, {
        ComputationId: __expectString,
        Name: __expectString,
        Time: _json,
        Type: __expectString,
        Value: (_) => de_MeasureField(_, context),
    });
};
const de_MeasureField = (output, context) => {
    return take(output, {
        CalculatedMeasureField: _json,
        CategoricalMeasureField: _json,
        DateMeasureField: _json,
        NumericalMeasureField: (_) => de_NumericalMeasureField(_, context),
    });
};
const de_MeasureFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MeasureField(entry, context);
    });
    return retVal;
};
const de_MetricComparisonComputation = (output, context) => {
    return take(output, {
        ComputationId: __expectString,
        FromValue: (_) => de_MeasureField(_, context),
        Name: __expectString,
        TargetValue: (_) => de_MeasureField(_, context),
        Time: _json,
    });
};
const de_NewDefaultValues = (output, context) => {
    return take(output, {
        DateTimeStaticValues: (_) => de_DateTimeDatasetParameterValueList(_, context),
        DecimalStaticValues: (_) => de_DecimalDatasetParameterValueList(_, context),
        IntegerStaticValues: _json,
        StringStaticValues: _json,
    });
};
const de_NumericalAggregationFunction = (output, context) => {
    return take(output, {
        PercentileAggregation: (_) => de_PercentileAggregation(_, context),
        SimpleNumericalAggregation: __expectString,
    });
};
const de_NumericalMeasureField = (output, context) => {
    return take(output, {
        AggregationFunction: (_) => de_NumericalAggregationFunction(_, context),
        Column: _json,
        FieldId: __expectString,
        FormatConfiguration: _json,
    });
};
const de_NumericAxisOptions = (output, context) => {
    return take(output, {
        Range: (_) => de_AxisDisplayRange(_, context),
        Scale: (_) => de_AxisScale(_, context),
    });
};
const de_NumericEqualityDrillDownFilter = (output, context) => {
    return take(output, {
        Column: _json,
        Value: __limitedParseDouble,
    });
};
const de_NumericEqualityFilter = (output, context) => {
    return take(output, {
        AggregationFunction: (_) => de_AggregationFunction(_, context),
        Column: _json,
        DefaultFilterControlConfiguration: (_) => de_DefaultFilterControlConfiguration(_, context),
        FilterId: __expectString,
        MatchOperator: __expectString,
        NullOption: __expectString,
        ParameterName: __expectString,
        SelectAllOptions: __expectString,
        Value: __limitedParseDouble,
    });
};
const de_NumericRangeFilter = (output, context) => {
    return take(output, {
        AggregationFunction: (_) => de_AggregationFunction(_, context),
        Column: _json,
        DefaultFilterControlConfiguration: (_) => de_DefaultFilterControlConfiguration(_, context),
        FilterId: __expectString,
        IncludeMaximum: __expectBoolean,
        IncludeMinimum: __expectBoolean,
        NullOption: __expectString,
        RangeMaximum: (_) => de_NumericRangeFilterValue(_, context),
        RangeMinimum: (_) => de_NumericRangeFilterValue(_, context),
        SelectAllOptions: __expectString,
    });
};
const de_NumericRangeFilterValue = (output, context) => {
    return take(output, {
        Parameter: __expectString,
        StaticValue: __limitedParseDouble,
    });
};
const de_OverrideDatasetParameterOperation = (output, context) => {
    return take(output, {
        NewDefaultValues: (_) => de_NewDefaultValues(_, context),
        NewParameterName: __expectString,
        ParameterName: __expectString,
    });
};
const de_ParameterControl = (output, context) => {
    return take(output, {
        DateTimePicker: _json,
        Dropdown: _json,
        List: _json,
        Slider: (_) => de_ParameterSliderControl(_, context),
        TextArea: _json,
        TextField: _json,
    });
};
const de_ParameterControlList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ParameterControl(entry, context);
    });
    return retVal;
};
const de_ParameterDeclaration = (output, context) => {
    return take(output, {
        DateTimeParameterDeclaration: (_) => de_DateTimeParameterDeclaration(_, context),
        DecimalParameterDeclaration: (_) => de_DecimalParameterDeclaration(_, context),
        IntegerParameterDeclaration: _json,
        StringParameterDeclaration: _json,
    });
};
const de_ParameterDeclarationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ParameterDeclaration(entry, context);
    });
    return retVal;
};
const de__Parameters = (output, context) => {
    return take(output, {
        DateTimeParameters: (_) => de_DateTimeParameterList(_, context),
        DecimalParameters: (_) => de_DecimalParameterList(_, context),
        IntegerParameters: _json,
        StringParameters: _json,
    });
};
const de_ParameterSliderControl = (output, context) => {
    return take(output, {
        DisplayOptions: _json,
        MaximumValue: __limitedParseDouble,
        MinimumValue: __limitedParseDouble,
        ParameterControlId: __expectString,
        SourceParameterName: __expectString,
        StepSize: __limitedParseDouble,
        Title: __expectString,
    });
};
const de_PercentileAggregation = (output, context) => {
    return take(output, {
        PercentileValue: __limitedParseDouble,
    });
};
const de_PercentVisibleRange = (output, context) => {
    return take(output, {
        From: __limitedParseDouble,
        To: __limitedParseDouble,
    });
};
const de_PeriodOverPeriodComputation = (output, context) => {
    return take(output, {
        ComputationId: __expectString,
        Name: __expectString,
        Time: _json,
        Value: (_) => de_MeasureField(_, context),
    });
};
const de_PeriodToDateComputation = (output, context) => {
    return take(output, {
        ComputationId: __expectString,
        Name: __expectString,
        PeriodTimeGranularity: __expectString,
        Time: _json,
        Value: (_) => de_MeasureField(_, context),
    });
};
const de_PieChartAggregatedFieldWells = (output, context) => {
    return take(output, {
        Category: _json,
        SmallMultiples: _json,
        Values: (_) => de_MeasureFieldList(_, context),
    });
};
const de_PieChartConfiguration = (output, context) => {
    return take(output, {
        CategoryLabelOptions: _json,
        ContributionAnalysisDefaults: _json,
        DataLabels: _json,
        DonutOptions: _json,
        FieldWells: (_) => de_PieChartFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        SmallMultiplesOptions: _json,
        SortConfiguration: (_) => de_PieChartSortConfiguration(_, context),
        Tooltip: (_) => de_TooltipOptions(_, context),
        ValueLabelOptions: _json,
        VisualPalette: _json,
    });
};
const de_PieChartFieldWells = (output, context) => {
    return take(output, {
        PieChartAggregatedFieldWells: (_) => de_PieChartAggregatedFieldWells(_, context),
    });
};
const de_PieChartSortConfiguration = (output, context) => {
    return take(output, {
        CategoryItemsLimit: _json,
        CategorySort: (_) => de_FieldSortOptionsList(_, context),
        SmallMultiplesLimitConfiguration: _json,
        SmallMultiplesSort: (_) => de_FieldSortOptionsList(_, context),
    });
};
const de_PieChartVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_PieChartConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_PivotFieldSortOptions = (output, context) => {
    return take(output, {
        FieldId: __expectString,
        SortBy: (_) => de_PivotTableSortBy(_, context),
    });
};
const de_PivotFieldSortOptionsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PivotFieldSortOptions(entry, context);
    });
    return retVal;
};
const de_PivotMeasureFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MeasureField(entry, context);
    });
    return retVal;
};
const de_PivotTableAggregatedFieldWells = (output, context) => {
    return take(output, {
        Columns: _json,
        Rows: _json,
        Values: (_) => de_PivotMeasureFieldList(_, context),
    });
};
const de_PivotTableCellConditionalFormatting = (output, context) => {
    return take(output, {
        FieldId: __expectString,
        Scope: _json,
        Scopes: _json,
        TextFormat: (_) => de_TextConditionalFormat(_, context),
    });
};
const de_PivotTableConditionalFormatting = (output, context) => {
    return take(output, {
        ConditionalFormattingOptions: (_) => de_PivotTableConditionalFormattingOptionList(_, context),
    });
};
const de_PivotTableConditionalFormattingOption = (output, context) => {
    return take(output, {
        Cell: (_) => de_PivotTableCellConditionalFormatting(_, context),
    });
};
const de_PivotTableConditionalFormattingOptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PivotTableConditionalFormattingOption(entry, context);
    });
    return retVal;
};
const de_PivotTableConfiguration = (output, context) => {
    return take(output, {
        FieldOptions: _json,
        FieldWells: (_) => de_PivotTableFieldWells(_, context),
        Interactions: _json,
        PaginatedReportOptions: _json,
        SortConfiguration: (_) => de_PivotTableSortConfiguration(_, context),
        TableOptions: _json,
        TotalOptions: _json,
    });
};
const de_PivotTableFieldWells = (output, context) => {
    return take(output, {
        PivotTableAggregatedFieldWells: (_) => de_PivotTableAggregatedFieldWells(_, context),
    });
};
const de_PivotTableSortBy = (output, context) => {
    return take(output, {
        Column: (_) => de_ColumnSort(_, context),
        DataPath: _json,
        Field: _json,
    });
};
const de_PivotTableSortConfiguration = (output, context) => {
    return take(output, {
        FieldSortOptions: (_) => de_PivotFieldSortOptionsList(_, context),
    });
};
const de_PivotTableVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_PivotTableConfiguration(_, context),
        ConditionalFormatting: (_) => de_PivotTableConditionalFormatting(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_PredefinedHierarchy = (output, context) => {
    return take(output, {
        Columns: _json,
        DrillDownFilters: (_) => de_DrillDownFilterList(_, context),
        HierarchyId: __expectString,
    });
};
const de_RadarChartAggregatedFieldWells = (output, context) => {
    return take(output, {
        Category: _json,
        Color: _json,
        Values: (_) => de_RadarChartValuesFieldList(_, context),
    });
};
const de_RadarChartConfiguration = (output, context) => {
    return take(output, {
        AlternateBandColorsVisibility: __expectString,
        AlternateBandEvenColor: __expectString,
        AlternateBandOddColor: __expectString,
        AxesRangeScale: __expectString,
        BaseSeriesSettings: _json,
        CategoryAxis: (_) => de_AxisDisplayOptions(_, context),
        CategoryLabelOptions: _json,
        ColorAxis: (_) => de_AxisDisplayOptions(_, context),
        ColorLabelOptions: _json,
        FieldWells: (_) => de_RadarChartFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        Shape: __expectString,
        SortConfiguration: (_) => de_RadarChartSortConfiguration(_, context),
        StartAngle: __limitedParseDouble,
        VisualPalette: _json,
    });
};
const de_RadarChartFieldWells = (output, context) => {
    return take(output, {
        RadarChartAggregatedFieldWells: (_) => de_RadarChartAggregatedFieldWells(_, context),
    });
};
const de_RadarChartSortConfiguration = (output, context) => {
    return take(output, {
        CategoryItemsLimit: _json,
        CategorySort: (_) => de_FieldSortOptionsList(_, context),
        ColorItemsLimit: _json,
        ColorSort: (_) => de_FieldSortOptionsList(_, context),
    });
};
const de_RadarChartValuesFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MeasureField(entry, context);
    });
    return retVal;
};
const de_RadarChartVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_RadarChartConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_ReferenceLine = (output, context) => {
    return take(output, {
        DataConfiguration: (_) => de_ReferenceLineDataConfiguration(_, context),
        LabelConfiguration: _json,
        Status: __expectString,
        StyleConfiguration: _json,
    });
};
const de_ReferenceLineDataConfiguration = (output, context) => {
    return take(output, {
        AxisBinding: __expectString,
        DynamicConfiguration: (_) => de_ReferenceLineDynamicDataConfiguration(_, context),
        SeriesType: __expectString,
        StaticConfiguration: (_) => de_ReferenceLineStaticDataConfiguration(_, context),
    });
};
const de_ReferenceLineDynamicDataConfiguration = (output, context) => {
    return take(output, {
        Calculation: (_) => de_NumericalAggregationFunction(_, context),
        Column: _json,
        MeasureAggregationFunction: (_) => de_AggregationFunction(_, context),
    });
};
const de_ReferenceLineList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReferenceLine(entry, context);
    });
    return retVal;
};
const de_ReferenceLineStaticDataConfiguration = (output, context) => {
    return take(output, {
        Value: __limitedParseDouble,
    });
};
const de_RefreshSchedule = (output, context) => {
    return take(output, {
        Arn: __expectString,
        RefreshType: __expectString,
        ScheduleFrequency: _json,
        ScheduleId: __expectString,
        StartAfterDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_RefreshSchedules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RefreshSchedule(entry, context);
    });
    return retVal;
};
const de_RelativeDatesFilter = (output, context) => {
    return take(output, {
        AnchorDateConfiguration: _json,
        Column: _json,
        DefaultFilterControlConfiguration: (_) => de_DefaultFilterControlConfiguration(_, context),
        ExcludePeriodConfiguration: _json,
        FilterId: __expectString,
        MinimumGranularity: __expectString,
        NullOption: __expectString,
        ParameterName: __expectString,
        RelativeDateType: __expectString,
        RelativeDateValue: __expectInt32,
        TimeGranularity: __expectString,
    });
};
const de_RowSortList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FieldSortOptions(entry, context);
    });
    return retVal;
};
const de_SankeyDiagramAggregatedFieldWells = (output, context) => {
    return take(output, {
        Destination: _json,
        Source: _json,
        Weight: (_) => de_MeasureFieldList(_, context),
    });
};
const de_SankeyDiagramChartConfiguration = (output, context) => {
    return take(output, {
        DataLabels: _json,
        FieldWells: (_) => de_SankeyDiagramFieldWells(_, context),
        Interactions: _json,
        SortConfiguration: (_) => de_SankeyDiagramSortConfiguration(_, context),
    });
};
const de_SankeyDiagramFieldWells = (output, context) => {
    return take(output, {
        SankeyDiagramAggregatedFieldWells: (_) => de_SankeyDiagramAggregatedFieldWells(_, context),
    });
};
const de_SankeyDiagramSortConfiguration = (output, context) => {
    return take(output, {
        DestinationItemsLimit: _json,
        SourceItemsLimit: _json,
        WeightSort: (_) => de_FieldSortOptionsList(_, context),
    });
};
const de_SankeyDiagramVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_SankeyDiagramChartConfiguration(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_ScatterPlotCategoricallyAggregatedFieldWells = (output, context) => {
    return take(output, {
        Category: _json,
        Label: _json,
        Size: (_) => de_MeasureFieldList(_, context),
        XAxis: (_) => de_MeasureFieldList(_, context),
        YAxis: (_) => de_MeasureFieldList(_, context),
    });
};
const de_ScatterPlotConfiguration = (output, context) => {
    return take(output, {
        DataLabels: _json,
        FieldWells: (_) => de_ScatterPlotFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        SortConfiguration: _json,
        Tooltip: (_) => de_TooltipOptions(_, context),
        VisualPalette: _json,
        XAxisDisplayOptions: (_) => de_AxisDisplayOptions(_, context),
        XAxisLabelOptions: _json,
        YAxisDisplayOptions: (_) => de_AxisDisplayOptions(_, context),
        YAxisLabelOptions: _json,
    });
};
const de_ScatterPlotFieldWells = (output, context) => {
    return take(output, {
        ScatterPlotCategoricallyAggregatedFieldWells: (_) => de_ScatterPlotCategoricallyAggregatedFieldWells(_, context),
        ScatterPlotUnaggregatedFieldWells: (_) => de_ScatterPlotUnaggregatedFieldWells(_, context),
    });
};
const de_ScatterPlotUnaggregatedFieldWells = (output, context) => {
    return take(output, {
        Category: _json,
        Label: _json,
        Size: (_) => de_MeasureFieldList(_, context),
        XAxis: _json,
        YAxis: _json,
    });
};
const de_ScatterPlotVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_ScatterPlotConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_ScrollBarOptions = (output, context) => {
    return take(output, {
        Visibility: __expectString,
        VisibleRange: (_) => de_VisibleRangeOptions(_, context),
    });
};
const de_SectionBasedLayoutConfiguration = (output, context) => {
    return take(output, {
        BodySections: _json,
        CanvasSizeOptions: _json,
        FooterSections: _json,
        HeaderSections: _json,
    });
};
const de_SensitiveDoubleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __limitedParseDouble(entry);
    });
    return retVal;
};
const de_SensitiveTimestampList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectNonNull(__parseEpochTimestamp(__expectNumber(entry)));
    });
    return retVal;
};
const de_SetParameterValueConfiguration = (output, context) => {
    return take(output, {
        DestinationParameterName: __expectString,
        Value: (_) => de_DestinationParameterValueConfiguration(_, context),
    });
};
const de_SetParameterValueConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SetParameterValueConfiguration(entry, context);
    });
    return retVal;
};
const de_ShapeConditionalFormat = (output, context) => {
    return take(output, {
        BackgroundColor: (_) => de_ConditionalFormattingColor(_, context),
    });
};
const de_SheetDefinition = (output, context) => {
    return take(output, {
        ContentType: __expectString,
        Description: __expectString,
        FilterControls: (_) => de_FilterControlList(_, context),
        Layouts: (_) => de_LayoutList(_, context),
        Name: __expectString,
        ParameterControls: (_) => de_ParameterControlList(_, context),
        SheetControlLayouts: _json,
        SheetId: __expectString,
        TextBoxes: _json,
        Title: __expectString,
        Visuals: (_) => de_VisualList(_, context),
    });
};
const de_SheetDefinitionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SheetDefinition(entry, context);
    });
    return retVal;
};
const de_SnapshotConfiguration = (output, context) => {
    return take(output, {
        DestinationConfiguration: _json,
        FileGroups: _json,
        Parameters: (_) => de__Parameters(_, context),
    });
};
const de_TableAggregatedFieldWells = (output, context) => {
    return take(output, {
        GroupBy: _json,
        Values: (_) => de_MeasureFieldList(_, context),
    });
};
const de_TableCellConditionalFormatting = (output, context) => {
    return take(output, {
        FieldId: __expectString,
        TextFormat: (_) => de_TextConditionalFormat(_, context),
    });
};
const de_TableConditionalFormatting = (output, context) => {
    return take(output, {
        ConditionalFormattingOptions: (_) => de_TableConditionalFormattingOptionList(_, context),
    });
};
const de_TableConditionalFormattingOption = (output, context) => {
    return take(output, {
        Cell: (_) => de_TableCellConditionalFormatting(_, context),
        Row: (_) => de_TableRowConditionalFormatting(_, context),
    });
};
const de_TableConditionalFormattingOptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TableConditionalFormattingOption(entry, context);
    });
    return retVal;
};
const de_TableConfiguration = (output, context) => {
    return take(output, {
        FieldOptions: _json,
        FieldWells: (_) => de_TableFieldWells(_, context),
        Interactions: _json,
        PaginatedReportOptions: _json,
        SortConfiguration: (_) => de_TableSortConfiguration(_, context),
        TableInlineVisualizations: _json,
        TableOptions: _json,
        TotalOptions: _json,
    });
};
const de_TableFieldWells = (output, context) => {
    return take(output, {
        TableAggregatedFieldWells: (_) => de_TableAggregatedFieldWells(_, context),
        TableUnaggregatedFieldWells: _json,
    });
};
const de_TableRowConditionalFormatting = (output, context) => {
    return take(output, {
        BackgroundColor: (_) => de_ConditionalFormattingColor(_, context),
        TextColor: (_) => de_ConditionalFormattingColor(_, context),
    });
};
const de_TableSortConfiguration = (output, context) => {
    return take(output, {
        PaginationConfiguration: _json,
        RowSort: (_) => de_RowSortList(_, context),
    });
};
const de_TableVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_TableConfiguration(_, context),
        ConditionalFormatting: (_) => de_TableConditionalFormatting(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_Template = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        TemplateId: __expectString,
        Version: (_) => de_TemplateVersion(_, context),
    });
};
const de_TemplateSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestVersionNumber: __expectLong,
        Name: __expectString,
        TemplateId: __expectString,
    });
};
const de_TemplateSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TemplateSummary(entry, context);
    });
    return retVal;
};
const de_TemplateVersion = (output, context) => {
    return take(output, {
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSetConfigurations: _json,
        Description: __expectString,
        Errors: _json,
        Sheets: _json,
        SourceEntityArn: __expectString,
        Status: __expectString,
        ThemeArn: __expectString,
        VersionNumber: __expectLong,
    });
};
const de_TemplateVersionDefinition = (output, context) => {
    return take(output, {
        AnalysisDefaults: _json,
        CalculatedFields: _json,
        ColumnConfigurations: _json,
        DataSetConfigurations: _json,
        FilterGroups: (_) => de_FilterGroupList(_, context),
        Options: _json,
        ParameterDeclarations: (_) => de_ParameterDeclarationList(_, context),
        Sheets: (_) => de_SheetDefinitionList(_, context),
    });
};
const de_TemplateVersionSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Status: __expectString,
        VersionNumber: __expectLong,
    });
};
const de_TemplateVersionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TemplateVersionSummary(entry, context);
    });
    return retVal;
};
const de_TextConditionalFormat = (output, context) => {
    return take(output, {
        BackgroundColor: (_) => de_ConditionalFormattingColor(_, context),
        Icon: _json,
        TextColor: (_) => de_ConditionalFormattingColor(_, context),
    });
};
const de_Theme = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        ThemeId: __expectString,
        Type: __expectString,
        Version: (_) => de_ThemeVersion(_, context),
    });
};
const de_ThemeSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestVersionNumber: __expectLong,
        Name: __expectString,
        ThemeId: __expectString,
    });
};
const de_ThemeSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ThemeSummary(entry, context);
    });
    return retVal;
};
const de_ThemeVersion = (output, context) => {
    return take(output, {
        Arn: __expectString,
        BaseThemeId: __expectString,
        Configuration: _json,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Errors: _json,
        Status: __expectString,
        VersionNumber: __expectLong,
    });
};
const de_ThemeVersionSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Status: __expectString,
        VersionNumber: __expectLong,
    });
};
const de_ThemeVersionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ThemeVersionSummary(entry, context);
    });
    return retVal;
};
const de_TimeBasedForecastProperties = (output, context) => {
    return take(output, {
        LowerBoundary: __limitedParseDouble,
        PeriodsBackward: __expectInt32,
        PeriodsForward: __expectInt32,
        PredictionInterval: __expectInt32,
        Seasonality: __expectInt32,
        UpperBoundary: __limitedParseDouble,
    });
};
const de_TimeEqualityFilter = (output, context) => {
    return take(output, {
        Column: _json,
        DefaultFilterControlConfiguration: (_) => de_DefaultFilterControlConfiguration(_, context),
        FilterId: __expectString,
        ParameterName: __expectString,
        RollingDate: _json,
        TimeGranularity: __expectString,
        Value: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_TimeRangeDrillDownFilter = (output, context) => {
    return take(output, {
        Column: _json,
        RangeMaximum: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RangeMinimum: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TimeGranularity: __expectString,
    });
};
const de_TimeRangeFilter = (output, context) => {
    return take(output, {
        Column: _json,
        DefaultFilterControlConfiguration: (_) => de_DefaultFilterControlConfiguration(_, context),
        ExcludePeriodConfiguration: _json,
        FilterId: __expectString,
        IncludeMaximum: __expectBoolean,
        IncludeMinimum: __expectBoolean,
        NullOption: __expectString,
        RangeMaximumValue: (_) => de_TimeRangeFilterValue(_, context),
        RangeMinimumValue: (_) => de_TimeRangeFilterValue(_, context),
        TimeGranularity: __expectString,
    });
};
const de_TimeRangeFilterValue = (output, context) => {
    return take(output, {
        Parameter: __expectString,
        RollingDate: _json,
        StaticValue: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_TooltipItem = (output, context) => {
    return take(output, {
        ColumnTooltipItem: (_) => de_ColumnTooltipItem(_, context),
        FieldTooltipItem: _json,
    });
};
const de_TooltipItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TooltipItem(entry, context);
    });
    return retVal;
};
const de_TooltipOptions = (output, context) => {
    return take(output, {
        FieldBasedTooltip: (_) => de_FieldBasedTooltip(_, context),
        SelectedTooltipType: __expectString,
        TooltipVisibility: __expectString,
    });
};
const de_TopBottomFilter = (output, context) => {
    return take(output, {
        AggregationSortConfigurations: (_) => de_AggregationSortConfigurationList(_, context),
        Column: _json,
        DefaultFilterControlConfiguration: (_) => de_DefaultFilterControlConfiguration(_, context),
        FilterId: __expectString,
        Limit: __expectInt32,
        ParameterName: __expectString,
        TimeGranularity: __expectString,
    });
};
const de_TopBottomMoversComputation = (output, context) => {
    return take(output, {
        Category: _json,
        ComputationId: __expectString,
        MoverSize: __expectInt32,
        Name: __expectString,
        SortOrder: __expectString,
        Time: _json,
        Type: __expectString,
        Value: (_) => de_MeasureField(_, context),
    });
};
const de_TopBottomRankedComputation = (output, context) => {
    return take(output, {
        Category: _json,
        ComputationId: __expectString,
        Name: __expectString,
        ResultSize: __expectInt32,
        Type: __expectString,
        Value: (_) => de_MeasureField(_, context),
    });
};
const de_TopicRefreshSchedule = (output, context) => {
    return take(output, {
        BasedOnSpiceSchedule: __expectBoolean,
        IsEnabled: __expectBoolean,
        RepeatAt: __expectString,
        StartingAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Timezone: __expectString,
        TopicScheduleType: __expectString,
    });
};
const de_TopicRefreshScheduleSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TopicRefreshScheduleSummary(entry, context);
    });
    return retVal;
};
const de_TopicRefreshScheduleSummary = (output, context) => {
    return take(output, {
        DatasetArn: __expectString,
        DatasetId: __expectString,
        DatasetName: __expectString,
        RefreshSchedule: (_) => de_TopicRefreshSchedule(_, context),
    });
};
const de_TotalAggregationComputation = (output, context) => {
    return take(output, {
        ComputationId: __expectString,
        Name: __expectString,
        Value: (_) => de_MeasureField(_, context),
    });
};
const de_TransformOperation = (output, context) => {
    if (output.CastColumnTypeOperation != null) {
        return {
            CastColumnTypeOperation: _json(output.CastColumnTypeOperation),
        };
    }
    if (output.CreateColumnsOperation != null) {
        return {
            CreateColumnsOperation: _json(output.CreateColumnsOperation),
        };
    }
    if (output.FilterOperation != null) {
        return {
            FilterOperation: _json(output.FilterOperation),
        };
    }
    if (output.OverrideDatasetParameterOperation != null) {
        return {
            OverrideDatasetParameterOperation: de_OverrideDatasetParameterOperation(output.OverrideDatasetParameterOperation, context),
        };
    }
    if (output.ProjectOperation != null) {
        return {
            ProjectOperation: _json(output.ProjectOperation),
        };
    }
    if (output.RenameColumnOperation != null) {
        return {
            RenameColumnOperation: _json(output.RenameColumnOperation),
        };
    }
    if (output.TagColumnOperation != null) {
        return {
            TagColumnOperation: _json(output.TagColumnOperation),
        };
    }
    if (output.UntagColumnOperation != null) {
        return {
            UntagColumnOperation: _json(output.UntagColumnOperation),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_TransformOperationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransformOperation(__expectUnion(entry), context);
    });
    return retVal;
};
const de_TreeMapAggregatedFieldWells = (output, context) => {
    return take(output, {
        Colors: (_) => de_TreeMapMeasureFieldList(_, context),
        Groups: _json,
        Sizes: (_) => de_TreeMapMeasureFieldList(_, context),
    });
};
const de_TreeMapConfiguration = (output, context) => {
    return take(output, {
        ColorLabelOptions: _json,
        ColorScale: (_) => de_ColorScale(_, context),
        DataLabels: _json,
        FieldWells: (_) => de_TreeMapFieldWells(_, context),
        GroupLabelOptions: _json,
        Interactions: _json,
        Legend: _json,
        SizeLabelOptions: _json,
        SortConfiguration: (_) => de_TreeMapSortConfiguration(_, context),
        Tooltip: (_) => de_TooltipOptions(_, context),
    });
};
const de_TreeMapFieldWells = (output, context) => {
    return take(output, {
        TreeMapAggregatedFieldWells: (_) => de_TreeMapAggregatedFieldWells(_, context),
    });
};
const de_TreeMapMeasureFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MeasureField(entry, context);
    });
    return retVal;
};
const de_TreeMapSortConfiguration = (output, context) => {
    return take(output, {
        TreeMapGroupItemsLimitConfiguration: _json,
        TreeMapSort: (_) => de_FieldSortOptionsList(_, context),
    });
};
const de_TreeMapVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_TreeMapConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_VisibleRangeOptions = (output, context) => {
    return take(output, {
        PercentRange: (_) => de_PercentVisibleRange(_, context),
    });
};
const de_Visual = (output, context) => {
    return take(output, {
        BarChartVisual: (_) => de_BarChartVisual(_, context),
        BoxPlotVisual: (_) => de_BoxPlotVisual(_, context),
        ComboChartVisual: (_) => de_ComboChartVisual(_, context),
        CustomContentVisual: (_) => de_CustomContentVisual(_, context),
        EmptyVisual: (_) => de_EmptyVisual(_, context),
        FilledMapVisual: (_) => de_FilledMapVisual(_, context),
        FunnelChartVisual: (_) => de_FunnelChartVisual(_, context),
        GaugeChartVisual: (_) => de_GaugeChartVisual(_, context),
        GeospatialMapVisual: (_) => de_GeospatialMapVisual(_, context),
        HeatMapVisual: (_) => de_HeatMapVisual(_, context),
        HistogramVisual: (_) => de_HistogramVisual(_, context),
        InsightVisual: (_) => de_InsightVisual(_, context),
        KPIVisual: (_) => de_KPIVisual(_, context),
        LineChartVisual: (_) => de_LineChartVisual(_, context),
        PieChartVisual: (_) => de_PieChartVisual(_, context),
        PivotTableVisual: (_) => de_PivotTableVisual(_, context),
        RadarChartVisual: (_) => de_RadarChartVisual(_, context),
        SankeyDiagramVisual: (_) => de_SankeyDiagramVisual(_, context),
        ScatterPlotVisual: (_) => de_ScatterPlotVisual(_, context),
        TableVisual: (_) => de_TableVisual(_, context),
        TreeMapVisual: (_) => de_TreeMapVisual(_, context),
        WaterfallVisual: (_) => de_WaterfallVisual(_, context),
        WordCloudVisual: (_) => de_WordCloudVisual(_, context),
    });
};
const de_VisualCustomAction = (output, context) => {
    return take(output, {
        ActionOperations: (_) => de_VisualCustomActionOperationList(_, context),
        CustomActionId: __expectString,
        Name: __expectString,
        Status: __expectString,
        Trigger: __expectString,
    });
};
const de_VisualCustomActionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VisualCustomAction(entry, context);
    });
    return retVal;
};
const de_VisualCustomActionOperation = (output, context) => {
    return take(output, {
        FilterOperation: _json,
        NavigationOperation: _json,
        SetParametersOperation: (_) => de_CustomActionSetParametersOperation(_, context),
        URLOperation: _json,
    });
};
const de_VisualCustomActionOperationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VisualCustomActionOperation(entry, context);
    });
    return retVal;
};
const de_VisualList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Visual(entry, context);
    });
    return retVal;
};
const de_VPCConnection = (output, context) => {
    return take(output, {
        Arn: __expectString,
        AvailabilityStatus: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DnsResolvers: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        NetworkInterfaces: _json,
        RoleArn: __expectString,
        SecurityGroupIds: _json,
        Status: __expectString,
        VPCConnectionId: __expectString,
        VPCId: __expectString,
    });
};
const de_VPCConnectionSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        AvailabilityStatus: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DnsResolvers: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        NetworkInterfaces: _json,
        RoleArn: __expectString,
        SecurityGroupIds: _json,
        Status: __expectString,
        VPCConnectionId: __expectString,
        VPCId: __expectString,
    });
};
const de_VPCConnectionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VPCConnectionSummary(entry, context);
    });
    return retVal;
};
const de_WaterfallChartAggregatedFieldWells = (output, context) => {
    return take(output, {
        Breakdowns: _json,
        Categories: _json,
        Values: (_) => de_MeasureFieldList(_, context),
    });
};
const de_WaterfallChartConfiguration = (output, context) => {
    return take(output, {
        CategoryAxisDisplayOptions: (_) => de_AxisDisplayOptions(_, context),
        CategoryAxisLabelOptions: _json,
        ColorConfiguration: _json,
        DataLabels: _json,
        FieldWells: (_) => de_WaterfallChartFieldWells(_, context),
        Interactions: _json,
        Legend: _json,
        PrimaryYAxisDisplayOptions: (_) => de_AxisDisplayOptions(_, context),
        PrimaryYAxisLabelOptions: _json,
        SortConfiguration: (_) => de_WaterfallChartSortConfiguration(_, context),
        VisualPalette: _json,
        WaterfallChartOptions: _json,
    });
};
const de_WaterfallChartFieldWells = (output, context) => {
    return take(output, {
        WaterfallChartAggregatedFieldWells: (_) => de_WaterfallChartAggregatedFieldWells(_, context),
    });
};
const de_WaterfallChartSortConfiguration = (output, context) => {
    return take(output, {
        BreakdownItemsLimit: _json,
        CategorySort: (_) => de_FieldSortOptionsList(_, context),
    });
};
const de_WaterfallVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_WaterfallChartConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const de_WhatIfPointScenario = (output, context) => {
    return take(output, {
        Date: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Value: __limitedParseDouble,
    });
};
const de_WhatIfRangeScenario = (output, context) => {
    return take(output, {
        EndDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Value: __limitedParseDouble,
    });
};
const de_WordCloudAggregatedFieldWells = (output, context) => {
    return take(output, {
        GroupBy: _json,
        Size: (_) => de_WordCloudMeasureFieldList(_, context),
    });
};
const de_WordCloudChartConfiguration = (output, context) => {
    return take(output, {
        CategoryLabelOptions: _json,
        FieldWells: (_) => de_WordCloudFieldWells(_, context),
        Interactions: _json,
        SortConfiguration: (_) => de_WordCloudSortConfiguration(_, context),
        WordCloudOptions: _json,
    });
};
const de_WordCloudFieldWells = (output, context) => {
    return take(output, {
        WordCloudAggregatedFieldWells: (_) => de_WordCloudAggregatedFieldWells(_, context),
    });
};
const de_WordCloudMeasureFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MeasureField(entry, context);
    });
    return retVal;
};
const de_WordCloudSortConfiguration = (output, context) => {
    return take(output, {
        CategoryItemsLimit: _json,
        CategorySort: (_) => de_FieldSortOptionsList(_, context),
    });
};
const de_WordCloudVisual = (output, context) => {
    return take(output, {
        Actions: (_) => de_VisualCustomActionList(_, context),
        ChartConfiguration: (_) => de_WordCloudChartConfiguration(_, context),
        ColumnHierarchies: (_) => de_ColumnHierarchyList(_, context),
        Subtitle: _json,
        Title: _json,
        VisualId: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _ADI = "AdditionalDashboardIds";
const _AN = "AliasName";
const _AS = "AssignmentStatus";
const _EP = "EntryPoint";
const _FDWR = "ForceDeleteWithoutRecovery";
const _IT = "IdentityType";
const _MR = "MaxResults";
const _N = "Namespace";
const _NT = "NextToken";
const _R = "Resolved";
const _RD = "ResetDisabled";
const _RWID = "RecoveryWindowInDays";
const _SLIM = "SessionLifetimeInMinutes";
const _SPE = "StatePersistenceEnabled";
const _T = "Type";
const _TK = "TagKeys";
const _UA = "UserArn";
const _URD = "UndoRedoDisabled";
const _VN = "VersionNumber";
const _adi = "additional-dashboard-ids";
const _an = "alias-name";
const _as = "assignment-status";
const _ct = "creds-type";
const _ep = "entry-point";
const _fdwr = "force-delete-without-recovery";
const _k = "keys";
const _mr = "max-results";
const _mr_ = "max-result";
const _n = "namespace";
const _nt = "next-token";
const _r = "resolved";
const _rd = "reset-disabled";
const _rwid = "recovery-window-in-days";
const _sl = "session-lifetime";
const _spe = "state-persistence-enabled";
const _t = "type";
const _ua = "user-arn";
const _urd = "undo-redo-disabled";
const _vn = "version-number";
