import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import {
  AccountCustomization,
  AdHocFilteringOption,
  AmazonElasticsearchParameters,
  AmazonOpenSearchParameters,
  AnalysisDefaults,
  AssetOptions,
  CalculatedField,
  ChartAxisLabelOptions,
  ColumnConfiguration,
  DashboardBehavior,
  DataSetIdentifierDeclaration,
  Edition,
  FilterControl,
  FilterGroup,
  Layout,
  ParameterControl,
  ParameterDeclaration,
  ResourceStatus,
  SheetContentType,
  SheetControlLayout,
  SheetTextBox,
  TimeGranularity,
  VisualCustomAction,
  VisualInteractionOptions,
  VisualMenuOption,
} from "./models_0";
import {
  BarChartVisual,
  BoxPlotVisual,
  ColumnHierarchy,
  ComboChartVisual,
  CustomContentVisual,
  EmptyVisual,
  FilledMapVisual,
  FunnelChartVisual,
  GaugeChartVisual,
  GeospatialMapVisual,
  HeatMapVisual,
  HistogramVisual,
  InsightVisual,
  KPIVisual,
  LineChartVisual,
  PieChartVisual,
  PivotTableVisual,
  RadarChartVisual,
  SankeyDiagramVisual,
  ScatterPlotVisual,
  TableVisual,
  TreeMapVisual,
  VisualSubtitleLabelOptions,
  VisualTitleLabelOptions,
  WaterfallVisual,
  WordCloudCloudLayout,
  WordCloudFieldWells,
  WordCloudSortConfiguration,
  WordCloudWordCasing,
  WordCloudWordOrientation,
} from "./models_1";
import { QuickSightServiceException as __BaseException } from "./QuickSightServiceException";
export declare const WordCloudWordPadding: {
  readonly LARGE: "LARGE";
  readonly MEDIUM: "MEDIUM";
  readonly NONE: "NONE";
  readonly SMALL: "SMALL";
};
export type WordCloudWordPadding =
  (typeof WordCloudWordPadding)[keyof typeof WordCloudWordPadding];
export declare const WordCloudWordScaling: {
  readonly EMPHASIZE: "EMPHASIZE";
  readonly NORMAL: "NORMAL";
};
export type WordCloudWordScaling =
  (typeof WordCloudWordScaling)[keyof typeof WordCloudWordScaling];
export interface WordCloudOptions {
  WordOrientation?: WordCloudWordOrientation;
  WordScaling?: WordCloudWordScaling;
  CloudLayout?: WordCloudCloudLayout;
  WordCasing?: WordCloudWordCasing;
  WordPadding?: WordCloudWordPadding;
  MaximumStringLength?: number;
}
export interface WordCloudChartConfiguration {
  FieldWells?: WordCloudFieldWells;
  SortConfiguration?: WordCloudSortConfiguration;
  CategoryLabelOptions?: ChartAxisLabelOptions;
  WordCloudOptions?: WordCloudOptions;
  Interactions?: VisualInteractionOptions;
}
export interface WordCloudVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: WordCloudChartConfiguration;
  Actions?: VisualCustomAction[];
  ColumnHierarchies?: ColumnHierarchy[];
}
export interface Visual {
  TableVisual?: TableVisual;
  PivotTableVisual?: PivotTableVisual;
  BarChartVisual?: BarChartVisual;
  KPIVisual?: KPIVisual;
  PieChartVisual?: PieChartVisual;
  GaugeChartVisual?: GaugeChartVisual;
  LineChartVisual?: LineChartVisual;
  HeatMapVisual?: HeatMapVisual;
  TreeMapVisual?: TreeMapVisual;
  GeospatialMapVisual?: GeospatialMapVisual;
  FilledMapVisual?: FilledMapVisual;
  FunnelChartVisual?: FunnelChartVisual;
  ScatterPlotVisual?: ScatterPlotVisual;
  ComboChartVisual?: ComboChartVisual;
  BoxPlotVisual?: BoxPlotVisual;
  WaterfallVisual?: WaterfallVisual;
  HistogramVisual?: HistogramVisual;
  WordCloudVisual?: WordCloudVisual;
  InsightVisual?: InsightVisual;
  SankeyDiagramVisual?: SankeyDiagramVisual;
  CustomContentVisual?: CustomContentVisual;
  EmptyVisual?: EmptyVisual;
  RadarChartVisual?: RadarChartVisual;
}
export interface SheetDefinition {
  SheetId: string | undefined;
  Title?: string;
  Description?: string;
  Name?: string;
  ParameterControls?: ParameterControl[];
  FilterControls?: FilterControl[];
  Visuals?: Visual[];
  TextBoxes?: SheetTextBox[];
  Layouts?: Layout[];
  SheetControlLayouts?: SheetControlLayout[];
  ContentType?: SheetContentType;
}
export interface AnalysisDefinition {
  DataSetIdentifierDeclarations: DataSetIdentifierDeclaration[] | undefined;
  Sheets?: SheetDefinition[];
  CalculatedFields?: CalculatedField[];
  ParameterDeclarations?: ParameterDeclaration[];
  FilterGroups?: FilterGroup[];
  ColumnConfigurations?: ColumnConfiguration[];
  AnalysisDefaults?: AnalysisDefaults;
  Options?: AssetOptions;
}
export declare const AnalysisFilterAttribute: {
  readonly ANALYSIS_NAME: "ANALYSIS_NAME";
  readonly DIRECT_QUICKSIGHT_OWNER: "DIRECT_QUICKSIGHT_OWNER";
  readonly DIRECT_QUICKSIGHT_SOLE_OWNER: "DIRECT_QUICKSIGHT_SOLE_OWNER";
  readonly DIRECT_QUICKSIGHT_VIEWER_OR_OWNER: "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER";
  readonly QUICKSIGHT_OWNER: "QUICKSIGHT_OWNER";
  readonly QUICKSIGHT_USER: "QUICKSIGHT_USER";
  readonly QUICKSIGHT_VIEWER_OR_OWNER: "QUICKSIGHT_VIEWER_OR_OWNER";
};
export type AnalysisFilterAttribute =
  (typeof AnalysisFilterAttribute)[keyof typeof AnalysisFilterAttribute];
export declare const FilterOperator: {
  readonly StringEquals: "StringEquals";
  readonly StringLike: "StringLike";
};
export type FilterOperator =
  (typeof FilterOperator)[keyof typeof FilterOperator];
export interface AnalysisSearchFilter {
  Operator?: FilterOperator;
  Name?: AnalysisFilterAttribute;
  Value?: string;
}
export interface DataSetReference {
  DataSetPlaceholder: string | undefined;
  DataSetArn: string | undefined;
}
export interface AnalysisSourceTemplate {
  DataSetReferences: DataSetReference[] | undefined;
  Arn: string | undefined;
}
export interface AnalysisSourceEntity {
  SourceTemplate?: AnalysisSourceTemplate;
}
export interface AnalysisSummary {
  Arn?: string;
  AnalysisId?: string;
  Name?: string;
  Status?: ResourceStatus;
  CreatedTime?: Date;
  LastUpdatedTime?: Date;
}
export interface AnonymousUserDashboardEmbeddingConfiguration {
  InitialDashboardId: string | undefined;
}
export interface DashboardVisualId {
  DashboardId: string | undefined;
  SheetId: string | undefined;
  VisualId: string | undefined;
}
export interface AnonymousUserDashboardVisualEmbeddingConfiguration {
  InitialDashboardVisualId: DashboardVisualId | undefined;
}
export interface AnonymousUserQSearchBarEmbeddingConfiguration {
  InitialTopicId: string | undefined;
}
export interface AnonymousUserEmbeddingExperienceConfiguration {
  Dashboard?: AnonymousUserDashboardEmbeddingConfiguration;
  DashboardVisual?: AnonymousUserDashboardVisualEmbeddingConfiguration;
  QSearchBar?: AnonymousUserQSearchBarEmbeddingConfiguration;
}
export declare const SnapshotFileFormatType: {
  readonly CSV: "CSV";
  readonly EXCEL: "EXCEL";
  readonly PDF: "PDF";
};
export type SnapshotFileFormatType =
  (typeof SnapshotFileFormatType)[keyof typeof SnapshotFileFormatType];
export declare const SnapshotFileSheetSelectionScope: {
  readonly ALL_VISUALS: "ALL_VISUALS";
  readonly SELECTED_VISUALS: "SELECTED_VISUALS";
};
export type SnapshotFileSheetSelectionScope =
  (typeof SnapshotFileSheetSelectionScope)[keyof typeof SnapshotFileSheetSelectionScope];
export interface SnapshotFileSheetSelection {
  SheetId: string | undefined;
  SelectionScope: SnapshotFileSheetSelectionScope | undefined;
  VisualIds?: string[];
}
export interface SnapshotFile {
  SheetSelections: SnapshotFileSheetSelection[] | undefined;
  FormatType: SnapshotFileFormatType | undefined;
}
export interface SnapshotJobResultErrorInfo {
  ErrorMessage?: string;
  ErrorType?: string;
}
export interface S3BucketConfiguration {
  BucketName: string | undefined;
  BucketPrefix: string | undefined;
  BucketRegion: string | undefined;
}
export interface SnapshotS3DestinationConfiguration {
  BucketConfiguration: S3BucketConfiguration | undefined;
}
export interface SnapshotJobS3Result {
  S3DestinationConfiguration?: SnapshotS3DestinationConfiguration;
  S3Uri?: string;
  ErrorInfo?: SnapshotJobResultErrorInfo[];
}
export interface SnapshotJobResultFileGroup {
  Files?: SnapshotFile[];
  S3Results?: SnapshotJobS3Result[];
}
export interface AnonymousUserSnapshotJobResult {
  FileGroups?: SnapshotJobResultFileGroup[];
}
export declare const AssetBundleExportJobAnalysisPropertyToOverride: {
  readonly NAME: "Name";
};
export type AssetBundleExportJobAnalysisPropertyToOverride =
  (typeof AssetBundleExportJobAnalysisPropertyToOverride)[keyof typeof AssetBundleExportJobAnalysisPropertyToOverride];
export interface AssetBundleExportJobAnalysisOverrideProperties {
  Arn: string | undefined;
  Properties: AssetBundleExportJobAnalysisPropertyToOverride[] | undefined;
}
export declare const AssetBundleExportJobDashboardPropertyToOverride: {
  readonly NAME: "Name";
};
export type AssetBundleExportJobDashboardPropertyToOverride =
  (typeof AssetBundleExportJobDashboardPropertyToOverride)[keyof typeof AssetBundleExportJobDashboardPropertyToOverride];
export interface AssetBundleExportJobDashboardOverrideProperties {
  Arn: string | undefined;
  Properties: AssetBundleExportJobDashboardPropertyToOverride[] | undefined;
}
export declare const AssetBundleExportJobDataSetPropertyToOverride: {
  readonly NAME: "Name";
};
export type AssetBundleExportJobDataSetPropertyToOverride =
  (typeof AssetBundleExportJobDataSetPropertyToOverride)[keyof typeof AssetBundleExportJobDataSetPropertyToOverride];
export interface AssetBundleExportJobDataSetOverrideProperties {
  Arn: string | undefined;
  Properties: AssetBundleExportJobDataSetPropertyToOverride[] | undefined;
}
export declare const AssetBundleExportJobDataSourcePropertyToOverride: {
  readonly CATALOG: "Catalog";
  readonly CLUSTER_ID: "ClusterId";
  readonly DATABASE: "Database";
  readonly DATA_SET_NAME: "DataSetName";
  readonly DISABLE_SSL: "DisableSsl";
  readonly DOMAIN: "Domain";
  readonly HOST: "Host";
  readonly INSTANCE_ID: "InstanceId";
  readonly MANIFEST_FILE_LOCATION: "ManifestFileLocation";
  readonly NAME: "Name";
  readonly PASSWORD: "Password";
  readonly PORT: "Port";
  readonly PRODUCT_TYPE: "ProductType";
  readonly ROLE_ARN: "RoleArn";
  readonly SECRET_ARN: "SecretArn";
  readonly USERNAME: "Username";
  readonly WAREHOUSE: "Warehouse";
  readonly WORK_GROUP: "WorkGroup";
};
export type AssetBundleExportJobDataSourcePropertyToOverride =
  (typeof AssetBundleExportJobDataSourcePropertyToOverride)[keyof typeof AssetBundleExportJobDataSourcePropertyToOverride];
export interface AssetBundleExportJobDataSourceOverrideProperties {
  Arn: string | undefined;
  Properties: AssetBundleExportJobDataSourcePropertyToOverride[] | undefined;
}
export declare const AssetBundleExportJobRefreshSchedulePropertyToOverride: {
  readonly START_AFTER_DATE_TIME: "StartAfterDateTime";
};
export type AssetBundleExportJobRefreshSchedulePropertyToOverride =
  (typeof AssetBundleExportJobRefreshSchedulePropertyToOverride)[keyof typeof AssetBundleExportJobRefreshSchedulePropertyToOverride];
export interface AssetBundleExportJobRefreshScheduleOverrideProperties {
  Arn: string | undefined;
  Properties:
    | AssetBundleExportJobRefreshSchedulePropertyToOverride[]
    | undefined;
}
export interface AssetBundleExportJobResourceIdOverrideConfiguration {
  PrefixForAllResources?: boolean;
}
export declare const AssetBundleExportJobThemePropertyToOverride: {
  readonly NAME: "Name";
};
export type AssetBundleExportJobThemePropertyToOverride =
  (typeof AssetBundleExportJobThemePropertyToOverride)[keyof typeof AssetBundleExportJobThemePropertyToOverride];
export interface AssetBundleExportJobThemeOverrideProperties {
  Arn: string | undefined;
  Properties: AssetBundleExportJobThemePropertyToOverride[] | undefined;
}
export declare const AssetBundleExportJobVPCConnectionPropertyToOverride: {
  readonly DNS_RESOLVERS: "DnsResolvers";
  readonly NAME: "Name";
  readonly ROLE_ARN: "RoleArn";
};
export type AssetBundleExportJobVPCConnectionPropertyToOverride =
  (typeof AssetBundleExportJobVPCConnectionPropertyToOverride)[keyof typeof AssetBundleExportJobVPCConnectionPropertyToOverride];
export interface AssetBundleExportJobVPCConnectionOverrideProperties {
  Arn: string | undefined;
  Properties: AssetBundleExportJobVPCConnectionPropertyToOverride[] | undefined;
}
export interface AssetBundleCloudFormationOverridePropertyConfiguration {
  ResourceIdOverrideConfiguration?: AssetBundleExportJobResourceIdOverrideConfiguration;
  VPCConnections?: AssetBundleExportJobVPCConnectionOverrideProperties[];
  RefreshSchedules?: AssetBundleExportJobRefreshScheduleOverrideProperties[];
  DataSources?: AssetBundleExportJobDataSourceOverrideProperties[];
  DataSets?: AssetBundleExportJobDataSetOverrideProperties[];
  Themes?: AssetBundleExportJobThemeOverrideProperties[];
  Analyses?: AssetBundleExportJobAnalysisOverrideProperties[];
  Dashboards?: AssetBundleExportJobDashboardOverrideProperties[];
}
export declare const AssetBundleExportFormat: {
  readonly CLOUDFORMATION_JSON: "CLOUDFORMATION_JSON";
  readonly QUICKSIGHT_JSON: "QUICKSIGHT_JSON";
};
export type AssetBundleExportFormat =
  (typeof AssetBundleExportFormat)[keyof typeof AssetBundleExportFormat];
export interface AssetBundleExportJobError {
  Arn?: string;
  Type?: string;
  Message?: string;
}
export declare const AssetBundleExportJobStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly QUEUED_FOR_IMMEDIATE_EXECUTION: "QUEUED_FOR_IMMEDIATE_EXECUTION";
  readonly SUCCESSFUL: "SUCCESSFUL";
};
export type AssetBundleExportJobStatus =
  (typeof AssetBundleExportJobStatus)[keyof typeof AssetBundleExportJobStatus];
export interface AssetBundleExportJobSummary {
  JobStatus?: AssetBundleExportJobStatus;
  Arn?: string;
  CreatedTime?: Date;
  AssetBundleExportJobId?: string;
  IncludeAllDependencies?: boolean;
  ExportFormat?: AssetBundleExportFormat;
  IncludePermissions?: boolean;
  IncludeTags?: boolean;
}
export interface AssetBundleExportJobValidationStrategy {
  StrictModeForAllResources?: boolean;
}
export interface AssetBundleExportJobWarning {
  Arn?: string;
  Message?: string;
}
export declare const AssetBundleImportFailureAction: {
  readonly DO_NOTHING: "DO_NOTHING";
  readonly ROLLBACK: "ROLLBACK";
};
export type AssetBundleImportFailureAction =
  (typeof AssetBundleImportFailureAction)[keyof typeof AssetBundleImportFailureAction];
export interface AssetBundleImportJobAnalysisOverrideParameters {
  AnalysisId: string | undefined;
  Name?: string;
}
export interface AssetBundleResourcePermissions {
  Principals: string[] | undefined;
  Actions: string[] | undefined;
}
export interface AssetBundleImportJobAnalysisOverridePermissions {
  AnalysisIds: string[] | undefined;
  Permissions: AssetBundleResourcePermissions | undefined;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface AssetBundleImportJobAnalysisOverrideTags {
  AnalysisIds: string[] | undefined;
  Tags: Tag[] | undefined;
}
export interface AssetBundleImportJobDashboardOverrideParameters {
  DashboardId: string | undefined;
  Name?: string;
}
export interface AssetBundleResourceLinkSharingConfiguration {
  Permissions?: AssetBundleResourcePermissions;
}
export interface AssetBundleImportJobDashboardOverridePermissions {
  DashboardIds: string[] | undefined;
  Permissions?: AssetBundleResourcePermissions;
  LinkSharingConfiguration?: AssetBundleResourceLinkSharingConfiguration;
}
export interface AssetBundleImportJobDashboardOverrideTags {
  DashboardIds: string[] | undefined;
  Tags: Tag[] | undefined;
}
export interface AssetBundleImportJobDataSetOverrideParameters {
  DataSetId: string | undefined;
  Name?: string;
}
export interface AssetBundleImportJobDataSetOverridePermissions {
  DataSetIds: string[] | undefined;
  Permissions: AssetBundleResourcePermissions | undefined;
}
export interface AssetBundleImportJobDataSetOverrideTags {
  DataSetIds: string[] | undefined;
  Tags: Tag[] | undefined;
}
export interface AssetBundleImportJobDataSourceCredentialPair {
  Username: string | undefined;
  Password: string | undefined;
}
export interface AssetBundleImportJobDataSourceCredentials {
  CredentialPair?: AssetBundleImportJobDataSourceCredentialPair;
  SecretArn?: string;
}
export interface AthenaParameters {
  WorkGroup?: string;
  RoleArn?: string;
}
export interface AuroraParameters {
  Host: string | undefined;
  Port: number | undefined;
  Database: string | undefined;
}
export interface AuroraPostgreSqlParameters {
  Host: string | undefined;
  Port: number | undefined;
  Database: string | undefined;
}
export interface AwsIotAnalyticsParameters {
  DataSetName: string | undefined;
}
export interface BigQueryParameters {
  ProjectId: string | undefined;
  DataSetRegion?: string;
}
export interface DatabricksParameters {
  Host: string | undefined;
  Port: number | undefined;
  SqlEndpointPath: string | undefined;
}
export interface ExasolParameters {
  Host: string | undefined;
  Port: number | undefined;
}
export interface JiraParameters {
  SiteBaseUrl: string | undefined;
}
export interface MariaDbParameters {
  Host: string | undefined;
  Port: number | undefined;
  Database: string | undefined;
}
export interface MySqlParameters {
  Host: string | undefined;
  Port: number | undefined;
  Database: string | undefined;
}
export interface OracleParameters {
  Host: string | undefined;
  Port: number | undefined;
  Database: string | undefined;
}
export interface PostgreSqlParameters {
  Host: string | undefined;
  Port: number | undefined;
  Database: string | undefined;
}
export interface PrestoParameters {
  Host: string | undefined;
  Port: number | undefined;
  Catalog: string | undefined;
}
export interface RdsParameters {
  InstanceId: string | undefined;
  Database: string | undefined;
}
export interface RedshiftIAMParameters {
  RoleArn: string | undefined;
  DatabaseUser: string | undefined;
  DatabaseGroups?: string[];
  AutoCreateDatabaseUser?: boolean;
}
export interface IdentityCenterConfiguration {
  EnableIdentityPropagation?: boolean;
}
export interface RedshiftParameters {
  Host?: string;
  Port?: number;
  Database: string | undefined;
  ClusterId?: string;
  IAMParameters?: RedshiftIAMParameters;
  IdentityCenterConfiguration?: IdentityCenterConfiguration;
}
export interface ManifestFileLocation {
  Bucket: string | undefined;
  Key: string | undefined;
}
export interface S3Parameters {
  ManifestFileLocation: ManifestFileLocation | undefined;
  RoleArn?: string;
}
export interface ServiceNowParameters {
  SiteBaseUrl: string | undefined;
}
export interface SnowflakeParameters {
  Host: string | undefined;
  Database: string | undefined;
  Warehouse: string | undefined;
}
export interface SparkParameters {
  Host: string | undefined;
  Port: number | undefined;
}
export interface SqlServerParameters {
  Host: string | undefined;
  Port: number | undefined;
  Database: string | undefined;
}
export declare const StarburstProductType: {
  readonly ENTERPRISE: "ENTERPRISE";
  readonly GALAXY: "GALAXY";
};
export type StarburstProductType =
  (typeof StarburstProductType)[keyof typeof StarburstProductType];
export interface StarburstParameters {
  Host: string | undefined;
  Port: number | undefined;
  Catalog: string | undefined;
  ProductType?: StarburstProductType;
}
export interface TeradataParameters {
  Host: string | undefined;
  Port: number | undefined;
  Database: string | undefined;
}
export interface TrinoParameters {
  Host: string | undefined;
  Port: number | undefined;
  Catalog: string | undefined;
}
export interface TwitterParameters {
  Query: string | undefined;
  MaxRows: number | undefined;
}
export type DataSourceParameters =
  | DataSourceParameters.AmazonElasticsearchParametersMember
  | DataSourceParameters.AmazonOpenSearchParametersMember
  | DataSourceParameters.AthenaParametersMember
  | DataSourceParameters.AuroraParametersMember
  | DataSourceParameters.AuroraPostgreSqlParametersMember
  | DataSourceParameters.AwsIotAnalyticsParametersMember
  | DataSourceParameters.BigQueryParametersMember
  | DataSourceParameters.DatabricksParametersMember
  | DataSourceParameters.ExasolParametersMember
  | DataSourceParameters.JiraParametersMember
  | DataSourceParameters.MariaDbParametersMember
  | DataSourceParameters.MySqlParametersMember
  | DataSourceParameters.OracleParametersMember
  | DataSourceParameters.PostgreSqlParametersMember
  | DataSourceParameters.PrestoParametersMember
  | DataSourceParameters.RdsParametersMember
  | DataSourceParameters.RedshiftParametersMember
  | DataSourceParameters.S3ParametersMember
  | DataSourceParameters.ServiceNowParametersMember
  | DataSourceParameters.SnowflakeParametersMember
  | DataSourceParameters.SparkParametersMember
  | DataSourceParameters.SqlServerParametersMember
  | DataSourceParameters.StarburstParametersMember
  | DataSourceParameters.TeradataParametersMember
  | DataSourceParameters.TrinoParametersMember
  | DataSourceParameters.TwitterParametersMember
  | DataSourceParameters.$UnknownMember;
export declare namespace DataSourceParameters {
  interface AmazonElasticsearchParametersMember {
    AmazonElasticsearchParameters: AmazonElasticsearchParameters;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface AthenaParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters: AthenaParameters;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface AuroraParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters: AuroraParameters;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface AuroraPostgreSqlParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters: AuroraPostgreSqlParameters;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface AwsIotAnalyticsParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters: AwsIotAnalyticsParameters;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface JiraParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters: JiraParameters;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface MariaDbParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters: MariaDbParameters;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface MySqlParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters: MySqlParameters;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface OracleParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters: OracleParameters;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface PostgreSqlParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters: PostgreSqlParameters;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface PrestoParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters: PrestoParameters;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface RdsParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters: RdsParameters;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface RedshiftParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters: RedshiftParameters;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface S3ParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters: S3Parameters;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface ServiceNowParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters: ServiceNowParameters;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface SnowflakeParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters: SnowflakeParameters;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface SparkParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters: SparkParameters;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface SqlServerParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters: SqlServerParameters;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface TeradataParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters: TeradataParameters;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface TwitterParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters: TwitterParameters;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface AmazonOpenSearchParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters: AmazonOpenSearchParameters;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface ExasolParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters: ExasolParameters;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface DatabricksParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters: DatabricksParameters;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface StarburstParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters: StarburstParameters;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface TrinoParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters: TrinoParameters;
    BigQueryParameters?: never;
    $unknown?: never;
  }
  interface BigQueryParametersMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters: BigQueryParameters;
    $unknown?: never;
  }
  interface $UnknownMember {
    AmazonElasticsearchParameters?: never;
    AthenaParameters?: never;
    AuroraParameters?: never;
    AuroraPostgreSqlParameters?: never;
    AwsIotAnalyticsParameters?: never;
    JiraParameters?: never;
    MariaDbParameters?: never;
    MySqlParameters?: never;
    OracleParameters?: never;
    PostgreSqlParameters?: never;
    PrestoParameters?: never;
    RdsParameters?: never;
    RedshiftParameters?: never;
    S3Parameters?: never;
    ServiceNowParameters?: never;
    SnowflakeParameters?: never;
    SparkParameters?: never;
    SqlServerParameters?: never;
    TeradataParameters?: never;
    TwitterParameters?: never;
    AmazonOpenSearchParameters?: never;
    ExasolParameters?: never;
    DatabricksParameters?: never;
    StarburstParameters?: never;
    TrinoParameters?: never;
    BigQueryParameters?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    AmazonElasticsearchParameters: (value: AmazonElasticsearchParameters) => T;
    AthenaParameters: (value: AthenaParameters) => T;
    AuroraParameters: (value: AuroraParameters) => T;
    AuroraPostgreSqlParameters: (value: AuroraPostgreSqlParameters) => T;
    AwsIotAnalyticsParameters: (value: AwsIotAnalyticsParameters) => T;
    JiraParameters: (value: JiraParameters) => T;
    MariaDbParameters: (value: MariaDbParameters) => T;
    MySqlParameters: (value: MySqlParameters) => T;
    OracleParameters: (value: OracleParameters) => T;
    PostgreSqlParameters: (value: PostgreSqlParameters) => T;
    PrestoParameters: (value: PrestoParameters) => T;
    RdsParameters: (value: RdsParameters) => T;
    RedshiftParameters: (value: RedshiftParameters) => T;
    S3Parameters: (value: S3Parameters) => T;
    ServiceNowParameters: (value: ServiceNowParameters) => T;
    SnowflakeParameters: (value: SnowflakeParameters) => T;
    SparkParameters: (value: SparkParameters) => T;
    SqlServerParameters: (value: SqlServerParameters) => T;
    TeradataParameters: (value: TeradataParameters) => T;
    TwitterParameters: (value: TwitterParameters) => T;
    AmazonOpenSearchParameters: (value: AmazonOpenSearchParameters) => T;
    ExasolParameters: (value: ExasolParameters) => T;
    DatabricksParameters: (value: DatabricksParameters) => T;
    StarburstParameters: (value: StarburstParameters) => T;
    TrinoParameters: (value: TrinoParameters) => T;
    BigQueryParameters: (value: BigQueryParameters) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: DataSourceParameters, visitor: Visitor<T>) => T;
}
export interface SslProperties {
  DisableSsl?: boolean;
}
export interface VpcConnectionProperties {
  VpcConnectionArn: string | undefined;
}
export interface AssetBundleImportJobDataSourceOverrideParameters {
  DataSourceId: string | undefined;
  Name?: string;
  DataSourceParameters?: DataSourceParameters;
  VpcConnectionProperties?: VpcConnectionProperties;
  SslProperties?: SslProperties;
  Credentials?: AssetBundleImportJobDataSourceCredentials;
}
export interface AssetBundleImportJobDataSourceOverridePermissions {
  DataSourceIds: string[] | undefined;
  Permissions: AssetBundleResourcePermissions | undefined;
}
export interface AssetBundleImportJobDataSourceOverrideTags {
  DataSourceIds: string[] | undefined;
  Tags: Tag[] | undefined;
}
export interface AssetBundleImportJobError {
  Arn?: string;
  Type?: string;
  Message?: string;
}
export interface AssetBundleImportJobRefreshScheduleOverrideParameters {
  DataSetId: string | undefined;
  ScheduleId: string | undefined;
  StartAfterDateTime?: Date;
}
export interface AssetBundleImportJobResourceIdOverrideConfiguration {
  PrefixForAllResources?: string;
}
export interface AssetBundleImportJobThemeOverrideParameters {
  ThemeId: string | undefined;
  Name?: string;
}
export interface AssetBundleImportJobVPCConnectionOverrideParameters {
  VPCConnectionId: string | undefined;
  Name?: string;
  SubnetIds?: string[];
  SecurityGroupIds?: string[];
  DnsResolvers?: string[];
  RoleArn?: string;
}
export interface AssetBundleImportJobOverrideParameters {
  ResourceIdOverrideConfiguration?: AssetBundleImportJobResourceIdOverrideConfiguration;
  VPCConnections?: AssetBundleImportJobVPCConnectionOverrideParameters[];
  RefreshSchedules?: AssetBundleImportJobRefreshScheduleOverrideParameters[];
  DataSources?: AssetBundleImportJobDataSourceOverrideParameters[];
  DataSets?: AssetBundleImportJobDataSetOverrideParameters[];
  Themes?: AssetBundleImportJobThemeOverrideParameters[];
  Analyses?: AssetBundleImportJobAnalysisOverrideParameters[];
  Dashboards?: AssetBundleImportJobDashboardOverrideParameters[];
}
export interface AssetBundleImportJobThemeOverridePermissions {
  ThemeIds: string[] | undefined;
  Permissions: AssetBundleResourcePermissions | undefined;
}
export interface AssetBundleImportJobOverridePermissions {
  DataSources?: AssetBundleImportJobDataSourceOverridePermissions[];
  DataSets?: AssetBundleImportJobDataSetOverridePermissions[];
  Themes?: AssetBundleImportJobThemeOverridePermissions[];
  Analyses?: AssetBundleImportJobAnalysisOverridePermissions[];
  Dashboards?: AssetBundleImportJobDashboardOverridePermissions[];
}
export interface AssetBundleImportJobThemeOverrideTags {
  ThemeIds: string[] | undefined;
  Tags: Tag[] | undefined;
}
export interface AssetBundleImportJobVPCConnectionOverrideTags {
  VPCConnectionIds: string[] | undefined;
  Tags: Tag[] | undefined;
}
export interface AssetBundleImportJobOverrideTags {
  VPCConnections?: AssetBundleImportJobVPCConnectionOverrideTags[];
  DataSources?: AssetBundleImportJobDataSourceOverrideTags[];
  DataSets?: AssetBundleImportJobDataSetOverrideTags[];
  Themes?: AssetBundleImportJobThemeOverrideTags[];
  Analyses?: AssetBundleImportJobAnalysisOverrideTags[];
  Dashboards?: AssetBundleImportJobDashboardOverrideTags[];
}
export interface AssetBundleImportJobOverrideValidationStrategy {
  StrictModeForAllResources?: boolean;
}
export declare const AssetBundleImportJobStatus: {
  readonly FAILED: "FAILED";
  readonly FAILED_ROLLBACK_COMPLETED: "FAILED_ROLLBACK_COMPLETED";
  readonly FAILED_ROLLBACK_ERROR: "FAILED_ROLLBACK_ERROR";
  readonly FAILED_ROLLBACK_IN_PROGRESS: "FAILED_ROLLBACK_IN_PROGRESS";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly QUEUED_FOR_IMMEDIATE_EXECUTION: "QUEUED_FOR_IMMEDIATE_EXECUTION";
  readonly SUCCESSFUL: "SUCCESSFUL";
};
export type AssetBundleImportJobStatus =
  (typeof AssetBundleImportJobStatus)[keyof typeof AssetBundleImportJobStatus];
export interface AssetBundleImportJobSummary {
  JobStatus?: AssetBundleImportJobStatus;
  Arn?: string;
  CreatedTime?: Date;
  AssetBundleImportJobId?: string;
  FailureAction?: AssetBundleImportFailureAction;
}
export interface AssetBundleImportJobWarning {
  Arn?: string;
  Message?: string;
}
export interface AssetBundleImportSource {
  Body?: Uint8Array;
  S3Uri?: string;
}
export interface AssetBundleImportSourceDescription {
  Body?: string;
  S3Uri?: string;
}
export declare const AssignmentStatus: {
  readonly DISABLED: "DISABLED";
  readonly DRAFT: "DRAFT";
  readonly ENABLED: "ENABLED";
};
export type AssignmentStatus =
  (typeof AssignmentStatus)[keyof typeof AssignmentStatus];
export declare const AuthenticationMethodOption: {
  readonly ACTIVE_DIRECTORY: "ACTIVE_DIRECTORY";
  readonly IAM_AND_QUICKSIGHT: "IAM_AND_QUICKSIGHT";
  readonly IAM_IDENTITY_CENTER: "IAM_IDENTITY_CENTER";
  readonly IAM_ONLY: "IAM_ONLY";
};
export type AuthenticationMethodOption =
  (typeof AuthenticationMethodOption)[keyof typeof AuthenticationMethodOption];
export declare const ServiceType: {
  readonly REDSHIFT: "REDSHIFT";
};
export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType];
export interface AuthorizedTargetsByService {
  Service?: ServiceType;
  AuthorizedTargets?: string[];
}
export declare const AuthorSpecifiedAggregation: {
  readonly AVERAGE: "AVERAGE";
  readonly COUNT: "COUNT";
  readonly DISTINCT_COUNT: "DISTINCT_COUNT";
  readonly MAX: "MAX";
  readonly MEDIAN: "MEDIAN";
  readonly MIN: "MIN";
  readonly PERCENTILE: "PERCENTILE";
  readonly STDEV: "STDEV";
  readonly STDEVP: "STDEVP";
  readonly SUM: "SUM";
  readonly VAR: "VAR";
  readonly VARP: "VARP";
};
export type AuthorSpecifiedAggregation =
  (typeof AuthorSpecifiedAggregation)[keyof typeof AuthorSpecifiedAggregation];
export interface BookmarksConfigurations {
  Enabled: boolean | undefined;
}
export interface BorderStyle {
  Show?: boolean;
}
export interface CalculatedColumn {
  ColumnName: string | undefined;
  ColumnId: string | undefined;
  Expression: string | undefined;
}
export interface CancelIngestionRequest {
  AwsAccountId: string | undefined;
  DataSetId: string | undefined;
  IngestionId: string | undefined;
}
export interface CancelIngestionResponse {
  Arn?: string;
  IngestionId?: string;
  RequestId?: string;
  Status?: number;
}
export declare class InternalFailureException extends __BaseException {
  readonly name: "InternalFailureException";
  readonly $fault: "server";
  Message?: string;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<InternalFailureException, __BaseException>
  );
}
export declare class InvalidParameterValueException extends __BaseException {
  readonly name: "InvalidParameterValueException";
  readonly $fault: "client";
  Message?: string;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidParameterValueException, __BaseException>
  );
}
export declare const ExceptionResourceType: {
  readonly ACCOUNT_SETTINGS: "ACCOUNT_SETTINGS";
  readonly DATA_SET: "DATA_SET";
  readonly DATA_SOURCE: "DATA_SOURCE";
  readonly GROUP: "GROUP";
  readonly IAMPOLICY_ASSIGNMENT: "IAMPOLICY_ASSIGNMENT";
  readonly INGESTION: "INGESTION";
  readonly NAMESPACE: "NAMESPACE";
  readonly USER: "USER";
  readonly VPC_CONNECTION: "VPC_CONNECTION";
};
export type ExceptionResourceType =
  (typeof ExceptionResourceType)[keyof typeof ExceptionResourceType];
export declare class ResourceExistsException extends __BaseException {
  readonly name: "ResourceExistsException";
  readonly $fault: "client";
  Message?: string;
  ResourceType?: ExceptionResourceType;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceExistsException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  ResourceType?: ExceptionResourceType;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message?: string;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare const ColumnDataType: {
  readonly DATETIME: "DATETIME";
  readonly DECIMAL: "DECIMAL";
  readonly INTEGER: "INTEGER";
  readonly STRING: "STRING";
};
export type ColumnDataType =
  (typeof ColumnDataType)[keyof typeof ColumnDataType];
export declare const ColumnDataSubType: {
  readonly FIXED: "FIXED";
  readonly FLOAT: "FLOAT";
};
export type ColumnDataSubType =
  (typeof ColumnDataSubType)[keyof typeof ColumnDataSubType];
export interface CastColumnTypeOperation {
  ColumnName: string | undefined;
  NewColumnType: ColumnDataType | undefined;
  SubType?: ColumnDataSubType;
  Format?: string;
}
export declare const CategoryFilterFunction: {
  readonly CONTAINS: "CONTAINS";
  readonly EXACT: "EXACT";
};
export type CategoryFilterFunction =
  (typeof CategoryFilterFunction)[keyof typeof CategoryFilterFunction];
export declare const CategoryFilterType: {
  readonly CUSTOM_FILTER: "CUSTOM_FILTER";
  readonly CUSTOM_FILTER_LIST: "CUSTOM_FILTER_LIST";
  readonly FILTER_LIST: "FILTER_LIST";
};
export type CategoryFilterType =
  (typeof CategoryFilterType)[keyof typeof CategoryFilterType];
export interface CellValueSynonym {
  CellValue?: string;
  Synonyms?: string[];
}
export interface CollectiveConstant {
  ValueList?: string[];
}
export declare const ColumnDataRole: {
  readonly DIMENSION: "DIMENSION";
  readonly MEASURE: "MEASURE";
};
export type ColumnDataRole =
  (typeof ColumnDataRole)[keyof typeof ColumnDataRole];
export interface ColumnDescription {
  Text?: string;
}
export declare const GeoSpatialCountryCode: {
  readonly US: "US";
};
export type GeoSpatialCountryCode =
  (typeof GeoSpatialCountryCode)[keyof typeof GeoSpatialCountryCode];
export interface GeoSpatialColumnGroup {
  Name: string | undefined;
  CountryCode?: GeoSpatialCountryCode;
  Columns: string[] | undefined;
}
export interface ColumnGroup {
  GeoSpatialColumnGroup?: GeoSpatialColumnGroup;
}
export interface ColumnGroupColumnSchema {
  Name?: string;
}
export interface ColumnGroupSchema {
  Name?: string;
  ColumnGroupColumnSchemaList?: ColumnGroupColumnSchema[];
}
export interface ColumnLevelPermissionRule {
  Principals?: string[];
  ColumnNames?: string[];
}
export declare const ColumnOrderingType: {
  readonly GREATER_IS_BETTER: "GREATER_IS_BETTER";
  readonly LESSER_IS_BETTER: "LESSER_IS_BETTER";
  readonly SPECIFIED: "SPECIFIED";
};
export type ColumnOrderingType =
  (typeof ColumnOrderingType)[keyof typeof ColumnOrderingType];
export interface ColumnSchema {
  Name?: string;
  DataType?: string;
  GeographicRole?: string;
}
export declare const GeoSpatialDataRole: {
  readonly CITY: "CITY";
  readonly COUNTRY: "COUNTRY";
  readonly COUNTY: "COUNTY";
  readonly LATITUDE: "LATITUDE";
  readonly LONGITUDE: "LONGITUDE";
  readonly POSTCODE: "POSTCODE";
  readonly STATE: "STATE";
};
export type GeoSpatialDataRole =
  (typeof GeoSpatialDataRole)[keyof typeof GeoSpatialDataRole];
export interface ColumnTag {
  ColumnGeographicRole?: GeoSpatialDataRole;
  ColumnDescription?: ColumnDescription;
}
export declare const ColumnTagName: {
  readonly COLUMN_DESCRIPTION: "COLUMN_DESCRIPTION";
  readonly COLUMN_GEOGRAPHIC_ROLE: "COLUMN_GEOGRAPHIC_ROLE";
};
export type ColumnTagName = (typeof ColumnTagName)[keyof typeof ColumnTagName];
export declare const UndefinedSpecifiedValueType: {
  readonly LEAST: "LEAST";
  readonly MOST: "MOST";
};
export type UndefinedSpecifiedValueType =
  (typeof UndefinedSpecifiedValueType)[keyof typeof UndefinedSpecifiedValueType];
export interface ComparativeOrder {
  UseOrdering?: ColumnOrderingType;
  SpecifedOrder?: string[];
  TreatUndefinedSpecifiedValues?: UndefinedSpecifiedValueType;
}
export declare class ConcurrentUpdatingException extends __BaseException {
  readonly name: "ConcurrentUpdatingException";
  readonly $fault: "server";
  Message?: string;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<ConcurrentUpdatingException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  RequestId?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare const ConstantType: {
  readonly COLLECTIVE: "COLLECTIVE";
  readonly RANGE: "RANGE";
  readonly SINGULAR: "SINGULAR";
};
export type ConstantType = (typeof ConstantType)[keyof typeof ConstantType];
export interface CreateAccountCustomizationRequest {
  AwsAccountId: string | undefined;
  Namespace?: string;
  AccountCustomization: AccountCustomization | undefined;
  Tags?: Tag[];
}
export interface CreateAccountCustomizationResponse {
  Arn?: string;
  AwsAccountId?: string;
  Namespace?: string;
  AccountCustomization?: AccountCustomization;
  RequestId?: string;
  Status?: number;
}
export declare class ResourceUnavailableException extends __BaseException {
  readonly name: "ResourceUnavailableException";
  readonly $fault: "server";
  Message?: string;
  ResourceType?: ExceptionResourceType;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceUnavailableException, __BaseException>
  );
}
export interface CreateAccountSubscriptionRequest {
  Edition: Edition | undefined;
  AuthenticationMethod: AuthenticationMethodOption | undefined;
  AwsAccountId: string | undefined;
  AccountName: string | undefined;
  NotificationEmail: string | undefined;
  ActiveDirectoryName?: string;
  Realm?: string;
  DirectoryId?: string;
  AdminGroup?: string[];
  AuthorGroup?: string[];
  ReaderGroup?: string[];
  FirstName?: string;
  LastName?: string;
  EmailAddress?: string;
  ContactNumber?: string;
  IAMIdentityCenterInstanceArn?: string;
}
export interface SignupResponse {
  IAMUser?: boolean;
  userLoginName?: string;
  accountName?: string;
  directoryType?: string;
}
export interface CreateAccountSubscriptionResponse {
  SignupResponse?: SignupResponse;
  Status?: number;
  RequestId?: string;
}
export declare class PreconditionNotMetException extends __BaseException {
  readonly name: "PreconditionNotMetException";
  readonly $fault: "client";
  Message?: string;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<PreconditionNotMetException, __BaseException>
  );
}
export interface DateTimeParameter {
  Name: string | undefined;
  Values: Date[] | undefined;
}
export interface DecimalParameter {
  Name: string | undefined;
  Values: number[] | undefined;
}
export interface IntegerParameter {
  Name: string | undefined;
  Values: number[] | undefined;
}
export interface StringParameter {
  Name: string | undefined;
  Values: string[] | undefined;
}
export interface _Parameters {
  StringParameters?: StringParameter[];
  IntegerParameters?: IntegerParameter[];
  DecimalParameters?: DecimalParameter[];
  DateTimeParameters?: DateTimeParameter[];
}
export interface ResourcePermission {
  Principal: string | undefined;
  Actions: string[] | undefined;
}
export declare const ValidationStrategyMode: {
  readonly LENIENT: "LENIENT";
  readonly STRICT: "STRICT";
};
export type ValidationStrategyMode =
  (typeof ValidationStrategyMode)[keyof typeof ValidationStrategyMode];
export interface ValidationStrategy {
  Mode: ValidationStrategyMode | undefined;
}
export interface CreateAnalysisRequest {
  AwsAccountId: string | undefined;
  AnalysisId: string | undefined;
  Name: string | undefined;
  Parameters?: _Parameters;
  Permissions?: ResourcePermission[];
  SourceEntity?: AnalysisSourceEntity;
  ThemeArn?: string;
  Tags?: Tag[];
  Definition?: AnalysisDefinition;
  ValidationStrategy?: ValidationStrategy;
  FolderArns?: string[];
}
export interface CreateAnalysisResponse {
  Arn?: string;
  AnalysisId?: string;
  CreationStatus?: ResourceStatus;
  Status?: number;
  RequestId?: string;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  ResourceType?: ExceptionResourceType;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class UnsupportedUserEditionException extends __BaseException {
  readonly name: "UnsupportedUserEditionException";
  readonly $fault: "client";
  Message?: string;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<
      UnsupportedUserEditionException,
      __BaseException
    >
  );
}
export interface CreateColumnsOperation {
  Columns: CalculatedColumn[] | undefined;
}
export interface DataPointDrillUpDownOption {
  AvailabilityStatus?: DashboardBehavior;
}
export interface DataPointMenuLabelOption {
  AvailabilityStatus?: DashboardBehavior;
}
export interface DataPointTooltipOption {
  AvailabilityStatus?: DashboardBehavior;
}
export interface ExportToCSVOption {
  AvailabilityStatus?: DashboardBehavior;
}
export interface ExportWithHiddenFieldsOption {
  AvailabilityStatus?: DashboardBehavior;
}
export declare const DashboardUIState: {
  readonly COLLAPSED: "COLLAPSED";
  readonly EXPANDED: "EXPANDED";
};
export type DashboardUIState =
  (typeof DashboardUIState)[keyof typeof DashboardUIState];
export interface SheetControlsOption {
  VisibilityState?: DashboardUIState;
}
export interface SheetLayoutElementMaximizationOption {
  AvailabilityStatus?: DashboardBehavior;
}
export interface VisualAxisSortOption {
  AvailabilityStatus?: DashboardBehavior;
}
export interface ExportHiddenFieldsOption {
  AvailabilityStatus?: DashboardBehavior;
}
export interface DashboardVisualPublishOptions {
  ExportHiddenFieldsOption?: ExportHiddenFieldsOption;
}
export interface DashboardPublishOptions {
  AdHocFilteringOption?: AdHocFilteringOption;
  ExportToCSVOption?: ExportToCSVOption;
  SheetControlsOption?: SheetControlsOption;
  VisualPublishOptions?: DashboardVisualPublishOptions;
  SheetLayoutElementMaximizationOption?: SheetLayoutElementMaximizationOption;
  VisualMenuOption?: VisualMenuOption;
  VisualAxisSortOption?: VisualAxisSortOption;
  ExportWithHiddenFieldsOption?: ExportWithHiddenFieldsOption;
  DataPointDrillUpDownOption?: DataPointDrillUpDownOption;
  DataPointMenuLabelOption?: DataPointMenuLabelOption;
  DataPointTooltipOption?: DataPointTooltipOption;
}
export interface DashboardVersionDefinition {
  DataSetIdentifierDeclarations: DataSetIdentifierDeclaration[] | undefined;
  Sheets?: SheetDefinition[];
  CalculatedFields?: CalculatedField[];
  ParameterDeclarations?: ParameterDeclaration[];
  FilterGroups?: FilterGroup[];
  ColumnConfigurations?: ColumnConfiguration[];
  AnalysisDefaults?: AnalysisDefaults;
  Options?: AssetOptions;
}
export interface LinkSharingConfiguration {
  Permissions?: ResourcePermission[];
}
export interface DashboardSourceTemplate {
  DataSetReferences: DataSetReference[] | undefined;
  Arn: string | undefined;
}
export interface DashboardSourceEntity {
  SourceTemplate?: DashboardSourceTemplate;
}
export interface CreateDashboardRequest {
  AwsAccountId: string | undefined;
  DashboardId: string | undefined;
  Name: string | undefined;
  Parameters?: _Parameters;
  Permissions?: ResourcePermission[];
  SourceEntity?: DashboardSourceEntity;
  Tags?: Tag[];
  VersionDescription?: string;
  DashboardPublishOptions?: DashboardPublishOptions;
  ThemeArn?: string;
  Definition?: DashboardVersionDefinition;
  ValidationStrategy?: ValidationStrategy;
  FolderArns?: string[];
  LinkSharingConfiguration?: LinkSharingConfiguration;
  LinkEntities?: string[];
}
export interface CreateDashboardResponse {
  Arn?: string;
  VersionArn?: string;
  DashboardId?: string;
  CreationStatus?: ResourceStatus;
  Status?: number;
  RequestId?: string;
}
export interface DateTimeDatasetParameterDefaultValues {
  StaticValues?: Date[];
}
export declare const DatasetParameterValueType: {
  readonly MULTI_VALUED: "MULTI_VALUED";
  readonly SINGLE_VALUED: "SINGLE_VALUED";
};
export type DatasetParameterValueType =
  (typeof DatasetParameterValueType)[keyof typeof DatasetParameterValueType];
export interface DateTimeDatasetParameter {
  Id: string | undefined;
  Name: string | undefined;
  ValueType: DatasetParameterValueType | undefined;
  TimeGranularity?: TimeGranularity;
  DefaultValues?: DateTimeDatasetParameterDefaultValues;
}
export interface DecimalDatasetParameterDefaultValues {
  StaticValues?: number[];
}
export interface DecimalDatasetParameter {
  Id: string | undefined;
  Name: string | undefined;
  ValueType: DatasetParameterValueType | undefined;
  DefaultValues?: DecimalDatasetParameterDefaultValues;
}
export interface IntegerDatasetParameterDefaultValues {
  StaticValues?: number[];
}
export interface IntegerDatasetParameter {
  Id: string | undefined;
  Name: string | undefined;
  ValueType: DatasetParameterValueType | undefined;
  DefaultValues?: IntegerDatasetParameterDefaultValues;
}
export interface StringDatasetParameterDefaultValues {
  StaticValues?: string[];
}
export interface StringDatasetParameter {
  Id: string | undefined;
  Name: string | undefined;
  ValueType: DatasetParameterValueType | undefined;
  DefaultValues?: StringDatasetParameterDefaultValues;
}
export interface DatasetParameter {
  StringDatasetParameter?: StringDatasetParameter;
  DecimalDatasetParameter?: DecimalDatasetParameter;
  IntegerDatasetParameter?: IntegerDatasetParameter;
  DateTimeDatasetParameter?: DateTimeDatasetParameter;
}
export interface DataSetUsageConfiguration {
  DisableUseAsDirectQuerySource?: boolean;
  DisableUseAsImportedSource?: boolean;
}
export interface FieldFolder {
  description?: string;
  columns?: string[];
}
export declare const DataSetImportMode: {
  readonly DIRECT_QUERY: "DIRECT_QUERY";
  readonly SPICE: "SPICE";
};
export type DataSetImportMode =
  (typeof DataSetImportMode)[keyof typeof DataSetImportMode];
export interface FilterOperation {
  ConditionExpression: string | undefined;
}
export interface NewDefaultValues {
  StringStaticValues?: string[];
  DecimalStaticValues?: number[];
  DateTimeStaticValues?: Date[];
  IntegerStaticValues?: number[];
}
export interface OverrideDatasetParameterOperation {
  ParameterName: string | undefined;
  NewParameterName?: string;
  NewDefaultValues?: NewDefaultValues;
}
export interface ProjectOperation {
  ProjectedColumns: string[] | undefined;
}
export interface RenameColumnOperation {
  ColumnName: string | undefined;
  NewColumnName: string | undefined;
}
export interface TagColumnOperation {
  ColumnName: string | undefined;
  Tags: ColumnTag[] | undefined;
}
export interface UntagColumnOperation {
  ColumnName: string | undefined;
  TagNames: ColumnTagName[] | undefined;
}
export type TransformOperation =
  | TransformOperation.CastColumnTypeOperationMember
  | TransformOperation.CreateColumnsOperationMember
  | TransformOperation.FilterOperationMember
  | TransformOperation.OverrideDatasetParameterOperationMember
  | TransformOperation.ProjectOperationMember
  | TransformOperation.RenameColumnOperationMember
  | TransformOperation.TagColumnOperationMember
  | TransformOperation.UntagColumnOperationMember
  | TransformOperation.$UnknownMember;
export declare namespace TransformOperation {
  interface ProjectOperationMember {
    ProjectOperation: ProjectOperation;
    FilterOperation?: never;
    CreateColumnsOperation?: never;
    RenameColumnOperation?: never;
    CastColumnTypeOperation?: never;
    TagColumnOperation?: never;
    UntagColumnOperation?: never;
    OverrideDatasetParameterOperation?: never;
    $unknown?: never;
  }
  interface FilterOperationMember {
    ProjectOperation?: never;
    FilterOperation: FilterOperation;
    CreateColumnsOperation?: never;
    RenameColumnOperation?: never;
    CastColumnTypeOperation?: never;
    TagColumnOperation?: never;
    UntagColumnOperation?: never;
    OverrideDatasetParameterOperation?: never;
    $unknown?: never;
  }
  interface CreateColumnsOperationMember {
    ProjectOperation?: never;
    FilterOperation?: never;
    CreateColumnsOperation: CreateColumnsOperation;
    RenameColumnOperation?: never;
    CastColumnTypeOperation?: never;
    TagColumnOperation?: never;
    UntagColumnOperation?: never;
    OverrideDatasetParameterOperation?: never;
    $unknown?: never;
  }
  interface RenameColumnOperationMember {
    ProjectOperation?: never;
    FilterOperation?: never;
    CreateColumnsOperation?: never;
    RenameColumnOperation: RenameColumnOperation;
    CastColumnTypeOperation?: never;
    TagColumnOperation?: never;
    UntagColumnOperation?: never;
    OverrideDatasetParameterOperation?: never;
    $unknown?: never;
  }
  interface CastColumnTypeOperationMember {
    ProjectOperation?: never;
    FilterOperation?: never;
    CreateColumnsOperation?: never;
    RenameColumnOperation?: never;
    CastColumnTypeOperation: CastColumnTypeOperation;
    TagColumnOperation?: never;
    UntagColumnOperation?: never;
    OverrideDatasetParameterOperation?: never;
    $unknown?: never;
  }
  interface TagColumnOperationMember {
    ProjectOperation?: never;
    FilterOperation?: never;
    CreateColumnsOperation?: never;
    RenameColumnOperation?: never;
    CastColumnTypeOperation?: never;
    TagColumnOperation: TagColumnOperation;
    UntagColumnOperation?: never;
    OverrideDatasetParameterOperation?: never;
    $unknown?: never;
  }
  interface UntagColumnOperationMember {
    ProjectOperation?: never;
    FilterOperation?: never;
    CreateColumnsOperation?: never;
    RenameColumnOperation?: never;
    CastColumnTypeOperation?: never;
    TagColumnOperation?: never;
    UntagColumnOperation: UntagColumnOperation;
    OverrideDatasetParameterOperation?: never;
    $unknown?: never;
  }
  interface OverrideDatasetParameterOperationMember {
    ProjectOperation?: never;
    FilterOperation?: never;
    CreateColumnsOperation?: never;
    RenameColumnOperation?: never;
    CastColumnTypeOperation?: never;
    TagColumnOperation?: never;
    UntagColumnOperation?: never;
    OverrideDatasetParameterOperation: OverrideDatasetParameterOperation;
    $unknown?: never;
  }
  interface $UnknownMember {
    ProjectOperation?: never;
    FilterOperation?: never;
    CreateColumnsOperation?: never;
    RenameColumnOperation?: never;
    CastColumnTypeOperation?: never;
    TagColumnOperation?: never;
    UntagColumnOperation?: never;
    OverrideDatasetParameterOperation?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    ProjectOperation: (value: ProjectOperation) => T;
    FilterOperation: (value: FilterOperation) => T;
    CreateColumnsOperation: (value: CreateColumnsOperation) => T;
    RenameColumnOperation: (value: RenameColumnOperation) => T;
    CastColumnTypeOperation: (value: CastColumnTypeOperation) => T;
    TagColumnOperation: (value: TagColumnOperation) => T;
    UntagColumnOperation: (value: UntagColumnOperation) => T;
    OverrideDatasetParameterOperation: (
      value: OverrideDatasetParameterOperation
    ) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: TransformOperation, visitor: Visitor<T>) => T;
}
export interface JoinKeyProperties {
  UniqueKey?: boolean;
}
export declare const JoinType: {
  readonly INNER: "INNER";
  readonly LEFT: "LEFT";
  readonly OUTER: "OUTER";
  readonly RIGHT: "RIGHT";
};
export type JoinType = (typeof JoinType)[keyof typeof JoinType];
export interface JoinInstruction {
  LeftOperand: string | undefined;
  RightOperand: string | undefined;
  LeftJoinKeyProperties?: JoinKeyProperties;
  RightJoinKeyProperties?: JoinKeyProperties;
  Type: JoinType | undefined;
  OnClause: string | undefined;
}
export interface LogicalTableSource {
  JoinInstruction?: JoinInstruction;
  PhysicalTableId?: string;
  DataSetArn?: string;
}
export interface LogicalTable {
  Alias: string | undefined;
  DataTransforms?: TransformOperation[];
  Source: LogicalTableSource | undefined;
}
export declare const InputColumnDataType: {
  readonly BIT: "BIT";
  readonly BOOLEAN: "BOOLEAN";
  readonly DATETIME: "DATETIME";
  readonly DECIMAL: "DECIMAL";
  readonly INTEGER: "INTEGER";
  readonly JSON: "JSON";
  readonly STRING: "STRING";
};
export type InputColumnDataType =
  (typeof InputColumnDataType)[keyof typeof InputColumnDataType];
export interface InputColumn {
  Name: string | undefined;
  Type: InputColumnDataType | undefined;
  SubType?: ColumnDataSubType;
}
export interface CustomSql {
  DataSourceArn: string | undefined;
  Name: string | undefined;
  SqlQuery: string | undefined;
  Columns?: InputColumn[];
}
export interface RelationalTable {
  DataSourceArn: string | undefined;
  Catalog?: string;
  Schema?: string;
  Name: string | undefined;
  InputColumns: InputColumn[] | undefined;
}
export declare const FileFormat: {
  readonly CLF: "CLF";
  readonly CSV: "CSV";
  readonly ELF: "ELF";
  readonly JSON: "JSON";
  readonly TSV: "TSV";
  readonly XLSX: "XLSX";
};
export type FileFormat = (typeof FileFormat)[keyof typeof FileFormat];
export declare const TextQualifier: {
  readonly DOUBLE_QUOTE: "DOUBLE_QUOTE";
  readonly SINGLE_QUOTE: "SINGLE_QUOTE";
};
export type TextQualifier = (typeof TextQualifier)[keyof typeof TextQualifier];
export interface UploadSettings {
  Format?: FileFormat;
  StartFromRow?: number;
  ContainsHeader?: boolean;
  TextQualifier?: TextQualifier;
  Delimiter?: string;
}
export interface S3Source {
  DataSourceArn: string | undefined;
  UploadSettings?: UploadSettings;
  InputColumns: InputColumn[] | undefined;
}
export type PhysicalTable =
  | PhysicalTable.CustomSqlMember
  | PhysicalTable.RelationalTableMember
  | PhysicalTable.S3SourceMember
  | PhysicalTable.$UnknownMember;
export declare namespace PhysicalTable {
  interface RelationalTableMember {
    RelationalTable: RelationalTable;
    CustomSql?: never;
    S3Source?: never;
    $unknown?: never;
  }
  interface CustomSqlMember {
    RelationalTable?: never;
    CustomSql: CustomSql;
    S3Source?: never;
    $unknown?: never;
  }
  interface S3SourceMember {
    RelationalTable?: never;
    CustomSql?: never;
    S3Source: S3Source;
    $unknown?: never;
  }
  interface $UnknownMember {
    RelationalTable?: never;
    CustomSql?: never;
    S3Source?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    RelationalTable: (value: RelationalTable) => T;
    CustomSql: (value: CustomSql) => T;
    S3Source: (value: S3Source) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: PhysicalTable, visitor: Visitor<T>) => T;
}
export declare const RowLevelPermissionFormatVersion: {
  readonly VERSION_1: "VERSION_1";
  readonly VERSION_2: "VERSION_2";
};
export type RowLevelPermissionFormatVersion =
  (typeof RowLevelPermissionFormatVersion)[keyof typeof RowLevelPermissionFormatVersion];
export declare const RowLevelPermissionPolicy: {
  readonly DENY_ACCESS: "DENY_ACCESS";
  readonly GRANT_ACCESS: "GRANT_ACCESS";
};
export type RowLevelPermissionPolicy =
  (typeof RowLevelPermissionPolicy)[keyof typeof RowLevelPermissionPolicy];
export declare const Status: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type Status = (typeof Status)[keyof typeof Status];
export interface RowLevelPermissionDataSet {
  Namespace?: string;
  Arn: string | undefined;
  PermissionPolicy: RowLevelPermissionPolicy | undefined;
  FormatVersion?: RowLevelPermissionFormatVersion;
  Status?: Status;
}
export interface RowLevelPermissionTagRule {
  TagKey: string | undefined;
  ColumnName: string | undefined;
  TagMultiValueDelimiter?: string;
  MatchAllValue?: string;
}
export interface RowLevelPermissionTagConfiguration {
  Status?: Status;
  TagRules: RowLevelPermissionTagRule[] | undefined;
  TagRuleConfigurations?: string[][];
}
export interface CreateDataSetRequest {
  AwsAccountId: string | undefined;
  DataSetId: string | undefined;
  Name: string | undefined;
  PhysicalTableMap: Record<string, PhysicalTable> | undefined;
  LogicalTableMap?: Record<string, LogicalTable>;
  ImportMode: DataSetImportMode | undefined;
  ColumnGroups?: ColumnGroup[];
  FieldFolders?: Record<string, FieldFolder>;
  Permissions?: ResourcePermission[];
  RowLevelPermissionDataSet?: RowLevelPermissionDataSet;
  RowLevelPermissionTagConfiguration?: RowLevelPermissionTagConfiguration;
  ColumnLevelPermissionRules?: ColumnLevelPermissionRule[];
  Tags?: Tag[];
  DataSetUsageConfiguration?: DataSetUsageConfiguration;
  DatasetParameters?: DatasetParameter[];
  FolderArns?: string[];
}
export interface CreateDataSetResponse {
  Arn?: string;
  DataSetId?: string;
  IngestionArn?: string;
  IngestionId?: string;
  RequestId?: string;
  Status?: number;
}
export interface CredentialPair {
  Username: string | undefined;
  Password: string | undefined;
  AlternateDataSourceParameters?: DataSourceParameters[];
}
export interface DataSourceCredentials {
  CredentialPair?: CredentialPair;
  CopySourceArn?: string;
  SecretArn?: string;
}
export declare const DataSourceType: {
  readonly ADOBE_ANALYTICS: "ADOBE_ANALYTICS";
  readonly AMAZON_ELASTICSEARCH: "AMAZON_ELASTICSEARCH";
  readonly AMAZON_OPENSEARCH: "AMAZON_OPENSEARCH";
  readonly ATHENA: "ATHENA";
  readonly AURORA: "AURORA";
  readonly AURORA_POSTGRESQL: "AURORA_POSTGRESQL";
  readonly AWS_IOT_ANALYTICS: "AWS_IOT_ANALYTICS";
  readonly BIGQUERY: "BIGQUERY";
  readonly DATABRICKS: "DATABRICKS";
  readonly EXASOL: "EXASOL";
  readonly GITHUB: "GITHUB";
  readonly JIRA: "JIRA";
  readonly MARIADB: "MARIADB";
  readonly MYSQL: "MYSQL";
  readonly ORACLE: "ORACLE";
  readonly POSTGRESQL: "POSTGRESQL";
  readonly PRESTO: "PRESTO";
  readonly REDSHIFT: "REDSHIFT";
  readonly S3: "S3";
  readonly SALESFORCE: "SALESFORCE";
  readonly SERVICENOW: "SERVICENOW";
  readonly SNOWFLAKE: "SNOWFLAKE";
  readonly SPARK: "SPARK";
  readonly SQLSERVER: "SQLSERVER";
  readonly STARBURST: "STARBURST";
  readonly TERADATA: "TERADATA";
  readonly TIMESTREAM: "TIMESTREAM";
  readonly TRINO: "TRINO";
  readonly TWITTER: "TWITTER";
};
export type DataSourceType =
  (typeof DataSourceType)[keyof typeof DataSourceType];
export interface CreateDataSourceRequest {
  AwsAccountId: string | undefined;
  DataSourceId: string | undefined;
  Name: string | undefined;
  Type: DataSourceType | undefined;
  DataSourceParameters?: DataSourceParameters;
  Credentials?: DataSourceCredentials;
  Permissions?: ResourcePermission[];
  VpcConnectionProperties?: VpcConnectionProperties;
  SslProperties?: SslProperties;
  Tags?: Tag[];
  FolderArns?: string[];
}
export interface CreateDataSourceResponse {
  Arn?: string;
  DataSourceId?: string;
  CreationStatus?: ResourceStatus;
  RequestId?: string;
  Status?: number;
}
export declare const FolderType: {
  readonly RESTRICTED: "RESTRICTED";
  readonly SHARED: "SHARED";
};
export type FolderType = (typeof FolderType)[keyof typeof FolderType];
export declare const SharingModel: {
  readonly ACCOUNT: "ACCOUNT";
  readonly NAMESPACE: "NAMESPACE";
};
export type SharingModel = (typeof SharingModel)[keyof typeof SharingModel];
export interface CreateFolderRequest {
  AwsAccountId: string | undefined;
  FolderId: string | undefined;
  Name?: string;
  FolderType?: FolderType;
  ParentFolderArn?: string;
  Permissions?: ResourcePermission[];
  Tags?: Tag[];
  SharingModel?: SharingModel;
}
export interface CreateFolderResponse {
  Status?: number;
  Arn?: string;
  FolderId?: string;
  RequestId?: string;
}
export declare const MemberType: {
  readonly ANALYSIS: "ANALYSIS";
  readonly DASHBOARD: "DASHBOARD";
  readonly DATASET: "DATASET";
  readonly DATASOURCE: "DATASOURCE";
  readonly TOPIC: "TOPIC";
};
export type MemberType = (typeof MemberType)[keyof typeof MemberType];
export interface CreateFolderMembershipRequest {
  AwsAccountId: string | undefined;
  FolderId: string | undefined;
  MemberId: string | undefined;
  MemberType: MemberType | undefined;
}
export interface FolderMember {
  MemberId?: string;
  MemberType?: MemberType;
}
export interface CreateFolderMembershipResponse {
  Status?: number;
  FolderMember?: FolderMember;
  RequestId?: string;
}
export interface CreateGroupRequest {
  GroupName: string | undefined;
  Description?: string;
  AwsAccountId: string | undefined;
  Namespace: string | undefined;
}
export interface Group {
  Arn?: string;
  GroupName?: string;
  Description?: string;
  PrincipalId?: string;
}
export interface CreateGroupResponse {
  Group?: Group;
  RequestId?: string;
  Status?: number;
}
export interface CreateGroupMembershipRequest {
  MemberName: string | undefined;
  GroupName: string | undefined;
  AwsAccountId: string | undefined;
  Namespace: string | undefined;
}
export interface GroupMember {
  Arn?: string;
  MemberName?: string;
}
export interface CreateGroupMembershipResponse {
  GroupMember?: GroupMember;
  RequestId?: string;
  Status?: number;
}
export interface CreateIAMPolicyAssignmentRequest {
  AwsAccountId: string | undefined;
  AssignmentName: string | undefined;
  AssignmentStatus: AssignmentStatus | undefined;
  PolicyArn?: string;
  Identities?: Record<string, string[]>;
  Namespace: string | undefined;
}
export interface CreateIAMPolicyAssignmentResponse {
  AssignmentName?: string;
  AssignmentId?: string;
  AssignmentStatus?: AssignmentStatus;
  PolicyArn?: string;
  Identities?: Record<string, string[]>;
  RequestId?: string;
  Status?: number;
}
export declare const IngestionType: {
  readonly FULL_REFRESH: "FULL_REFRESH";
  readonly INCREMENTAL_REFRESH: "INCREMENTAL_REFRESH";
};
export type IngestionType = (typeof IngestionType)[keyof typeof IngestionType];
export interface CreateIngestionRequest {
  DataSetId: string | undefined;
  IngestionId: string | undefined;
  AwsAccountId: string | undefined;
  IngestionType?: IngestionType;
}
export declare const IngestionStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly INITIALIZED: "INITIALIZED";
  readonly QUEUED: "QUEUED";
  readonly RUNNING: "RUNNING";
};
export type IngestionStatus =
  (typeof IngestionStatus)[keyof typeof IngestionStatus];
export interface CreateIngestionResponse {
  Arn?: string;
  IngestionId?: string;
  IngestionStatus?: IngestionStatus;
  RequestId?: string;
  Status?: number;
}
export declare const IdentityStore: {
  readonly QUICKSIGHT: "QUICKSIGHT";
};
export type IdentityStore = (typeof IdentityStore)[keyof typeof IdentityStore];
export interface CreateNamespaceRequest {
  AwsAccountId: string | undefined;
  Namespace: string | undefined;
  IdentityStore: IdentityStore | undefined;
  Tags?: Tag[];
}
export declare const NamespaceStatus: {
  readonly CREATED: "CREATED";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly NON_RETRYABLE_FAILURE: "NON_RETRYABLE_FAILURE";
  readonly RETRYABLE_FAILURE: "RETRYABLE_FAILURE";
};
export type NamespaceStatus =
  (typeof NamespaceStatus)[keyof typeof NamespaceStatus];
export interface CreateNamespaceResponse {
  Arn?: string;
  Name?: string;
  CapacityRegion?: string;
  CreationStatus?: NamespaceStatus;
  IdentityStore?: IdentityStore;
  RequestId?: string;
  Status?: number;
}
export declare const RefreshInterval: {
  readonly DAILY: "DAILY";
  readonly HOURLY: "HOURLY";
  readonly MINUTE15: "MINUTE15";
  readonly MINUTE30: "MINUTE30";
  readonly MONTHLY: "MONTHLY";
  readonly WEEKLY: "WEEKLY";
};
export type RefreshInterval =
  (typeof RefreshInterval)[keyof typeof RefreshInterval];
export declare const DayOfWeek: {
  readonly FRIDAY: "FRIDAY";
  readonly MONDAY: "MONDAY";
  readonly SATURDAY: "SATURDAY";
  readonly SUNDAY: "SUNDAY";
  readonly THURSDAY: "THURSDAY";
  readonly TUESDAY: "TUESDAY";
  readonly WEDNESDAY: "WEDNESDAY";
};
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export interface ScheduleRefreshOnEntity {
  DayOfWeek?: DayOfWeek;
  DayOfMonth?: string;
}
export interface RefreshFrequency {
  Interval: RefreshInterval | undefined;
  RefreshOnDay?: ScheduleRefreshOnEntity;
  Timezone?: string;
  TimeOfTheDay?: string;
}
export interface RefreshSchedule {
  ScheduleId: string | undefined;
  ScheduleFrequency: RefreshFrequency | undefined;
  StartAfterDateTime?: Date;
  RefreshType: IngestionType | undefined;
  Arn?: string;
}
export interface CreateRefreshScheduleRequest {
  DataSetId: string | undefined;
  AwsAccountId: string | undefined;
  Schedule: RefreshSchedule | undefined;
}
export interface CreateRefreshScheduleResponse {
  Status?: number;
  RequestId?: string;
  ScheduleId?: string;
  Arn?: string;
}
export declare const Role: {
  readonly ADMIN: "ADMIN";
  readonly AUTHOR: "AUTHOR";
  readonly READER: "READER";
};
export type Role = (typeof Role)[keyof typeof Role];
export interface CreateRoleMembershipRequest {
  MemberName: string | undefined;
  AwsAccountId: string | undefined;
  Namespace: string | undefined;
  Role: Role | undefined;
}
export interface CreateRoleMembershipResponse {
  RequestId?: string;
  Status?: number;
}
export interface DataSetSchema {
  ColumnSchemaList?: ColumnSchema[];
}
export interface DataSetConfiguration {
  Placeholder?: string;
  DataSetSchema?: DataSetSchema;
  ColumnGroupSchemaList?: ColumnGroupSchema[];
}
export interface TemplateVersionDefinition {
  DataSetConfigurations: DataSetConfiguration[] | undefined;
  Sheets?: SheetDefinition[];
  CalculatedFields?: CalculatedField[];
  ParameterDeclarations?: ParameterDeclaration[];
  FilterGroups?: FilterGroup[];
  ColumnConfigurations?: ColumnConfiguration[];
  AnalysisDefaults?: AnalysisDefaults;
  Options?: AssetOptions;
}
export interface TemplateSourceAnalysis {
  Arn: string | undefined;
  DataSetReferences: DataSetReference[] | undefined;
}
export interface TemplateSourceTemplate {
  Arn: string | undefined;
}
export interface TemplateSourceEntity {
  SourceAnalysis?: TemplateSourceAnalysis;
  SourceTemplate?: TemplateSourceTemplate;
}
export interface CreateTemplateRequest {
  AwsAccountId: string | undefined;
  TemplateId: string | undefined;
  Name?: string;
  Permissions?: ResourcePermission[];
  SourceEntity?: TemplateSourceEntity;
  Tags?: Tag[];
  VersionDescription?: string;
  Definition?: TemplateVersionDefinition;
  ValidationStrategy?: ValidationStrategy;
}
export interface CreateTemplateResponse {
  Arn?: string;
  VersionArn?: string;
  TemplateId?: string;
  CreationStatus?: ResourceStatus;
  Status?: number;
  RequestId?: string;
}
export interface CreateTemplateAliasRequest {
  AwsAccountId: string | undefined;
  TemplateId: string | undefined;
  AliasName: string | undefined;
  TemplateVersionNumber: number | undefined;
}
export interface TemplateAlias {
  AliasName?: string;
  Arn?: string;
  TemplateVersionNumber?: number;
}
export interface CreateTemplateAliasResponse {
  TemplateAlias?: TemplateAlias;
  Status?: number;
  RequestId?: string;
}
export interface DataColorPalette {
  Colors?: string[];
  MinMaxGradient?: string[];
  EmptyFillColor?: string;
}
export interface TileStyle {
  Border?: BorderStyle;
}
export interface GutterStyle {
  Show?: boolean;
}
export interface MarginStyle {
  Show?: boolean;
}
export interface TileLayoutStyle {
  Gutter?: GutterStyle;
  Margin?: MarginStyle;
}
export interface SheetStyle {
  Tile?: TileStyle;
  TileLayout?: TileLayoutStyle;
}
export interface Font {
  FontFamily?: string;
}
export interface Typography {
  FontFamilies?: Font[];
}
export interface UIColorPalette {
  PrimaryForeground?: string;
  PrimaryBackground?: string;
  SecondaryForeground?: string;
  SecondaryBackground?: string;
  Accent?: string;
  AccentForeground?: string;
  Danger?: string;
  DangerForeground?: string;
  Warning?: string;
  WarningForeground?: string;
  Success?: string;
  SuccessForeground?: string;
  Dimension?: string;
  DimensionForeground?: string;
  Measure?: string;
  MeasureForeground?: string;
}
export interface ThemeConfiguration {
  DataColorPalette?: DataColorPalette;
  UIColorPalette?: UIColorPalette;
  Sheet?: SheetStyle;
  Typography?: Typography;
}
export declare const WordCloudChartConfigurationFilterSensitiveLog: (
  obj: WordCloudChartConfiguration
) => any;
export declare const WordCloudVisualFilterSensitiveLog: (
  obj: WordCloudVisual
) => any;
export declare const VisualFilterSensitiveLog: (obj: Visual) => any;
export declare const SheetDefinitionFilterSensitiveLog: (
  obj: SheetDefinition
) => any;
export declare const AnalysisDefinitionFilterSensitiveLog: (
  obj: AnalysisDefinition
) => any;
export declare const SnapshotJobS3ResultFilterSensitiveLog: (
  obj: SnapshotJobS3Result
) => any;
export declare const SnapshotJobResultFileGroupFilterSensitiveLog: (
  obj: SnapshotJobResultFileGroup
) => any;
export declare const AnonymousUserSnapshotJobResultFilterSensitiveLog: (
  obj: AnonymousUserSnapshotJobResult
) => any;
export declare const AssetBundleImportJobDataSourceCredentialPairFilterSensitiveLog: (
  obj: AssetBundleImportJobDataSourceCredentialPair
) => any;
export declare const AssetBundleImportJobDataSourceCredentialsFilterSensitiveLog: (
  obj: AssetBundleImportJobDataSourceCredentials
) => any;
export declare const AssetBundleImportJobDataSourceOverrideParametersFilterSensitiveLog: (
  obj: AssetBundleImportJobDataSourceOverrideParameters
) => any;
export declare const AssetBundleImportJobOverrideParametersFilterSensitiveLog: (
  obj: AssetBundleImportJobOverrideParameters
) => any;
export declare const AssetBundleImportSourceFilterSensitiveLog: (
  obj: AssetBundleImportSource
) => any;
export declare const AssetBundleImportSourceDescriptionFilterSensitiveLog: (
  obj: AssetBundleImportSourceDescription
) => any;
export declare const CalculatedColumnFilterSensitiveLog: (
  obj: CalculatedColumn
) => any;
export declare const DateTimeParameterFilterSensitiveLog: (
  obj: DateTimeParameter
) => any;
export declare const DecimalParameterFilterSensitiveLog: (
  obj: DecimalParameter
) => any;
export declare const IntegerParameterFilterSensitiveLog: (
  obj: IntegerParameter
) => any;
export declare const StringParameterFilterSensitiveLog: (
  obj: StringParameter
) => any;
export declare const _ParametersFilterSensitiveLog: (obj: _Parameters) => any;
export declare const CreateAnalysisRequestFilterSensitiveLog: (
  obj: CreateAnalysisRequest
) => any;
export declare const CreateColumnsOperationFilterSensitiveLog: (
  obj: CreateColumnsOperation
) => any;
export declare const DashboardVersionDefinitionFilterSensitiveLog: (
  obj: DashboardVersionDefinition
) => any;
export declare const CreateDashboardRequestFilterSensitiveLog: (
  obj: CreateDashboardRequest
) => any;
export declare const FilterOperationFilterSensitiveLog: (
  obj: FilterOperation
) => any;
export declare const TransformOperationFilterSensitiveLog: (
  obj: TransformOperation
) => any;
export declare const LogicalTableFilterSensitiveLog: (obj: LogicalTable) => any;
export declare const RowLevelPermissionTagRuleFilterSensitiveLog: (
  obj: RowLevelPermissionTagRule
) => any;
export declare const RowLevelPermissionTagConfigurationFilterSensitiveLog: (
  obj: RowLevelPermissionTagConfiguration
) => any;
export declare const CreateDataSetRequestFilterSensitiveLog: (
  obj: CreateDataSetRequest
) => any;
export declare const DataSourceCredentialsFilterSensitiveLog: (
  obj: DataSourceCredentials
) => any;
export declare const CreateDataSourceRequestFilterSensitiveLog: (
  obj: CreateDataSourceRequest
) => any;
export declare const TemplateVersionDefinitionFilterSensitiveLog: (
  obj: TemplateVersionDefinition
) => any;
export declare const CreateTemplateRequestFilterSensitiveLog: (
  obj: CreateTemplateRequest
) => any;
