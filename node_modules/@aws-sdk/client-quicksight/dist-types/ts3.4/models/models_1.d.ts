import {
  AxisBinding,
  AxisDisplayOptions,
  BarChartFieldWells,
  BarChartOrientation,
  BarChartSortConfiguration,
  BarsArrangement,
  ChartAxisLabelOptions,
  ColumnIdentifier,
  ColumnSort,
  ContributionAnalysisDefault,
  DataLabelOptions,
  DataLabelPosition,
  DataPathType,
  DimensionField,
  FieldSort,
  FieldSortOptions,
  FontConfiguration,
  FormatConfiguration,
  HorizontalTextAlignment,
  ItemsLimitConfiguration,
  LegendOptions,
  MeasureField,
  NumberDisplayFormatConfiguration,
  PercentageDisplayFormatConfiguration,
  ReferenceLine,
  SmallMultiplesOptions,
  SortDirection,
  TimeGranularity,
  TooltipOptions,
  URLTargetConfiguration,
  Visibility,
  VisualCustomAction,
  VisualInteractionOptions,
  WidgetStatus,
} from "./models_0";
export interface DataPathValue {
  FieldId?: string;
  FieldValue?: string;
  DataPathType?: DataPathType;
}
export interface DataPathColor {
  Element: DataPathValue | undefined;
  Color: string | undefined;
  TimeGranularity?: TimeGranularity;
}
export interface VisualPalette {
  ChartColor?: string;
  ColorMap?: DataPathColor[];
}
export interface BarChartConfiguration {
  FieldWells?: BarChartFieldWells;
  SortConfiguration?: BarChartSortConfiguration;
  Orientation?: BarChartOrientation;
  BarsArrangement?: BarsArrangement;
  VisualPalette?: VisualPalette;
  SmallMultiplesOptions?: SmallMultiplesOptions;
  CategoryAxis?: AxisDisplayOptions;
  CategoryLabelOptions?: ChartAxisLabelOptions;
  ValueAxis?: AxisDisplayOptions;
  ValueLabelOptions?: ChartAxisLabelOptions;
  ColorLabelOptions?: ChartAxisLabelOptions;
  Legend?: LegendOptions;
  DataLabels?: DataLabelOptions;
  Tooltip?: TooltipOptions;
  ReferenceLines?: ReferenceLine[];
  ContributionAnalysisDefaults?: ContributionAnalysisDefault[];
  Interactions?: VisualInteractionOptions;
}
export interface CategoryDrillDownFilter {
  Column: ColumnIdentifier | undefined;
  CategoryValues: string[] | undefined;
}
export interface NumericEqualityDrillDownFilter {
  Column: ColumnIdentifier | undefined;
  Value: number | undefined;
}
export interface TimeRangeDrillDownFilter {
  Column: ColumnIdentifier | undefined;
  RangeMinimum: Date | undefined;
  RangeMaximum: Date | undefined;
  TimeGranularity: TimeGranularity | undefined;
}
export interface DrillDownFilter {
  NumericEqualityFilter?: NumericEqualityDrillDownFilter;
  CategoryFilter?: CategoryDrillDownFilter;
  TimeRangeFilter?: TimeRangeDrillDownFilter;
}
export interface DateTimeHierarchy {
  HierarchyId: string | undefined;
  DrillDownFilters?: DrillDownFilter[];
}
export interface ExplicitHierarchy {
  HierarchyId: string | undefined;
  Columns: ColumnIdentifier[] | undefined;
  DrillDownFilters?: DrillDownFilter[];
}
export interface PredefinedHierarchy {
  HierarchyId: string | undefined;
  Columns: ColumnIdentifier[] | undefined;
  DrillDownFilters?: DrillDownFilter[];
}
export interface ColumnHierarchy {
  ExplicitHierarchy?: ExplicitHierarchy;
  DateTimeHierarchy?: DateTimeHierarchy;
  PredefinedHierarchy?: PredefinedHierarchy;
}
export interface LongFormatText {
  PlainText?: string;
  RichText?: string;
}
export interface VisualSubtitleLabelOptions {
  Visibility?: Visibility;
  FormatText?: LongFormatText;
}
export interface ShortFormatText {
  PlainText?: string;
  RichText?: string;
}
export interface VisualTitleLabelOptions {
  Visibility?: Visibility;
  FormatText?: ShortFormatText;
}
export interface BarChartVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: BarChartConfiguration;
  Actions?: VisualCustomAction[];
  ColumnHierarchies?: ColumnHierarchy[];
}
export declare const BoxPlotFillStyle: {
  readonly SOLID: "SOLID";
  readonly TRANSPARENT: "TRANSPARENT";
};
export type BoxPlotFillStyle =
  (typeof BoxPlotFillStyle)[keyof typeof BoxPlotFillStyle];
export interface BoxPlotStyleOptions {
  FillStyle?: BoxPlotFillStyle;
}
export interface BoxPlotOptions {
  StyleOptions?: BoxPlotStyleOptions;
  OutlierVisibility?: Visibility;
  AllDataPointsVisibility?: Visibility;
}
export interface BoxPlotAggregatedFieldWells {
  GroupBy?: DimensionField[];
  Values?: MeasureField[];
}
export interface BoxPlotFieldWells {
  BoxPlotAggregatedFieldWells?: BoxPlotAggregatedFieldWells;
}
export interface PaginationConfiguration {
  PageSize: number | undefined;
  PageNumber: number | undefined;
}
export interface BoxPlotSortConfiguration {
  CategorySort?: FieldSortOptions[];
  PaginationConfiguration?: PaginationConfiguration;
}
export interface BoxPlotChartConfiguration {
  FieldWells?: BoxPlotFieldWells;
  SortConfiguration?: BoxPlotSortConfiguration;
  BoxPlotOptions?: BoxPlotOptions;
  CategoryAxis?: AxisDisplayOptions;
  CategoryLabelOptions?: ChartAxisLabelOptions;
  PrimaryYAxisDisplayOptions?: AxisDisplayOptions;
  PrimaryYAxisLabelOptions?: ChartAxisLabelOptions;
  Legend?: LegendOptions;
  Tooltip?: TooltipOptions;
  ReferenceLines?: ReferenceLine[];
  VisualPalette?: VisualPalette;
  Interactions?: VisualInteractionOptions;
}
export interface BoxPlotVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: BoxPlotChartConfiguration;
  Actions?: VisualCustomAction[];
  ColumnHierarchies?: ColumnHierarchy[];
}
export interface ComboChartAggregatedFieldWells {
  Category?: DimensionField[];
  BarValues?: MeasureField[];
  Colors?: DimensionField[];
  LineValues?: MeasureField[];
}
export interface ComboChartFieldWells {
  ComboChartAggregatedFieldWells?: ComboChartAggregatedFieldWells;
}
export declare const SingleYAxisOption: {
  readonly PRIMARY_Y_AXIS: "PRIMARY_Y_AXIS";
};
export type SingleYAxisOption =
  (typeof SingleYAxisOption)[keyof typeof SingleYAxisOption];
export interface YAxisOptions {
  YAxis: SingleYAxisOption | undefined;
}
export interface SingleAxisOptions {
  YAxisOptions?: YAxisOptions;
}
export interface ComboChartSortConfiguration {
  CategorySort?: FieldSortOptions[];
  CategoryItemsLimit?: ItemsLimitConfiguration;
  ColorSort?: FieldSortOptions[];
  ColorItemsLimit?: ItemsLimitConfiguration;
}
export interface ComboChartConfiguration {
  FieldWells?: ComboChartFieldWells;
  SortConfiguration?: ComboChartSortConfiguration;
  BarsArrangement?: BarsArrangement;
  CategoryAxis?: AxisDisplayOptions;
  CategoryLabelOptions?: ChartAxisLabelOptions;
  PrimaryYAxisDisplayOptions?: AxisDisplayOptions;
  PrimaryYAxisLabelOptions?: ChartAxisLabelOptions;
  SecondaryYAxisDisplayOptions?: AxisDisplayOptions;
  SecondaryYAxisLabelOptions?: ChartAxisLabelOptions;
  SingleAxisOptions?: SingleAxisOptions;
  ColorLabelOptions?: ChartAxisLabelOptions;
  Legend?: LegendOptions;
  BarDataLabels?: DataLabelOptions;
  LineDataLabels?: DataLabelOptions;
  Tooltip?: TooltipOptions;
  ReferenceLines?: ReferenceLine[];
  VisualPalette?: VisualPalette;
  Interactions?: VisualInteractionOptions;
}
export interface ComboChartVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: ComboChartConfiguration;
  Actions?: VisualCustomAction[];
  ColumnHierarchies?: ColumnHierarchy[];
}
export declare const CustomContentType: {
  readonly IMAGE: "IMAGE";
  readonly OTHER_EMBEDDED_CONTENT: "OTHER_EMBEDDED_CONTENT";
};
export type CustomContentType =
  (typeof CustomContentType)[keyof typeof CustomContentType];
export declare const CustomContentImageScalingConfiguration: {
  readonly DO_NOT_SCALE: "DO_NOT_SCALE";
  readonly FIT_TO_HEIGHT: "FIT_TO_HEIGHT";
  readonly FIT_TO_WIDTH: "FIT_TO_WIDTH";
  readonly SCALE_TO_VISUAL: "SCALE_TO_VISUAL";
};
export type CustomContentImageScalingConfiguration =
  (typeof CustomContentImageScalingConfiguration)[keyof typeof CustomContentImageScalingConfiguration];
export interface CustomContentConfiguration {
  ContentUrl?: string;
  ContentType?: CustomContentType;
  ImageScaling?: CustomContentImageScalingConfiguration;
  Interactions?: VisualInteractionOptions;
}
export interface CustomContentVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: CustomContentConfiguration;
  Actions?: VisualCustomAction[];
  DataSetIdentifier: string | undefined;
}
export interface EmptyVisual {
  VisualId: string | undefined;
  DataSetIdentifier: string | undefined;
  Actions?: VisualCustomAction[];
}
export interface FilledMapAggregatedFieldWells {
  Geospatial?: DimensionField[];
  Values?: MeasureField[];
}
export interface FilledMapFieldWells {
  FilledMapAggregatedFieldWells?: FilledMapAggregatedFieldWells;
}
export declare const BaseMapStyleType: {
  readonly DARK_GRAY: "DARK_GRAY";
  readonly IMAGERY: "IMAGERY";
  readonly LIGHT_GRAY: "LIGHT_GRAY";
  readonly STREET: "STREET";
};
export type BaseMapStyleType =
  (typeof BaseMapStyleType)[keyof typeof BaseMapStyleType];
export interface GeospatialMapStyleOptions {
  BaseMapStyle?: BaseMapStyleType;
}
export interface FilledMapSortConfiguration {
  CategorySort?: FieldSortOptions[];
}
export interface GeospatialCoordinateBounds {
  North: number | undefined;
  South: number | undefined;
  West: number | undefined;
  East: number | undefined;
}
export declare const MapZoomMode: {
  readonly AUTO: "AUTO";
  readonly MANUAL: "MANUAL";
};
export type MapZoomMode = (typeof MapZoomMode)[keyof typeof MapZoomMode];
export interface GeospatialWindowOptions {
  Bounds?: GeospatialCoordinateBounds;
  MapZoomMode?: MapZoomMode;
}
export interface FilledMapConfiguration {
  FieldWells?: FilledMapFieldWells;
  SortConfiguration?: FilledMapSortConfiguration;
  Legend?: LegendOptions;
  Tooltip?: TooltipOptions;
  WindowOptions?: GeospatialWindowOptions;
  MapStyleOptions?: GeospatialMapStyleOptions;
  Interactions?: VisualInteractionOptions;
}
export interface GradientStop {
  GradientOffset: number | undefined;
  DataValue?: number;
  Color?: string;
}
export interface GradientColor {
  Stops?: GradientStop[];
}
export interface ConditionalFormattingGradientColor {
  Expression: string | undefined;
  Color: GradientColor | undefined;
}
export interface ConditionalFormattingSolidColor {
  Expression: string | undefined;
  Color?: string;
}
export interface ConditionalFormattingColor {
  Solid?: ConditionalFormattingSolidColor;
  Gradient?: ConditionalFormattingGradientColor;
}
export interface ShapeConditionalFormat {
  BackgroundColor: ConditionalFormattingColor | undefined;
}
export interface FilledMapShapeConditionalFormatting {
  FieldId: string | undefined;
  Format?: ShapeConditionalFormat;
}
export interface FilledMapConditionalFormattingOption {
  Shape: FilledMapShapeConditionalFormatting | undefined;
}
export interface FilledMapConditionalFormatting {
  ConditionalFormattingOptions:
    | FilledMapConditionalFormattingOption[]
    | undefined;
}
export interface FilledMapVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: FilledMapConfiguration;
  ConditionalFormatting?: FilledMapConditionalFormatting;
  ColumnHierarchies?: ColumnHierarchy[];
  Actions?: VisualCustomAction[];
}
export declare const FunnelChartMeasureDataLabelStyle: {
  readonly PERCENTAGE_BY_FIRST_STAGE: "PERCENTAGE_BY_FIRST_STAGE";
  readonly PERCENTAGE_BY_PREVIOUS_STAGE: "PERCENTAGE_BY_PREVIOUS_STAGE";
  readonly VALUE_AND_PERCENTAGE_BY_FIRST_STAGE: "VALUE_AND_PERCENTAGE_BY_FIRST_STAGE";
  readonly VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE: "VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE";
  readonly VALUE_ONLY: "VALUE_ONLY";
};
export type FunnelChartMeasureDataLabelStyle =
  (typeof FunnelChartMeasureDataLabelStyle)[keyof typeof FunnelChartMeasureDataLabelStyle];
export interface FunnelChartDataLabelOptions {
  Visibility?: Visibility;
  CategoryLabelVisibility?: Visibility;
  MeasureLabelVisibility?: Visibility;
  Position?: DataLabelPosition;
  LabelFontConfiguration?: FontConfiguration;
  LabelColor?: string;
  MeasureDataLabelStyle?: FunnelChartMeasureDataLabelStyle;
}
export interface FunnelChartAggregatedFieldWells {
  Category?: DimensionField[];
  Values?: MeasureField[];
}
export interface FunnelChartFieldWells {
  FunnelChartAggregatedFieldWells?: FunnelChartAggregatedFieldWells;
}
export interface FunnelChartSortConfiguration {
  CategorySort?: FieldSortOptions[];
  CategoryItemsLimit?: ItemsLimitConfiguration;
}
export interface FunnelChartConfiguration {
  FieldWells?: FunnelChartFieldWells;
  SortConfiguration?: FunnelChartSortConfiguration;
  CategoryLabelOptions?: ChartAxisLabelOptions;
  ValueLabelOptions?: ChartAxisLabelOptions;
  Tooltip?: TooltipOptions;
  DataLabelOptions?: FunnelChartDataLabelOptions;
  VisualPalette?: VisualPalette;
  Interactions?: VisualInteractionOptions;
}
export interface FunnelChartVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: FunnelChartConfiguration;
  Actions?: VisualCustomAction[];
  ColumnHierarchies?: ColumnHierarchy[];
}
export interface GaugeChartFieldWells {
  Values?: MeasureField[];
  TargetValues?: MeasureField[];
}
export declare const ArcThicknessOptions: {
  readonly LARGE: "LARGE";
  readonly MEDIUM: "MEDIUM";
  readonly SMALL: "SMALL";
};
export type ArcThicknessOptions =
  (typeof ArcThicknessOptions)[keyof typeof ArcThicknessOptions];
export interface ArcConfiguration {
  ArcAngle?: number;
  ArcThickness?: ArcThicknessOptions;
}
export interface ArcAxisDisplayRange {
  Min?: number;
  Max?: number;
}
export interface ArcAxisConfiguration {
  Range?: ArcAxisDisplayRange;
  ReserveRange?: number;
}
export interface ComparisonFormatConfiguration {
  NumberDisplayFormatConfiguration?: NumberDisplayFormatConfiguration;
  PercentageDisplayFormatConfiguration?: PercentageDisplayFormatConfiguration;
}
export declare const ComparisonMethod: {
  readonly DIFFERENCE: "DIFFERENCE";
  readonly PERCENT: "PERCENT";
  readonly PERCENT_DIFFERENCE: "PERCENT_DIFFERENCE";
};
export type ComparisonMethod =
  (typeof ComparisonMethod)[keyof typeof ComparisonMethod];
export interface ComparisonConfiguration {
  ComparisonMethod?: ComparisonMethod;
  ComparisonFormat?: ComparisonFormatConfiguration;
}
export declare const PrimaryValueDisplayType: {
  readonly ACTUAL: "ACTUAL";
  readonly COMPARISON: "COMPARISON";
  readonly HIDDEN: "HIDDEN";
};
export type PrimaryValueDisplayType =
  (typeof PrimaryValueDisplayType)[keyof typeof PrimaryValueDisplayType];
export interface GaugeChartOptions {
  PrimaryValueDisplayType?: PrimaryValueDisplayType;
  Comparison?: ComparisonConfiguration;
  ArcAxis?: ArcAxisConfiguration;
  Arc?: ArcConfiguration;
  PrimaryValueFontConfiguration?: FontConfiguration;
}
export interface GaugeChartConfiguration {
  FieldWells?: GaugeChartFieldWells;
  GaugeChartOptions?: GaugeChartOptions;
  DataLabels?: DataLabelOptions;
  TooltipOptions?: TooltipOptions;
  VisualPalette?: VisualPalette;
  Interactions?: VisualInteractionOptions;
}
export interface GaugeChartArcConditionalFormatting {
  ForegroundColor?: ConditionalFormattingColor;
}
export declare const ConditionalFormattingIconDisplayOption: {
  readonly ICON_ONLY: "ICON_ONLY";
};
export type ConditionalFormattingIconDisplayOption =
  (typeof ConditionalFormattingIconDisplayOption)[keyof typeof ConditionalFormattingIconDisplayOption];
export interface ConditionalFormattingIconDisplayConfiguration {
  IconDisplayOption?: ConditionalFormattingIconDisplayOption;
}
export declare const Icon: {
  readonly ARROW_DOWN: "ARROW_DOWN";
  readonly ARROW_DOWN_LEFT: "ARROW_DOWN_LEFT";
  readonly ARROW_DOWN_RIGHT: "ARROW_DOWN_RIGHT";
  readonly ARROW_LEFT: "ARROW_LEFT";
  readonly ARROW_RIGHT: "ARROW_RIGHT";
  readonly ARROW_UP: "ARROW_UP";
  readonly ARROW_UP_LEFT: "ARROW_UP_LEFT";
  readonly ARROW_UP_RIGHT: "ARROW_UP_RIGHT";
  readonly CARET_DOWN: "CARET_DOWN";
  readonly CARET_UP: "CARET_UP";
  readonly CHECKMARK: "CHECKMARK";
  readonly CIRCLE: "CIRCLE";
  readonly FACE_DOWN: "FACE_DOWN";
  readonly FACE_FLAT: "FACE_FLAT";
  readonly FACE_UP: "FACE_UP";
  readonly FLAG: "FLAG";
  readonly MINUS: "MINUS";
  readonly ONE_BAR: "ONE_BAR";
  readonly PLUS: "PLUS";
  readonly SQUARE: "SQUARE";
  readonly THREE_BAR: "THREE_BAR";
  readonly THUMBS_DOWN: "THUMBS_DOWN";
  readonly THUMBS_UP: "THUMBS_UP";
  readonly TRIANGLE: "TRIANGLE";
  readonly TWO_BAR: "TWO_BAR";
  readonly X: "X";
};
export type Icon = (typeof Icon)[keyof typeof Icon];
export interface ConditionalFormattingCustomIconOptions {
  Icon?: Icon;
  UnicodeIcon?: string;
}
export interface ConditionalFormattingCustomIconCondition {
  Expression: string | undefined;
  IconOptions: ConditionalFormattingCustomIconOptions | undefined;
  Color?: string;
  DisplayConfiguration?: ConditionalFormattingIconDisplayConfiguration;
}
export declare const ConditionalFormattingIconSetType: {
  readonly BARS: "BARS";
  readonly CARET_UP_MINUS_DOWN: "CARET_UP_MINUS_DOWN";
  readonly CHECK_X: "CHECK_X";
  readonly FLAGS: "FLAGS";
  readonly FOUR_COLOR_ARROW: "FOUR_COLOR_ARROW";
  readonly FOUR_GRAY_ARROW: "FOUR_GRAY_ARROW";
  readonly PLUS_MINUS: "PLUS_MINUS";
  readonly THREE_CIRCLE: "THREE_CIRCLE";
  readonly THREE_COLOR_ARROW: "THREE_COLOR_ARROW";
  readonly THREE_GRAY_ARROW: "THREE_GRAY_ARROW";
  readonly THREE_SHAPE: "THREE_SHAPE";
};
export type ConditionalFormattingIconSetType =
  (typeof ConditionalFormattingIconSetType)[keyof typeof ConditionalFormattingIconSetType];
export interface ConditionalFormattingIconSet {
  Expression: string | undefined;
  IconSetType?: ConditionalFormattingIconSetType;
}
export interface ConditionalFormattingIcon {
  IconSet?: ConditionalFormattingIconSet;
  CustomCondition?: ConditionalFormattingCustomIconCondition;
}
export interface GaugeChartPrimaryValueConditionalFormatting {
  TextColor?: ConditionalFormattingColor;
  Icon?: ConditionalFormattingIcon;
}
export interface GaugeChartConditionalFormattingOption {
  PrimaryValue?: GaugeChartPrimaryValueConditionalFormatting;
  Arc?: GaugeChartArcConditionalFormatting;
}
export interface GaugeChartConditionalFormatting {
  ConditionalFormattingOptions?: GaugeChartConditionalFormattingOption[];
}
export interface GaugeChartVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: GaugeChartConfiguration;
  ConditionalFormatting?: GaugeChartConditionalFormatting;
  Actions?: VisualCustomAction[];
}
export interface GeospatialMapAggregatedFieldWells {
  Geospatial?: DimensionField[];
  Values?: MeasureField[];
  Colors?: DimensionField[];
}
export interface GeospatialMapFieldWells {
  GeospatialMapAggregatedFieldWells?: GeospatialMapAggregatedFieldWells;
}
export interface SimpleClusterMarker {
  Color?: string;
}
export interface ClusterMarker {
  SimpleClusterMarker?: SimpleClusterMarker;
}
export interface ClusterMarkerConfiguration {
  ClusterMarker?: ClusterMarker;
}
export interface GeospatialHeatmapDataColor {
  Color: string | undefined;
}
export interface GeospatialHeatmapColorScale {
  Colors?: GeospatialHeatmapDataColor[];
}
export interface GeospatialHeatmapConfiguration {
  HeatmapColor?: GeospatialHeatmapColorScale;
}
export declare const GeospatialSelectedPointStyle: {
  readonly CLUSTER: "CLUSTER";
  readonly HEATMAP: "HEATMAP";
  readonly POINT: "POINT";
};
export type GeospatialSelectedPointStyle =
  (typeof GeospatialSelectedPointStyle)[keyof typeof GeospatialSelectedPointStyle];
export interface GeospatialPointStyleOptions {
  SelectedPointStyle?: GeospatialSelectedPointStyle;
  ClusterMarkerConfiguration?: ClusterMarkerConfiguration;
  HeatmapConfiguration?: GeospatialHeatmapConfiguration;
}
export interface GeospatialMapConfiguration {
  FieldWells?: GeospatialMapFieldWells;
  Legend?: LegendOptions;
  Tooltip?: TooltipOptions;
  WindowOptions?: GeospatialWindowOptions;
  MapStyleOptions?: GeospatialMapStyleOptions;
  PointStyleOptions?: GeospatialPointStyleOptions;
  VisualPalette?: VisualPalette;
  Interactions?: VisualInteractionOptions;
}
export interface GeospatialMapVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: GeospatialMapConfiguration;
  ColumnHierarchies?: ColumnHierarchy[];
  Actions?: VisualCustomAction[];
}
export declare const ColorFillType: {
  readonly DISCRETE: "DISCRETE";
  readonly GRADIENT: "GRADIENT";
};
export type ColorFillType = (typeof ColorFillType)[keyof typeof ColorFillType];
export interface DataColor {
  Color?: string;
  DataValue?: number;
}
export interface ColorScale {
  Colors: DataColor[] | undefined;
  ColorFillType: ColorFillType | undefined;
  NullValueColor?: DataColor;
}
export interface HeatMapAggregatedFieldWells {
  Rows?: DimensionField[];
  Columns?: DimensionField[];
  Values?: MeasureField[];
}
export interface HeatMapFieldWells {
  HeatMapAggregatedFieldWells?: HeatMapAggregatedFieldWells;
}
export interface HeatMapSortConfiguration {
  HeatMapRowSort?: FieldSortOptions[];
  HeatMapColumnSort?: FieldSortOptions[];
  HeatMapRowItemsLimitConfiguration?: ItemsLimitConfiguration;
  HeatMapColumnItemsLimitConfiguration?: ItemsLimitConfiguration;
}
export interface HeatMapConfiguration {
  FieldWells?: HeatMapFieldWells;
  SortConfiguration?: HeatMapSortConfiguration;
  RowLabelOptions?: ChartAxisLabelOptions;
  ColumnLabelOptions?: ChartAxisLabelOptions;
  ColorScale?: ColorScale;
  Legend?: LegendOptions;
  DataLabels?: DataLabelOptions;
  Tooltip?: TooltipOptions;
  Interactions?: VisualInteractionOptions;
}
export interface HeatMapVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: HeatMapConfiguration;
  ColumnHierarchies?: ColumnHierarchy[];
  Actions?: VisualCustomAction[];
}
export interface BinCountOptions {
  Value?: number;
}
export interface BinWidthOptions {
  Value?: number;
  BinCountLimit?: number;
}
export declare const HistogramBinType: {
  readonly BIN_COUNT: "BIN_COUNT";
  readonly BIN_WIDTH: "BIN_WIDTH";
};
export type HistogramBinType =
  (typeof HistogramBinType)[keyof typeof HistogramBinType];
export interface HistogramBinOptions {
  SelectedBinType?: HistogramBinType;
  BinCount?: BinCountOptions;
  BinWidth?: BinWidthOptions;
  StartValue?: number;
}
export interface HistogramAggregatedFieldWells {
  Values?: MeasureField[];
}
export interface HistogramFieldWells {
  HistogramAggregatedFieldWells?: HistogramAggregatedFieldWells;
}
export interface HistogramConfiguration {
  FieldWells?: HistogramFieldWells;
  XAxisDisplayOptions?: AxisDisplayOptions;
  XAxisLabelOptions?: ChartAxisLabelOptions;
  YAxisDisplayOptions?: AxisDisplayOptions;
  BinOptions?: HistogramBinOptions;
  DataLabels?: DataLabelOptions;
  Tooltip?: TooltipOptions;
  VisualPalette?: VisualPalette;
  Interactions?: VisualInteractionOptions;
}
export interface HistogramVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: HistogramConfiguration;
  Actions?: VisualCustomAction[];
}
export declare const ForecastComputationSeasonality: {
  readonly AUTOMATIC: "AUTOMATIC";
  readonly CUSTOM: "CUSTOM";
};
export type ForecastComputationSeasonality =
  (typeof ForecastComputationSeasonality)[keyof typeof ForecastComputationSeasonality];
export interface ForecastComputation {
  ComputationId: string | undefined;
  Name?: string;
  Time?: DimensionField;
  Value?: MeasureField;
  PeriodsForward?: number;
  PeriodsBackward?: number;
  UpperBoundary?: number;
  LowerBoundary?: number;
  PredictionInterval?: number;
  Seasonality?: ForecastComputationSeasonality;
  CustomSeasonalityValue?: number;
}
export interface GrowthRateComputation {
  ComputationId: string | undefined;
  Name?: string;
  Time?: DimensionField;
  Value?: MeasureField;
  PeriodSize?: number;
}
export declare const MaximumMinimumComputationType: {
  readonly MAXIMUM: "MAXIMUM";
  readonly MINIMUM: "MINIMUM";
};
export type MaximumMinimumComputationType =
  (typeof MaximumMinimumComputationType)[keyof typeof MaximumMinimumComputationType];
export interface MaximumMinimumComputation {
  ComputationId: string | undefined;
  Name?: string;
  Time?: DimensionField;
  Value?: MeasureField;
  Type: MaximumMinimumComputationType | undefined;
}
export interface MetricComparisonComputation {
  ComputationId: string | undefined;
  Name?: string;
  Time?: DimensionField;
  FromValue?: MeasureField;
  TargetValue?: MeasureField;
}
export interface PeriodOverPeriodComputation {
  ComputationId: string | undefined;
  Name?: string;
  Time?: DimensionField;
  Value?: MeasureField;
}
export interface PeriodToDateComputation {
  ComputationId: string | undefined;
  Name?: string;
  Time?: DimensionField;
  Value?: MeasureField;
  PeriodTimeGranularity?: TimeGranularity;
}
export declare const TopBottomSortOrder: {
  readonly ABSOLUTE_DIFFERENCE: "ABSOLUTE_DIFFERENCE";
  readonly PERCENT_DIFFERENCE: "PERCENT_DIFFERENCE";
};
export type TopBottomSortOrder =
  (typeof TopBottomSortOrder)[keyof typeof TopBottomSortOrder];
export declare const TopBottomComputationType: {
  readonly BOTTOM: "BOTTOM";
  readonly TOP: "TOP";
};
export type TopBottomComputationType =
  (typeof TopBottomComputationType)[keyof typeof TopBottomComputationType];
export interface TopBottomMoversComputation {
  ComputationId: string | undefined;
  Name?: string;
  Time?: DimensionField;
  Category?: DimensionField;
  Value?: MeasureField;
  MoverSize?: number;
  SortOrder?: TopBottomSortOrder;
  Type: TopBottomComputationType | undefined;
}
export interface TopBottomRankedComputation {
  ComputationId: string | undefined;
  Name?: string;
  Category?: DimensionField;
  Value?: MeasureField;
  ResultSize?: number;
  Type: TopBottomComputationType | undefined;
}
export interface TotalAggregationComputation {
  ComputationId: string | undefined;
  Name?: string;
  Value?: MeasureField;
}
export interface UniqueValuesComputation {
  ComputationId: string | undefined;
  Name?: string;
  Category?: DimensionField;
}
export interface Computation {
  TopBottomRanked?: TopBottomRankedComputation;
  TopBottomMovers?: TopBottomMoversComputation;
  TotalAggregation?: TotalAggregationComputation;
  MaximumMinimum?: MaximumMinimumComputation;
  MetricComparison?: MetricComparisonComputation;
  PeriodOverPeriod?: PeriodOverPeriodComputation;
  PeriodToDate?: PeriodToDateComputation;
  GrowthRate?: GrowthRateComputation;
  UniqueValues?: UniqueValuesComputation;
  Forecast?: ForecastComputation;
}
export interface CustomNarrativeOptions {
  Narrative: string | undefined;
}
export interface InsightConfiguration {
  Computations?: Computation[];
  CustomNarrative?: CustomNarrativeOptions;
  Interactions?: VisualInteractionOptions;
}
export interface InsightVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  InsightConfiguration?: InsightConfiguration;
  Actions?: VisualCustomAction[];
  DataSetIdentifier: string | undefined;
}
export interface KPIFieldWells {
  Values?: MeasureField[];
  TargetValues?: MeasureField[];
  TrendGroups?: DimensionField[];
}
export interface ProgressBarOptions {
  Visibility?: Visibility;
}
export interface SecondaryValueOptions {
  Visibility?: Visibility;
}
export declare const KPISparklineType: {
  readonly AREA: "AREA";
  readonly LINE: "LINE";
};
export type KPISparklineType =
  (typeof KPISparklineType)[keyof typeof KPISparklineType];
export interface KPISparklineOptions {
  Visibility?: Visibility;
  Type: KPISparklineType | undefined;
  Color?: string;
  TooltipVisibility?: Visibility;
}
export interface TrendArrowOptions {
  Visibility?: Visibility;
}
export declare const KPIVisualStandardLayoutType: {
  readonly CLASSIC: "CLASSIC";
  readonly VERTICAL: "VERTICAL";
};
export type KPIVisualStandardLayoutType =
  (typeof KPIVisualStandardLayoutType)[keyof typeof KPIVisualStandardLayoutType];
export interface KPIVisualStandardLayout {
  Type: KPIVisualStandardLayoutType | undefined;
}
export interface KPIVisualLayoutOptions {
  StandardLayout?: KPIVisualStandardLayout;
}
export interface KPIOptions {
  ProgressBar?: ProgressBarOptions;
  TrendArrows?: TrendArrowOptions;
  SecondaryValue?: SecondaryValueOptions;
  Comparison?: ComparisonConfiguration;
  PrimaryValueDisplayType?: PrimaryValueDisplayType;
  PrimaryValueFontConfiguration?: FontConfiguration;
  SecondaryValueFontConfiguration?: FontConfiguration;
  Sparkline?: KPISparklineOptions;
  VisualLayoutOptions?: KPIVisualLayoutOptions;
}
export interface KPISortConfiguration {
  TrendGroupSort?: FieldSortOptions[];
}
export interface KPIConfiguration {
  FieldWells?: KPIFieldWells;
  SortConfiguration?: KPISortConfiguration;
  KPIOptions?: KPIOptions;
  Interactions?: VisualInteractionOptions;
}
export interface KPIActualValueConditionalFormatting {
  TextColor?: ConditionalFormattingColor;
  Icon?: ConditionalFormattingIcon;
}
export interface KPIComparisonValueConditionalFormatting {
  TextColor?: ConditionalFormattingColor;
  Icon?: ConditionalFormattingIcon;
}
export interface KPIPrimaryValueConditionalFormatting {
  TextColor?: ConditionalFormattingColor;
  Icon?: ConditionalFormattingIcon;
}
export interface KPIProgressBarConditionalFormatting {
  ForegroundColor?: ConditionalFormattingColor;
}
export interface KPIConditionalFormattingOption {
  PrimaryValue?: KPIPrimaryValueConditionalFormatting;
  ProgressBar?: KPIProgressBarConditionalFormatting;
  ActualValue?: KPIActualValueConditionalFormatting;
  ComparisonValue?: KPIComparisonValueConditionalFormatting;
}
export interface KPIConditionalFormatting {
  ConditionalFormattingOptions?: KPIConditionalFormattingOption[];
}
export interface KPIVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: KPIConfiguration;
  ConditionalFormatting?: KPIConditionalFormatting;
  Actions?: VisualCustomAction[];
  ColumnHierarchies?: ColumnHierarchy[];
}
export declare const LineInterpolation: {
  readonly LINEAR: "LINEAR";
  readonly SMOOTH: "SMOOTH";
  readonly STEPPED: "STEPPED";
};
export type LineInterpolation =
  (typeof LineInterpolation)[keyof typeof LineInterpolation];
export declare const LineChartLineStyle: {
  readonly DASHED: "DASHED";
  readonly DOTTED: "DOTTED";
  readonly SOLID: "SOLID";
};
export type LineChartLineStyle =
  (typeof LineChartLineStyle)[keyof typeof LineChartLineStyle];
export interface LineChartLineStyleSettings {
  LineVisibility?: Visibility;
  LineInterpolation?: LineInterpolation;
  LineStyle?: LineChartLineStyle;
  LineWidth?: string;
}
export declare const LineChartMarkerShape: {
  readonly CIRCLE: "CIRCLE";
  readonly DIAMOND: "DIAMOND";
  readonly ROUNDED_SQUARE: "ROUNDED_SQUARE";
  readonly SQUARE: "SQUARE";
  readonly TRIANGLE: "TRIANGLE";
};
export type LineChartMarkerShape =
  (typeof LineChartMarkerShape)[keyof typeof LineChartMarkerShape];
export interface LineChartMarkerStyleSettings {
  MarkerVisibility?: Visibility;
  MarkerShape?: LineChartMarkerShape;
  MarkerSize?: string;
  MarkerColor?: string;
}
export interface LineChartDefaultSeriesSettings {
  AxisBinding?: AxisBinding;
  LineStyleSettings?: LineChartLineStyleSettings;
  MarkerStyleSettings?: LineChartMarkerStyleSettings;
}
export interface LineChartAggregatedFieldWells {
  Category?: DimensionField[];
  Values?: MeasureField[];
  Colors?: DimensionField[];
  SmallMultiples?: DimensionField[];
}
export interface LineChartFieldWells {
  LineChartAggregatedFieldWells?: LineChartAggregatedFieldWells;
}
export interface TimeBasedForecastProperties {
  PeriodsForward?: number;
  PeriodsBackward?: number;
  UpperBoundary?: number;
  LowerBoundary?: number;
  PredictionInterval?: number;
  Seasonality?: number;
}
export interface WhatIfPointScenario {
  Date: Date | undefined;
  Value: number | undefined;
}
export interface WhatIfRangeScenario {
  StartDate: Date | undefined;
  EndDate: Date | undefined;
  Value: number | undefined;
}
export interface ForecastScenario {
  WhatIfPointScenario?: WhatIfPointScenario;
  WhatIfRangeScenario?: WhatIfRangeScenario;
}
export interface ForecastConfiguration {
  ForecastProperties?: TimeBasedForecastProperties;
  Scenario?: ForecastScenario;
}
export declare const MissingDataTreatmentOption: {
  readonly INTERPOLATE: "INTERPOLATE";
  readonly SHOW_AS_BLANK: "SHOW_AS_BLANK";
  readonly SHOW_AS_ZERO: "SHOW_AS_ZERO";
};
export type MissingDataTreatmentOption =
  (typeof MissingDataTreatmentOption)[keyof typeof MissingDataTreatmentOption];
export interface MissingDataConfiguration {
  TreatmentOption?: MissingDataTreatmentOption;
}
export interface LineSeriesAxisDisplayOptions {
  AxisOptions?: AxisDisplayOptions;
  MissingDataConfigurations?: MissingDataConfiguration[];
}
export interface LineChartSeriesSettings {
  LineStyleSettings?: LineChartLineStyleSettings;
  MarkerStyleSettings?: LineChartMarkerStyleSettings;
}
export interface DataFieldSeriesItem {
  FieldId: string | undefined;
  FieldValue?: string;
  AxisBinding: AxisBinding | undefined;
  Settings?: LineChartSeriesSettings;
}
export interface FieldSeriesItem {
  FieldId: string | undefined;
  AxisBinding: AxisBinding | undefined;
  Settings?: LineChartSeriesSettings;
}
export interface SeriesItem {
  FieldSeriesItem?: FieldSeriesItem;
  DataFieldSeriesItem?: DataFieldSeriesItem;
}
export interface LineChartSortConfiguration {
  CategorySort?: FieldSortOptions[];
  CategoryItemsLimitConfiguration?: ItemsLimitConfiguration;
  ColorItemsLimitConfiguration?: ItemsLimitConfiguration;
  SmallMultiplesSort?: FieldSortOptions[];
  SmallMultiplesLimitConfiguration?: ItemsLimitConfiguration;
}
export declare const LineChartType: {
  readonly AREA: "AREA";
  readonly LINE: "LINE";
  readonly STACKED_AREA: "STACKED_AREA";
};
export type LineChartType = (typeof LineChartType)[keyof typeof LineChartType];
export interface LineChartConfiguration {
  FieldWells?: LineChartFieldWells;
  SortConfiguration?: LineChartSortConfiguration;
  ForecastConfigurations?: ForecastConfiguration[];
  Type?: LineChartType;
  SmallMultiplesOptions?: SmallMultiplesOptions;
  XAxisDisplayOptions?: AxisDisplayOptions;
  XAxisLabelOptions?: ChartAxisLabelOptions;
  PrimaryYAxisDisplayOptions?: LineSeriesAxisDisplayOptions;
  PrimaryYAxisLabelOptions?: ChartAxisLabelOptions;
  SecondaryYAxisDisplayOptions?: LineSeriesAxisDisplayOptions;
  SecondaryYAxisLabelOptions?: ChartAxisLabelOptions;
  SingleAxisOptions?: SingleAxisOptions;
  DefaultSeriesSettings?: LineChartDefaultSeriesSettings;
  Series?: SeriesItem[];
  Legend?: LegendOptions;
  DataLabels?: DataLabelOptions;
  ReferenceLines?: ReferenceLine[];
  Tooltip?: TooltipOptions;
  ContributionAnalysisDefaults?: ContributionAnalysisDefault[];
  VisualPalette?: VisualPalette;
  Interactions?: VisualInteractionOptions;
}
export interface LineChartVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: LineChartConfiguration;
  Actions?: VisualCustomAction[];
  ColumnHierarchies?: ColumnHierarchy[];
}
export declare const ArcThickness: {
  readonly LARGE: "LARGE";
  readonly MEDIUM: "MEDIUM";
  readonly SMALL: "SMALL";
  readonly WHOLE: "WHOLE";
};
export type ArcThickness = (typeof ArcThickness)[keyof typeof ArcThickness];
export interface ArcOptions {
  ArcThickness?: ArcThickness;
}
export interface DonutCenterOptions {
  LabelVisibility?: Visibility;
}
export interface DonutOptions {
  ArcOptions?: ArcOptions;
  DonutCenterOptions?: DonutCenterOptions;
}
export interface PieChartAggregatedFieldWells {
  Category?: DimensionField[];
  Values?: MeasureField[];
  SmallMultiples?: DimensionField[];
}
export interface PieChartFieldWells {
  PieChartAggregatedFieldWells?: PieChartAggregatedFieldWells;
}
export interface PieChartSortConfiguration {
  CategorySort?: FieldSortOptions[];
  CategoryItemsLimit?: ItemsLimitConfiguration;
  SmallMultiplesSort?: FieldSortOptions[];
  SmallMultiplesLimitConfiguration?: ItemsLimitConfiguration;
}
export interface PieChartConfiguration {
  FieldWells?: PieChartFieldWells;
  SortConfiguration?: PieChartSortConfiguration;
  DonutOptions?: DonutOptions;
  SmallMultiplesOptions?: SmallMultiplesOptions;
  CategoryLabelOptions?: ChartAxisLabelOptions;
  ValueLabelOptions?: ChartAxisLabelOptions;
  Legend?: LegendOptions;
  DataLabels?: DataLabelOptions;
  Tooltip?: TooltipOptions;
  VisualPalette?: VisualPalette;
  ContributionAnalysisDefaults?: ContributionAnalysisDefault[];
  Interactions?: VisualInteractionOptions;
}
export interface PieChartVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: PieChartConfiguration;
  Actions?: VisualCustomAction[];
  ColumnHierarchies?: ColumnHierarchy[];
}
export declare const PivotTableFieldCollapseState: {
  readonly COLLAPSED: "COLLAPSED";
  readonly EXPANDED: "EXPANDED";
};
export type PivotTableFieldCollapseState =
  (typeof PivotTableFieldCollapseState)[keyof typeof PivotTableFieldCollapseState];
export interface PivotTableFieldCollapseStateTarget {
  FieldId?: string;
  FieldDataPathValues?: DataPathValue[];
}
export interface PivotTableFieldCollapseStateOption {
  Target: PivotTableFieldCollapseStateTarget | undefined;
  State?: PivotTableFieldCollapseState;
}
export interface PivotTableDataPathOption {
  DataPathList: DataPathValue[] | undefined;
  Width?: string;
}
export interface PivotTableFieldOption {
  FieldId: string | undefined;
  CustomLabel?: string;
  Visibility?: Visibility;
}
export interface PivotTableFieldOptions {
  SelectedFieldOptions?: PivotTableFieldOption[];
  DataPathOptions?: PivotTableDataPathOption[];
  CollapseStateOptions?: PivotTableFieldCollapseStateOption[];
}
export interface PivotTableAggregatedFieldWells {
  Rows?: DimensionField[];
  Columns?: DimensionField[];
  Values?: MeasureField[];
}
export interface PivotTableFieldWells {
  PivotTableAggregatedFieldWells?: PivotTableAggregatedFieldWells;
}
export interface PivotTablePaginatedReportOptions {
  VerticalOverflowVisibility?: Visibility;
  OverflowColumnHeaderVisibility?: Visibility;
}
export interface DataPathSort {
  Direction: SortDirection | undefined;
  SortPaths: DataPathValue[] | undefined;
}
export interface PivotTableSortBy {
  Field?: FieldSort;
  Column?: ColumnSort;
  DataPath?: DataPathSort;
}
export interface PivotFieldSortOptions {
  FieldId: string | undefined;
  SortBy: PivotTableSortBy | undefined;
}
export interface PivotTableSortConfiguration {
  FieldSortOptions?: PivotFieldSortOptions[];
}
export declare const TableBorderStyle: {
  readonly NONE: "NONE";
  readonly SOLID: "SOLID";
};
export type TableBorderStyle =
  (typeof TableBorderStyle)[keyof typeof TableBorderStyle];
export interface TableBorderOptions {
  Color?: string;
  Thickness?: number;
  Style?: TableBorderStyle;
}
export interface TableSideBorderOptions {
  InnerVertical?: TableBorderOptions;
  InnerHorizontal?: TableBorderOptions;
  Left?: TableBorderOptions;
  Right?: TableBorderOptions;
  Top?: TableBorderOptions;
  Bottom?: TableBorderOptions;
}
export interface GlobalTableBorderOptions {
  UniformBorder?: TableBorderOptions;
  SideSpecificBorder?: TableSideBorderOptions;
}
export declare const TextWrap: {
  readonly NONE: "NONE";
  readonly WRAP: "WRAP";
};
export type TextWrap = (typeof TextWrap)[keyof typeof TextWrap];
export declare const VerticalTextAlignment: {
  readonly AUTO: "AUTO";
  readonly BOTTOM: "BOTTOM";
  readonly MIDDLE: "MIDDLE";
  readonly TOP: "TOP";
};
export type VerticalTextAlignment =
  (typeof VerticalTextAlignment)[keyof typeof VerticalTextAlignment];
export interface TableCellStyle {
  Visibility?: Visibility;
  FontConfiguration?: FontConfiguration;
  TextWrap?: TextWrap;
  HorizontalTextAlignment?: HorizontalTextAlignment;
  VerticalTextAlignment?: VerticalTextAlignment;
  BackgroundColor?: string;
  Height?: number;
  Border?: GlobalTableBorderOptions;
}
export declare const PivotTableMetricPlacement: {
  readonly COLUMN: "COLUMN";
  readonly ROW: "ROW";
};
export type PivotTableMetricPlacement =
  (typeof PivotTableMetricPlacement)[keyof typeof PivotTableMetricPlacement];
export interface RowAlternateColorOptions {
  Status?: WidgetStatus;
  RowAlternateColors?: string[];
  UsePrimaryBackgroundColor?: WidgetStatus;
}
export interface PivotTableRowsLabelOptions {
  Visibility?: Visibility;
  CustomLabel?: string;
}
export declare const PivotTableRowsLayout: {
  readonly HIERARCHY: "HIERARCHY";
  readonly TABULAR: "TABULAR";
};
export type PivotTableRowsLayout =
  (typeof PivotTableRowsLayout)[keyof typeof PivotTableRowsLayout];
export interface PivotTableOptions {
  MetricPlacement?: PivotTableMetricPlacement;
  SingleMetricVisibility?: Visibility;
  ColumnNamesVisibility?: Visibility;
  ToggleButtonsVisibility?: Visibility;
  ColumnHeaderStyle?: TableCellStyle;
  RowHeaderStyle?: TableCellStyle;
  CellStyle?: TableCellStyle;
  RowFieldNamesStyle?: TableCellStyle;
  RowAlternateColorOptions?: RowAlternateColorOptions;
  CollapsedRowDimensionsVisibility?: Visibility;
  RowsLayout?: PivotTableRowsLayout;
  RowsLabelOptions?: PivotTableRowsLabelOptions;
  DefaultCellWidth?: string;
}
export declare const PivotTableSubtotalLevel: {
  readonly ALL: "ALL";
  readonly CUSTOM: "CUSTOM";
  readonly LAST: "LAST";
};
export type PivotTableSubtotalLevel =
  (typeof PivotTableSubtotalLevel)[keyof typeof PivotTableSubtotalLevel];
export interface PivotTableFieldSubtotalOptions {
  FieldId?: string;
}
export declare const StyledCellType: {
  readonly METRIC_HEADER: "METRIC_HEADER";
  readonly TOTAL: "TOTAL";
  readonly VALUE: "VALUE";
};
export type StyledCellType =
  (typeof StyledCellType)[keyof typeof StyledCellType];
export interface TableStyleTarget {
  CellType: StyledCellType | undefined;
}
export interface SubtotalOptions {
  TotalsVisibility?: Visibility;
  CustomLabel?: string;
  FieldLevel?: PivotTableSubtotalLevel;
  FieldLevelOptions?: PivotTableFieldSubtotalOptions[];
  TotalCellStyle?: TableCellStyle;
  ValueCellStyle?: TableCellStyle;
  MetricHeaderCellStyle?: TableCellStyle;
  StyleTargets?: TableStyleTarget[];
}
export declare const TableTotalsPlacement: {
  readonly AUTO: "AUTO";
  readonly END: "END";
  readonly START: "START";
};
export type TableTotalsPlacement =
  (typeof TableTotalsPlacement)[keyof typeof TableTotalsPlacement];
export declare const TableTotalsScrollStatus: {
  readonly PINNED: "PINNED";
  readonly SCROLLED: "SCROLLED";
};
export type TableTotalsScrollStatus =
  (typeof TableTotalsScrollStatus)[keyof typeof TableTotalsScrollStatus];
export declare const SimpleTotalAggregationFunction: {
  readonly AVERAGE: "AVERAGE";
  readonly DEFAULT: "DEFAULT";
  readonly MAX: "MAX";
  readonly MIN: "MIN";
  readonly NONE: "NONE";
  readonly SUM: "SUM";
};
export type SimpleTotalAggregationFunction =
  (typeof SimpleTotalAggregationFunction)[keyof typeof SimpleTotalAggregationFunction];
export interface TotalAggregationFunction {
  SimpleTotalAggregationFunction?: SimpleTotalAggregationFunction;
}
export interface TotalAggregationOption {
  FieldId: string | undefined;
  TotalAggregationFunction: TotalAggregationFunction | undefined;
}
export interface PivotTotalOptions {
  TotalsVisibility?: Visibility;
  Placement?: TableTotalsPlacement;
  ScrollStatus?: TableTotalsScrollStatus;
  CustomLabel?: string;
  TotalCellStyle?: TableCellStyle;
  ValueCellStyle?: TableCellStyle;
  MetricHeaderCellStyle?: TableCellStyle;
  TotalAggregationOptions?: TotalAggregationOption[];
}
export interface PivotTableTotalOptions {
  RowSubtotalOptions?: SubtotalOptions;
  ColumnSubtotalOptions?: SubtotalOptions;
  RowTotalOptions?: PivotTotalOptions;
  ColumnTotalOptions?: PivotTotalOptions;
}
export interface PivotTableConfiguration {
  FieldWells?: PivotTableFieldWells;
  SortConfiguration?: PivotTableSortConfiguration;
  TableOptions?: PivotTableOptions;
  TotalOptions?: PivotTableTotalOptions;
  FieldOptions?: PivotTableFieldOptions;
  PaginatedReportOptions?: PivotTablePaginatedReportOptions;
  Interactions?: VisualInteractionOptions;
}
export declare const PivotTableConditionalFormattingScopeRole: {
  readonly FIELD: "FIELD";
  readonly FIELD_TOTAL: "FIELD_TOTAL";
  readonly GRAND_TOTAL: "GRAND_TOTAL";
};
export type PivotTableConditionalFormattingScopeRole =
  (typeof PivotTableConditionalFormattingScopeRole)[keyof typeof PivotTableConditionalFormattingScopeRole];
export interface PivotTableConditionalFormattingScope {
  Role?: PivotTableConditionalFormattingScopeRole;
}
export interface TextConditionalFormat {
  BackgroundColor?: ConditionalFormattingColor;
  TextColor?: ConditionalFormattingColor;
  Icon?: ConditionalFormattingIcon;
}
export interface PivotTableCellConditionalFormatting {
  FieldId: string | undefined;
  TextFormat?: TextConditionalFormat;
  Scope?: PivotTableConditionalFormattingScope;
  Scopes?: PivotTableConditionalFormattingScope[];
}
export interface PivotTableConditionalFormattingOption {
  Cell?: PivotTableCellConditionalFormatting;
}
export interface PivotTableConditionalFormatting {
  ConditionalFormattingOptions?: PivotTableConditionalFormattingOption[];
}
export interface PivotTableVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: PivotTableConfiguration;
  ConditionalFormatting?: PivotTableConditionalFormatting;
  Actions?: VisualCustomAction[];
}
export declare const RadarChartAxesRangeScale: {
  readonly AUTO: "AUTO";
  readonly INDEPENDENT: "INDEPENDENT";
  readonly SHARED: "SHARED";
};
export type RadarChartAxesRangeScale =
  (typeof RadarChartAxesRangeScale)[keyof typeof RadarChartAxesRangeScale];
export interface RadarChartAreaStyleSettings {
  Visibility?: Visibility;
}
export interface RadarChartSeriesSettings {
  AreaStyleSettings?: RadarChartAreaStyleSettings;
}
export interface RadarChartAggregatedFieldWells {
  Category?: DimensionField[];
  Color?: DimensionField[];
  Values?: MeasureField[];
}
export interface RadarChartFieldWells {
  RadarChartAggregatedFieldWells?: RadarChartAggregatedFieldWells;
}
export declare const RadarChartShape: {
  readonly CIRCLE: "CIRCLE";
  readonly POLYGON: "POLYGON";
};
export type RadarChartShape =
  (typeof RadarChartShape)[keyof typeof RadarChartShape];
export interface RadarChartSortConfiguration {
  CategorySort?: FieldSortOptions[];
  CategoryItemsLimit?: ItemsLimitConfiguration;
  ColorSort?: FieldSortOptions[];
  ColorItemsLimit?: ItemsLimitConfiguration;
}
export interface RadarChartConfiguration {
  FieldWells?: RadarChartFieldWells;
  SortConfiguration?: RadarChartSortConfiguration;
  Shape?: RadarChartShape;
  BaseSeriesSettings?: RadarChartSeriesSettings;
  StartAngle?: number;
  VisualPalette?: VisualPalette;
  AlternateBandColorsVisibility?: Visibility;
  AlternateBandEvenColor?: string;
  AlternateBandOddColor?: string;
  CategoryAxis?: AxisDisplayOptions;
  CategoryLabelOptions?: ChartAxisLabelOptions;
  ColorAxis?: AxisDisplayOptions;
  ColorLabelOptions?: ChartAxisLabelOptions;
  Legend?: LegendOptions;
  AxesRangeScale?: RadarChartAxesRangeScale;
  Interactions?: VisualInteractionOptions;
}
export interface RadarChartVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: RadarChartConfiguration;
  Actions?: VisualCustomAction[];
  ColumnHierarchies?: ColumnHierarchy[];
}
export interface SankeyDiagramAggregatedFieldWells {
  Source?: DimensionField[];
  Destination?: DimensionField[];
  Weight?: MeasureField[];
}
export interface SankeyDiagramFieldWells {
  SankeyDiagramAggregatedFieldWells?: SankeyDiagramAggregatedFieldWells;
}
export interface SankeyDiagramSortConfiguration {
  WeightSort?: FieldSortOptions[];
  SourceItemsLimit?: ItemsLimitConfiguration;
  DestinationItemsLimit?: ItemsLimitConfiguration;
}
export interface SankeyDiagramChartConfiguration {
  FieldWells?: SankeyDiagramFieldWells;
  SortConfiguration?: SankeyDiagramSortConfiguration;
  DataLabels?: DataLabelOptions;
  Interactions?: VisualInteractionOptions;
}
export interface SankeyDiagramVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: SankeyDiagramChartConfiguration;
  Actions?: VisualCustomAction[];
}
export interface ScatterPlotCategoricallyAggregatedFieldWells {
  XAxis?: MeasureField[];
  YAxis?: MeasureField[];
  Category?: DimensionField[];
  Size?: MeasureField[];
  Label?: DimensionField[];
}
export interface ScatterPlotUnaggregatedFieldWells {
  XAxis?: DimensionField[];
  YAxis?: DimensionField[];
  Size?: MeasureField[];
  Category?: DimensionField[];
  Label?: DimensionField[];
}
export interface ScatterPlotFieldWells {
  ScatterPlotCategoricallyAggregatedFieldWells?: ScatterPlotCategoricallyAggregatedFieldWells;
  ScatterPlotUnaggregatedFieldWells?: ScatterPlotUnaggregatedFieldWells;
}
export interface ScatterPlotSortConfiguration {
  ScatterPlotLimitConfiguration?: ItemsLimitConfiguration;
}
export interface ScatterPlotConfiguration {
  FieldWells?: ScatterPlotFieldWells;
  SortConfiguration?: ScatterPlotSortConfiguration;
  XAxisLabelOptions?: ChartAxisLabelOptions;
  XAxisDisplayOptions?: AxisDisplayOptions;
  YAxisLabelOptions?: ChartAxisLabelOptions;
  YAxisDisplayOptions?: AxisDisplayOptions;
  Legend?: LegendOptions;
  DataLabels?: DataLabelOptions;
  Tooltip?: TooltipOptions;
  VisualPalette?: VisualPalette;
  Interactions?: VisualInteractionOptions;
}
export interface ScatterPlotVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: ScatterPlotConfiguration;
  Actions?: VisualCustomAction[];
  ColumnHierarchies?: ColumnHierarchy[];
}
export interface TablePinnedFieldOptions {
  PinnedLeftFields?: string[];
}
export declare const TableCellImageScalingConfiguration: {
  readonly DO_NOT_SCALE: "DO_NOT_SCALE";
  readonly FIT_TO_CELL_HEIGHT: "FIT_TO_CELL_HEIGHT";
  readonly FIT_TO_CELL_WIDTH: "FIT_TO_CELL_WIDTH";
};
export type TableCellImageScalingConfiguration =
  (typeof TableCellImageScalingConfiguration)[keyof typeof TableCellImageScalingConfiguration];
export interface TableCellImageSizingConfiguration {
  TableCellImageScalingConfiguration?: TableCellImageScalingConfiguration;
}
export interface TableFieldImageConfiguration {
  SizingOptions?: TableCellImageSizingConfiguration;
}
export declare const TableFieldIconSetType: {
  readonly LINK: "LINK";
};
export type TableFieldIconSetType =
  (typeof TableFieldIconSetType)[keyof typeof TableFieldIconSetType];
export interface TableFieldCustomIconContent {
  Icon?: TableFieldIconSetType;
}
export interface TableFieldCustomTextContent {
  Value?: string;
  FontConfiguration: FontConfiguration | undefined;
}
export interface TableFieldLinkContentConfiguration {
  CustomTextContent?: TableFieldCustomTextContent;
  CustomIconContent?: TableFieldCustomIconContent;
}
export interface TableFieldLinkConfiguration {
  Target: URLTargetConfiguration | undefined;
  Content: TableFieldLinkContentConfiguration | undefined;
}
export interface TableFieldURLConfiguration {
  LinkConfiguration?: TableFieldLinkConfiguration;
  ImageConfiguration?: TableFieldImageConfiguration;
}
export interface TableFieldOption {
  FieldId: string | undefined;
  Width?: string;
  CustomLabel?: string;
  Visibility?: Visibility;
  URLStyling?: TableFieldURLConfiguration;
}
export interface TableFieldOptions {
  SelectedFieldOptions?: TableFieldOption[];
  Order?: string[];
  PinnedFieldOptions?: TablePinnedFieldOptions;
}
export interface TableAggregatedFieldWells {
  GroupBy?: DimensionField[];
  Values?: MeasureField[];
}
export interface UnaggregatedField {
  FieldId: string | undefined;
  Column: ColumnIdentifier | undefined;
  FormatConfiguration?: FormatConfiguration;
}
export interface TableUnaggregatedFieldWells {
  Values?: UnaggregatedField[];
}
export interface TableFieldWells {
  TableAggregatedFieldWells?: TableAggregatedFieldWells;
  TableUnaggregatedFieldWells?: TableUnaggregatedFieldWells;
}
export interface TablePaginatedReportOptions {
  VerticalOverflowVisibility?: Visibility;
  OverflowColumnHeaderVisibility?: Visibility;
}
export interface TableSortConfiguration {
  RowSort?: FieldSortOptions[];
  PaginationConfiguration?: PaginationConfiguration;
}
export interface DataBarsOptions {
  FieldId: string | undefined;
  PositiveColor?: string;
  NegativeColor?: string;
}
export interface TableInlineVisualization {
  DataBars?: DataBarsOptions;
}
export declare const TableOrientation: {
  readonly HORIZONTAL: "HORIZONTAL";
  readonly VERTICAL: "VERTICAL";
};
export type TableOrientation =
  (typeof TableOrientation)[keyof typeof TableOrientation];
export interface TableOptions {
  Orientation?: TableOrientation;
  HeaderStyle?: TableCellStyle;
  CellStyle?: TableCellStyle;
  RowAlternateColorOptions?: RowAlternateColorOptions;
}
export interface TotalOptions {
  TotalsVisibility?: Visibility;
  Placement?: TableTotalsPlacement;
  ScrollStatus?: TableTotalsScrollStatus;
  CustomLabel?: string;
  TotalCellStyle?: TableCellStyle;
  TotalAggregationOptions?: TotalAggregationOption[];
}
export interface TableConfiguration {
  FieldWells?: TableFieldWells;
  SortConfiguration?: TableSortConfiguration;
  TableOptions?: TableOptions;
  TotalOptions?: TotalOptions;
  FieldOptions?: TableFieldOptions;
  PaginatedReportOptions?: TablePaginatedReportOptions;
  TableInlineVisualizations?: TableInlineVisualization[];
  Interactions?: VisualInteractionOptions;
}
export interface TableCellConditionalFormatting {
  FieldId: string | undefined;
  TextFormat?: TextConditionalFormat;
}
export interface TableRowConditionalFormatting {
  BackgroundColor?: ConditionalFormattingColor;
  TextColor?: ConditionalFormattingColor;
}
export interface TableConditionalFormattingOption {
  Cell?: TableCellConditionalFormatting;
  Row?: TableRowConditionalFormatting;
}
export interface TableConditionalFormatting {
  ConditionalFormattingOptions?: TableConditionalFormattingOption[];
}
export interface TableVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: TableConfiguration;
  ConditionalFormatting?: TableConditionalFormatting;
  Actions?: VisualCustomAction[];
}
export interface TreeMapAggregatedFieldWells {
  Groups?: DimensionField[];
  Sizes?: MeasureField[];
  Colors?: MeasureField[];
}
export interface TreeMapFieldWells {
  TreeMapAggregatedFieldWells?: TreeMapAggregatedFieldWells;
}
export interface TreeMapSortConfiguration {
  TreeMapSort?: FieldSortOptions[];
  TreeMapGroupItemsLimitConfiguration?: ItemsLimitConfiguration;
}
export interface TreeMapConfiguration {
  FieldWells?: TreeMapFieldWells;
  SortConfiguration?: TreeMapSortConfiguration;
  GroupLabelOptions?: ChartAxisLabelOptions;
  SizeLabelOptions?: ChartAxisLabelOptions;
  ColorLabelOptions?: ChartAxisLabelOptions;
  ColorScale?: ColorScale;
  Legend?: LegendOptions;
  DataLabels?: DataLabelOptions;
  Tooltip?: TooltipOptions;
  Interactions?: VisualInteractionOptions;
}
export interface TreeMapVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: TreeMapConfiguration;
  Actions?: VisualCustomAction[];
  ColumnHierarchies?: ColumnHierarchy[];
}
export interface WaterfallChartGroupColorConfiguration {
  PositiveBarColor?: string;
  NegativeBarColor?: string;
  TotalBarColor?: string;
}
export interface WaterfallChartColorConfiguration {
  GroupColorConfiguration?: WaterfallChartGroupColorConfiguration;
}
export interface WaterfallChartAggregatedFieldWells {
  Categories?: DimensionField[];
  Values?: MeasureField[];
  Breakdowns?: DimensionField[];
}
export interface WaterfallChartFieldWells {
  WaterfallChartAggregatedFieldWells?: WaterfallChartAggregatedFieldWells;
}
export interface WaterfallChartSortConfiguration {
  CategorySort?: FieldSortOptions[];
  BreakdownItemsLimit?: ItemsLimitConfiguration;
}
export interface WaterfallChartOptions {
  TotalBarLabel?: string;
}
export interface WaterfallChartConfiguration {
  FieldWells?: WaterfallChartFieldWells;
  SortConfiguration?: WaterfallChartSortConfiguration;
  WaterfallChartOptions?: WaterfallChartOptions;
  CategoryAxisLabelOptions?: ChartAxisLabelOptions;
  CategoryAxisDisplayOptions?: AxisDisplayOptions;
  PrimaryYAxisLabelOptions?: ChartAxisLabelOptions;
  PrimaryYAxisDisplayOptions?: AxisDisplayOptions;
  Legend?: LegendOptions;
  DataLabels?: DataLabelOptions;
  VisualPalette?: VisualPalette;
  ColorConfiguration?: WaterfallChartColorConfiguration;
  Interactions?: VisualInteractionOptions;
}
export interface WaterfallVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions;
  Subtitle?: VisualSubtitleLabelOptions;
  ChartConfiguration?: WaterfallChartConfiguration;
  Actions?: VisualCustomAction[];
  ColumnHierarchies?: ColumnHierarchy[];
}
export interface WordCloudAggregatedFieldWells {
  GroupBy?: DimensionField[];
  Size?: MeasureField[];
}
export interface WordCloudFieldWells {
  WordCloudAggregatedFieldWells?: WordCloudAggregatedFieldWells;
}
export interface WordCloudSortConfiguration {
  CategoryItemsLimit?: ItemsLimitConfiguration;
  CategorySort?: FieldSortOptions[];
}
export declare const WordCloudCloudLayout: {
  readonly FLUID: "FLUID";
  readonly NORMAL: "NORMAL";
};
export type WordCloudCloudLayout =
  (typeof WordCloudCloudLayout)[keyof typeof WordCloudCloudLayout];
export declare const WordCloudWordCasing: {
  readonly EXISTING_CASE: "EXISTING_CASE";
  readonly LOWER_CASE: "LOWER_CASE";
};
export type WordCloudWordCasing =
  (typeof WordCloudWordCasing)[keyof typeof WordCloudWordCasing];
export declare const WordCloudWordOrientation: {
  readonly HORIZONTAL: "HORIZONTAL";
  readonly HORIZONTAL_AND_VERTICAL: "HORIZONTAL_AND_VERTICAL";
};
export type WordCloudWordOrientation =
  (typeof WordCloudWordOrientation)[keyof typeof WordCloudWordOrientation];
export declare const DataPathValueFilterSensitiveLog: (
  obj: DataPathValue
) => any;
export declare const DataPathColorFilterSensitiveLog: (
  obj: DataPathColor
) => any;
export declare const VisualPaletteFilterSensitiveLog: (
  obj: VisualPalette
) => any;
export declare const BarChartConfigurationFilterSensitiveLog: (
  obj: BarChartConfiguration
) => any;
export declare const BarChartVisualFilterSensitiveLog: (
  obj: BarChartVisual
) => any;
export declare const BoxPlotAggregatedFieldWellsFilterSensitiveLog: (
  obj: BoxPlotAggregatedFieldWells
) => any;
export declare const BoxPlotFieldWellsFilterSensitiveLog: (
  obj: BoxPlotFieldWells
) => any;
export declare const BoxPlotChartConfigurationFilterSensitiveLog: (
  obj: BoxPlotChartConfiguration
) => any;
export declare const BoxPlotVisualFilterSensitiveLog: (
  obj: BoxPlotVisual
) => any;
export declare const ComboChartAggregatedFieldWellsFilterSensitiveLog: (
  obj: ComboChartAggregatedFieldWells
) => any;
export declare const ComboChartFieldWellsFilterSensitiveLog: (
  obj: ComboChartFieldWells
) => any;
export declare const ComboChartConfigurationFilterSensitiveLog: (
  obj: ComboChartConfiguration
) => any;
export declare const ComboChartVisualFilterSensitiveLog: (
  obj: ComboChartVisual
) => any;
export declare const CustomContentVisualFilterSensitiveLog: (
  obj: CustomContentVisual
) => any;
export declare const EmptyVisualFilterSensitiveLog: (obj: EmptyVisual) => any;
export declare const FilledMapAggregatedFieldWellsFilterSensitiveLog: (
  obj: FilledMapAggregatedFieldWells
) => any;
export declare const FilledMapFieldWellsFilterSensitiveLog: (
  obj: FilledMapFieldWells
) => any;
export declare const FilledMapConfigurationFilterSensitiveLog: (
  obj: FilledMapConfiguration
) => any;
export declare const ConditionalFormattingGradientColorFilterSensitiveLog: (
  obj: ConditionalFormattingGradientColor
) => any;
export declare const ConditionalFormattingSolidColorFilterSensitiveLog: (
  obj: ConditionalFormattingSolidColor
) => any;
export declare const ConditionalFormattingColorFilterSensitiveLog: (
  obj: ConditionalFormattingColor
) => any;
export declare const ShapeConditionalFormatFilterSensitiveLog: (
  obj: ShapeConditionalFormat
) => any;
export declare const FilledMapShapeConditionalFormattingFilterSensitiveLog: (
  obj: FilledMapShapeConditionalFormatting
) => any;
export declare const FilledMapConditionalFormattingOptionFilterSensitiveLog: (
  obj: FilledMapConditionalFormattingOption
) => any;
export declare const FilledMapConditionalFormattingFilterSensitiveLog: (
  obj: FilledMapConditionalFormatting
) => any;
export declare const FilledMapVisualFilterSensitiveLog: (
  obj: FilledMapVisual
) => any;
export declare const FunnelChartAggregatedFieldWellsFilterSensitiveLog: (
  obj: FunnelChartAggregatedFieldWells
) => any;
export declare const FunnelChartFieldWellsFilterSensitiveLog: (
  obj: FunnelChartFieldWells
) => any;
export declare const FunnelChartConfigurationFilterSensitiveLog: (
  obj: FunnelChartConfiguration
) => any;
export declare const FunnelChartVisualFilterSensitiveLog: (
  obj: FunnelChartVisual
) => any;
export declare const GaugeChartFieldWellsFilterSensitiveLog: (
  obj: GaugeChartFieldWells
) => any;
export declare const ComparisonFormatConfigurationFilterSensitiveLog: (
  obj: ComparisonFormatConfiguration
) => any;
export declare const ComparisonConfigurationFilterSensitiveLog: (
  obj: ComparisonConfiguration
) => any;
export declare const GaugeChartOptionsFilterSensitiveLog: (
  obj: GaugeChartOptions
) => any;
export declare const GaugeChartConfigurationFilterSensitiveLog: (
  obj: GaugeChartConfiguration
) => any;
export declare const GaugeChartArcConditionalFormattingFilterSensitiveLog: (
  obj: GaugeChartArcConditionalFormatting
) => any;
export declare const ConditionalFormattingCustomIconConditionFilterSensitiveLog: (
  obj: ConditionalFormattingCustomIconCondition
) => any;
export declare const ConditionalFormattingIconSetFilterSensitiveLog: (
  obj: ConditionalFormattingIconSet
) => any;
export declare const ConditionalFormattingIconFilterSensitiveLog: (
  obj: ConditionalFormattingIcon
) => any;
export declare const GaugeChartPrimaryValueConditionalFormattingFilterSensitiveLog: (
  obj: GaugeChartPrimaryValueConditionalFormatting
) => any;
export declare const GaugeChartConditionalFormattingOptionFilterSensitiveLog: (
  obj: GaugeChartConditionalFormattingOption
) => any;
export declare const GaugeChartConditionalFormattingFilterSensitiveLog: (
  obj: GaugeChartConditionalFormatting
) => any;
export declare const GaugeChartVisualFilterSensitiveLog: (
  obj: GaugeChartVisual
) => any;
export declare const GeospatialMapAggregatedFieldWellsFilterSensitiveLog: (
  obj: GeospatialMapAggregatedFieldWells
) => any;
export declare const GeospatialMapFieldWellsFilterSensitiveLog: (
  obj: GeospatialMapFieldWells
) => any;
export declare const GeospatialMapConfigurationFilterSensitiveLog: (
  obj: GeospatialMapConfiguration
) => any;
export declare const GeospatialMapVisualFilterSensitiveLog: (
  obj: GeospatialMapVisual
) => any;
export declare const HeatMapAggregatedFieldWellsFilterSensitiveLog: (
  obj: HeatMapAggregatedFieldWells
) => any;
export declare const HeatMapFieldWellsFilterSensitiveLog: (
  obj: HeatMapFieldWells
) => any;
export declare const HeatMapConfigurationFilterSensitiveLog: (
  obj: HeatMapConfiguration
) => any;
export declare const HeatMapVisualFilterSensitiveLog: (
  obj: HeatMapVisual
) => any;
export declare const HistogramAggregatedFieldWellsFilterSensitiveLog: (
  obj: HistogramAggregatedFieldWells
) => any;
export declare const HistogramFieldWellsFilterSensitiveLog: (
  obj: HistogramFieldWells
) => any;
export declare const HistogramConfigurationFilterSensitiveLog: (
  obj: HistogramConfiguration
) => any;
export declare const HistogramVisualFilterSensitiveLog: (
  obj: HistogramVisual
) => any;
export declare const ForecastComputationFilterSensitiveLog: (
  obj: ForecastComputation
) => any;
export declare const GrowthRateComputationFilterSensitiveLog: (
  obj: GrowthRateComputation
) => any;
export declare const MaximumMinimumComputationFilterSensitiveLog: (
  obj: MaximumMinimumComputation
) => any;
export declare const MetricComparisonComputationFilterSensitiveLog: (
  obj: MetricComparisonComputation
) => any;
export declare const PeriodOverPeriodComputationFilterSensitiveLog: (
  obj: PeriodOverPeriodComputation
) => any;
export declare const PeriodToDateComputationFilterSensitiveLog: (
  obj: PeriodToDateComputation
) => any;
export declare const TopBottomMoversComputationFilterSensitiveLog: (
  obj: TopBottomMoversComputation
) => any;
export declare const TopBottomRankedComputationFilterSensitiveLog: (
  obj: TopBottomRankedComputation
) => any;
export declare const TotalAggregationComputationFilterSensitiveLog: (
  obj: TotalAggregationComputation
) => any;
export declare const UniqueValuesComputationFilterSensitiveLog: (
  obj: UniqueValuesComputation
) => any;
export declare const ComputationFilterSensitiveLog: (obj: Computation) => any;
export declare const InsightConfigurationFilterSensitiveLog: (
  obj: InsightConfiguration
) => any;
export declare const InsightVisualFilterSensitiveLog: (
  obj: InsightVisual
) => any;
export declare const KPIFieldWellsFilterSensitiveLog: (
  obj: KPIFieldWells
) => any;
export declare const KPIOptionsFilterSensitiveLog: (obj: KPIOptions) => any;
export declare const KPIConfigurationFilterSensitiveLog: (
  obj: KPIConfiguration
) => any;
export declare const KPIActualValueConditionalFormattingFilterSensitiveLog: (
  obj: KPIActualValueConditionalFormatting
) => any;
export declare const KPIComparisonValueConditionalFormattingFilterSensitiveLog: (
  obj: KPIComparisonValueConditionalFormatting
) => any;
export declare const KPIPrimaryValueConditionalFormattingFilterSensitiveLog: (
  obj: KPIPrimaryValueConditionalFormatting
) => any;
export declare const KPIProgressBarConditionalFormattingFilterSensitiveLog: (
  obj: KPIProgressBarConditionalFormatting
) => any;
export declare const KPIConditionalFormattingOptionFilterSensitiveLog: (
  obj: KPIConditionalFormattingOption
) => any;
export declare const KPIConditionalFormattingFilterSensitiveLog: (
  obj: KPIConditionalFormatting
) => any;
export declare const KPIVisualFilterSensitiveLog: (obj: KPIVisual) => any;
export declare const LineChartAggregatedFieldWellsFilterSensitiveLog: (
  obj: LineChartAggregatedFieldWells
) => any;
export declare const LineChartFieldWellsFilterSensitiveLog: (
  obj: LineChartFieldWells
) => any;
export declare const DataFieldSeriesItemFilterSensitiveLog: (
  obj: DataFieldSeriesItem
) => any;
export declare const SeriesItemFilterSensitiveLog: (obj: SeriesItem) => any;
export declare const LineChartConfigurationFilterSensitiveLog: (
  obj: LineChartConfiguration
) => any;
export declare const LineChartVisualFilterSensitiveLog: (
  obj: LineChartVisual
) => any;
export declare const PieChartAggregatedFieldWellsFilterSensitiveLog: (
  obj: PieChartAggregatedFieldWells
) => any;
export declare const PieChartFieldWellsFilterSensitiveLog: (
  obj: PieChartFieldWells
) => any;
export declare const PieChartConfigurationFilterSensitiveLog: (
  obj: PieChartConfiguration
) => any;
export declare const PieChartVisualFilterSensitiveLog: (
  obj: PieChartVisual
) => any;
export declare const PivotTableFieldCollapseStateTargetFilterSensitiveLog: (
  obj: PivotTableFieldCollapseStateTarget
) => any;
export declare const PivotTableFieldCollapseStateOptionFilterSensitiveLog: (
  obj: PivotTableFieldCollapseStateOption
) => any;
export declare const PivotTableDataPathOptionFilterSensitiveLog: (
  obj: PivotTableDataPathOption
) => any;
export declare const PivotTableFieldOptionsFilterSensitiveLog: (
  obj: PivotTableFieldOptions
) => any;
export declare const PivotTableAggregatedFieldWellsFilterSensitiveLog: (
  obj: PivotTableAggregatedFieldWells
) => any;
export declare const PivotTableFieldWellsFilterSensitiveLog: (
  obj: PivotTableFieldWells
) => any;
export declare const DataPathSortFilterSensitiveLog: (obj: DataPathSort) => any;
export declare const PivotTableSortByFilterSensitiveLog: (
  obj: PivotTableSortBy
) => any;
export declare const PivotFieldSortOptionsFilterSensitiveLog: (
  obj: PivotFieldSortOptions
) => any;
export declare const PivotTableSortConfigurationFilterSensitiveLog: (
  obj: PivotTableSortConfiguration
) => any;
export declare const PivotTableConfigurationFilterSensitiveLog: (
  obj: PivotTableConfiguration
) => any;
export declare const TextConditionalFormatFilterSensitiveLog: (
  obj: TextConditionalFormat
) => any;
export declare const PivotTableCellConditionalFormattingFilterSensitiveLog: (
  obj: PivotTableCellConditionalFormatting
) => any;
export declare const PivotTableConditionalFormattingOptionFilterSensitiveLog: (
  obj: PivotTableConditionalFormattingOption
) => any;
export declare const PivotTableConditionalFormattingFilterSensitiveLog: (
  obj: PivotTableConditionalFormatting
) => any;
export declare const PivotTableVisualFilterSensitiveLog: (
  obj: PivotTableVisual
) => any;
export declare const RadarChartAggregatedFieldWellsFilterSensitiveLog: (
  obj: RadarChartAggregatedFieldWells
) => any;
export declare const RadarChartFieldWellsFilterSensitiveLog: (
  obj: RadarChartFieldWells
) => any;
export declare const RadarChartConfigurationFilterSensitiveLog: (
  obj: RadarChartConfiguration
) => any;
export declare const RadarChartVisualFilterSensitiveLog: (
  obj: RadarChartVisual
) => any;
export declare const SankeyDiagramAggregatedFieldWellsFilterSensitiveLog: (
  obj: SankeyDiagramAggregatedFieldWells
) => any;
export declare const SankeyDiagramFieldWellsFilterSensitiveLog: (
  obj: SankeyDiagramFieldWells
) => any;
export declare const SankeyDiagramChartConfigurationFilterSensitiveLog: (
  obj: SankeyDiagramChartConfiguration
) => any;
export declare const SankeyDiagramVisualFilterSensitiveLog: (
  obj: SankeyDiagramVisual
) => any;
export declare const ScatterPlotCategoricallyAggregatedFieldWellsFilterSensitiveLog: (
  obj: ScatterPlotCategoricallyAggregatedFieldWells
) => any;
export declare const ScatterPlotUnaggregatedFieldWellsFilterSensitiveLog: (
  obj: ScatterPlotUnaggregatedFieldWells
) => any;
export declare const ScatterPlotFieldWellsFilterSensitiveLog: (
  obj: ScatterPlotFieldWells
) => any;
export declare const ScatterPlotConfigurationFilterSensitiveLog: (
  obj: ScatterPlotConfiguration
) => any;
export declare const ScatterPlotVisualFilterSensitiveLog: (
  obj: ScatterPlotVisual
) => any;
export declare const TableAggregatedFieldWellsFilterSensitiveLog: (
  obj: TableAggregatedFieldWells
) => any;
export declare const UnaggregatedFieldFilterSensitiveLog: (
  obj: UnaggregatedField
) => any;
export declare const TableUnaggregatedFieldWellsFilterSensitiveLog: (
  obj: TableUnaggregatedFieldWells
) => any;
export declare const TableFieldWellsFilterSensitiveLog: (
  obj: TableFieldWells
) => any;
export declare const TableConfigurationFilterSensitiveLog: (
  obj: TableConfiguration
) => any;
export declare const TableCellConditionalFormattingFilterSensitiveLog: (
  obj: TableCellConditionalFormatting
) => any;
export declare const TableRowConditionalFormattingFilterSensitiveLog: (
  obj: TableRowConditionalFormatting
) => any;
export declare const TableConditionalFormattingOptionFilterSensitiveLog: (
  obj: TableConditionalFormattingOption
) => any;
export declare const TableConditionalFormattingFilterSensitiveLog: (
  obj: TableConditionalFormatting
) => any;
export declare const TableVisualFilterSensitiveLog: (obj: TableVisual) => any;
export declare const TreeMapAggregatedFieldWellsFilterSensitiveLog: (
  obj: TreeMapAggregatedFieldWells
) => any;
export declare const TreeMapFieldWellsFilterSensitiveLog: (
  obj: TreeMapFieldWells
) => any;
export declare const TreeMapConfigurationFilterSensitiveLog: (
  obj: TreeMapConfiguration
) => any;
export declare const TreeMapVisualFilterSensitiveLog: (
  obj: TreeMapVisual
) => any;
export declare const WaterfallChartAggregatedFieldWellsFilterSensitiveLog: (
  obj: WaterfallChartAggregatedFieldWells
) => any;
export declare const WaterfallChartFieldWellsFilterSensitiveLog: (
  obj: WaterfallChartFieldWells
) => any;
export declare const WaterfallChartConfigurationFilterSensitiveLog: (
  obj: WaterfallChartConfiguration
) => any;
export declare const WaterfallVisualFilterSensitiveLog: (
  obj: WaterfallVisual
) => any;
export declare const WordCloudAggregatedFieldWellsFilterSensitiveLog: (
  obj: WordCloudAggregatedFieldWells
) => any;
export declare const WordCloudFieldWellsFilterSensitiveLog: (
  obj: WordCloudFieldWells
) => any;
