/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import { PoliciesImpl, ManagedRuleSetsImpl, FrontDoorNameAvailabilityImpl, FrontDoorNameAvailabilityWithSubscriptionImpl, FrontDoorsImpl, FrontendEndpointsImpl, EndpointsImpl, RulesEnginesImpl, NetworkExperimentProfilesImpl, PreconfiguredEndpointsImpl, ExperimentsImpl, ReportsImpl, } from "./operations";
export class FrontDoorManagementClient extends coreClient.ServiceClient {
    constructor(credentials, subscriptionIdOrOptions, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        let subscriptionId;
        if (typeof subscriptionIdOrOptions === "string") {
            subscriptionId = subscriptionIdOrOptions;
        }
        else if (typeof subscriptionIdOrOptions === "object") {
            options = subscriptionIdOrOptions;
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials,
        };
        const packageDetails = `azsdk-js-arm-frontdoor/5.3.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix,
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
            });
            this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge,
                },
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.policies = new PoliciesImpl(this);
        this.managedRuleSets = new ManagedRuleSetsImpl(this);
        this.frontDoorNameAvailability = new FrontDoorNameAvailabilityImpl(this);
        this.frontDoorNameAvailabilityWithSubscription =
            new FrontDoorNameAvailabilityWithSubscriptionImpl(this);
        this.frontDoors = new FrontDoorsImpl(this);
        this.frontendEndpoints = new FrontendEndpointsImpl(this);
        this.endpoints = new EndpointsImpl(this);
        this.rulesEngines = new RulesEnginesImpl(this);
        this.networkExperimentProfiles = new NetworkExperimentProfilesImpl(this);
        this.preconfiguredEndpoints = new PreconfiguredEndpointsImpl(this);
        this.experiments = new ExperimentsImpl(this);
        this.reports = new ReportsImpl(this);
    }
}
//# sourceMappingURL=frontDoorManagementClient.js.map