/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { createHttpPoller, } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing AfdProfiles operations. */
export class AfdProfilesImpl {
    /**
     * Initialize a new instance of the class AfdProfiles class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Checks the quota and actual usage of endpoints under the given Azure Front Door profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param options The options parameters.
     */
    listResourceUsage(resourceGroupName, profileName, options) {
        const iter = this.listResourceUsagePagingAll(resourceGroupName, profileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listResourceUsagePagingPage(resourceGroupName, profileName, options, settings);
            },
        };
    }
    listResourceUsagePagingPage(resourceGroupName, profileName, options, settings) {
        return __asyncGenerator(this, arguments, function* listResourceUsagePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listResourceUsage(resourceGroupName, profileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listResourceUsageNext(resourceGroupName, profileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listResourceUsagePagingAll(resourceGroupName, profileName, options) {
        return __asyncGenerator(this, arguments, function* listResourceUsagePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listResourceUsagePagingPage(resourceGroupName, profileName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Check the availability of an afdx endpoint name, and return the globally unique endpoint host name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium which is unique
     *                    within the resource group.
     * @param checkEndpointNameAvailabilityInput Input to check.
     * @param options The options parameters.
     */
    checkEndpointNameAvailability(resourceGroupName, profileName, checkEndpointNameAvailabilityInput, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            profileName,
            checkEndpointNameAvailabilityInput,
            options,
        }, checkEndpointNameAvailabilityOperationSpec);
    }
    /**
     * Checks the quota and actual usage of endpoints under the given Azure Front Door profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param options The options parameters.
     */
    _listResourceUsage(resourceGroupName, profileName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, options }, listResourceUsageOperationSpec);
    }
    /**
     * Validates the custom domain mapping to ensure it maps to the correct Azure Front Door endpoint in
     * DNS.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param checkHostNameAvailabilityInput Custom domain to be validated.
     * @param options The options parameters.
     */
    checkHostNameAvailability(resourceGroupName, profileName, checkHostNameAvailabilityInput, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            profileName,
            checkHostNameAvailabilityInput,
            options,
        }, checkHostNameAvailabilityOperationSpec);
    }
    /**
     * Validate a Secret in the profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium which is unique
     *                    within the resource group.
     * @param validateSecretInput The Secret source.
     * @param options The options parameters.
     */
    validateSecret(resourceGroupName, profileName, validateSecretInput, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, validateSecretInput, options }, validateSecretOperationSpec);
    }
    /**
     * Upgrade a profile from Standard_AzureFrontDoor to Premium_AzureFrontDoor.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium which is unique
     *                    within the resource group.
     * @param profileUpgradeParameters Profile upgrade input parameter.
     * @param options The options parameters.
     */
    beginUpgrade(resourceGroupName, profileName, profileUpgradeParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    profileName,
                    profileUpgradeParameters,
                    options,
                },
                spec: upgradeOperationSpec,
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location",
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Upgrade a profile from Standard_AzureFrontDoor to Premium_AzureFrontDoor.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium which is unique
     *                    within the resource group.
     * @param profileUpgradeParameters Profile upgrade input parameter.
     * @param options The options parameters.
     */
    beginUpgradeAndWait(resourceGroupName, profileName, profileUpgradeParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpgrade(resourceGroupName, profileName, profileUpgradeParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListResourceUsageNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param nextLink The nextLink from the previous successful call to the ListResourceUsage method.
     * @param options The options parameters.
     */
    _listResourceUsageNext(resourceGroupName, profileName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, nextLink, options }, listResourceUsageNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const checkEndpointNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/checkEndpointNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckEndpointNameAvailabilityOutput,
        },
        default: {
            bodyMapper: Mappers.AfdErrorResponse,
        },
    },
    requestBody: Parameters.checkEndpointNameAvailabilityInput,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.profileName,
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const listResourceUsageOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/usages",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.UsagesListResult,
        },
        default: {
            bodyMapper: Mappers.AfdErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.profileName1,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const checkHostNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/checkHostNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckNameAvailabilityOutput,
        },
        default: {
            bodyMapper: Mappers.AfdErrorResponse,
        },
    },
    requestBody: Parameters.checkHostNameAvailabilityInput,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.profileName1,
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const validateSecretOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/validateSecret",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ValidateSecretOutput,
        },
        default: {
            bodyMapper: Mappers.AfdErrorResponse,
        },
    },
    requestBody: Parameters.validateSecretInput,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.profileName,
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const upgradeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/upgrade",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.Profile,
        },
        201: {
            bodyMapper: Mappers.Profile,
        },
        202: {
            bodyMapper: Mappers.Profile,
        },
        204: {
            bodyMapper: Mappers.Profile,
        },
        default: {
            bodyMapper: Mappers.AfdErrorResponse,
        },
    },
    requestBody: Parameters.profileUpgradeParameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.profileName,
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const listResourceUsageNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UsagesListResult,
        },
        default: {
            bodyMapper: Mappers.AfdErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.profileName1,
        Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=afdProfiles.js.map