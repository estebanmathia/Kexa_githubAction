/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { CdnManagementClient } from "../src/cdnManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe.skip("CDN test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let profileName;
    let endpointName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new CdnManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            profileName = "myprofilexxx";
            endpointName = "myendpointxxx";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("profiles create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.profiles.beginCreateAndWait(resourceGroup, profileName, {
                location: location,
                sku: {
                    name: "Standard_Verizon"
                }
            }, testPollingOptions);
            assert.equal(res.name, profileName);
        });
    });
    it("endpoints create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.endpoints.beginCreateAndWait(resourceGroup, profileName, endpointName, {
                originHostHeader: "www.bing.com",
                originPath: "/image",
                contentTypesToCompress: [
                    "text/html",
                    "application/octet-stream"
                ],
                isCompressionEnabled: true,
                isHttpAllowed: true,
                isHttpsAllowed: true,
                queryStringCachingBehavior: "BypassCaching",
                origins: [
                    {
                        name: "origin1",
                        hostName: "host1.hello.com"
                    }
                ],
                location: "westus",
                tags: {
                    key1: "value1"
                }
            }, testPollingOptions);
            assert.equal(res.name, endpointName);
        });
    });
    it("profiles get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.profiles.get(resourceGroup, profileName);
            assert.equal(res.name, profileName);
        });
    });
    it("endpoints get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.endpoints.get(resourceGroup, profileName, endpointName);
            assert.equal(res.name, endpointName);
        });
    });
    it("profiles list test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, e_1, _b, _c;
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.profiles.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("profiles listResourceUsage test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, e_2, _b, _c;
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.profiles.listResourceUsage(resourceGroup, profileName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("profiles update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.profiles.beginUpdateAndWait(resourceGroup, profileName, { tags: { additional_properties: "Tag1" } }, testPollingOptions);
        });
    });
    it("endpoints list test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, e_3, _b, _c;
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.endpoints.listByProfile(resourceGroup, profileName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("endpoints update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.endpoints.beginUpdateAndWait(resourceGroup, profileName, endpointName, { tags: { additional_properties: "Tag1" } }, testPollingOptions);
            assert.equal(res.type, "Microsoft.Cdn/profiles/endpoints");
        });
    });
    it("customDomains enable test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            // 1. we need to add a custom name https://learn.microsoft.com/en-us/azure/cdn/cdn-map-content-to-custom-domain?tabs=azure-dns%2Cazure-portal%2Cazure-portal-cleanup
            // 2. then enable the https https://learn.microsoft.com/en-us/azure/cdn/cdn-custom-ssl?tabs=option-1-default-enable-https-with-a-cdn-managed-certificate
            const defaultSetting = { "certificateSource": "Cdn", "protocolType": "IPBased", "certificateSourceParameters": { "typeName": "CdnCertificateSourceParameters", "certificateType": "Shared" } };
            try {
                yield client.customDomains.beginEnableCustomHttpsAndWait(resourceGroup, profileName, endpointName, "www-qiaozha-xyz", testPollingOptions);
            }
            catch (error) {
                // ensure we set the default value into the request body
                assert.deepEqual(JSON.parse(error.request.body), defaultSetting);
            }
        });
    });
    it("endpoints delete test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, e_4, _b, _c;
            const res = yield client.endpoints.beginDeleteAndWait(resourceGroup, profileName, endpointName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.endpoints.listByProfile(resourceGroup, profileName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_4) throw e_4.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("profiles delete test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, e_5, _b, _c;
            const res = yield client.profiles.beginDeleteAndWait(resourceGroup, profileName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.profiles.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_5) throw e_5.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=cdn_examples.spec.js.map